scope page {

Text b0 = { {
 { "XXX" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/XXX.h" , & fmt_text_Files_b }
 ,{ "CCore/src/XXX.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Page page = { "page" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
} , NoColor , NoColor , null , null , null };

}

scope page_Abort {

Text b0 = { {
 { "Abort" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Abort.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AbortMsgFunc.cpp" , & fmt_text_Files_b }
 ,{ "HCore/src/Abort.cpp" , & fmt_text_Files_b }
 ,{ "XCore/src/Abort.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "abort" }
 ,{ "a" }
 ,{ "program" }
 ,{ "execution" }
 ,{ "with" }
 ,{ "a" }
 ,{ "diagnostic" }
 ,{ "message:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "First" }
 ,{ "of" }
 ,{ "them" }
 ,{ "accepts" }
 ,{ "a" }
 ,{ "message" }
 ,{ "text" }
 ,{ "as" }
 ,{ "a" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "argument," }
 ,{ "second" }
 ,{ "â€”" }
 ,{ "as" }
 ,{ "a" }
 ,{ "zero-terminated" }
 ,{ "character" }
 ,{ "string." }
 ,{ "The" }
 ,{ "exact" }
 ,{ "method" }
 ,{ "of" }
 ,{ "the" }
 ,{ "sending" }
 ,{ "a" }
 ,{ "diagnostic" }
 ,{ "message" }
 ,{ "is" }
 ,{ "target-dependent" }
 ,{ "and" }
 ,{ "implemented" }
 ,{ "differently" }
 ,{ "for" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "is" }
 ,{ "also" }
 ,{ "the" }
 ,{ "global" }
 ,{ "constant" }
 ,{ "function" }
 ,{ "pointer," }
 ,{ "which" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "alter" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "behavior." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "may" }
 ,{ "link" }
 ,{ "an" }
 ,{ "object" }
 ,{ "file" }
 ,{ "in" }
 ,{ "your" }
 ,{ "project" }
 ,{ "with" }
 ,{ "this" }
 ,{ "constant" }
 ,{ "defined" }
 ,{ "to" }
 ,{ "introduce" }
 ,{ "a" }
 ,{ "hook" }
 ,{ "in" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "." }
 ,{ "Be" }
 ,{ "reasonable" }
 ,{ "with" }
 ,{ "hook" }
 ,{ "actions:" }
 ,{ "on" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context," }
 ,{ "so" }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "do" }
 ,{ "any" }
 ,{ "\"heavy\"" }
 ,{ "job" }
 ,{ "inside." }
 ,{ "The" }
 ,{ "same" }
 ,{ "is" }
 ,{ "true" }
 ,{ "on" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "targets:" }
 ,{ "use" }
 ,{ "it" }
 ,{ "just" }
 ,{ "to" }
 ,{ "show" }
 ,{ "or" }
 ,{ "log" }
 ,{ "a" }
 ,{ "message" }
 ,{ "(using" }
 ,{ "MessageBox()" , & fmt_text_b }
 ,{ "," }
 ,{ "for" }
 ,{ "example)." }
} , & fmt_text , & align_text } ;

Page page = { "page_Abort" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AES {

Text b0 = { {
 { "AES" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/AES.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/AES.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/PlatformAES.h" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Software" }
 ,{ "AES" }
 ,{ "implementation" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "There" }
 ,{ "are" }
 ,{ "six" }
 ,{ "AES-related" }
 ,{ "types." }
 ,{ "All" }
 ,{ "of" }
 ,{ "them" }
 ,{ "are" }
 ,{ "BlockCipher<....>" , & fmt_text_a }
 ,{ "and" }
 ,{ "implement" }
 ,{ "AES" }
 ,{ "cipher" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "AES128" , & fmt_text_b }
 ,{ "implements" }
 ,{ "direct" }
 ,{ "AES-128" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "AES192" , & fmt_text_b }
 ,{ "implements" }
 ,{ "direct" }
 ,{ "AES-192" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "AES256" , & fmt_text_b }
 ,{ "implements" }
 ,{ "direct" }
 ,{ "AES-256" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "AESInverse128" , & fmt_text_b }
 ,{ "implements" }
 ,{ "inverse" }
 ,{ "AES-128" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "AESInverse192" , & fmt_text_b }
 ,{ "implements" }
 ,{ "inverse" }
 ,{ "AES-192" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "AESInverse256" , & fmt_text_b }
 ,{ "implements" }
 ,{ "inverse" }
 ,{ "AES-256" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Link link_PlatformAES = { & page , { 11 } } ;

Text b11 = { {
 { "Platform" }
 ,{ "AES" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "The" }
 ,{ "file" }
 ,{ "PlatformAES.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "stub" }
 ,{ "definitions" }
 ,{ "for" }
 ,{ "AES" }
 ,{ "cipher" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "A" }
 ,{ "target" }
 ,{ "may" }
 ,{ "override" }
 ,{ "this" }
 ,{ "header" }
 ,{ "file" }
 ,{ "and" }
 ,{ "provide" }
 ,{ "its" }
 ,{ "own" }
 ,{ "definitions" }
 ,{ "with" }
 ,{ "efficient" }
 ,{ "platform-dependent" }
 ,{ "AES" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Page page = { "page_AES" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Algon {

Text b0 = { {
 { "Algon" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Subfolders" }
 ,{ "CCore/inc/algon" , & fmt_text_Files_b }
 ,{ "CCore/src/algon" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Algon" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "namespace," }
 ,{ "it" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "algorithms." }
 ,{ "Code" }
 ,{ "is" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "subfolder" }
 ,{ "/algon" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Algon" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AntiSem {

Text b0 = { {
 { "AntiSem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AntiSem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AntiSem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"gateway\"" }
 ,{ "synchronization" }
 ,{ "class." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "may" }
 ,{ "allow" }
 ,{ "or" }
 ,{ "block" }
 ,{ "a" }
 ,{ "thread" }
 ,{ "execution," }
 ,{ "if" }
 ,{ "some" }
 ,{ "condition" }
 ,{ "is" }
 ,{ "met." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "with" }
 ,{ "a" }
 ,{ "\"consuming\"" }
 ,{ "synchronization" }
 ,{ "class" }
 ,{ "is" }
 ,{ "the" }
 ,{ "blocking" }
 ,{ "calls" }
 ,{ "does" }
 ,{ "not" }
 ,{ "change" }
 ,{ "the" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "AntiSem" , & fmt_text_b }
 ,{ "has" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "counter." }
 ,{ "You" }
 ,{ "may" }
 ,{ "increase" }
 ,{ "or" }
 ,{ "decrease" }
 ,{ "this" }
 ,{ "counter." }
 ,{ "If" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "below" }
 ,{ "the" }
 ,{ "given" }
 ,{ "level," }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "opened," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "closed." }
 ,{ "When" }
 ,{ "it" }
 ,{ "is" }
 ,{ "closed," }
 ,{ "the" }
 ,{ "method" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "blocks" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "while" }
 ,{ "the" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "closed." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "level" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "sensitive" }
 ,{ "level" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "if" }
 ,{ "counter" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "level" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "has" }
 ,{ "zero" }
 ,{ "value" }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "add()" , & fmt_text_b }
 ,{ "increases" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value." }
 ,{ "If" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "happens," }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "sub()" , & fmt_text_b }
 ,{ "decreases" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value." }
 ,{ "If" }
 ,{ "the" }
 ,{ "underflow" }
 ,{ "happens," }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "If" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "value" }
 ,{ "becomes" }
 ,{ "<=" , & fmt_text_b }
 ,{ "level" , & fmt_text_b }
 ,{ "," }
 ,{ "all" }
 ,{ "blocked" }
 ,{ "on" }
 ,{ "the" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "threads" }
 ,{ "are" }
 ,{ "released." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "inc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "increment," }
 ,{ "this" }
 ,{ "method" }
 ,{ "is" }
 ,{ "equivalent" }
 ,{ "add(1)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "dec()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "decrement," }
 ,{ "this" }
 ,{ "method" }
 ,{ "is" }
 ,{ "equivalent" }
 ,{ "dec(1)" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "a" }
 ,{ "releasing" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "try_wait()" , & fmt_text_b }
 ,{ "checks," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "opened." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "wait()" , & fmt_text_b }
 ,{ "blocks" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "indefinitely" }
 ,{ "until" }
 ,{ "the" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "opened." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "wait(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "wait(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "most" }
 ,{ "common" }
 ,{ "usage" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "reference" }
 ,{ "counter" }
 ,{ "with" }
 ,{ "waiting." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "HCore" }
 ,{ "AntiSem" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "HCore" , & fmt_text_b }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "common" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "XCore" }
 ,{ "AntiSem" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "XCore" , & fmt_text_b }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "has" }
 ,{ "add()" , & fmt_text_b }
 ,{ "," }
 ,{ "sub()" , & fmt_text_b }
 ,{ "," }
 ,{ "inc()" , & fmt_text_b }
 ,{ "," }
 ,{ "dec()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "variants" }
 ,{ "for" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts." }
} , & fmt_text , & align_text } ;

Page page = { "page_AntiSem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AnyCore_PlatformBase {

Text b0 = { {
 { "AnyCore" }
 ,{ "PlatformBase" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/base/PlatformBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/base/PlatformBase.cpp" , & fmt_text_Files_b }
 ,{ "CCore/src/base/PlatformBase.s" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "defines" }
 ,{ "some" }
 ,{ "basic" }
 ,{ "types," }
 ,{ "constants" }
 ,{ "and" }
 ,{ "other" }
 ,{ "entities," }
 ,{ "related" }
 ,{ "with" }
 ,{ "the" }
 ,{ "target" }
 ,{ "hardware" }
 ,{ "and" }
 ,{ "software" }
 ,{ "platform." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Defines" }
 ,{ "and" }
 ,{ "includes" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "Macro" }
 ,{ "CCORE_TARGET" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "target" }
 ,{ "label," }
 ,{ "like" }
 ,{ "WIN32" , & fmt_text_b }
 ,{ "," }
 ,{ "WIN64" , & fmt_text_b }
 ,{ "etc..." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Macros" }
 ,{ "CCORE_INITPRI_0" , & fmt_text_b }
 ,{ "," }
 ,{ "CCORE_INITPRI_1" , & fmt_text_b }
 ,{ "," }
 ,{ "CCORE_INITPRI_2" , & fmt_text_b }
 ,{ "and" }
 ,{ "CCORE_INITPRI_3" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "initialization" }
 ,{ "priorities" }
 ,{ "of" }
 ,{ "global" }
 ,{ "objects." }
 ,{ "For" }
 ,{ "the" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "family" }
 ,{ "of" }
 ,{ "compilers" }
 ,{ "they" }
 ,{ "have" }
 ,{ "values" }
 ,{ "shown" }
 ,{ "above." }
 ,{ "If" }
 ,{ "the" }
 ,{ "target" }
 ,{ "use" }
 ,{ "another" }
 ,{ "compiler" }
 ,{ "you" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "substitution." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "is" }
 ,{ "not" }
 ,{ "standard." }
 ,{ "Priority" }
 ,{ "0" }
 ,{ "is" }
 ,{ "highest." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "CCORE_NOINLINE" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "disable" }
 ,{ "function" }
 ,{ "inlining." }
 ,{ "This" }
 ,{ "macro" }
 ,{ "may" }
 ,{ "be" }
 ,{ "left" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "CCORE_UTF8" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "defined," }
 ,{ "if" }
 ,{ "the" }
 ,{ "target" }
 ,{ "is" }
 ,{ "UTF8-compatible." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "set" }
 ,{ "of" }
 ,{ "standard" }
 ,{ "include" }
 ,{ "files," }
 ,{ "shown" }
 ,{ "above," }
 ,{ "must" }
 ,{ "be" }
 ,{ "included," }
 ,{ "you" }
 ,{ "may" }
 ,{ "add" }
 ,{ "any" }
 ,{ "other" }
 ,{ "desirable" }
 ,{ "includes" }
 ,{ "here." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "restrict" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "restrict" , & fmt_text_i }
 ,{ "keyword." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "is" }
 ,{ "still" }
 ,{ "missing" }
 ,{ "in" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "standard," }
 ,{ "but" }
 ,{ "major" }
 ,{ "compilers" }
 ,{ "support" }
 ,{ "it." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "this" }
 ,{ "macro." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Basic" }
 ,{ "types" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "This" }
 ,{ "set" }
 ,{ "of" }
 ,{ "type" }
 ,{ "definitions" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "uintXXX" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "XXX" , & fmt_text_b }
 ,{ "bit" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "sintXXX" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "2'c" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "with" }
 ,{ "the" }
 ,{ "XXX" , & fmt_text_b }
 ,{ "bit" }
 ,{ "length." }
 ,{ "Such" }
 ,{ "types" }
 ,{ "must" }
 ,{ "be" }
 ,{ "available" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target" }
 ,{ "platform." }
 ,{ "For" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "latest" , & fmt_text_Alert }
 ,{ "gcc" , & fmt_text_Alert }
 ,{ "family" , & fmt_text_Alert }
 ,{ "of" , & fmt_text_Alert }
 ,{ "compilers" , & fmt_text_Alert }
 ,{ "you" , & fmt_text_Alert }
 ,{ "should" , & fmt_text_Alert }
 ,{ "turn" , & fmt_text_Alert }
 ,{ "on" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "option" , & fmt_text_Alert }
 ,{ "-fwrapv" , & fmt_text_Alert }
 ,{ "to" , & fmt_text_Alert }
 ,{ "ensure" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "proper" , & fmt_text_Alert }
 ,{ "type" , & fmt_text_Alert }
 ,{ "behavior" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "ulen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "\"address" }
 ,{ "length\"" }
 ,{ "bit" }
 ,{ "length." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "type" }
 ,{ "size_t" , & fmt_text_b }
 ,{ "for" }
 ,{ "it." }
 ,{ "This" }
 ,{ "type" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "sufficient" }
 ,{ "value" }
 ,{ "range" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "any" }
 ,{ "object" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "uptr" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "large" }
 ,{ "enough" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "any" }
 ,{ "pointer" }
 ,{ "value." }
 ,{ "I.e." }
 ,{ "two-cast" }
 ,{ "(T" , & fmt_text_b }
 ,{ "*)(uptr)ptr" , & fmt_text_b }
 ,{ "must" }
 ,{ "restore" }
 ,{ "the" }
 ,{ "original" }
 ,{ "value" }
 ,{ "of" }
 ,{ "any" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Basic" }
 ,{ "constants" }
} , & fmt_h4 , & align_h4 } ;

Text b17 = { {
 { "IsLEPlatform" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "the" }
 ,{ "target" }
 ,{ "is" }
 ,{ "little-endian." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Is2sComplementArithmetic" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "the" }
 ,{ "target" }
 ,{ "integral" }
 ,{ "arithmetic" }
 ,{ "is" }
 ,{ "2's" }
 ,{ "complement." }
 ,{ "Currently" }
 ,{ "it's" }
 ,{ "the" }
 ,{ "only" }
 ,{ "option!" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "MaxBitLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "bit" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "MaxAlign" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "of" }
 ,{ "alignment" }
 ,{ "of" }
 ,{ "the" }
 ,{ "target" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "DefaultPacketCount" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "packets" }
 ,{ "in" }
 ,{ "the" }
 ,{ "default" , & fmt_text_a }
 ,{ "packet" , & fmt_text_a }
 ,{ "pool" , & fmt_text_a }
 ,{ "by" , & fmt_text_a }
 ,{ "default" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "DefaultEventElementCount" , & fmt_text_b }
 ,{ "this" }
 ,{ "constant" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "numbering" }
 ,{ "of" }
 ,{ "the" }
 ,{ "event-generating" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "should" }
 ,{ "have" }
 ,{ "the" }
 ,{ "value" }
 ,{ "like" }
 ,{ "5000-10000." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Bits::unsigned_ttt" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Extra" }
 ,{ "integral" }
 ,{ "types" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "The" }
 ,{ "structure" }
 ,{ "ExtraInt::Prop" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "support" }
 ,{ "extra" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "i.e." }
 ,{ "types" }
 ,{ "not" }
 ,{ "from" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "list" }
 ,{ "of" }
 ,{ "the" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "if" }
 ,{ "such" }
 ,{ "types" }
 ,{ "are" }
 ,{ "supported" }
 ,{ "by" }
 ,{ "the" }
 ,{ "compiler." }
 ,{ "If" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "use" }
 ,{ "any" }
 ,{ "of" }
 ,{ "such" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "should" }
 ,{ "provide" }
 ,{ "its" }
 ,{ "properties," }
 ,{ "using" }
 ,{ "a" }
 ,{ "specialization" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "ExtraInt::Prop" , & fmt_text_b }
 ,{ "as" }
 ,{ "shown" }
 ,{ "above." }
 ,{ "For" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "the" }
 ,{ "specialized" }
 ,{ "structure" }
 ,{ "defines" }
 ,{ "both" }
 ,{ "signed" }
 ,{ "and" }
 ,{ "unsigned" }
 ,{ "types" }
 ,{ "and" }
 ,{ "desirable" }
 ,{ "promote" }
 ,{ "types." }
 ,{ "For" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "the" }
 ,{ "specialized" }
 ,{ "structure" }
 ,{ "defines" }
 ,{ "bit" }
 ,{ "length" }
 ,{ "and" }
 ,{ "desirable" }
 ,{ "promote" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Meta" }
 ,{ "tools" }
} , & fmt_h4 , & align_h4 } ;

Text b27 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "small" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "meta-tools." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "DoubleUInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "yields" }
 ,{ "the" }
 ,{ "double" }
 ,{ "bit" }
 ,{ "length" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "or" }
 ,{ "the" }
 ,{ "void" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "such" }
 ,{ "type" }
 ,{ "does" }
 ,{ "not" }
 ,{ "exist." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Special" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "Used()" , & fmt_text_b }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "disable" }
 ,{ "the" }
 ,{ "\"unused" }
 ,{ "argument\"" }
 ,{ "(or" }
 ,{ "local" }
 ,{ "variable)" }
 ,{ "warning." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "OptimizeBarrier()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "suppress" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "optimization." }
 ,{ "It" }
 ,{ "should" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "such" }
 ,{ "a" }
 ,{ "way," }
 ,{ "that" }
 ,{ "compiler" }
 ,{ "could" }
 ,{ "not" }
 ,{ "be" }
 ,{ "able" }
 ,{ "to" }
 ,{ "learn" }
 ,{ "its" }
 ,{ "semantic." }
 ,{ "For" }
 ,{ "example," }
 ,{ "using" }
 ,{ "assembler." }
 ,{ "This" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing." }
 ,{ "From" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "perspective," }
 ,{ "however," }
 ,{ "this" }
 ,{ "function" }
 ,{ "does" }
 ,{ "something" }
 ,{ "unknown" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "memory" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Page page = { "page_AnyCore_PlatformBase" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AnyCore_Quick {

Text b0 = { {
 { "AnyCore" }
 ,{ "Quick" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/base/Quick.h" , & fmt_text_Files_b }
 ,{ "CCore/src/base/Quick.cpp" , & fmt_text_Files_b }
 ,{ "CCore/src/base/Quick.s" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "contains" }
 ,{ "some" }
 ,{ "\"quick\"" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "may" }
 ,{ "use" }
 ,{ "hardware" }
 ,{ "capabilities" }
 ,{ "to" }
 ,{ "accelerate" }
 ,{ "its" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ScanLSBit()" , & fmt_text_b }
 ,{ "scans" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "for" }
 ,{ "the" }
 ,{ "less" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "equals" }
 ,{ "1" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "its" }
 ,{ "number" }
 ,{ "(bits" }
 ,{ "are" }
 ,{ "numbered" }
 ,{ "from" }
 ,{ "LSB" }
 ,{ "to" }
 ,{ "MSB)." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ScanMSBit()" , & fmt_text_b }
 ,{ "scans" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "for" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "equals" }
 ,{ "1" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "its" }
 ,{ "number" }
 ,{ "(bits" }
 ,{ "are" }
 ,{ "numbered" }
 ,{ "from" }
 ,{ "LSB" }
 ,{ "to" }
 ,{ "MSB)." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Both" }
 ,{ "scan" }
 ,{ "functions" }
 ,{ "operate" }
 ,{ "on" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ScanUInt" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "If" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "not" }
 ,{ "specified." }
 ,{ "Flags" }
 ,{ "ScanLSBitIsFast" , & fmt_text_b }
 ,{ "and" }
 ,{ "ScanMSBitIsFast" , & fmt_text_b }
 ,{ "are" }
 ,{ "set," }
 ,{ "if" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "function" }
 ,{ "has" }
 ,{ "a" }
 ,{ "fast" }
 ,{ "implementation." }
 ,{ "The" }
 ,{ "type" }
 ,{ "ScanUInt" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "a" }
 ,{ "machine" }
 ,{ "word" }
 ,{ "size" }
 ,{ "type," }
 ,{ "the" }
 ,{ "wider" }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "better." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ByteSwap16()" , & fmt_text_b }
 ,{ "swaps" }
 ,{ "the" }
 ,{ "bytes" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "bytes" }
 ,{ "(b" }
 ,{ "0" }
 ,{ ",b" }
 ,{ "1" }
 ,{ ")," }
 ,{ "then" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "(b" }
 ,{ "1" }
 ,{ ",b" }
 ,{ "0" }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "ByteSwap32()" , & fmt_text_b }
 ,{ "swaps" }
 ,{ "the" }
 ,{ "bytes" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "bytes" }
 ,{ "(b" }
 ,{ "0" }
 ,{ ",b" }
 ,{ "1" }
 ,{ ",b" }
 ,{ "2" }
 ,{ ",b" }
 ,{ "3" }
 ,{ ")," }
 ,{ "then" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "(b" }
 ,{ "3" }
 ,{ ",b" }
 ,{ "2" }
 ,{ ",b" }
 ,{ "1" }
 ,{ ",b" }
 ,{ "0" }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ByteSwap64()" , & fmt_text_b }
 ,{ "swaps" }
 ,{ "the" }
 ,{ "bytes" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "bytes" }
 ,{ "(b" }
 ,{ "0" }
 ,{ ",b" }
 ,{ "1" }
 ,{ ",b" }
 ,{ "2" }
 ,{ ",b" }
 ,{ "3" }
 ,{ ",b" }
 ,{ "4" }
 ,{ ",b" }
 ,{ "5" }
 ,{ ",b" }
 ,{ "6" }
 ,{ ",b" }
 ,{ "7" }
 ,{ ")," }
 ,{ "then" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "(b" }
 ,{ "7" }
 ,{ ",b" }
 ,{ "6" }
 ,{ ",b" }
 ,{ "5" }
 ,{ ",b" }
 ,{ "4" }
 ,{ ",b" }
 ,{ "3" }
 ,{ ",b" }
 ,{ "2" }
 ,{ ",b" }
 ,{ "1" }
 ,{ ",b" }
 ,{ "0" }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Integer" }
 ,{ "multiplicative" }
 ,{ "operations" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "The" }
 ,{ "rest" }
 ,{ "is" }
 ,{ "to" }
 ,{ "support" }
 ,{ "integer" }
 ,{ "multiplicative" }
 ,{ "operations." }
 ,{ "This" }
 ,{ "is" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "Meta-Type" , & fmt_text_b }
 ,{ "UIntMulSelect" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "template" }
 ,{ "UIntMulFunc" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "structures" }
 ,{ "are" }
 ,{ "not" }
 ,{ "defined" }
 ,{ "itself," }
 ,{ "but" }
 ,{ "its" }
 ,{ "specializations" }
 ,{ "must" }
 ,{ "be" }
 ,{ "given." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "UIntMulSelect" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "specialized" }
 ,{ "for" }
 ,{ "the" }
 ,{ "four" }
 ,{ "following" }
 ,{ "values:" }
 ,{ "8" , & fmt_text_b }
 ,{ "," }
 ,{ "16" , & fmt_text_b }
 ,{ "," }
 ,{ "32" , & fmt_text_b }
 ,{ "," }
 ,{ "64" , & fmt_text_b }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Ret" , & fmt_text_b }
 ,{ "is" }
 ,{ "some" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "Either" }
 ,{ "this" }
 ,{ "type" }
 ,{ "has" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "width" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "2*N" , & fmt_text_b }
 ,{ "," }
 ,{ "or" }
 ,{ "Ret" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "N-bit" , & fmt_text_b }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "In" }
 ,{ "the" }
 ,{ "first" }
 ,{ "case" }
 ,{ "extended" }
 ,{ "multiplicative" }
 ,{ "operations" }
 ,{ "for" }
 ,{ "the" }
 ,{ "type" }
 ,{ "uintN" , & fmt_text_b }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Ret" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "specialization" }
 ,{ "UIntMulFunc<uintN>" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "given." }
 ,{ "Such" }
 ,{ "specialization" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Mul()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "full" }
 ,{ "multiplication" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pair" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "hi" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "high" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product" }
 ,{ "and" }
 ,{ "the" }
 ,{ "lo" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Div()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double-size" }
 ,{ "value," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "third" }
 ,{ "argument" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "hi" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "such" }
 ,{ "case" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "single-size" }
 ,{ "value." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "cause" }
 ,{ "hardware" }
 ,{ "trap)." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Mod()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double-size" }
 ,{ "value," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "third" }
 ,{ "argument" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "hi" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "cause" }
 ,{ "hardware" }
 ,{ "trap)." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "MulDiv()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "divides" }
 ,{ "the" }
 ,{ "full" }
 ,{ "double-size" }
 ,{ "product" }
 ,{ "by" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "high" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product" }
 ,{ "must" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "cause" }
 ,{ "hardware" }
 ,{ "trap)." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "DivMod()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "both" }
 ,{ "operations" }
 ,{ "Div()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Mod()" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fields" }
 ,{ "div" , & fmt_text_b }
 ,{ "and" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "ModMul()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "product" }
 ,{ "of" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "mod" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "cause" }
 ,{ "hardware" }
 ,{ "trap)." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "ModMac()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "expression" }
 ,{ "s+a*b" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "," }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "s" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "mod" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "cause" }
 ,{ "hardware" }
 ,{ "trap)." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_AnyCore_Quick" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AnyCore_SysAtomic {

Text b0 = { {
 { "AnyCore" }
 ,{ "SysAtomic" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysAtomic.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysAtomic.cpp" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysAtomic.s" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "is" }
 ,{ "a" }
 ,{ "target-dependent" }
 ,{ "atomic" }
 ,{ "operations" }
 ,{ "implementation." }
 ,{ "It's" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Atomic" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "only" }
 ,{ "one" }
 ,{ "non-static" }
 ,{ "data" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Atomic::Type" , & fmt_text_b }
 ,{ "." }
 ,{ "So" }
 ,{ "you" }
 ,{ "may" }
 ,{ "do" }
 ,{ "a" }
 ,{ "static" }
 ,{ "initialization" }
 ,{ "of" }
 ,{ "a" }
 ,{ "variable" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "You" }
 ,{ "may" }
 ,{ "copy" }
 ,{ "this" }
 ,{ "structure," }
 ,{ "but" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "atomic" }
 ,{ "and" }
 ,{ "doing" }
 ,{ "so" }
 ,{ "is" }
 ,{ "not" }
 ,{ "recommended." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "set_null()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null," }
 ,{ "this" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "not" , & fmt_text_Alert }
 ,{ "an" , & fmt_text_Alert }
 ,{ "atomic" , & fmt_text_Alert }
 ,{ "operation!" , & fmt_text_Alert }
 ,{ "Other" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "atomic." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "operator" , & fmt_text_b }
 ,{ "Type()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "a" }
 ,{ "read" }
 ,{ "operation" }
 ,{ "and" }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "apply" }
 ,{ "any" }
 ,{ "memory" }
 ,{ "fence," }
 ,{ "only" }
 ,{ "atomicity" }
 ,{ "is" }
 ,{ "guaranteed." }
 ,{ "Other" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "modifying" }
 ,{ "operations," }
 ,{ "they" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "and" }
 ,{ "apply" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "fence." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "operator" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "new" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "atomic." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "operator" , & fmt_text_b }
 ,{ "+=" , & fmt_text_b }
 ,{ "increases" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "by" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "operator" , & fmt_text_b }
 ,{ "-=" , & fmt_text_b }
 ,{ "decreases" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "by" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "postfix" , & fmt_text_b }
 ,{ "operator" , & fmt_text_b }
 ,{ "++" , & fmt_text_b }
 ,{ "increments" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "postfix" , & fmt_text_b }
 ,{ "operator" , & fmt_text_b }
 ,{ "--" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "trySet()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "conditional" }
 ,{ "set" }
 ,{ "operation." }
 ,{ "It" }
 ,{ "does" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "In" }
 ,{ "the" }
 ,{ "following" }
 ,{ "example," }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "c" , & fmt_text_b }
 ,{ "is" }
 ,{ "guaranteed" }
 ,{ "to" }
 ,{ "be" }
 ,{ "1." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "requires" }
 ,{ "not" }
 ,{ "only" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "hardware" }
 ,{ "support," }
 ,{ "but" }
 ,{ "also" }
 ,{ "the" }
 ,{ "prevention" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "to" }
 ,{ "overoptimize" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "typical" }
 ,{ "structure" }
 ,{ "implementation." }
 ,{ "Usually" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "give" }
 ,{ "an" }
 ,{ "atomic" }
 ,{ "type" }
 ,{ "and" }
 ,{ "tree" }
 ,{ "atomic" }
 ,{ "functions:" }
 ,{ "Set()" , & fmt_text_b }
 ,{ "," }
 ,{ "Add()" , & fmt_text_b }
 ,{ "and" }
 ,{ "TrySet()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "typically" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "an" }
 ,{ "assembler." }
 ,{ "Each" }
 ,{ "of" }
 ,{ "them" }
 ,{ "applies" }
 ,{ "a" }
 ,{ "memory-fence" }
 ,{ "operation" }
 ,{ "to" }
 ,{ "make" }
 ,{ "sure" }
 ,{ "any" }
 ,{ "changes" }
 ,{ "of" }
 ,{ "any" }
 ,{ "variable," }
 ,{ "made" }
 ,{ "before" }
 ,{ "the" }
 ,{ "function" }
 ,{ "call," }
 ,{ "becomes" }
 ,{ "visible" }
 ,{ "to" }
 ,{ "any" }
 ,{ "thread" }
 ,{ "of" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "You" }
 ,{ "may" }
 ,{ "derive" }
 ,{ "functions" }
 ,{ "Sub()" , & fmt_text_b }
 ,{ "," }
 ,{ "Inc()" , & fmt_text_b }
 ,{ "," }
 ,{ "Dec()" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "Add()" , & fmt_text_b }
 ,{ "as" }
 ,{ "shown" }
 ,{ "above," }
 ,{ "or" }
 ,{ "give" }
 ,{ "an" }
 ,{ "independent" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "function" }
 ,{ "Get()" , & fmt_text_b }
 ,{ "usually" }
 ,{ "can" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "directly," }
 ,{ "as" }
 ,{ "shown" }
 ,{ "above," }
 ,{ "but" }
 ,{ "you" }
 ,{ "can" }
 ,{ "provide" }
 ,{ "another" }
 ,{ "implementation," }
 ,{ "if" }
 ,{ "necessary." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Get()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic." }
 ,{ "No" }
 ,{ "memory" }
 ,{ "fence" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "(but" }
 ,{ "atomicity" }
 ,{ "is" }
 ,{ "guaranteed)." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Set()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "new" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "atomic." }
 ,{ "The" }
 ,{ "old" }
 ,{ "value" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "A" }
 ,{ "memory" }
 ,{ "fence" }
 ,{ "is" }
 ,{ "applied." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "atomic." }
 ,{ "The" }
 ,{ "old" }
 ,{ "value" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "A" }
 ,{ "memory" }
 ,{ "fence" }
 ,{ "is" }
 ,{ "applied." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "TrySet()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "conditional" }
 ,{ "set." }
 ,{ "If" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "equals" }
 ,{ "the" }
 ,{ "old_value" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "new_value" , & fmt_text_b }
 ,{ "is" }
 ,{ "set." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "value" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "A" }
 ,{ "memory" }
 ,{ "fence" }
 ,{ "is" }
 ,{ "applied." }
} , & fmt_text , & align_text } ;

Page page = { "page_AnyCore_SysAtomic" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AnyPtr {

Text b0 = { {
 { "AnyPtr" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AnyPtr.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AnyPtr.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Pointer" }
 ,{ "classes" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "Two" }
 ,{ "similar" }
 ,{ "classes" }
 ,{ "implement" }
 ,{ "a" }
 ,{ "\"polymorphic" }
 ,{ "pointer\"" }
 ,{ "type." }
 ,{ "They" }
 ,{ "can" }
 ,{ "store" }
 ,{ "multiple" }
 ,{ "type" }
 ,{ "pointers." }
 ,{ "The" }
 ,{ "pointee" }
 ,{ "type" }
 ,{ "list" }
 ,{ "is" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "list." }
 ,{ "AnyPtr" , & fmt_text_b }
 ,{ "stores" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "non-constants" }
 ,{ "and" }
 ,{ "AnyPtr_const" , & fmt_text_b }
 ,{ "stores" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "constants." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "object." }
 ,{ "There" }
 ,{ "are" }
 ,{ "also" }
 ,{ "constructors" }
 ,{ "from" }
 ,{ "NothingType" , & fmt_text_b }
 ,{ "words" }
 ,{ "and" }
 ,{ "nullptr" , & fmt_text_b }
 ,{ "literal." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "last" }
 ,{ "implicit" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "pointer" }
 ,{ "stored." }
 ,{ "The" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "list." }
 ,{ "Even" }
 ,{ "if" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null:" }
 ,{ "it" }
 ,{ "remembers" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "pointer" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "non-null" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "hasType()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "pointer." }
 ,{ "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "TT" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "castPtr()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "original" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "," }
 ,{ "or" }
 ,{ "null" }
 ,{ "if" }
 ,{ "the" }
 ,{ "stored" }
 ,{ "pointer" }
 ,{ "has" }
 ,{ "another" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "method" }
 ,{ "apply()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor," }
 ,{ "using" }
 ,{ "the" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "Pattern" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "the" }
 ,{ "stored" }
 ,{ "pointer." }
 ,{ "It" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "for" }
 ,{ "the" }
 ,{ "null" }
 ,{ "object," }
 ,{ "but" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "the" }
 ,{ "proper" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "pointer." }
 ,{ "The" }
 ,{ "functor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "polymorphic" }
 ,{ "and" }
 ,{ "capable" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "all" }
 ,{ "possible" }
 ,{ "pointer" }
 ,{ "types." }
 ,{ "Extra" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "passed" }
 ,{ "as" }
 ,{ "extra" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "applyFor()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "null" }
 ,{ "or" }
 ,{ "stores" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "another" }
 ,{ "type," }
 ,{ "this" }
 ,{ "method" }
 ,{ "does" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "AnyPtr" , & fmt_text_b }
 ,{ "can" }
 ,{ "print" }
 ,{ "the" }
 ,{ "pointed" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "\"(null)\"" }
 ,{ "is" }
 ,{ "printed," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "object." }
 ,{ "Printing" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "functor:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "static" }
 ,{ "method" }
 ,{ "Binary" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "with" }
 ,{ "two" }
 ,{ "any-pointers." }
 ,{ "If" }
 ,{ "pointer" }
 ,{ "types" }
 ,{ "are" }
 ,{ "different" }
 ,{ "then" }
 ,{ "the" }
 ,{ "return" }
 ,{ "object" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "as" }
 ,{ "Ret(a.type,b.type)" , & fmt_text_b }
 ,{ "," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "handle" }
 ,{ "this" }
 ,{ "case" }
 ,{ "separately." }
 ,{ "This" }
 ,{ "case" }
 ,{ "happens" }
 ,{ "also" }
 ,{ "if" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "pointers" }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "other" }
 ,{ "is" }
 ,{ "not" }
 ,{ "(" }
 ,{ "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "0" }
 ,{ "for" }
 ,{ "null" }
 ,{ "pointer)." }
 ,{ "Otherwise" }
 ,{ "if" }
 ,{ "both" }
 ,{ "any-pointers" }
 ,{ "are" }
 ,{ "not" }
 ,{ "null" }
 ,{ "objects," }
 ,{ "then" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "with" }
 ,{ "two" }
 ,{ "elaborated" }
 ,{ "pointers" }
 ,{ "is" }
 ,{ "called." }
 ,{ "Finally," }
 ,{ "Ret()" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "if" }
 ,{ "both" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "null." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "for" }
 ,{ "a" }
 ,{ "comparison" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "ElaborateAnyPtr()" }
} , & fmt_h3 , & align_h3 } ;

Text b16 = { {
 { "The" }
 ,{ "global" }
 ,{ "function" }
 ,{ "ElaborateAnyPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "great" }
 ,{ "way" }
 ,{ "to" }
 ,{ "demultiplex" }
 ,{ "any-pointers." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "This" }
 ,{ "function" }
 ,{ "simply" }
 ,{ "calls" }
 ,{ "obj(ss...)" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments." }
 ,{ "But" }
 ,{ "if" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "AnyPtr" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "extracted" }
 ,{ "and" }
 ,{ "passed" }
 ,{ "instead." }
 ,{ "If" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "object" }
 ,{ "is" }
 ,{ "null," }
 ,{ "there" }
 ,{ "will" }
 ,{ "be" }
 ,{ "no" }
 ,{ "call." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "CastAnyPtr()" }
} , & fmt_h3 , & align_h3 } ;

Text b19 = { {
 { "To" }
 ,{ "cast" }
 ,{ "one" }
 ,{ "AnyPtr" , & fmt_text_b }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "another" }
 ,{ "with" }
 ,{ "an" }
 ,{ "extended" }
 ,{ "type" }
 ,{ "list" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "generic" }
 ,{ "function:" }
} , & fmt_text , & align_text } ;

Page page = { "page_AnyPtr" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ApplyToList {

Text b0 = { {
 { "ApplyToList" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/ApplyToList.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/ApplyToList.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ApplyToList()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "arguments." }
 ,{ "A" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "using" }
 ,{ "the" }
 ,{ "GetResult()" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_ApplyToList" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ApplyToRange {

Text b0 = { {
 { "ApplyToRange" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/ApplyToRange.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/ApplyToRange.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "GetResult()" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "GetResult()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "extract" }
 ,{ "a" }
 ,{ "result" }
 ,{ "from" }
 ,{ "the" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getResult()" , & fmt_text_b }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "extract" }
 ,{ "a" }
 ,{ "result." }
 ,{ "Otherwise" }
 ,{ "void" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ApplyToRange()" }
} , & fmt_h3 , & align_h3 } ;

Text b5 = { {
 { "ApplyToRange()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "elements." }
 ,{ "This" }
 ,{ "algorithm" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "Pattern" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "or" }
 ,{ "Recursor" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "initializer." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "A" }
 ,{ "result" }
 ,{ "(or" }
 ,{ "void" , & fmt_text_b }
 ,{ ")" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "from" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "using" }
 ,{ "the" }
 ,{ "function" }
 ,{ "GetResult()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "boolable" }
 ,{ "value," }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "stop" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "if" }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "obtained." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Recursor" , & fmt_text_b }
 ,{ "variants" }
 ,{ "use" }
 ,{ "recursion" }
 ,{ "to" }
 ,{ "run" }
 ,{ "over" }
 ,{ "the" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Page page = { "page_ApplyToRange" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_APRTest {

Text b0 = { {
 { "APRTest" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/APRTest.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/APRTest.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "APRTest" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "primality" }
 ,{ "test" }
 ,{ "(stands" }
 ,{ "for" }
 ,{ "Adelman-Pomerance-Rumely)." }
 ,{ "It" }
 ,{ "can" }
 ,{ "determine" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Integer" }
 ,{ "is" }
 ,{ "it" }
 ,{ "prime" }
 ,{ "or" }
 ,{ "not." }
 ,{ "The" }
 ,{ "all" }
 ,{ "related" }
 ,{ "software" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "APRTest" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "run" }
 ,{ "the" }
 ,{ "test" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "TestEngine" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_a }
 ,{ "class." }
 ,{ "This" }
 ,{ "test" }
 ,{ "can" }
 ,{ "work" }
 ,{ "with" }
 ,{ "numbers" }
 ,{ "below" }
 ,{ "the" }
 ,{ "cap" }
 ,{ "equals" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "This" }
 ,{ "number" }
 ,{ "has" }
 ,{ "9021" , & fmt_text_b }
 ,{ "bit" }
 ,{ "length." }
 ,{ "So" }
 ,{ "numbers" }
 ,{ "with" }
 ,{ "9020" , & fmt_text_b }
 ,{ "bit" }
 ,{ "length" }
 ,{ "or" }
 ,{ "less" }
 ,{ "can" }
 ,{ "be" }
 ,{ "tested." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "To" }
 ,{ "test" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Integer" }
 ,{ "use" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "to" }
 ,{ "be" }
 ,{ "tested." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "a" }
 ,{ "report" }
 ,{ "object." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "silent" }
 ,{ "Report" , & fmt_text_b }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Any" }
 ,{ "report" }
 ,{ "class" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "A" }
 ,{ "test" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "as" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "enumeration" }
 ,{ "TestResult" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "IsPrime" , & fmt_text_b }
 ,{ "equals" }
 ,{ "0" }
 ,{ "means" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "prime." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "NoPrime" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "no" }
 ,{ "prime." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "HasDivisor" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "no" }
 ,{ "prime" }
 ,{ "and" }
 ,{ "some" }
 ,{ "divisor" }
 ,{ "can" }
 ,{ "be" }
 ,{ "presented." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "HardCase" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "test" }
 ,{ "was" }
 ,{ "unable" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "the" }
 ,{ "primality" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "very" }
 ,{ "rare" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "TooLarge" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "above" }
 ,{ "the" }
 ,{ "test" }
 ,{ "cap." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Report" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "to" }
 ,{ "indicate" }
 ,{ "some" }
 ,{ "stages" }
 ,{ "of" }
 ,{ "the" }
 ,{ "test." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "start()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "at" }
 ,{ "the" }
 ,{ "start" }
 ,{ "of" }
 ,{ "the" }
 ,{ "test." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "to" }
 ,{ "be" }
 ,{ "tested." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "sanity()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "some" }
 ,{ "sanity" }
 ,{ "checks" }
 ,{ "are" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "text" }
 ,{ "description" }
 ,{ "of" }
 ,{ "the" }
 ,{ "situation." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "isSmallPrime()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "been" }
 ,{ "tested" }
 ,{ "is" }
 ,{ "a" }
 ,{ "small" }
 ,{ "prime." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "testP()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "at" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of" }
 ,{ "a" }
 ,{ "series" }
 ,{ "of" }
 ,{ "subtests." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "small" }
 ,{ "prime" }
 ,{ "number" }
 ,{ "p" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "testQ()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "at" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of" }
 ,{ "a" }
 ,{ "subtest." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "small" }
 ,{ "prime" }
 ,{ "number" }
 ,{ "q" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "couple" }
 ,{ "(p,q)" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "subtest" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "startProbe()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "at" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "searching" }
 ,{ "divisors." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "probe()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "during" }
 ,{ "the" }
 ,{ "searching" }
 ,{ "divisors." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "possible" }
 ,{ "divisor" }
 ,{ "count." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "div()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "some" }
 ,{ "divisor" }
 ,{ "has" }
 ,{ "been" }
 ,{ "found." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "that" }
 ,{ "divisor." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "hard()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "hard" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "isPrime()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "been" }
 ,{ "tested" }
 ,{ "is" }
 ,{ "prime." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "noPrime()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "been" }
 ,{ "tested" }
 ,{ "is" }
 ,{ "not" }
 ,{ "prime." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "faster" }
 ,{ "parallel" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "this" }
 ,{ "test." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "This" }
 ,{ "variant" }
 ,{ "is" }
 ,{ "working" }
 ,{ "fatser" }
 ,{ "on" }
 ,{ "multi-core" }
 ,{ "systems." }
 ,{ "To" }
 ,{ "achieve" }
 ,{ "a" }
 ,{ "greater" }
 ,{ "efficiency" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "use" }
 ,{ "TaskHeap" , & fmt_text_a }
 ,{ "." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "usage:" }
} , & fmt_text , & align_text } ;

Page page = { "page_APRTest" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Arrays {

Text b0 = { {
 { "Arrays" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Array.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Array.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/array" , & fmt_text_Files_b }
 ,{ "CCore/src/array" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Helpers" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "types" }
 ,{ "that" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "behavior." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "DoBuild" , & fmt_text_b }
 ,{ "and" }
 ,{ "DoReserve" , & fmt_text_b }
 ,{ "are" }
 ,{ "word" , & fmt_text_b }
 ,{ "s." }
 ,{ "They" }
 ,{ "designate" }
 ,{ "the" }
 ,{ "build" }
 ,{ "and" }
 ,{ "the" }
 ,{ "reserve" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "respectively." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "DoRaw" , & fmt_text_b }
 ,{ "," }
 ,{ "DoFill" , & fmt_text_b }
 ,{ "," }
 ,{ "DoCopy" , & fmt_text_b }
 ,{ "," }
 ,{ "DoCast" , & fmt_text_b }
 ,{ "," }
 ,{ "DoSwap" , & fmt_text_b }
 ,{ "," }
 ,{ "DoCreate" , & fmt_text_b }
 ,{ "are" }
 ,{ "not" }
 ,{ "word" , & fmt_text_b }
 ,{ "s," }
 ,{ "but" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s." }
 ,{ "They" }
 ,{ "designate" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "carry" }
 ,{ "two" }
 ,{ "parameters:" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "length." }
 ,{ "When" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "being" }
 ,{ "created," }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "length" }
 ,{ "determines" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "space" }
 ,{ "to" }
 ,{ "be" }
 ,{ "allocated," }
 ,{ "and" }
 ,{ "the" }
 ,{ "length" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "to" }
 ,{ "be" }
 ,{ "created." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "if" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "maxlen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Arrays" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "Array" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "container," }
 ,{ "where" }
 ,{ "multiple" }
 ,{ "items" }
 ,{ "comprise" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "range." }
 ,{ "The" }
 ,{ "simplest" }
 ,{ "such" }
 ,{ "\"container\"" }
 ,{ "is" }
 ,{ "the" }
 ,{ "embedded" }
 ,{ "type" }
 ,{ "\"array" }
 ,{ "of\"" }
 ,{ "T[Len]" , & fmt_text_b }
 ,{ "." }
 ,{ "Unfortunately," }
 ,{ "this" }
 ,{ "type" }
 ,{ "lacks" }
 ,{ "many" }
 ,{ "abilities," }
 ,{ "required" }
 ,{ "in" }
 ,{ "applications," }
 ,{ "so" }
 ,{ "we" }
 ,{ "need" }
 ,{ "a" }
 ,{ "variety" }
 ,{ "of" }
 ,{ "Array" , & fmt_text_b }
 ,{ "s." }
 ,{ "We" }
 ,{ "don't" }
 ,{ "use" }
 ,{ "STL" }
 ,{ "vector" , & fmt_text_b }
 ,{ "," }
 ,{ "because" }
 ,{ "it" }
 ,{ "also" }
 ,{ "has" }
 ,{ "many" }
 ,{ "deficiencies." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "Array" , & fmt_text_b }
 ,{ "s" }
 ,{ "use" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heap" }
 ,{ "with" }
 ,{ "its" }
 ,{ "extra" }
 ,{ "functionality." }
 ,{ "They" }
 ,{ "also" }
 ,{ "customizable" }
 ,{ "using" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "of" }
 ,{ "array" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "CCore" , & fmt_text_b }
 ,{ "Array" , & fmt_text_b }
 ,{ "s" }
 ,{ "implement" }
 ,{ "Range" , & fmt_text_b }
 ,{ "Access" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "also" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "index" }
 ,{ "access" }
 ,{ "to" }
 ,{ "elements" }
 ,{ "through" }
 ,{ "the" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "checked" }
 ,{ "index" }
 ,{ "access" }
 ,{ "with" }
 ,{ "the" }
 ,{ "method" }
 ,{ "at()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Constant" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "Array" , & fmt_text_b }
 ,{ "s" }
 ,{ "give" }
 ,{ "constant" }
 ,{ "access" }
 ,{ "to" }
 ,{ "its" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Allocation" }
 ,{ "errors" }
 ,{ "and" }
 ,{ "index" }
 ,{ "check" }
 ,{ "errors" }
 ,{ "throw" }
 ,{ "exceptions." }
 ,{ "Default" }
 ,{ "constructors" }
 ,{ "are" }
 ,{ "no-throw." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "method" }
 ,{ "apply()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor," }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements." }
 ,{ "If" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "constant," }
 ,{ "then" }
 ,{ "element" }
 ,{ "references" }
 ,{ "are" }
 ,{ "constant" }
 ,{ "too." }
 ,{ "The" }
 ,{ "variant" }
 ,{ "apply_const()" , & fmt_text_b }
 ,{ "also" }
 ,{ "enforces" }
 ,{ "constantness." }
 ,{ "It" }
 ,{ "also" }
 ,{ "may" }
 ,{ "return" , & fmt_text_a }
 ,{ "a" , & fmt_text_a }
 ,{ "functor" , & fmt_text_a }
 ,{ "result" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "method" }
 ,{ "applyReverse()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor," }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order." }
 ,{ "If" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "constant," }
 ,{ "then" }
 ,{ "element" }
 ,{ "references" }
 ,{ "are" }
 ,{ "constant" }
 ,{ "too." }
 ,{ "The" }
 ,{ "variant" }
 ,{ "applyReverse_const()" , & fmt_text_b }
 ,{ "also" }
 ,{ "enforces" }
 ,{ "constantness." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Array" , & fmt_text_b }
 ,{ "s" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "most" }
 ,{ "types," }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "hard" }
 ,{ "restrictions" }
 ,{ "on" }
 ,{ "type" }
 ,{ "properties." }
 ,{ "The" }
 ,{ "only" }
 ,{ "strong" }
 ,{ "requirement" }
 ,{ "is:" }
 ,{ "the" }
 ,{ "type" }
 ,{ "destructor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "no-throw." }
 ,{ "Some" }
 ,{ "operations," }
 ,{ "however," }
 ,{ "require" }
 ,{ "additional" }
 ,{ "type" }
 ,{ "properties." }
 ,{ "For" }
 ,{ "example," }
 ,{ "to" }
 ,{ "use" }
 ,{ "cloneTo()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "the" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "copyable." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "All" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "Array" , & fmt_text_b }
 ,{ "s" }
 ,{ "available" }
 ,{ "through" }
 ,{ "the" }
 ,{ "header" }
 ,{ "CCore/inc/Array.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "TempArray" }
} , & fmt_h4 , & align_h4 } ;

Text b17 = { {
 { "TempArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "simplest" }
 ,{ "of" }
 ,{ "Array" , & fmt_text_b }
 ,{ "s." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applicable" }
 ,{ "only" }
 ,{ "to" }
 ,{ "POD" }
 ,{ "types." }
 ,{ "This" }
 ,{ "container" }
 ,{ "combines" }
 ,{ "stack" }
 ,{ "storage" }
 ,{ "and" }
 ,{ "dynamic" }
 ,{ "storage" }
 ,{ "to" }
 ,{ "speed" }
 ,{ "up" }
 ,{ "the" }
 ,{ "array" }
 ,{ "construction/destruction" }
 ,{ "for" }
 ,{ "a" }
 ,{ "short" }
 ,{ "lengths." }
 ,{ "Use" }
 ,{ "this" }
 ,{ "Array" , & fmt_text_b }
 ,{ "if" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "expected" }
 ,{ "short" }
 ,{ "length" }
 ,{ "in" }
 ,{ "the" }
 ,{ "most" }
 ,{ "cases." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "If" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length" }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "StackLen" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "TempArray" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "space" }
 ,{ "for" }
 ,{ "elements" }
 ,{ "is" }
 ,{ "dynamically" }
 ,{ "allocated." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "provide()" , & fmt_text_b }
 ,{ "ensures" }
 ,{ "the" }
 ,{ "array" }
 ,{ "has" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length," }
 ,{ "reallocating" }
 ,{ "it" }
 ,{ "if" }
 ,{ "required." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "array" }
 ,{ "content" }
 ,{ "may" }
 ,{ "be" }
 ,{ "lost." }
 ,{ "The" }
 ,{ "new" }
 ,{ "content" }
 ,{ "is" }
 ,{ "not" }
 ,{ "initialized." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "reset()" , & fmt_text_b }
 ,{ "recreates" }
 ,{ "the" }
 ,{ "array" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length," }
 ,{ "reallocating" }
 ,{ "it" }
 ,{ "if" }
 ,{ "required." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "array" }
 ,{ "content" }
 ,{ "may" }
 ,{ "be" }
 ,{ "lost." }
 ,{ "The" }
 ,{ "new" }
 ,{ "content" }
 ,{ "is" }
 ,{ "not" }
 ,{ "initialized." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "extend()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "array" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
 ,{ "If" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "current" }
 ,{ "array" }
 ,{ "length," }
 ,{ "the" }
 ,{ "method" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "extends" }
 ,{ "the" }
 ,{ "array," }
 ,{ "preserving" }
 ,{ "the" }
 ,{ "current" }
 ,{ "content," }
 ,{ "and" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "new" }
 ,{ "content" }
 ,{ "is" }
 ,{ "not" }
 ,{ "initialized." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "erase()" , & fmt_text_b }
 ,{ "erases" }
 ,{ "the" }
 ,{ "array." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "standard" }
 ,{ "array" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Link link_SimpleArray = { & page , { 24 } } ;

Text b24 = { {
 { "SimpleArray" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "SimpleArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "\"simple" }
 ,{ "array\"." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applicable" }
 ,{ "to" }
 ,{ "(almost)" }
 ,{ "any" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "SimpleArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "of" }
 ,{ "array" }
 ,{ "algorithms." }
 ,{ "SimpleArray" , & fmt_text_b }
 ,{ "uses" }
 ,{ "only" }
 ,{ "two" }
 ,{ "of" }
 ,{ "them:" }
 ,{ "Create_default()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Destroy()" , & fmt_text_b }
 ,{ "." }
 ,{ "See" }
 ,{ "below" , & fmt_text_a , & link_ArrayAlgo }
 ,{ "about" }
 ,{ "array" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "SimpleArray" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "space" }
 ,{ "dynamically." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "SimpleArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Unlike" }
 ,{ "TempArray" , & fmt_text_b }
 ,{ "," }
 ,{ "SimpleArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Link link_DynArray = { & page , { 30 } } ;

Text b30 = { {
 { "DynArray" }
} , & fmt_h4 , & align_h4 } ;

Text b31 = { {
 { "DynArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "\"main\"" }
 ,{ "of" }
 ,{ "Array" , & fmt_text_b }
 ,{ "s." }
 ,{ "It" }
 ,{ "stores" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "space" }
 ,{ "with" }
 ,{ "some" }
 ,{ "reserved" }
 ,{ "memory" }
 ,{ "behind." }
 ,{ "It" }
 ,{ "can" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "elements," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "an" }
 ,{ "extra" }
 ,{ "memory." }
 ,{ "If" }
 ,{ "not" }
 ,{ "and" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "supports" }
 ,{ "moving" , & fmt_text_a }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "array" }
 ,{ "extension" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "either" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "extension" }
 ,{ "(using" }
 ,{ "MemExtend()" , & fmt_text_b }
 ,{ ")" }
 ,{ "or" }
 ,{ "the" }
 ,{ "total" }
 ,{ "reallocation" }
 ,{ "with" }
 ,{ "the" }
 ,{ "content" }
 ,{ "moving." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "release" }
 ,{ "the" }
 ,{ "extra" }
 ,{ "memory." }
 ,{ "All" }
 ,{ "details" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array" }
 ,{ "functionality" }
 ,{ "can" }
 ,{ "be" }
 ,{ "customized" }
 ,{ "using" }
 ,{ "the" }
 ,{ "second" }
 ,{ "template" }
 ,{ "argument," }
 ,{ "which" }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "of" }
 ,{ "array" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Alone" }
 ,{ "with" }
 ,{ "standard" }
 ,{ "methods," }
 ,{ "DynArray" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "bunch" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "and" }
 ,{ "control" }
 ,{ "the" }
 ,{ "array" }
 ,{ "content." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Non-default" }
 ,{ "constructors" }
 ,{ "reserve" }
 ,{ "some" }
 ,{ "space" }
 ,{ "and" }
 ,{ "build" }
 ,{ "some" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "DoRaw" , & fmt_text_b }
 ,{ "," }
 ,{ "...," }
 ,{ "DoCreate" , & fmt_text_b }
 ,{ "arguments" }
 ,{ "carry" }
 ,{ "the" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Non-default" }
 ,{ "constructors" }
 ,{ "work" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "extend...()" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "DynArray(std::initializer_list<S>" , & fmt_text_b }
 ,{ "il)" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "list" }
 ,{ "to" }
 ,{ "\"cast\"" }
 ,{ "elements" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "DynArray(ulen" , & fmt_text_b }
 ,{ "len)" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "array" }
 ,{ "of" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "DynArray(ulen" , & fmt_text_b }
 ,{ "len,ulen" , & fmt_text_b }
 ,{ "maxlen)" , & fmt_text_b }
 ,{ "also" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "default" }
 ,{ "initialization" }
 ,{ "of" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "elements," }
 ,{ "but" }
 ,{ "reserves" }
 ,{ "a" }
 ,{ "space" }
 ,{ "for" }
 ,{ "the" }
 ,{ "maxlen" , & fmt_text_b }
 ,{ "elements." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "if" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "maxlen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "DynArray(DoReserveType,ulen" , & fmt_text_b }
 ,{ "maxlen)" , & fmt_text_b }
 ,{ "just" }
 ,{ "reserves" }
 ,{ "a" }
 ,{ "space." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "DynArray(DoRaw" , & fmt_text_b }
 ,{ "dotype)" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "\"raw\"" }
 ,{ "initialization." }
 ,{ "If" }
 ,{ "the" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type," }
 ,{ "elements" }
 ,{ "are" }
 ,{ "not" }
 ,{ "initialized." }
 ,{ "If" }
 ,{ "not," }
 ,{ "the" }
 ,{ "default" }
 ,{ "initialization" }
 ,{ "is" }
 ,{ "performed." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "DynArray(DoFill" , & fmt_text_b }
 ,{ "dotype,SS" , & fmt_text_b }
 ,{ "&&" , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "ss)" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "some" }
 ,{ "constructor," }
 ,{ "the" }
 ,{ "specified" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "this" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "DynArray(DoCopy" , & fmt_text_b }
 ,{ "dotype,const" , & fmt_text_b }
 ,{ "T" , & fmt_text_b }
 ,{ "src[])" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "constructor," }
 ,{ "src" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "length" }
 ,{ "dotype.getLen()" , & fmt_text_b }
 ,{ "," }
 ,{ "its" }
 ,{ "members" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "memberwise." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "DynArray(DoCast" , & fmt_text_b }
 ,{ "dotype,const" , & fmt_text_b }
 ,{ "S" , & fmt_text_b }
 ,{ "src[])" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "\"cast\"" }
 ,{ "constructor," }
 ,{ "src" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "length" }
 ,{ "dotype.getLen()" , & fmt_text_b }
 ,{ "," }
 ,{ "its" }
 ,{ "members" }
 ,{ "are" }
 ,{ "casted" }
 ,{ "memberwise." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "DynArray(DoSwap" , & fmt_text_b }
 ,{ "dotype,T" , & fmt_text_b }
 ,{ "objs[])" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "\"swap" }
 ,{ "move\"" }
 ,{ "approach." }
 ,{ "I.e." }
 ,{ "new" }
 ,{ "elements" }
 ,{ "are" }
 ,{ "created" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "swapped" }
 ,{ "with" }
 ,{ "members" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "objs" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "DynArray(DoCreate" , & fmt_text_b }
 ,{ "dotype,CreatorType<T>" , & fmt_text_b }
 ,{ "creator)" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "create" }
 ,{ "new" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "DynArray(DoBuildType,BuilderType<T>" , & fmt_text_b }
 ,{ "builder)" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Builder" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "create" }
 ,{ "new" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "DynArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "Range" }
 ,{ "access" }
 ,{ "and" }
 ,{ "index" }
 ,{ "access" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "standard." }
 ,{ "Two" }
 ,{ "additional" }
 ,{ "methods" }
 ,{ "report" }
 ,{ "memory" }
 ,{ "allocation." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "getMaxLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "array" }
 ,{ "length" }
 ,{ "(in" }
 ,{ "objects)." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "getExtraLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "extra" }
 ,{ "space" }
 ,{ "available" }
 ,{ "(in" }
 ,{ "objects)." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "isEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "notEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "cloneTo()" , & fmt_text_b }
 ,{ "clones" }
 ,{ "the" }
 ,{ "array." }
 ,{ "The" }
 ,{ "reserved" }
 ,{ "length" }
 ,{ "is" }
 ,{ "also" }
 ,{ "preserved." }
 ,{ "The" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "copyable." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "reserve()" , & fmt_text_b }
 ,{ "reserves" }
 ,{ "the" }
 ,{ "space" }
 ,{ "for" }
 ,{ "extra_len" , & fmt_text_b }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "erase()" , & fmt_text_b }
 ,{ "erases" }
 ,{ "the" }
 ,{ "array," }
 ,{ "it" }
 ,{ "gets" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state," }
 ,{ "with" }
 ,{ "no" }
 ,{ "objects" }
 ,{ "and" }
 ,{ "no" }
 ,{ "memory" }
 ,{ "allocated." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "shrink()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "last" }
 ,{ "up" }
 ,{ "to" }
 ,{ "delta_len" , & fmt_text_b }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "shrink_one()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "(if" }
 ,{ "any)." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "is" }
 ,{ "destroyed," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "shrink_all()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "all" }
 ,{ "array" }
 ,{ "elements." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "These" }
 ,{ "three" }
 ,{ "methods" }
 ,{ "doesn't" }
 ,{ "change" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "array" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "shrink_extra()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "returning" }
 ,{ "the" }
 ,{ "extra" }
 ,{ "memory" }
 ,{ "to" }
 ,{ "the" }
 ,{ "heap." }
 ,{ "After" }
 ,{ "this" }
 ,{ "method" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "array" }
 ,{ "length" }
 ,{ "becomes" }
 ,{ "equal" }
 ,{ "to" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "shrink_reserve(ulen" , & fmt_text_b }
 ,{ "maxlen)" , & fmt_text_b }
 ,{ "may" }
 ,{ "shrink" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements." }
 ,{ "It" }
 ,{ "gives" }
 ,{ "a" }
 ,{ "more" }
 ,{ "precise" }
 ,{ "control" }
 ,{ "over" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "memory." }
 ,{ "It" }
 ,{ "works" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "following" }
 ,{ "natural" }
 ,{ "condition" }
 ,{ "satisfied:" }
 ,{ "maxlen<getMaxLen()" , & fmt_text_b }
 ,{ "and" }
 ,{ "maxlen>=getLen()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "shrink_reserve()" , & fmt_text_b }
 ,{ "works" }
 ,{ "as" }
 ,{ "shrink_reserve(ulen" , & fmt_text_b }
 ,{ "maxlen)" , & fmt_text_b }
 ,{ "with" }
 ,{ "maxlen" , & fmt_text_b }
 ,{ "equals" }
 ,{ "\"double" }
 ,{ "size\"" }
 ,{ "of" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "array" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "extend...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "methods," }
 ,{ "which" }
 ,{ "extends" }
 ,{ "the" }
 ,{ "array" }
 ,{ "with" }
 ,{ "number" }
 ,{ "elements." }
 ,{ "They" }
 ,{ "differ" }
 ,{ "in" }
 ,{ "element" }
 ,{ "construction" }
 ,{ "ways." }
 ,{ "All" }
 ,{ "of" }
 ,{ "them," }
 ,{ "except" }
 ,{ "the" }
 ,{ "last," }
 ,{ "has" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "delta_len" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "new" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "these" }
 ,{ "new" }
 ,{ "elements." }
 ,{ "extend...()" , & fmt_text_b }
 ,{ "are" }
 ,{ "transactional," }
 ,{ "i.e." }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "has" }
 ,{ "failed," }
 ,{ "then" }
 ,{ "the" }
 ,{ "array" }
 ,{ "remains" }
 ,{ "in" }
 ,{ "the" }
 ,{ "original" }
 ,{ "state," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "extend_raw()" , & fmt_text_b }
 ,{ "for" }
 ,{ "POD" }
 ,{ "types" }
 ,{ "leaves" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "uninitialized." }
 ,{ "For" }
 ,{ "other" }
 ,{ "types" }
 ,{ "it" }
 ,{ "works" }
 ,{ "like" }
 ,{ "extend_default()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "extend_default()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "extend_fill()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "some" }
 ,{ "constructor," }
 ,{ "the" }
 ,{ "specified" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "this" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "extend_copy()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "constructor," }
 ,{ "src" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "length" }
 ,{ "delta_len" , & fmt_text_b }
 ,{ "," }
 ,{ "its" }
 ,{ "members" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "memberwise." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "extend_cast()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "\"cast\"" }
 ,{ "constructor," }
 ,{ "src" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "length" }
 ,{ "delta_len" , & fmt_text_b }
 ,{ "," }
 ,{ "its" }
 ,{ "members" }
 ,{ "are" }
 ,{ "casted" }
 ,{ "memberwise." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "extend_swap()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "new" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "\"swap" }
 ,{ "move\"" }
 ,{ "approach." }
 ,{ "I.e." }
 ,{ "new" }
 ,{ "elements" }
 ,{ "are" }
 ,{ "created" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "swapped" }
 ,{ "with" }
 ,{ "members" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "objs" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "Two" }
 ,{ "final" }
 ,{ "extend()" , & fmt_text_b }
 ,{ "are" }
 ,{ "generic." }
 ,{ "The" }
 ,{ "first" }
 ,{ "of" }
 ,{ "them" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "create" }
 ,{ "new" }
 ,{ "elements," }
 ,{ "and" }
 ,{ "the" }
 ,{ "second" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "Builder" , & fmt_text_b }
 ,{ "." }
 ,{ "See" }
 ,{ "below" , & fmt_text_a , & link_Creator }
 ,{ "explanations" }
 ,{ "about" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "s" }
 ,{ "and" }
 ,{ "Builder" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "append...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "append" }
 ,{ "one" }
 ,{ "element" }
 ,{ "to" }
 ,{ "the" }
 ,{ "array." }
 ,{ "They" }
 ,{ "are" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "extend...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "and" }
 ,{ "do" }
 ,{ "exactly" }
 ,{ "the" }
 ,{ "same" }
 ,{ "with" }
 ,{ "delta_len" , & fmt_text_b }
 ,{ "equals" }
 ,{ "1." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "created" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "apply...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "are" }
 ,{ "standard." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "DynArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Link link_RefArray = { & page , { 73 } } ;

Text b73 = { {
 { "RefArray" }
 ,{ "and" }
 ,{ "AtomicRefArray" }
} , & fmt_h4 , & align_h4 } ;

Text b74 = { {
 { "RefArray" , & fmt_text_b }
 ,{ "and" }
 ,{ "AtomicRefArray" , & fmt_text_b }
 ,{ "are" }
 ,{ "copyable" }
 ,{ "arrays" }
 ,{ "with" }
 ,{ "efficient" }
 ,{ "copy" }
 ,{ "constructors." }
 ,{ "It's" }
 ,{ "assumed," }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "copyable." }
 ,{ "Multiple" }
 ,{ "copies" }
 ,{ "of" }
 ,{ "arrays" }
 ,{ "may" }
 ,{ "share" }
 ,{ "the" }
 ,{ "same" }
 ,{ "state." }
 ,{ "The" }
 ,{ "state" }
 ,{ "has" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "counter," }
 ,{ "which" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "end" }
 ,{ "its" }
 ,{ "life-time." }
 ,{ "The" }
 ,{ "only" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "RefArray" , & fmt_text_b }
 ,{ "and" }
 ,{ "AtomicRefArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "former" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "reference" }
 ,{ "counting" }
 ,{ "to" }
 ,{ "be" }
 ,{ "viable" }
 ,{ "in" }
 ,{ "a" }
 ,{ "multi-threaded" }
 ,{ "environment." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "RefArray" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "simulated" }
 ,{ "value" }
 ,{ "semantic." }
 ,{ "It" }
 ,{ "means," }
 ,{ "that" }
 ,{ "you" }
 ,{ "may" }
 ,{ "consider" }
 ,{ "different" }
 ,{ "copies" }
 ,{ "of" }
 ,{ "an" }
 ,{ "array" }
 ,{ "as" }
 ,{ "independent" }
 ,{ "variables," }
 ,{ "despite" }
 ,{ "they" }
 ,{ "may" }
 ,{ "share" }
 ,{ "the" }
 ,{ "state." }
 ,{ "That" }
 ,{ "is" }
 ,{ "because" }
 ,{ "RefArray" , & fmt_text_b }
 ,{ "provides" }
 ,{ "only" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "access" }
 ,{ "to" }
 ,{ "elements." }
 ,{ "So" }
 ,{ "far" }
 ,{ "you" }
 ,{ "don't" }
 ,{ "violate" }
 ,{ "this" }
 ,{ "constantness" }
 ,{ "(using" }
 ,{ "the" }
 ,{ "const-cast," }
 ,{ "for" }
 ,{ "example)," }
 ,{ "you" }
 ,{ "may" }
 ,{ "safely" }
 ,{ "assume" }
 ,{ "that" }
 ,{ "each" }
 ,{ "copy" }
 ,{ "is" }
 ,{ "different." }
 ,{ "To" }
 ,{ "modify" }
 ,{ "the" }
 ,{ "array" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "modify()" , & fmt_text_b }
 ,{ "(or" }
 ,{ "modifyReverse()" , & fmt_text_b }
 ,{ ")." }
 ,{ "This" }
 ,{ "method" }
 ,{ "\"unshares\"" }
 ,{ "the" }
 ,{ "array," }
 ,{ "if" }
 ,{ "necessary," }
 ,{ "and" }
 ,{ "gives" }
 ,{ "a" }
 ,{ "non-constant" }
 ,{ "access" }
 ,{ "to" }
 ,{ "elements." }
 ,{ "modifyReverse()" , & fmt_text_b }
 ,{ "is" }
 ,{ "doing" }
 ,{ "the" }
 ,{ "same" }
 ,{ "thing" }
 ,{ "as" }
 ,{ "modify()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "gives" }
 ,{ "a" }
 ,{ "\"reversed\"" }
 ,{ "range" }
 ,{ "of" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "The" }
 ,{ "RefArray" , & fmt_text_b }
 ,{ "methods" }
 ,{ "are" }
 ,{ "mostly" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "DynArray" , & fmt_text_b }
 ,{ "methods." }
 ,{ "The" }
 ,{ "differences" }
 ,{ "are:" }
 ,{ "index" }
 ,{ "and" }
 ,{ "range" }
 ,{ "access" }
 ,{ "methods" }
 ,{ "gives" }
 ,{ "only" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "access," }
 ,{ "and" }
 ,{ "new" }
 ,{ "class-specific" }
 ,{ "methods" }
 ,{ "modify()" , & fmt_text_b }
 ,{ "and" }
 ,{ "modifyReverse()" , & fmt_text_b }
 ,{ "exist." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "apply_modify()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor," }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "array" }
 ,{ "is" }
 ,{ "unshared" }
 ,{ "first." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "applyReverse_modify()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor," }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order." }
 ,{ "The" }
 ,{ "array" }
 ,{ "is" }
 ,{ "unshared" }
 ,{ "first." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "apply()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor," }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "applyReverse()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor," }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "AtomicRefArray" , & fmt_text_b }
 ,{ "methods" }
 ,{ "shrink_extra()" , & fmt_text_b }
 ,{ "and" }
 ,{ "shrink_reserve()" , & fmt_text_b }
 ,{ "are" }
 ,{ "not" }
 ,{ "working," }
 ,{ "if" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "shared." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "AtomicRefArray" , & fmt_text_b }
 ,{ "has" }
 ,{ "an" }
 ,{ "extra" }
 ,{ "special" }
 ,{ "constructor" }
} , & fmt_text , & align_text } ;

Text b83 = { {
 { "This" }
 ,{ "constructor" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "static" }
 ,{ "AtomicRefArray" , & fmt_text_b }
 ,{ "with" }
 ,{ "unlimited" }
 ,{ "life-time." }
 ,{ "The" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "have" }
 ,{ "a" }
 ,{ "trivial" }
 ,{ "destructor," }
 ,{ "however." }
 ,{ "You" }
 ,{ "must" }
 ,{ "supply" }
 ,{ "a" }
 ,{ "statically" }
 ,{ "allocated" }
 ,{ "memory," }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "proper" }
 ,{ "size." }
 ,{ "You" }
 ,{ "also" }
 ,{ "must" }
 ,{ "supply" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "(>0)" }
 ,{ "and" }
 ,{ "an" }
 ,{ "intializer" }
 ,{ "list." }
 ,{ "To" }
 ,{ "calculate" }
 ,{ "the" }
 ,{ "required" }
 ,{ "memory" }
 ,{ "size" }
 ,{ "use" }
 ,{ "the" }
 ,{ "meta" }
 ,{ "constant" }
 ,{ "StaticMemLen" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "object" }
 ,{ "state," }
 ,{ "created" }
 ,{ "with" }
 ,{ "this" }
 ,{ "constructor," }
 ,{ "lives" }
 ,{ "forever" }
 ,{ "and" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "object" }
 ,{ "array," }
 ,{ "initialized" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "intializer" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "Collector" }
} , & fmt_h4 , & align_h4 } ;

Text b85 = { {
 { "Collector" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "an" }
 ,{ "array!" }
 ,{ "The" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "this" }
 ,{ "container" }
 ,{ "is" }
 ,{ "to" }
 ,{ "be" }
 ,{ "an" }
 ,{ "efficient" }
 ,{ "collector" }
 ,{ "of" }
 ,{ "elements." }
 ,{ "This" }
 ,{ "container" }
 ,{ "stores" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "arrays." }
 ,{ "So" }
 ,{ "appending" }
 ,{ "and" }
 ,{ "extending" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "the" }
 ,{ "most" }
 ,{ "efficient." }
 ,{ "At" }
 ,{ "desired" }
 ,{ "moment" }
 ,{ "you" }
 ,{ "can" }
 ,{ "copy" }
 ,{ "or" }
 ,{ "move" }
 ,{ "this" }
 ,{ "sequence" }
 ,{ "into" }
 ,{ "true" }
 ,{ "array." }
 ,{ "Or" }
 ,{ "you" }
 ,{ "can" }
 ,{ "\"flat\"" }
 ,{ "the" }
 ,{ "Collector" , & fmt_text_b }
 ,{ "itself." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "The" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Collector" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "the" }
 ,{ "single" }
 ,{ "element" }
 ,{ "block." }
 ,{ "The" }
 ,{ "default" }
 ,{ "value" }
 ,{ "is" }
 ,{ "1024." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "Collector" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "Collector" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "direct" }
 ,{ "access" }
 ,{ "to" }
 ,{ "its" }
 ,{ "content." }
} , & fmt_text , & align_text } ;

Text b89 = { {
 { "isEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b90 = { {
 { "notEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "array" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b91 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "collected" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b92 = { {
 { "erase()" , & fmt_text_b }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "container" }
 ,{ "and" }
 ,{ "put" }
 ,{ "it" }
 ,{ "into" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b93 = { {
 { "extractTo()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "the" }
 ,{ "content" }
 ,{ "to" }
 ,{ "another" }
 ,{ "(array)" }
 ,{ "container." }
 ,{ "The" }
 ,{ "target" }
 ,{ "container" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "Build" , & fmt_text_b }
 ,{ "constructor." }
 ,{ "Collector" , & fmt_text_b }
 ,{ "becomes" }
 ,{ "empty" }
 ,{ "after" }
 ,{ "this" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b94 = { {
 { "copyTo()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "the" }
 ,{ "content" }
 ,{ "to" }
 ,{ "another" }
 ,{ "(array)" }
 ,{ "container." }
 ,{ "The" }
 ,{ "target" }
 ,{ "container" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "Build" , & fmt_text_b }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b95 = { {
 { "flat()" , & fmt_text_b }
 ,{ "rebuilds" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "data" }
 ,{ "storage," }
 ,{ "making" }
 ,{ "it" }
 ,{ "continuous." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "elements." }
 ,{ "This" }
 ,{ "range" }
 ,{ "remains" }
 ,{ "valid" }
 ,{ "after" }
 ,{ "extend" }
 ,{ "or" }
 ,{ "append" }
 ,{ "operations" }
 ,{ "(but" }
 ,{ "may" }
 ,{ "become" }
 ,{ "invalid" }
 ,{ "after" }
 ,{ "any" }
 ,{ "other" }
 ,{ "modifying" }
 ,{ "operations)." }
} , & fmt_text , & align_text } ;

Text b96 = { {
 { "shrink...()" , & fmt_text_b }
 ,{ "," }
 ,{ "extend...()" , & fmt_text_b }
 ,{ "and" }
 ,{ "append...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "for" }
 ,{ "DynArray" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b97 = { {
 { "Collector" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Link link_ArrayAlgo = { & page , { 98 } } ;

Text b98 = { {
 { "Array" }
 ,{ "algorithms" }
} , & fmt_h3 , & align_h3 } ;

Text b99 = { {
 { "CCore" , & fmt_text_b }
 ,{ "Array" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "Array" , & fmt_text_b }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s." }
 ,{ "The" }
 ,{ "default" }
 ,{ "package" }
 ,{ "is" }
 ,{ "the" }
 ,{ "ArrayAlgo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b100 = { {
 { "The" }
 ,{ "exact" }
 ,{ "implementation" }
 ,{ "depends" }
 ,{ "on" }
 ,{ "the" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b101 = { {
 { "If" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "ArrayAlgoType" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "this" }
 ,{ "type" }
 ,{ "will" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "package." }
} , & fmt_text , & align_text } ;

Text b102 = { {
 { "Otherwise" }
 ,{ "there" }
 ,{ "are" }
 ,{ "two" }
 ,{ "variants:" }
 ,{ "one" }
 ,{ "for" }
 ,{ "the" }
 ,{ "POD" }
 ,{ "types," }
 ,{ "another" }
 ,{ "for" }
 ,{ "the" }
 ,{ "other" }
 ,{ "(class)" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b103 = { {
 { "ArrayAlgo_class" }
} , & fmt_h4 , & align_h4 } ;

Text b104 = { {
 { "ArrayAlgo_class" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "generic" }
 ,{ "(class)" }
 ,{ "variant." }
 ,{ "The" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "Flags" , & fmt_text_b }
 ,{ "provides" }
 ,{ "two" }
 ,{ "flags:" }
 ,{ "Default_no_throw" , & fmt_text_b }
 ,{ "and" }
 ,{ "Copy_no_throw" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "constructor" }
 ,{ "(default" }
 ,{ "or" }
 ,{ "copy)" }
 ,{ "is" }
 ,{ "no-throw" , & fmt_text_b }
 ,{ "or" }
 ,{ "does" }
 ,{ "not" }
 ,{ "exist." }
 ,{ "It's" }
 ,{ "an" }
 ,{ "obligation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class." }
 ,{ "The" }
 ,{ "flag" }
 ,{ "MoveTo_exist" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "for" }
 ,{ "replaceable" }
 ,{ "types." }
 ,{ "For" }
 ,{ "such" }
 ,{ "types" }
 ,{ "an" }
 ,{ "array" }
 ,{ "can" }
 ,{ "grow" }
 ,{ "above" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b105 = { {
 { "The" }
 ,{ "package" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "members." }
} , & fmt_text , & align_text } ;

Text b106 = { {
 { "Flags" }
 ,{ "Default_no_throw" , & fmt_text_b }
 ,{ "and" }
 ,{ "Copy_no_throw" , & fmt_text_b }
 ,{ "are" }
 ,{ "copied" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Flags" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b107 = { {
 { "Flag" }
 ,{ "MoveTo_exist" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "for" }
 ,{ "replaceable" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b108 = { {
 { "Create_...()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place." }
 ,{ "To" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object," }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "called." }
 ,{ "Objects" }
 ,{ "are" }
 ,{ "created" }
 ,{ "in" }
 ,{ "the" }
 ,{ "ascending" }
 ,{ "order." }
 ,{ "If" }
 ,{ "some" }
 ,{ "constructor" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "then" }
 ,{ "the" }
 ,{ "previously" }
 ,{ "constructed" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "destroyed" }
 ,{ "and" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "propagated." }
 ,{ "The" }
 ,{ "range" }
 ,{ "of" }
 ,{ "the" }
 ,{ "created" }
 ,{ "objects" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "first" }
 ,{ "two" }
 ,{ "arguments" }
 ,{ "are:" }
 ,{ "the" }
 ,{ "place" }
 ,{ "to" }
 ,{ "construct" }
 ,{ "and" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "to" }
 ,{ "construct." }
 ,{ "The" }
 ,{ "place" }
 ,{ "must" }
 ,{ "be" }
 ,{ "properly" }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "space" }
 ,{ "must" }
 ,{ "be" }
 ,{ "large" }
 ,{ "enough" }
 ,{ "to" }
 ,{ "contain" }
 ,{ "the" }
 ,{ "required" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b109 = { {
 { "Create_raw()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Create_default()" , & fmt_text_b }
 ,{ "use" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b110 = { {
 { "Create_fill()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "arguments" }
 ,{ "for" }
 ,{ "each" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b111 = { {
 { "Create_copy()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "constructor." }
 ,{ "The" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "memberwise" }
 ,{ "selected" }
 ,{ "from" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b112 = { {
 { "Create_cast()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "\"cast\"" }
 ,{ "constructor." }
 ,{ "The" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "memberwise" }
 ,{ "selected" }
 ,{ "from" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b113 = { {
 { "Create_swap()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "swap" }
 ,{ "operation" }
 ,{ "to" }
 ,{ "create" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "arguments" }
 ,{ "for" }
 ,{ "the" }
 ,{ "swap" }
 ,{ "are" }
 ,{ "memberwise" }
 ,{ "selected" }
 ,{ "from" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b114 = { {
 { "The" }
 ,{ "single" }
 ,{ "Create_swap()" , & fmt_text_b }
 ,{ "function" }
 ,{ "\"creates-swap\"" }
 ,{ "a" }
 ,{ "single" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b115 = { {
 { "ProvideLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reallocate" }
 ,{ "an" }
 ,{ "array." }
 ,{ "It" }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "sufficient" }
 ,{ "memory" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "array." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length," }
 ,{ "the" }
 ,{ "extra_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "extra" }
 ,{ "objects" }
 ,{ "to" }
 ,{ "be" }
 ,{ "constructed," }
 ,{ "the" }
 ,{ "maxlen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "length." }
 ,{ "The" }
 ,{ "length" }
 ,{ "returned" }
 ,{ "is" }
 ,{ "sufficient" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "array" }
 ,{ "and" }
 ,{ "at" }
 ,{ "least" }
 ,{ "double" }
 ,{ "of" }
 ,{ "the" }
 ,{ "maxlen" , & fmt_text_b }
 ,{ "." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "overflow." }
} , & fmt_text , & align_text } ;

Text b116 = { {
 { "MoveTo()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "to" }
 ,{ "a" }
 ,{ "new" }
 ,{ "place." }
 ,{ "The" }
 ,{ "old" }
 ,{ "place" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "memory." }
 ,{ "The" }
 ,{ "range" }
 ,{ "of" }
 ,{ "new" }
 ,{ "objects" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b117 = { {
 { "Other" }
 ,{ "members" }
 ,{ "are" }
 ,{ "inherited" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ArrayAlgoBase<T>" , & fmt_text_a , & link_ArrayAlgoBase }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b118 = { {
 { "ArrayAlgo_pod" }
} , & fmt_h4 , & align_h4 } ;

Text b119 = { {
 { "ArrayAlgo_pod" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "POD" }
 ,{ "variant." }
} , & fmt_text , & align_text } ;

Text b120 = { {
 { "Flags" }
 ,{ "Default_no_throw" , & fmt_text_b }
 ,{ "," }
 ,{ "Copy_no_throw" , & fmt_text_b }
 ,{ "and" }
 ,{ "MoveTo_exist" , & fmt_text_b }
 ,{ "are" }
 ,{ "all" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b121 = { {
 { "Create_raw()" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "using" }
 ,{ "default" }
 ,{ "initialization." }
 ,{ "It" }
 ,{ "leaves" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "uninitialized." }
} , & fmt_text , & align_text } ;

Text b122 = { {
 { "Other" }
 ,{ "members" }
 ,{ "are" }
 ,{ "inherited" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ArrayAlgoBase_nodtor<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b123 = { {
 { "ArrayAlgo_mini" }
} , & fmt_h4 , & align_h4 } ;

Text b124 = { {
 { "ArrayAlgo_mini" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "mini" }
 ,{ "variant" }
 ,{ "without" }
 ,{ "object" }
 ,{ "moving." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "only," }
 ,{ "that" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "~T()" , & fmt_text_b }
 ,{ "is" }
 ,{ "no-throw" , & fmt_text_b }
 ,{ "." }
 ,{ "Swap" }
 ,{ "and" }
 ,{ "move" }
 ,{ "are" }
 ,{ "not" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b125 = { {
 { "The" }
 ,{ "flag" }
 ,{ "MoveTo_exist" , & fmt_text_b }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b126 = { {
 { "Other" }
 ,{ "members" }
 ,{ "are" }
 ,{ "inherited" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ArrayAlgoBase<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b127 = { {
 { "The" }
 ,{ "following" }
 ,{ "functions:" }
 ,{ "Create_swap()" , & fmt_text_b }
 ,{ "," }
 ,{ "ProvideLen()" , & fmt_text_b }
 ,{ "," }
 ,{ "MoveTo()" , & fmt_text_b }
 ,{ "are" }
 ,{ "omitted." }
 ,{ "Array," }
 ,{ "constructed" }
 ,{ "with" }
 ,{ "this" }
 ,{ "algorithm" }
 ,{ "package," }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "extended" }
 ,{ "beyond" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b128 = { {
 { "To" }
 ,{ "use" }
 ,{ "this" }
 ,{ "package" }
 ,{ "with" }
 ,{ "the" }
 ,{ "DynArray" , & fmt_text_b }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Link link_ArrayAlgoBase = { & page , { 129 } } ;

Text b129 = { {
 { "ArrayAlgoBase" }
} , & fmt_h4 , & align_h4 } ;

Text b130 = { {
 { "ArrayAlgoBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "common" }
 ,{ "package" }
 ,{ "for" }
 ,{ "all" }
 ,{ "ArrayAlgo" , & fmt_text_b }
 ,{ "s." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "variants:" }
 ,{ "common" }
 ,{ "and" }
 ,{ "specialized" }
 ,{ "ArrayAlgoBase_nodtor" , & fmt_text_b }
 ,{ "for" }
 ,{ "types" }
 ,{ "with" }
 ,{ "the" }
 ,{ "trivial" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Text b131 = { {
 { "Create()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "creator" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "creation." }
 ,{ "See" }
 ,{ "below" , & fmt_text_a , & link_Creator }
 ,{ "about" }
 ,{ "creators." }
} , & fmt_text , & align_text } ;

Text b132 = { {
 { "Single" }
 ,{ "Destroy()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "object" }
 ,{ "(but" }
 ,{ "don't" }
 ,{ "free" }
 ,{ "the" }
 ,{ "memory)." }
} , & fmt_text , & align_text } ;

Text b133 = { {
 { "Range" }
 ,{ "Destroy()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b134 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "inner" }
 ,{ "\"guard\"" }
 ,{ "classes." }
 ,{ "They" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "created" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "Guards" }
 ,{ "are" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "destruction" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "failure." }
} , & fmt_text , & align_text } ;

Text b135 = { {
 { "BuildGuard" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "place" }
 ,{ "for" }
 ,{ "the" }
 ,{ "range." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "properly" }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "space" }
 ,{ "must" }
 ,{ "be" }
 ,{ "large" }
 ,{ "enough" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b136 = { {
 { "at()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "current" }
 ,{ "place" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "creation." }
} , & fmt_text , & align_text } ;

Text b137 = { {
 { "operator" , & fmt_text_b }
 ,{ "++" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "after" }
 ,{ "the" }
 ,{ "successful" }
 ,{ "creation" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position," }
 ,{ "it" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "object" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b138 = { {
 { "disarm()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "after" }
 ,{ "the" }
 ,{ "desired" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "created." }
 ,{ "It" }
 ,{ "\"disarms\"" }
 ,{ "the" }
 ,{ "guard" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "created" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b139 = { {
 { "The" }
 ,{ "BuildGuard" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "created" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "disarmed" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "the" }
 ,{ "destruction." }
} , & fmt_text , & align_text } ;

Text b140 = { {
 { "CreateGuard" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "creation" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
 ,{ "Constructor's" }
 ,{ "arguments" }
 ,{ "are:" }
 ,{ "the" }
 ,{ "place" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "and" }
 ,{ "the" }
 ,{ "final" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "remaining" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "for" }
 ,{ "BuildGuard" , & fmt_text_b }
 ,{ "." }
 ,{ "Using" }
 ,{ "CreateGuard" , & fmt_text_b }
 ,{ "you" }
 ,{ "must" }
 ,{ "create" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b141 = { {
 { "CreateGuard_nothrow" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"no-throw\"" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CreateGuard" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "creation" }
 ,{ "of" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length," }
 ,{ "if" }
 ,{ "there" }
 ,{ "will" }
 ,{ "be" }
 ,{ "no" }
 ,{ "exceptions" }
 ,{ "during" }
 ,{ "the" }
 ,{ "objects" }
 ,{ "construction." }
} , & fmt_text , & align_text } ;

Text b142 = { {
 { "CreateGuardNoThrow" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CreateGuard" , & fmt_text_b }
 ,{ "and" }
 ,{ "CreateGuard_nothrow" , & fmt_text_b }
 ,{ "," }
 ,{ "depending" }
 ,{ "on" }
 ,{ "the" }
 ,{ "no_throw" , & fmt_text_b }
 ,{ "template" }
 ,{ "parameter." }
} , & fmt_text , & align_text } ;

Text b143 = { {
 { "Below" }
 ,{ "is" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "generic" }
 ,{ "Create" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "CreateGuardNoThrow" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b144 = { {
 { "ArrayAlgoBase_nodtor<T>" , & fmt_text_b }
 ,{ "provides" }
 ,{ "the" }
 ,{ "same" }
 ,{ "set" }
 ,{ "of" }
 ,{ "algorithms," }
 ,{ "but" }
 ,{ "implemented" }
 ,{ "with" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "destructor" }
 ,{ "triviality." }
} , & fmt_text , & align_text } ;

Link link_Creator = { & page , { 145 } } ;

Text b145 = { {
 { "Creators" }
 ,{ "and" }
 ,{ "Builders" }
} , & fmt_h4 , & align_h4 } ;

Text b146 = { {
 { "Creator" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor," }
 ,{ "creating" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b147 = { {
 { "Or" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b148 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "a" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "in" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "array" }
 ,{ "\"Creator\"" }
 ,{ "constructors" }
 ,{ "and" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Link link_Builder = { & page , { 149 } } ;

Text b149 = { {
 { "Builder" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor," }
 ,{ "creating" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b150 = { {
 { "Or" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b151 = { {
 { "Builder" , & fmt_text_b }
 ,{ "reports" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "object" }
 ,{ "number" }
 ,{ "it" }
 ,{ "will" }
 ,{ "create" }
 ,{ "through" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "place" }
 ,{ "for" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "getLen()" , & fmt_text_b }
 ,{ "elements," }
 ,{ "it" }
 ,{ "either" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "up" }
 ,{ "to" }
 ,{ "this" }
 ,{ "length" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "it," }
 ,{ "or" }
 ,{ "leaves" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "raw" }
 ,{ "and" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception." }
} , & fmt_text , & align_text } ;

Text b152 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "a" }
 ,{ "Builder" , & fmt_text_b }
 ,{ "in" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "array" }
 ,{ "\"Builder\"" }
 ,{ "constructors" }
 ,{ "and" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b153 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "concepts" }
 ,{ "for" }
 ,{ "creators" }
 ,{ "and" }
 ,{ "builders:" }
} , & fmt_text , & align_text } ;

Text b154 = { {
 { "Standard" }
 ,{ "creators" }
} , & fmt_h4 , & align_h4 } ;

Text b155 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "standard" }
 ,{ "creators." }
} , & fmt_text , & align_text } ;

Text b156 = { {
 { "Memory" }
 ,{ "management" }
} , & fmt_h4 , & align_h4 } ;

Text b157 = { {
 { "All" }
 ,{ "default" }
 ,{ "algorithm" }
 ,{ "packages" }
 ,{ "inherit" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class" }
 ,{ "ArrayAlgoMemBase" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b158 = { {
 { "This" }
 ,{ "class" }
 ,{ "defines" }
 ,{ "default" }
 ,{ "memory-management" }
 ,{ "functions," }
 ,{ "used" }
 ,{ "by" }
 ,{ "arrays" }
 ,{ "to" }
 ,{ "allocate," }
 ,{ "extend," }
 ,{ "shrink" }
 ,{ "and" }
 ,{ "release" }
 ,{ "memory" }
 ,{ "blocks." }
 ,{ "If" }
 ,{ "you" }
 ,{ "define" }
 ,{ "a" }
 ,{ "custom" }
 ,{ "algorithm" }
 ,{ "package" }
 ,{ "for" }
 ,{ "your" }
 ,{ "purpose," }
 ,{ "you" }
 ,{ "may" }
 ,{ "define" }
 ,{ "custom" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "semantic." }
} , & fmt_text , & align_text } ;

Text b159 = { {
 { "MemAlloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "of" }
 ,{ "the" }
 ,{ "required" }
 ,{ "length." }
 ,{ "The" }
 ,{ "block" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b160 = { {
 { "MemFree()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "The" }
 ,{ "function" }
 ,{ "is" }
 ,{ "never" }
 ,{ "called" }
 ,{ "with" }
 ,{ "the" }
 ,{ "null" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b161 = { {
 { "MemExtend()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "length" }
 ,{ "to" }
 ,{ "be" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument." }
 ,{ "If" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "attempt" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b162 = { {
 { "MemShrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "length" }
 ,{ "to" }
 ,{ "be" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "never" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b163 = { {
 { "Insert/Delete" }
 ,{ "algorithms" }
} , & fmt_h4 , & align_h4 } ;

Text b164 = { {
 { "Insert" }
 ,{ "or" }
 ,{ "delete" }
 ,{ "array" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "the" }
 ,{ "middle" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array" }
 ,{ "are" }
 ,{ "not" }
 ,{ "natural" }
 ,{ "array" }
 ,{ "methods." }
 ,{ "They" }
 ,{ "have" }
 ,{ "a" }
 ,{ "linear" }
 ,{ "complexity." }
 ,{ "But" }
 ,{ "sometimes" }
 ,{ "they" }
 ,{ "are" }
 ,{ "necessary." }
 ,{ "These" }
 ,{ "algorithms" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "as" }
 ,{ "free" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b165 = { {
 { "These" }
 ,{ "functions" }
 ,{ "delete" }
 ,{ "an" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "array" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
 ,{ "The" }
 ,{ "first" }
 ,{ "two" }
 ,{ "return" }
 ,{ "false" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "index" }
 ,{ "is" }
 ,{ "invalid." }
 ,{ "The" }
 ,{ "last" }
 ,{ "two" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "such" }
 ,{ "case." }
 ,{ "CopyDel" , & fmt_text_b }
 ,{ "copies" }
 ,{ "elements," }
 ,{ "SwapDel" , & fmt_text_b }
 ,{ "uses" }
 ,{ "swapping." }
} , & fmt_text , & align_text } ;

Text b166 = { {
 { "These" }
 ,{ "functions" }
 ,{ "delete" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "from" }
 ,{ "the" }
 ,{ "array." }
 ,{ "The" }
 ,{ "first" }
 ,{ "two" }
 ,{ "return" }
 ,{ "the" }
 ,{ "count" }
 ,{ "of" }
 ,{ "deleted" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "last" }
 ,{ "two" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "does" }
 ,{ "not" }
 ,{ "fit" }
 ,{ "the" }
 ,{ "array" }
 ,{ "range." }
 ,{ "CopyDel" , & fmt_text_b }
 ,{ "copies" }
 ,{ "elements," }
 ,{ "SwapDel" , & fmt_text_b }
 ,{ "uses" }
 ,{ "swapping." }
} , & fmt_text , & align_text } ;

Text b167 = { {
 { "These" }
 ,{ "functions" }
 ,{ "insert" }
 ,{ "an" }
 ,{ "element" }
 ,{ "to" }
 ,{ "the" }
 ,{ "array" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
 ,{ "The" }
 ,{ "valid" }
 ,{ "index" }
 ,{ "range" }
 ,{ "is" }
 ,{ "[0,len]" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length." }
 ,{ "The" }
 ,{ "first" }
 ,{ "two" }
 ,{ "cap" }
 ,{ "the" }
 ,{ "index" }
 ,{ "and" }
 ,{ "return" }
 ,{ "false" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "index" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "range." }
 ,{ "The" }
 ,{ "last" }
 ,{ "two" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "such" }
 ,{ "case." }
 ,{ "They" }
 ,{ "also" }
 ,{ "return" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "inserted" }
 ,{ "object." }
 ,{ "CopyIns" , & fmt_text_b }
 ,{ "copies" }
 ,{ "elements," }
 ,{ "SwapIns" , & fmt_text_b }
 ,{ "uses" }
 ,{ "swapping." }
 ,{ "Extra" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "call" }
 ,{ "an" }
 ,{ "element" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b168 = { {
 { "All" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "insert" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "into" }
 ,{ "the" }
 ,{ "array." }
 ,{ "ind" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "index" }
 ,{ "of" }
 ,{ "insertion." }
 ,{ "The" }
 ,{ "range" }
 ,{ "(as" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ ")" }
 ,{ "of" }
 ,{ "created" }
 ,{ "elements" }
 ,{ "if" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "ind" , & fmt_text_b }
 ,{ "exceeds" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length," }
 ,{ "elements" }
 ,{ "are" }
 ,{ "created" }
 ,{ "at" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array." }
} , & fmt_text , & align_text } ;

Text b169 = { {
 { "These" }
 ,{ "functions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"prepare\"" }
 ,{ "the" }
 ,{ "array" }
 ,{ "for" }
 ,{ "an" }
 ,{ "element" }
 ,{ "insertion." }
 ,{ "They" }
 ,{ "are" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "conjunction" }
 ,{ "of" }
 ,{ "insertion" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b170 = { {
 { "ArrayInsRangeGuard()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "ind" , & fmt_text_b }
 ,{ "exceeds" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b171 = { {
 { "ArrayInsRangeFill()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "array" }
 ,{ "if" }
 ,{ "ind" , & fmt_text_b }
 ,{ "exceeds" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length" }
 ,{ "to" }
 ,{ "equalize" }
 ,{ "them." }
 ,{ "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "reserves" }
 ,{ "additional" }
 ,{ "memory" }
 ,{ "behind" }
 ,{ "for" }
 ,{ "further" }
 ,{ "extension" }
 ,{ "by" }
 ,{ "count" , & fmt_text_b }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Page page = { "page_Arrays" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_text , outer_text , back_text }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
 ,{ & b89 , null , inner_text , outer_text , back_text }
 ,{ & b90 , null , inner_text , outer_text , back_text }
 ,{ & b91 , null , inner_text , outer_text , back_text }
 ,{ & b92 , null , inner_text , outer_text , back_text }
 ,{ & b93 , null , inner_text , outer_text , back_text }
 ,{ & b94 , null , inner_text , outer_text , back_text }
 ,{ & b95 , null , inner_text , outer_text , back_text }
 ,{ & b96 , null , inner_text , outer_text , back_text }
 ,{ & b97 , null , inner_text , outer_text , back_text }
 ,{ & b98 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b99 , null , inner_text , outer_text , back_text }
 ,{ & b100 , null , inner_text , outer_text , back_text }
 ,{ & b101 , null , inner_text , outer_text , back_text }
 ,{ & b102 , null , inner_text , outer_text , back_text }
 ,{ & b103 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b104 , null , inner_text , outer_text , back_text }
 ,{ & b105 , null , inner_text , outer_text , back_text }
 ,{ & b106 , null , inner_text , outer_text , back_text }
 ,{ & b107 , null , inner_text , outer_text , back_text }
 ,{ & b108 , null , inner_text , outer_text , back_text }
 ,{ & b109 , null , inner_text , outer_text , back_text }
 ,{ & b110 , null , inner_text , outer_text , back_text }
 ,{ & b111 , null , inner_text , outer_text , back_text }
 ,{ & b112 , null , inner_text , outer_text , back_text }
 ,{ & b113 , null , inner_text , outer_text , back_text }
 ,{ & b114 , null , inner_text , outer_text , back_text }
 ,{ & b115 , null , inner_text , outer_text , back_text }
 ,{ & b116 , null , inner_text , outer_text , back_text }
 ,{ & b117 , null , inner_text , outer_text , back_text }
 ,{ & b118 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b119 , null , inner_text , outer_text , back_text }
 ,{ & b120 , null , inner_text , outer_text , back_text }
 ,{ & b121 , null , inner_text , outer_text , back_text }
 ,{ & b122 , null , inner_text , outer_text , back_text }
 ,{ & b123 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b124 , null , inner_text , outer_text , back_text }
 ,{ & b125 , null , inner_text , outer_text , back_text }
 ,{ & b126 , null , inner_text , outer_text , back_text }
 ,{ & b127 , null , inner_text , outer_text , back_text }
 ,{ & b128 , null , inner_text , outer_text , back_text }
 ,{ & b129 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b130 , null , inner_text , outer_text , back_text }
 ,{ & b131 , null , inner_text , outer_text , back_text }
 ,{ & b132 , null , inner_text , outer_text , back_text }
 ,{ & b133 , null , inner_text , outer_text , back_text }
 ,{ & b134 , null , inner_text , outer_text , back_text }
 ,{ & b135 , null , inner_text , outer_text , back_text }
 ,{ & b136 , null , inner_text , outer_text , back_text }
 ,{ & b137 , null , inner_text , outer_text , back_text }
 ,{ & b138 , null , inner_text , outer_text , back_text }
 ,{ & b139 , null , inner_text , outer_text , back_text }
 ,{ & b140 , null , inner_text , outer_text , back_text }
 ,{ & b141 , null , inner_text , outer_text , back_text }
 ,{ & b142 , null , inner_text , outer_text , back_text }
 ,{ & b143 , null , inner_text , outer_text , back_text }
 ,{ & b144 , null , inner_text , outer_text , back_text }
 ,{ & b145 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b146 , null , inner_text , outer_text , back_text }
 ,{ & b147 , null , inner_text , outer_text , back_text }
 ,{ & b148 , null , inner_text , outer_text , back_text }
 ,{ & b149 , null , inner_text , outer_text , back_text }
 ,{ & b150 , null , inner_text , outer_text , back_text }
 ,{ & b151 , null , inner_text , outer_text , back_text }
 ,{ & b152 , null , inner_text , outer_text , back_text }
 ,{ & b153 , null , inner_text , outer_text , back_text }
 ,{ & b154 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b155 , null , inner_text , outer_text , back_text }
 ,{ & b156 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b157 , null , inner_text , outer_text , back_text }
 ,{ & b158 , null , inner_text , outer_text , back_text }
 ,{ & b159 , null , inner_text , outer_text , back_text }
 ,{ & b160 , null , inner_text , outer_text , back_text }
 ,{ & b161 , null , inner_text , outer_text , back_text }
 ,{ & b162 , null , inner_text , outer_text , back_text }
 ,{ & b163 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b164 , null , inner_text , outer_text , back_text }
 ,{ & b165 , null , inner_text , outer_text , back_text }
 ,{ & b166 , null , inner_text , outer_text , back_text }
 ,{ & b167 , null , inner_text , outer_text , back_text }
 ,{ & b168 , null , inner_text , outer_text , back_text }
 ,{ & b169 , null , inner_text , outer_text , back_text }
 ,{ & b170 , null , inner_text , outer_text , back_text }
 ,{ & b171 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AsyncBinaryFile {

Text b0 = { {
 { "AsyncBinaryFile" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AsyncBinaryFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AsyncBinaryFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "An" }
 ,{ "AsyncBinaryFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "serialization" , & fmt_text_a }
 ,{ "output" , & fmt_text_a }
 ,{ "device" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "puts" }
 ,{ "data" }
 ,{ "bytes" }
 ,{ "into" }
 ,{ "the" }
 ,{ "output" }
 ,{ "file." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PrintAsyncFile" , & fmt_text_a }
 ,{ "class," }
 ,{ "but" }
 ,{ "provides" }
 ,{ "binary" }
 ,{ "output" }
 ,{ "capabilities" }
 ,{ "rather" }
 ,{ "than" }
 ,{ "textual." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "AsyncFile" , & fmt_text_a }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "A" }
 ,{ "file" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "before" }
 ,{ "any" }
 ,{ "serialization" }
 ,{ "operation." }
 ,{ "You" }
 ,{ "can" }
 ,{ "do" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "file_name" , & fmt_text_b }
 ,{ "and" }
 ,{ "oflags" , & fmt_text_b }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "file" }
 ,{ "to" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "and" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "file" }
 ,{ "may" }
 ,{ "be" }
 ,{ "also" }
 ,{ "specified" }
 ,{ "using" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "device" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Destructor" }
 ,{ "completes" }
 ,{ "operations," }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file" }
 ,{ "and" }
 ,{ "reports" }
 ,{ "errors" }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "output" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "close()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "output" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "preserveFile()" , & fmt_text_b }
 ,{ "preserves" }
 ,{ "the" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "open" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "methods." }
 ,{ "Usually" }
 ,{ "they" }
 ,{ "are" }
 ,{ "not" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "flush()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Page page = { "page_AsyncBinaryFile" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AsyncFileClients {

Text b0 = { {
 { "AsyncFile" }
 ,{ "Clients" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AsyncFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AsyncFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/AsyncFileToMem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AsyncFileToMem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "\"client\"" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "files" }
 ,{ "and" }
 ,{ "performes" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "async" }
 ,{ "file" }
 ,{ "and" }
 ,{ "file" }
 ,{ "system" }
 ,{ "devices." }
} , & fmt_text , & align_text } ;

Link link_AsyncFile = { & page , { 4 } } ;

Text b4 = { {
 { "AsyncFile" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "AsyncFile" , & fmt_text_b }
 ,{ "can" }
 ,{ "perform" }
 ,{ "read/write" }
 ,{ "operation" }
 ,{ "on" }
 ,{ "a" }
 ,{ "file," }
 ,{ "using" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device." }
 ,{ "An" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "has" }
 ,{ "several" }
 ,{ "parameters," }
 ,{ "affecting" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "open()" , & fmt_text_b }
 ,{ "," }
 ,{ "getWritePacket()" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "final_timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "complete" }
 ,{ "all" }
 ,{ "pending" }
 ,{ "operations." }
 ,{ "By" }
 ,{ "default" }
 ,{ "it" }
 ,{ "equals" }
 ,{ "3*timeout" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "max_packets" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "number" }
 ,{ "of" }
 ,{ "executed" }
 ,{ "in" }
 ,{ "parallel" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "closed" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "parameters." }
 ,{ "The" }
 ,{ "second" }
 ,{ "and" }
 ,{ "third" }
 ,{ "constructors" }
 ,{ "open" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "setFinalTimeout()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "final_timeout" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value." }
 ,{ "By" }
 ,{ "default," }
 ,{ "constructors" }
 ,{ "set" }
 ,{ "this" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "triple" }
 ,{ "of" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "extended" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "the" }
 ,{ "completion" }
 ,{ "of" }
 ,{ "all" }
 ,{ "pending" }
 ,{ "operations" }
 ,{ "in" }
 ,{ "the" }
 ,{ "read_all()" , & fmt_text_b }
 ,{ "and" }
 ,{ "close()" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "the" }
 ,{ "file," }
 ,{ "if" }
 ,{ "it" }
 ,{ "was" }
 ,{ "not" }
 ,{ "opened." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "this" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
 ,{ "The" }
 ,{ "file" }
 ,{ "name" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given" }
 ,{ "as" }
 ,{ "the" }
 ,{ "single" }
 ,{ "argument" }
 ,{ "\"dev:path\"" }
 ,{ "or" }
 ,{ "as" }
 ,{ "two" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported" }
 ,{ "using" }
 ,{ "a" }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "Both" }
 ,{ "soft_close()" , & fmt_text_b }
 ,{ "and" }
 ,{ "close()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "time" }
 ,{ "to" }
 ,{ "complete," }
 ,{ "because" }
 ,{ "they" }
 ,{ "waits" }
 ,{ "for" }
 ,{ "completion" }
 ,{ "of" }
 ,{ "pending" }
 ,{ "operations" }
 ,{ "first," }
 ,{ "using" }
 ,{ "the" }
 ,{ "final_timeout" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "preserveFile()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "wait()" , & fmt_text_b }
 ,{ "functions" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "pending" }
 ,{ "operations" }
 ,{ "completion," }
 ,{ "then" }
 ,{ "cancel" }
 ,{ "remaining" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "completion." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "cancel_and_wait()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "all" }
 ,{ "pending" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "waits" }
 ,{ "for" }
 ,{ "completion." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "setLargeWriteLen()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "large_write_len" , & fmt_text_b }
 ,{ "parameters." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "larger" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "for" }
 ,{ "writing" }
 ,{ "if" }
 ,{ "the" }
 ,{ "target" }
 ,{ "device" }
 ,{ "accepts" }
 ,{ "packets" }
 ,{ "with" }
 ,{ "a" }
 ,{ "large" }
 ,{ "data" }
 ,{ "length." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "set," }
 ,{ "once" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "according" }
 ,{ "the" }
 ,{ "target" }
 ,{ "device" }
 ,{ "write" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "getWritePacket()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "for" }
 ,{ "a" }
 ,{ "write" }
 ,{ "operation." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "data" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "packet" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "and" }
 ,{ "buf" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "data" }
 ,{ "range" }
 ,{ "to" }
 ,{ "be" }
 ,{ "filled" }
 ,{ "with" }
 ,{ "data." }
 ,{ "This" }
 ,{ "methods" }
 ,{ "uses" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "to" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "becomes" }
 ,{ "available." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "write()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "a" }
 ,{ "write" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "packet" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "allocated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "getWritePacket()" , & fmt_text_b }
 ,{ "method." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "data," }
 ,{ "placed" }
 ,{ "into" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer," }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "getWritePacket()" , & fmt_text_b }
 ,{ "." }
 ,{ "off" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "offset" }
 ,{ "where" }
 ,{ "data" }
 ,{ "will" }
 ,{ "be" }
 ,{ "written." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "read_all()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "file." }
 ,{ "This" }
 ,{ "method" }
 ,{ "waits" }
 ,{ "first" }
 ,{ "for" }
 ,{ "all" }
 ,{ "pending" }
 ,{ "operation" }
 ,{ "completion," }
 ,{ "using" }
 ,{ "the" }
 ,{ "final_timeout" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "starts" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "read" }
 ,{ "operations" }
 ,{ "to" }
 ,{ "read" }
 ,{ "the" }
 ,{ "required" }
 ,{ "data." }
 ,{ "It" }
 ,{ "may" }
 ,{ "continue" }
 ,{ "a" }
 ,{ "long" }
 ,{ "time." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "getMaxReadLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "read" }
 ,{ "length" }
 ,{ "for" }
 ,{ "a" }
 ,{ "single" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "read()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "a" }
 ,{ "single" }
 ,{ "read" }
 ,{ "operation." }
 ,{ "len" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "getMaxReadLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "data" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved" }
 ,{ "in" }
 ,{ "the" }
 ,{ "complete_function" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Link link_AsyncFileSystem = { & page , { 24 } } ;

Text b24 = { {
 { "AsyncFileSystem" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "built" }
 ,{ "upon" }
 ,{ "the" }
 ,{ "Sys::AsyncFileSystem" , & fmt_text_b }
 ,{ "and" }
 ,{ "can" }
 ,{ "perform" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "system" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
 ,{ "dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name," }
 ,{ "timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "total" }
 ,{ "timeout" }
 ,{ "for" }
 ,{ "all" }
 ,{ "class" }
 ,{ "methods." }
 ,{ "The" }
 ,{ "last" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "should" }
 ,{ "have" }
 ,{ "its" }
 ,{ "default" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Non-static" }
 ,{ "class" }
 ,{ "methods" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "list" }
 ,{ "of" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "getFileList()" , & fmt_text_b }
 ,{ "and" }
 ,{ "exec2()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "an" }
 ,{ "external" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "open" }
 ,{ "a" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Static" }
 ,{ "methods" }
 ,{ "do" }
 ,{ "the" }
 ,{ "following:" }
 ,{ "they" }
 ,{ "split" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "(or" }
 ,{ "path)," }
 ,{ "create" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "AsyncFileSystem" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "use" }
 ,{ "it" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "If" }
 ,{ "several" }
 ,{ "file" }
 ,{ "names" }
 ,{ "are" }
 ,{ "involved" }
 ,{ "then" }
 ,{ "its" }
 ,{ "devices" }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "same." }
} , & fmt_text , & align_text } ;

Link link_AsyncFileToMem = { & page , { 29 } } ;

Text b29 = { {
 { "AsyncFileToMem" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "This" }
 ,{ "class" }
 ,{ "loads" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "from" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory." }
 ,{ "It" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "class" }
 ,{ "ToMemBase" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "four" }
 ,{ "arguments." }
 ,{ "It" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "The" }
 ,{ "constructor" }
 ,{ "execution" }
 ,{ "may" }
 ,{ "take" }
 ,{ "a" }
 ,{ "time." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "file_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "The" }
 ,{ "name" }
 ,{ "is" }
 ,{ "started" }
 ,{ "with" }
 ,{ "the" }
 ,{ "device" }
 ,{ "object" }
 ,{ "name." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "max_len" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "image" }
 ,{ "length," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "this" }
 ,{ "limit," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "propagated" }
 ,{ "to" }
 ,{ "the" }
 ,{ "class" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "as" }
 ,{ "first" }
 ,{ "two" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "AsyncFileToMem" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "AsyncFileToMem" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Link link_PartAsyncFileToMem = { & page , { 35 } } ;

Text b35 = { {
 { "PartAsyncFileToMem" }
} , & fmt_h4 , & align_h4 } ;

Text b36 = { {
 { "PartAsyncFileToMem" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "load" }
 ,{ "parts" }
 ,{ "of" }
 ,{ "a" }
 ,{ "file" }
 ,{ "into" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "buffer." }
 ,{ "This" }
 ,{ "class" }
 ,{ "loads" }
 ,{ "file" }
 ,{ "parts" }
 ,{ "sequentially." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "Constructors" }
 ,{ "arguments" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "meaning" }
 ,{ "as" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "constructors." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "getFileLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "getCurPos()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "getRestLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "part" }
 ,{ "after" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "more()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "room" }
 ,{ "after" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "read()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "next" }
 ,{ "file" }
 ,{ "part" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "or" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "part" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "range" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "AsyncFileListToMem" }
} , & fmt_h4 , & align_h4 } ;

Text b44 = { {
 { "This" }
 ,{ "class" }
 ,{ "loads" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "directory" }
 ,{ "on" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory." }
 ,{ "Then" }
 ,{ "it" }
 ,{ "can" }
 ,{ "iterate" }
 ,{ "through" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "Constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "AsyncFileToMem" , & fmt_text_b }
 ,{ "class." }
 ,{ "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "uses" }
 ,{ "existing" }
 ,{ "AsyncFileSystem" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "next()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "file" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "Initially" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "is" }
 ,{ "\"before" }
 ,{ "the" }
 ,{ "first\"." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "getFileName()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "getFileType()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "apply()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Page page = { "page_AsyncFileClients" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AsyncFileDevice {

Text b0 = { {
 { "AsyncFileDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AsyncFileDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AsyncFileDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "AsyncFileDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device" }
 ,{ "(" }
 ,{ "AsyncFile" , & fmt_text_a }
 ,{ ")." }
 ,{ "It" }
 ,{ "performs" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "the" }
 ,{ "local" }
 ,{ "file" }
 ,{ "system." }
 ,{ "You" }
 ,{ "may" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "and" }
 ,{ "register" }
 ,{ "it" }
 ,{ "in" }
 ,{ "the" }
 ,{ "default" }
 ,{ "object" , & fmt_text_a }
 ,{ "register" , & fmt_text_a }
 ,{ "." }
 ,{ "After" }
 ,{ "this" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "classes" }
 ,{ "for" }
 ,{ "async" }
 ,{ "file" }
 ,{ "input-output" }
 ,{ "like" }
 ,{ "PrintAsyncFile" , & fmt_text_a }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "upon" }
 ,{ "the" }
 ,{ "target" }
 ,{ "classes" }
 ,{ "Sys::AltAsyncFile" , & fmt_text_b }
 ,{ "and" }
 ,{ "Sys::AsyncFileWait" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysFile.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_AsyncFileDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AsyncFiles {

Text b0 = { {
 { "Async" }
 ,{ "Files" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysAsyncFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysAsyncFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysAsyncFileSystem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysAsyncFileSystem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Async" }
 ,{ "file" }
 ,{ "and" }
 ,{ "file" }
 ,{ "system" }
 ,{ "devices" }
 ,{ "are" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "devices," }
 ,{ "that" }
 ,{ "performs" }
 ,{ "file" }
 ,{ "and" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations" }
 ,{ "in" }
 ,{ "asynchronous" }
 ,{ "manner." }
 ,{ "To" }
 ,{ "be" }
 ,{ "used," }
 ,{ "the" }
 ,{ "device" }
 ,{ "must" }
 ,{ "be" }
 ,{ "registered" }
 ,{ "in" }
 ,{ "the" }
 ,{ "default" }
 ,{ "Object" , & fmt_text_a }
 ,{ "Host" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "device" }
 ,{ "name" }
 ,{ "in" }
 ,{ "file" }
 ,{ "names" }
 ,{ "on" }
 ,{ "that" }
 ,{ "device." }
 ,{ "For" }
 ,{ "example," }
 ,{ "if" }
 ,{ "some" }
 ,{ "object" }
 ,{ "is" }
 ,{ "registered" }
 ,{ "under" }
 ,{ "the" }
 ,{ "name" }
 ,{ "\"host\"" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "\"host:/file.txt\"" , & fmt_text_b }
 ,{ "refers" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "\"/file.txt\"" , & fmt_text_b }
 ,{ "on" }
 ,{ "that" }
 ,{ "device" }
 ,{ "or" }
 ,{ "\"host:c:/file.txt\"" , & fmt_text_b }
 ,{ "refers" }
 ,{ "to" }
 ,{ "\"c:/file.txt\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Sys::AsyncFileDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "Sys::AsyncFileDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "interface" }
 ,{ "of" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device." }
 ,{ "An" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device" }
 ,{ "class" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "this" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file," }
 ,{ "a" }
 ,{ "file" }
 ,{ "state" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "created." }
 ,{ "The" }
 ,{ "class" }
 ,{ "of" }
 ,{ "this" }
 ,{ "object" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "Sys::AsyncFileState" , & fmt_text_b }
 ,{ "interface." }
 ,{ "A" }
 ,{ "state" }
 ,{ "is" }
 ,{ "created" }
 ,{ "by" }
 ,{ "the" }
 ,{ "createState()" , & fmt_text_b }
 ,{ "method." }
 ,{ "A" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Sys::AsyncFileState" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "hook" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "a" }
 ,{ "hook," }
 ,{ "which" }
 ,{ "was" }
 ,{ "used" }
 ,{ "to" }
 ,{ "pick" }
 ,{ "the" }
 ,{ "device" }
 ,{ "object" }
 ,{ "(or" }
 ,{ "a" }
 ,{ "hook" }
 ,{ "to" }
 ,{ "an" }
 ,{ "\"upper\"" }
 ,{ "object)." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "control" }
 ,{ "of" }
 ,{ "the" }
 ,{ "device" }
 ,{ "object" }
 ,{ "itself" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "its" }
 ,{ "destruction" }
 ,{ "while" }
 ,{ "one" }
 ,{ "of" }
 ,{ "states" }
 ,{ "is" }
 ,{ "alive." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Sys::AsyncFileState" , & fmt_text_b }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "hook," }
 ,{ "provided" }
 ,{ "to" }
 ,{ "the" }
 ,{ "method" }
 ,{ "createState()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Destructor" }
 ,{ "is" }
 ,{ "virtual," }
 ,{ "so" }
 ,{ "it" }
 ,{ "is" }
 ,{ "safe" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "an" }
 ,{ "object" }
 ,{ "using" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Two" }
 ,{ "data" }
 ,{ "fields:" }
 ,{ "write_format" , & fmt_text_b }
 ,{ "and" }
 ,{ "max_read_len" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
 ,{ "These" }
 ,{ "fields" }
 ,{ "can" }
 ,{ "be" }
 ,{ "red" }
 ,{ "by" }
 ,{ "the" }
 ,{ "methods" }
 ,{ "getWriteFormat()" , & fmt_text_b }
 ,{ "and" }
 ,{ "getMaxReadLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "File" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "abstract" }
 ,{ "methods." }
 ,{ "Each" }
 ,{ "operation" }
 ,{ "requires" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "be" }
 ,{ "prepared" }
 ,{ "and" }
 ,{ "provided." }
 ,{ "A" }
 ,{ "method" }
 ,{ "starts" }
 ,{ "an" }
 ,{ "operation," }
 ,{ "using" }
 ,{ "this" }
 ,{ "packet." }
 ,{ "Once" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "complete," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "completed" }
 ,{ "and" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "can" }
 ,{ "be" }
 ,{ "cancelled" }
 ,{ "to" }
 ,{ "cancel" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "A" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "short," }
 ,{ "its" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "may" , & fmt_text_b }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "(and" }
 ,{ "may" }
 ,{ "not)." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "file." }
 ,{ "Once" }
 ,{ "this" }
 ,{ "is" }
 ,{ "done," }
 ,{ "read" }
 ,{ "and" }
 ,{ "write" }
 ,{ "operations" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "this" }
 ,{ "file." }
 ,{ "Packet" }
 ,{ "data" }
 ,{ "are" }
 ,{ "not" }
 ,{ "required" }
 ,{ "(but" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used)." }
 ,{ "File" }
 ,{ "name" }
 ,{ "and" }
 ,{ "open" }
 ,{ "flags" }
 ,{ "are" }
 ,{ "provided" }
 ,{ "as" }
 ,{ "the" }
 ,{ "method" }
 ,{ "arguments." }
 ,{ "An" }
 ,{ "implementation" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "store" }
 ,{ "and" }
 ,{ "transfer" }
 ,{ "this" }
 ,{ "information" }
 ,{ "further," }
 ,{ "for" }
 ,{ "example," }
 ,{ "over" }
 ,{ "a" }
 ,{ "network." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFile::OpenExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "open" }
 ,{ "operation" }
 ,{ "should" }
 ,{ "use" }
 ,{ "provided" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "First" }
 ,{ "two" }
 ,{ "fields" }
 ,{ "are" }
 ,{ "not" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "a" }
 ,{ "value," }
 ,{ "but" }
 ,{ "should" }
 ,{ "be" }
 ,{ "cleared" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "These" }
 ,{ "fields" }
 ,{ "are" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "Sys::AsyncFile::open()" , & fmt_text_b }
 ,{ "before" }
 ,{ "the" }
 ,{ "Sys::AsyncFileState::open()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "opened" }
 ,{ "file." }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "must" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "after" }
 ,{ "all" }
 ,{ "read/write" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "this" }
 ,{ "state" }
 ,{ "are" }
 ,{ "completed." }
 ,{ "Once" }
 ,{ "close" }
 ,{ "is" }
 ,{ "done," }
 ,{ "the" }
 ,{ "state" }
 ,{ "can" }
 ,{ "be" }
 ,{ "deleted." }
 ,{ "State" }
 ,{ "deletion," }
 ,{ "while" }
 ,{ "file" }
 ,{ "is" }
 ,{ "not" }
 ,{ "closed," }
 ,{ "is" }
 ,{ "not" }
 ,{ "recommended" }
 ,{ "(but" }
 ,{ "not" }
 ,{ "completely" }
 ,{ "avoidable)." }
 ,{ "Packet" }
 ,{ "data" }
 ,{ "are" }
 ,{ "not" }
 ,{ "required" }
 ,{ "(but" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used)." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFile::CloseExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "write()" , & fmt_text_b }
 ,{ "writes" }
 ,{ "data" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "position." }
 ,{ "Packet" }
 ,{ "data" }
 ,{ "are" }
 ,{ "processed" }
 ,{ "according" }
 ,{ "the" }
 ,{ "write_format" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFile::WriteExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result:" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length" }
 ,{ "after" }
 ,{ "this" }
 ,{ "operation." }
 ,{ "Multiple" }
 ,{ "write" }
 ,{ "operation" }
 ,{ "may" }
 ,{ "overlap," }
 ,{ "but" }
 ,{ "the" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "result" }
 ,{ "must" }
 ,{ "be" }
 ,{ "reported" }
 ,{ "as" }
 ,{ "if" }
 ,{ "these" }
 ,{ "operations" }
 ,{ "execution" }
 ,{ "is" }
 ,{ "serialized." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "read()" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "The" }
 ,{ "first" }
 ,{ "read()" , & fmt_text_b }
 ,{ "passes" }
 ,{ "the" }
 ,{ "read" }
 ,{ "buffer" }
 ,{ "pointer" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "file" }
 ,{ "position" }
 ,{ "and" }
 ,{ "the" }
 ,{ "read" }
 ,{ "buffer" }
 ,{ "are" }
 ,{ "input" }
 ,{ "parameters" }
 ,{ "and" }
 ,{ "preserved" }
 ,{ "on" }
 ,{ "output," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "them" }
 ,{ "in" }
 ,{ "a" }
 ,{ "complete" }
 ,{ "function." }
 ,{ "Buffer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "red" }
 ,{ "all," }
 ,{ "otherwise" }
 ,{ "error" }
 ,{ "must" }
 ,{ "be" }
 ,{ "reported." }
 ,{ "Packet" }
 ,{ "data" }
 ,{ "are" }
 ,{ "not" }
 ,{ "required" }
 ,{ "(but" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used)." }
 ,{ "The" }
 ,{ "read" }
 ,{ "length" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "max_read_len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "second" }
 ,{ "read()" , & fmt_text_b }
 ,{ "passes" }
 ,{ "only" }
 ,{ "the" }
 ,{ "read" }
 ,{ "length." }
 ,{ "The" }
 ,{ "file" }
 ,{ "position" }
 ,{ "and" }
 ,{ "the" }
 ,{ "read" }
 ,{ "length" }
 ,{ "are" }
 ,{ "input" }
 ,{ "parameters" }
 ,{ "and" }
 ,{ "preserved" }
 ,{ "on" }
 ,{ "output," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "them" }
 ,{ "in" }
 ,{ "a" }
 ,{ "complete" }
 ,{ "function." }
 ,{ "Data" }
 ,{ "must" }
 ,{ "be" }
 ,{ "red" }
 ,{ "all," }
 ,{ "otherwise" }
 ,{ "error" }
 ,{ "must" }
 ,{ "be" }
 ,{ "reported." }
 ,{ "Packet" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "deliver" }
 ,{ "data," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "data" , & fmt_text_b }
 ,{ "points" }
 ,{ "somewhere" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer." }
 ,{ "Packet" }
 ,{ "buffer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "reattached" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "required" }
 ,{ "volume" }
 ,{ "of" }
 ,{ "data." }
 ,{ "The" }
 ,{ "read" }
 ,{ "length" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "max_read_len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Sys::AsyncFile" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "The" }
 ,{ "class" }
 ,{ "Sys::AsyncFile" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "a" }
 ,{ "single" }
 ,{ "file" }
 ,{ "on" }
 ,{ "some" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Sys::AsyncFile" , & fmt_text_b }
 ,{ "operates" }
 ,{ "on" }
 ,{ "some" }
 ,{ "Sys::AsyncFileState" , & fmt_text_b }
 ,{ "." }
 ,{ "Most" }
 ,{ "of" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "a" }
 ,{ "call" }
 ,{ "propagation" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Sys::AsyncFileState" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "closeState()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "state." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "after" }
 ,{ "close()" , & fmt_text_b }
 ,{ "or" }
 ,{ "failed" }
 ,{ "open()" , & fmt_text_b }
 ,{ "to" }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "open()" , & fmt_text_b }
 ,{ "operation." }
 ,{ "First" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "initialization" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "state" }
 ,{ "and" }
 ,{ "open" }
 ,{ "flags." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "The" }
 ,{ "second" }
 ,{ "open()" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name," }
 ,{ "searches" }
 ,{ "for" }
 ,{ "the" }
 ,{ "async" }
 ,{ "file" }
 ,{ "device" }
 ,{ "and" }
 ,{ "opens" }
 ,{ "the" }
 ,{ "file" }
 ,{ "on" }
 ,{ "this" }
 ,{ "device." }
 ,{ "It" }
 ,{ "also" }
 ,{ "fills" }
 ,{ "OpenExt" , & fmt_text_b }
 ,{ "fields," }
 ,{ "write_format" , & fmt_text_b }
 ,{ "and" }
 ,{ "max_read_len" , & fmt_text_b }
 ,{ "to" }
 ,{ "return" }
 ,{ "these" }
 ,{ "values" }
 ,{ "with" }
 ,{ "the" }
 ,{ "packet." }
 ,{ "If" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "is" }
 ,{ "\"host:c:/file.txt\"" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "the" }
 ,{ "device" }
 ,{ "with" }
 ,{ "the" }
 ,{ "name" }
 ,{ "\"host\"" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "name" }
 ,{ "\"c:/file.txt\"" , & fmt_text_b }
 ,{ "will" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "on" }
 ,{ "this" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "The" }
 ,{ "third" }
 ,{ "open()" , & fmt_text_b }
 ,{ "works" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "second," }
 ,{ "except" }
 ,{ "it" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "device" }
 ,{ "path" }
 ,{ "as" }
 ,{ "two" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Sys::AsyncFileSystemDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "Sys::AsyncFileSystemDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "interface" }
 ,{ "of" }
 ,{ "an" }
 ,{ "async" }
 ,{ "file" }
 ,{ "system" }
 ,{ "device." }
 ,{ "See" }
 ,{ "Files" , & fmt_text_a }
 ,{ "for" }
 ,{ "the" }
 ,{ "generic" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operation" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "asynchronously" }
 ,{ "using" }
 ,{ "packets" }
 ,{ "on" }
 ,{ "this" }
 ,{ "device." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "used" }
 ,{ "for" }
 ,{ "operation" }
 ,{ "parameters," }
 ,{ "but" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "an" }
 ,{ "implementation," }
 ,{ "so" }
 ,{ "packets" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "short." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "getFileType()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file," }
 ,{ "specified" }
 ,{ "by" }
 ,{ "the" }
 ,{ "path" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::FileTypeExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result:" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "getFileUpdateTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "last" }
 ,{ "modification" }
 ,{ "time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory," }
 ,{ "specified" }
 ,{ "by" }
 ,{ "the" }
 ,{ "path" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::CmpFileTimeExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "createFile()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file_name" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result:" }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "deleteFile()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file_name" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "createDir()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "dir_name" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "deleteDir()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "dir_name" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "recursive" , & fmt_text_b }
 ,{ "flag" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "directory" }
 ,{ "must" }
 ,{ "be" }
 ,{ "empty." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "deleted" }
 ,{ "with" }
 ,{ "the" }
 ,{ "all" }
 ,{ "content" }
 ,{ "recursively." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "rename()" , & fmt_text_b }
 ,{ "renames" }
 ,{ "or" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "file" }
 ,{ "of" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "allow_overwrite" , & fmt_text_b }
 ,{ "flag" }
 ,{ "allows" }
 ,{ "overwriting" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "remove()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "ether" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file" }
 ,{ "or" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "empty" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "exec()" , & fmt_text_b }
 ,{ "execute" }
 ,{ "a" }
 ,{ "program" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target" }
 ,{ "device" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "working" }
 ,{ "directory" }
 ,{ "dir" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "program" }
 ,{ "path" }
 ,{ "program" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "program" }
 ,{ "arguments" }
 ,{ "arg" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::ErrorExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "Remaining" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "special:" }
 ,{ "they" }
 ,{ "create" }
 ,{ "temporary" }
 ,{ "\"files\"" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "Files" }
 ,{ "are" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "Sys::AsyncFileState" , & fmt_text_b }
 ,{ "interface." }
 ,{ "The" }
 ,{ "return" }
 ,{ "object" }
 ,{ "is" }
 ,{ "already" }
 ,{ "opened," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "perform" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "it." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "Sys::AsyncFileSystem::FileExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "a" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "getFileList()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "read-only" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "file" }
 ,{ "has" }
 ,{ "number" }
 ,{ "of" }
 ,{ "lines," }
 ,{ "each" }
 ,{ "line" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory" }
 ,{ "name," }
 ,{ "then" }
 ,{ "space," }
 ,{ "then" }
 ,{ "'f'" }
 ,{ "for" }
 ,{ "a" }
 ,{ "file" }
 ,{ "or" }
 ,{ "'d'" }
 ,{ "for" }
 ,{ "a" }
 ,{ "directory." }
 ,{ "End" }
 ,{ "of" }
 ,{ "line" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "'\\n'." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "exec2()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "temporary" }
 ,{ "write-only" }
 ,{ "file." }
 ,{ "This" }
 ,{ "file" }
 ,{ "should" }
 ,{ "be" }
 ,{ "filled" }
 ,{ "with" }
 ,{ "program" }
 ,{ "arguments." }
 ,{ "To" }
 ,{ "start" }
 ,{ "a" }
 ,{ "program," }
 ,{ "the" }
 ,{ "file" }
 ,{ "must" }
 ,{ "be" }
 ,{ "closed" }
 ,{ "with" }
 ,{ "the" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "Sys::AsyncFileSystem" }
} , & fmt_h4 , & align_h4 } ;

Text b40 = { {
 { "The" }
 ,{ "class" }
 ,{ "Sys::AsyncFileSystem" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "some" }
 ,{ "async" }
 ,{ "file" }
 ,{ "system" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "init()" , & fmt_text_b }
 ,{ "connects" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "device" }
 ,{ "by" }
 ,{ "its" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "exit()" , & fmt_text_b }
 ,{ "cleans" }
 ,{ "the" }
 ,{ "object," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "after" }
 ,{ "all" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "completed" }
 ,{ "on" }
 ,{ "the" }
 ,{ "connected" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "Sys::AsyncFileSystemDevice" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Page page = { "page_AsyncFiles" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AsyncUDPDevice {

Text b0 = { {
 { "(HCore)" }
 ,{ "AsyncUDPDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/AsyncUDPDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/AsyncUDPDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "HCore" , & fmt_text_b }
 ,{ "has" }
 ,{ "another" }
 ,{ "two" }
 ,{ "UDP" }
 ,{ "endpoint" }
 ,{ "device" }
 ,{ "classes." }
 ,{ "They" }
 ,{ "are" }
 ,{ "built" }
 ,{ "on" }
 ,{ "OS" }
 ,{ "asynchronous" }
 ,{ "socket" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "devices" }
 ,{ "implement" }
 ,{ "packet" }
 ,{ "communication" }
 ,{ "using" }
 ,{ "UDP" }
 ,{ "protocol." }
 ,{ "They" }
 ,{ "are" }
 ,{ "similar" }
 ,{ "in" }
 ,{ "usage" }
 ,{ "to" }
 ,{ "the" }
 ,{ "UDPDevice" , & fmt_text_a }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "AsyncUDPEndpointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "AsyncUDPEndpointDevice" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" }
 ,{ "port," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "address" }
 ,{ "(IP" }
 ,{ "address+UDP" }
 ,{ "port)" }
 ,{ "of" }
 ,{ "the" }
 ,{ "communication" }
 ,{ "peer." }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "usage" }
 ,{ "for" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "local" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getDst()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "UDP" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "activate" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "attach" }
 ,{ "an" }
 ,{ "inbound" }
 ,{ "processor" }
 ,{ "(or" }
 ,{ "detach" }
 ,{ "it)" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "while" }
 ,{ "it" }
 ,{ "is" }
 ,{ "running." }
 ,{ "So" }
 ,{ "attach" }
 ,{ "first," }
 ,{ "then" }
 ,{ "start." }
 ,{ "Additional" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "not" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "AsyncUDPMultipointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "The" }
 ,{ "class" }
 ,{ "AsyncUDPMultipointDevice" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" }
 ,{ "port." }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "usage" }
 ,{ "for" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "local" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "activate" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
 ,{ "Additional" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "not" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Sys::AsyncUDPSocket" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "Both" }
 ,{ "async" }
 ,{ "UDP" }
 ,{ "device" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "Sys::AsyncUDPSocket" , & fmt_text_b }
 ,{ "and" }
 ,{ "Sys::AsyncUDPSocketWait" , & fmt_text_b }
 ,{ "classes," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
 ,{ "They" }
 ,{ "are" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysNet.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_AsyncUDPDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Atomic {

Text b0 = { {
 { "Atomic" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/Atomic.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/Atomic.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Atomic" }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "variable" }
 ,{ "with" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "\"atomic\"" }
 ,{ "operations." }
 ,{ "Such" }
 ,{ "variable" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "safely" }
 ,{ "by" }
 ,{ "multiple" }
 ,{ "threads" }
 ,{ "without" }
 ,{ "using" }
 ,{ "mutexes." }
 ,{ "Moreover," }
 ,{ "efficient" }
 ,{ "mutex" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "atomics." }
 ,{ "Atomic" }
 ,{ "operations" }
 ,{ "(except" }
 ,{ "reading" }
 ,{ "a" }
 ,{ "value)" }
 ,{ "implies" }
 ,{ "a" }
 ,{ "\"memory" }
 ,{ "fence\"." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "is" }
 ,{ "irrelevant" }
 ,{ "on" }
 ,{ "single" }
 ,{ "core" }
 ,{ "systems," }
 ,{ "but" }
 ,{ "for" }
 ,{ "multi-core" }
 ,{ "CPU" }
 ,{ "it" }
 ,{ "is" }
 ,{ "essential" }
 ,{ "to" }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "visibility" }
 ,{ "coherence." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Atomic::Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "underlying" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "machine" }
 ,{ "word" }
 ,{ "type." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "PrintProxyType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "value" }
 ,{ "to" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Implicit" }
 ,{ "cast" }
 ,{ "operator" }
 ,{ "reads" }
 ,{ "the" }
 ,{ "value" }
 ,{ "atomically" }
 ,{ "with" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "other" }
 ,{ "operations," }
 ,{ "but" }
 ,{ "does" }
 ,{ "not" }
 ,{ "imply" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "fence." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "All" }
 ,{ "modifying" }
 ,{ "operations" }
 ,{ "imply" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "fence" }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "before" , & fmt_text_b }
 ,{ "the" }
 ,{ "operation." }
 ,{ "\"Memory" }
 ,{ "fence\"" }
 ,{ "means" }
 ,{ "that" }
 ,{ "if" }
 ,{ "a" }
 ,{ "thread" }
 ,{ "red" }
 ,{ "the" }
 ,{ "modified" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atomic," }
 ,{ "it" }
 ,{ "sees" }
 ,{ "all" }
 ,{ "variable" }
 ,{ "modifications," }
 ,{ "made" }
 ,{ "before" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "operation" }
 ,{ "has" }
 ,{ "been" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "thread," }
 ,{ "who" }
 ,{ "has" }
 ,{ "done" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "operation." }
 ,{ "On" }
 ,{ "a" }
 ,{ "single" }
 ,{ "core" }
 ,{ "CPU" }
 ,{ "this" }
 ,{ "is" }
 ,{ "always" }
 ,{ "true," }
 ,{ "because" }
 ,{ "threads" }
 ,{ "are" }
 ,{ "not" }
 ,{ "executed" }
 ,{ "simultaneously" }
 ,{ "and" }
 ,{ "only" }
 ,{ "a" }
 ,{ "compiler" }
 ,{ "optimization" }
 ,{ "may" }
 ,{ "be" }
 ,{ "an" }
 ,{ "issue." }
 ,{ "But" }
 ,{ "on" }
 ,{ "multi-core" }
 ,{ "CPU" }
 ,{ "it" }
 ,{ "is" }
 ,{ "possible," }
 ,{ "that" }
 ,{ "concurrent" }
 ,{ "execution" }
 ,{ "of" }
 ,{ "CPU" }
 ,{ "read/write" }
 ,{ "commands" }
 ,{ "changes" }
 ,{ "the" }
 ,{ "order" }
 ,{ "of" }
 ,{ "visible" }
 ,{ "variable" }
 ,{ "modifications." }
 ,{ "So" }
 ,{ "special" }
 ,{ "CPU" }
 ,{ "commands" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "this." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "operator" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "new" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "operator" , & fmt_text_b }
 ,{ "+=" , & fmt_text_b }
 ,{ "increases" }
 ,{ "the" }
 ,{ "current" }
 ,{ "value" }
 ,{ "by" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "operator" , & fmt_text_b }
 ,{ "$=" , & fmt_text_b }
 ,{ "decreases" }
 ,{ "the" }
 ,{ "current" }
 ,{ "value" }
 ,{ "by" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "postfix" , & fmt_text_b }
 ,{ "operator" , & fmt_text_b }
 ,{ "++" , & fmt_text_b }
 ,{ "increments" }
 ,{ "the" }
 ,{ "current" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "postfix" , & fmt_text_b }
 ,{ "operator" , & fmt_text_b }
 ,{ "$$" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "current" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "trySet()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "more" }
 ,{ "complex" }
 ,{ "operation." }
 ,{ "It" }
 ,{ "compares" }
 ,{ "the" }
 ,{ "current" }
 ,{ "value" }
 ,{ "with" }
 ,{ "the" }
 ,{ "old_value" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "they" }
 ,{ "are" }
 ,{ "equal," }
 ,{ "then" }
 ,{ "it" }
 ,{ "assigns" }
 ,{ "the" }
 ,{ "new_value" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "does" }
 ,{ "nothing." }
 ,{ "You" }
 ,{ "may" }
 ,{ "learn" }
 ,{ "what" }
 ,{ "case" }
 ,{ "has" }
 ,{ "happened" }
 ,{ "by" }
 ,{ "comparing" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "with" }
 ,{ "the" }
 ,{ "old_value" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Sys::Atomic" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "Atomic" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target" }
 ,{ "atomic" }
 ,{ "class" }
 ,{ "Sys::Atomic" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysAtomic.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "A" }
 ,{ "typical" }
 ,{ "implementation" }
 ,{ "would" }
 ,{ "be:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Only" }
 ,{ "three" }
 ,{ "highlighted" }
 ,{ "functions" }
 ,{ "must" }
 ,{ "be" }
 ,{ "implemented," }
 ,{ "usually" }
 ,{ "using" }
 ,{ "an" }
 ,{ "assembler" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "compiler" }
 ,{ "optimizations" }
 ,{ "across" }
 ,{ "its" }
 ,{ "calls." }
} , & fmt_text , & align_text } ;

Page page = { "page_Atomic" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AttachmentHost {

Text b0 = { {
 { "AttachmentHost" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AttachmentHost.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AttachmentHost.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "AttachmentHost" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "attachment/detachment" }
 ,{ "functionality." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "AttachmentHost" , & fmt_text_b }
 ,{ "stores" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "Any" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "attach()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "some" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "attached," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "detached" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "detach()" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "retrieve" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "pointer" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "Hook" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "In" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "it" }
 ,{ "\"locks\"" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "releases" }
 ,{ "it" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor." }
 ,{ "Hook" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "method" }
 ,{ "detach()" , & fmt_text_b }
 ,{ "is" }
 ,{ "delayed" }
 ,{ "while" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "locked." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "AttachmentHost" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "accepts" }
 ,{ "one" }
 ,{ "or" }
 ,{ "two" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "class_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "error" }
 ,{ "messages" }
 ,{ "and" }
 ,{ "should" }
 ,{ "be" }
 ,{ "a" }
 ,{ "name" }
 ,{ "of" }
 ,{ "owning" }
 ,{ "class." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "internal" }
 ,{ "synchronization" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "attach()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "pointer" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "detach()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "pointer," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "These" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "typically" }
 ,{ "used" }
 ,{ "in" }
 ,{ "pair" }
 ,{ "in" }
 ,{ "constructor/destructor" }
 ,{ "manner." }
 ,{ "If" }
 ,{ "the" }
 ,{ "first" }
 ,{ "method" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "the" }
 ,{ "second" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Hook" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "retrieves" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "pointer" }
 ,{ "from" }
 ,{ "the" }
 ,{ "host." }
} , & fmt_text , & align_text } ;

Page page = { "page_AttachmentHost" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AutoCast {

Text b0 = { {
 { "AutoCast" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/AutoCast.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/AutoCast.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "AutoCast" , & fmt_text_b }
 ,{ "helps" }
 ,{ "implicit" }
 ,{ "pointer" }
 ,{ "conversion." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "implicit" }
 ,{ "pointer" }
 ,{ "conversion:" }
} , & fmt_text , & align_text } ;

Page page = { "page_AutoCast" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_AutoGlobal {

Text b0 = { {
 { "AutoGlobal" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/AutoGlobal.h" , & fmt_text_Files_b }
 ,{ "CCore/src/AutoGlobal.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "AutoGlobal" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "global" }
 ,{ "variable" }
 ,{ "with" }
 ,{ "auto-initialization." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "mutex." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "access" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "object" }
 ,{ "use" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "methods." }
 ,{ "You" }
 ,{ "must" }
 ,{ "do" }
 ,{ "it" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "Lock" , & fmt_text_b }
 ,{ "scope." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "AutoGlobal" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "counting" }
 ,{ "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "I.e." }
 ,{ "when" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "accessed" }
 ,{ "the" }
 ,{ "first" }
 ,{ "time," }
 ,{ "it" }
 ,{ "is" }
 ,{ "created" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
 ,{ "Once" }
 ,{ "the" }
 ,{ "last" }
 ,{ "Lock" , & fmt_text_b }
 ,{ "is" }
 ,{ "released," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Page page = { "page_AutoGlobal" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BaseRangeAlgo {

Text b0 = { {
 { "BaseRangeAlgo" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/BaseRangeAlgo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/BaseRangeAlgo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "BaseRangeAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "generalized" }
 ,{ "range" }
 ,{ "type" }
 ,{ "and" }
 ,{ "contains" }
 ,{ "some" }
 ,{ "simple" }
 ,{ "range" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "LenType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "length" }
 ,{ "type." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "GetPtr()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "\"pointer\"" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "range" }
 ,{ "element." }
 ,{ "This" }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "only" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "this" }
 ,{ "element" }
 ,{ "and" }
 ,{ "not" }
 ,{ "to" }
 ,{ "iterate" }
 ,{ "over" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "GetLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "GetPrefix()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "new" }
 ,{ "range," }
 ,{ "which" }
 ,{ "is" }
 ,{ "a" }
 ,{ "prefix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
 ,{ "len" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "input" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "GetSuffix()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "new" }
 ,{ "range," }
 ,{ "which" }
 ,{ "is" }
 ,{ "a" }
 ,{ "suffix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
 ,{ "len" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "input" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Split()" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "on" }
 ,{ "prefix" }
 ,{ "and" }
 ,{ "suffix," }
 ,{ "prefix" }
 ,{ "has" }
 ,{ "a" }
 ,{ "given" }
 ,{ "length" }
 ,{ "and" }
 ,{ "returned," }
 ,{ "suffix" }
 ,{ "is" }
 ,{ "set" }
 ,{ "back" }
 ,{ "in" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "r" , & fmt_text_b }
 ,{ "." }
 ,{ "prefix" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "input" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "GetPrefix(R" , & fmt_text_b }
 ,{ "r,R" , & fmt_text_b }
 ,{ "suffix)" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "prefix," }
 ,{ "complementary" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "suffix." }
 ,{ "It" }
 ,{ "is" }
 ,{ "equivalent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "GetPrefix(r,GetLen(r)-GetLen(suffix))" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "RangeSwap()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "memberwise" }
 ,{ "ranges" }
 ,{ "element" }
 ,{ "swap." }
 ,{ "Range" }
 ,{ "lengths" }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "same." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Reverse()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "range." }
 ,{ "Its" }
 ,{ "type" }
 ,{ "is" }
 ,{ "different" }
 ,{ "than" }
 ,{ "R" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "following" }
 ,{ "specialization" }
 ,{ "for" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "range" }
 ,{ "is" }
 ,{ "provided:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "following" }
 ,{ "specialization" }
 ,{ "for" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "PtrLenReverse" , & fmt_text_b }
 ,{ "range" }
 ,{ "is" }
 ,{ "provided:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "RangeType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "all" }
 ,{ "range" }
 ,{ "types." }
 ,{ "RangeType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "CursorType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "A" }
 ,{ "CursorType" , & fmt_text_b }
 ,{ "must" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "member" }
 ,{ "RangeAlgo" , & fmt_text_b }
 ,{ "with" }
 ,{ "range" }
 ,{ "algorithms" }
 ,{ "implementations" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "RangeType" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "also" }
 ,{ "must" }
 ,{ "accept" }
 ,{ "index" }
 ,{ "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_BaseRangeAlgo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BestSearch {

Text b0 = { {
 { "BestSearch" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/BestSearch.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algone/BestSearch.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "BestSearch()" , & fmt_text_b }
 ,{ "runs" }
 ,{ "over" }
 ,{ "a" }
 ,{ "range" }
 ,{ "to" }
 ,{ "find" }
 ,{ "a" }
 ,{ "best" }
 ,{ "range" }
 ,{ "element." }
 ,{ "To" }
 ,{ "determine" }
 ,{ "which" }
 ,{ "element" }
 ,{ "is" }
 ,{ "better" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "used:" }
 ,{ "a" , & fmt_text_b }
 ,{ "is" }
 ,{ "better" }
 ,{ "than" }
 ,{ "b" , & fmt_text_b }
 ,{ "iff" }
 ,{ "better(a,b)" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "cursor" }
 ,{ "pointing" }
 ,{ "to" }
 ,{ "the" }
 ,{ "best" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "It" }
 ,{ "may" }
 ,{ "be" }
 ,{ "null" }
 ,{ "iff" }
 ,{ "the" }
 ,{ "original" }
 ,{ "range" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "following" }
 ,{ "two" }
 ,{ "special" }
 ,{ "variants" }
 ,{ "use" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "compare" }
 ,{ "elements" }
 ,{ "and" }
 ,{ "find" }
 ,{ "a" }
 ,{ "greatest" }
 ,{ "or" }
 ,{ "least" }
 ,{ "of" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Page page = { "page_BestSearch" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BinaryFile {

Text b0 = { {
 { "BinaryFile" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/BinaryFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/BinaryFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "A" }
 ,{ "BinaryFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "serialization" , & fmt_text_a }
 ,{ "output" , & fmt_text_a }
 ,{ "device" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "puts" }
 ,{ "data" }
 ,{ "bytes" }
 ,{ "into" }
 ,{ "the" }
 ,{ "output" }
 ,{ "file." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PrintFile" , & fmt_text_a }
 ,{ "class," }
 ,{ "but" }
 ,{ "provides" }
 ,{ "binary" }
 ,{ "output" }
 ,{ "capabilities" }
 ,{ "rather" }
 ,{ "than" }
 ,{ "textual." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "A" }
 ,{ "BinaryFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "or" }
 ,{ "closed." }
 ,{ "To" }
 ,{ "output" }
 ,{ "to" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "file," }
 ,{ "the" }
 ,{ "BinaryFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "and" }
 ,{ "open" , & fmt_text_a }
 ,{ "flags" , & fmt_text_a }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "closed" }
 ,{ "state." }
 ,{ "Non-default" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "file." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Destructor" }
 ,{ "flushes" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "opened," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "closed" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "and" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "and" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pending" }
 ,{ "output" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "the" }
 ,{ "FileMultiError" , & fmt_text_a }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "disableExceptions()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "exceptions" }
 ,{ "during" }
 ,{ "output" }
 ,{ "operations." }
 ,{ "You" }
 ,{ "may" }
 ,{ "call" }
 ,{ "this" }
 ,{ "method" }
 ,{ "after" }
 ,{ "the" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "exceptions" }
 ,{ "are" }
 ,{ "disabled," }
 ,{ "the" }
 ,{ "special" }
 ,{ "internal" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "output" }
 ,{ "error." }
 ,{ "This" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "added" }
 ,{ "in" }
 ,{ "the" }
 ,{ "error" }
 ,{ "list" }
 ,{ "during" }
 ,{ "a" }
 ,{ "close" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "preserveFile()" , & fmt_text_b }
 ,{ "preserves" }
 ,{ "a" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "AutoDelete" , & fmt_text_b }
 ,{ "open" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "flush()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Page page = { "page_BinaryFile" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BinarySearch {

Text b0 = { {
 { "BinarySearch" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/BinarySearch.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/BinarySearch.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "BinarySearchAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "generalized" }
 ,{ "range" }
 ,{ "type" }
 ,{ "and" }
 ,{ "contains" }
 ,{ "binary" }
 ,{ "search" }
 ,{ "algorithms." }
 ,{ "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "BaseRangeAlgo<R>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Find()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "general" }
 ,{ "binary" }
 ,{ "search" }
 ,{ "algorithm." }
 ,{ "It's" }
 ,{ "input" }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "and" }
 ,{ "a" }
 ,{ "predicate." }
 ,{ "The" }
 ,{ "range" }
 ,{ "must" }
 ,{ "be" }
 ,{ "increasing" }
 ,{ "relative" }
 ,{ "the" }
 ,{ "predicate," }
 ,{ "i.e." }
 ,{ "if" }
 ,{ "some" }
 ,{ "element" }
 ,{ "makes" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "further" }
 ,{ "elements" }
 ,{ "do" }
 ,{ "the" }
 ,{ "same." }
 ,{ "The" }
 ,{ "algorithm" }
 ,{ "splits" }
 ,{ "the" }
 ,{ "range" }
 ,{ "on" }
 ,{ "two" }
 ,{ "parts:" }
 ,{ "prefix" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "with" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "value" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "suffix" }
 ,{ "makes" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "prefix" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "and" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "is" }
 ,{ "set" }
 ,{ "back" }
 ,{ "to" }
 ,{ "the" }
 ,{ "r" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "suffix," }
 ,{ "if" }
 ,{ "any," }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "satisfying" }
 ,{ "the" }
 ,{ "predicate." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Find_less()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "variant" }
 ,{ "for" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "\"less" }
 ,{ "than" }
 ,{ "med" , & fmt_text_b }
 ,{ "\"." }
 ,{ "The" }
 ,{ "range" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "decreasing." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Find_less_or_equal()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "variant" }
 ,{ "for" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "\"less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "med" , & fmt_text_b }
 ,{ "\"." }
 ,{ "The" }
 ,{ "range" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "decreasing." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Find_greater()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "variant" }
 ,{ "for" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "\"greater" }
 ,{ "than" }
 ,{ "med" , & fmt_text_b }
 ,{ "\"." }
 ,{ "The" }
 ,{ "range" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "increasing." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Find_greater_or_equal()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "variant" }
 ,{ "for" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "\"greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "med" , & fmt_text_b }
 ,{ "\"." }
 ,{ "The" }
 ,{ "range" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "increasing." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions" }
 ,{ "for" }
 ,{ "the" }
 ,{ "binary" }
 ,{ "search." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "They" }
 ,{ "call" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "search" }
 ,{ "algorithms" }
 ,{ "from" }
 ,{ "the" }
 ,{ "BinarySearchAlgo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_BinarySearch" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BinFileToRead {

Text b0 = { {
 { "BinFileToRead" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/BinFileToRead.h" , & fmt_text_Files_b }
 ,{ "CCore/src/BinFileToRead.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "way" }
 ,{ "to" }
 ,{ "read" }
 ,{ "from" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "file" }
 ,{ "system." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "BinFileToRead" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "AbstractBinFileToRead" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "interface" }
 ,{ "to" }
 ,{ "read" }
 ,{ "raw" }
 ,{ "data" }
 ,{ "from" }
 ,{ "a" }
 ,{ "file" }
 ,{ "using" }
 ,{ "the" , & fmt_text_a }
 ,{ "alternative" , & fmt_text_a }
 ,{ "set" , & fmt_text_a }
 ,{ "of" , & fmt_text_a }
 ,{ "operations" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "is_opened" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "protected" }
 ,{ "field," }
 ,{ "it" }
 ,{ "shows" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened." }
 ,{ "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "setting" }
 ,{ "this" }
 ,{ "field." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "file_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "protected" }
 ,{ "field," }
 ,{ "it" }
 ,{ "shows" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
 ,{ "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "setting" }
 ,{ "this" }
 ,{ "field" }
 ,{ "during" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "reset()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "protected" }
 ,{ "method," }
 ,{ "it" }
 ,{ "resets" }
 ,{ "fileds" }
 ,{ "to" }
 ,{ "its" }
 ,{ "default" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "field" }
 ,{ "is_opened" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "field" }
 ,{ "file_len" , & fmt_text_b }
 ,{ ";" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "filename" }
 ,{ "and" }
 ,{ "open" }
 ,{ "flags" }
 ,{ "(in" }
 ,{ "most" }
 ,{ "cases" }
 ,{ "must" }
 ,{ "have" }
 ,{ "default" }
 ,{ "value)." }
 ,{ "If" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "already" }
 ,{ "opened" }
 ,{ "or" }
 ,{ "other" }
 ,{ "error" }
 ,{ "has" }
 ,{ "happened" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "clase()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "If" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "already" }
 ,{ "closed" }
 ,{ "or" }
 ,{ "other" }
 ,{ "error" }
 ,{ "has" }
 ,{ "happened" }
 ,{ "a" }
 ,{ "error" }
 ,{ "is" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "read()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "opened" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "octet" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "transferred" }
 ,{ "bytes" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "read_all()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "opened" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "octet" }
 ,{ "buffer." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "data" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "BinFileToRead" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "reference-counting" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "AbstractBinFileToRead" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "BinFileToReadBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "to" }
 ,{ "build" , & fmt_text_a }
 ,{ "an" , & fmt_text_a }
 ,{ "implementation" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "BinFileToMem" }
} , & fmt_h3 , & align_h3 } ;

Text b17 = { {
 { "BinFileToMem" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "FileToMem" , & fmt_text_a }
 ,{ "class." }
 ,{ "The" }
 ,{ "only" }
 ,{ "difference" }
 ,{ "it" }
 ,{ "uses" }
 ,{ "BinFileToRead" , & fmt_text_b }
 ,{ "class" }
 ,{ "to" }
 ,{ "read" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Page page = { "page_BinFileToRead" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BlockCipher {

Text b0 = { {
 { "BlockCipher" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/BlockCipher.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/BlockCipher.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "BlockCipher" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "block" }
 ,{ "cipher" }
 ,{ "algorithm." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "and" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "provides" }
 ,{ "all" }
 ,{ "necessary" }
 ,{ "parts" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "required" }
 ,{ "functionality." }
 ,{ "An" }
 ,{ "abstract" }
 ,{ "block" }
 ,{ "cipher" }
 ,{ "algorithm" }
 ,{ "is" }
 ,{ "an" }
 ,{ "invertible" }
 ,{ "function," }
 ,{ "which" }
 ,{ "maps" }
 ,{ "an" }
 ,{ "input" }
 ,{ "block" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "of" }
 ,{ "the" }
 ,{ "defined" }
 ,{ "length" }
 ,{ "(the" }
 ,{ "cipher" }
 ,{ "block" }
 ,{ "length)" }
 ,{ "to" }
 ,{ "another" }
 ,{ "such" }
 ,{ "block." }
 ,{ "The" }
 ,{ "function" }
 ,{ "has" }
 ,{ "a" }
 ,{ "parameter" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "key," }
 ,{ "which" }
 ,{ "is" }
 ,{ "a" }
 ,{ "block" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "of" }
 ,{ "the" }
 ,{ "defined" }
 ,{ "length" }
 ,{ "(the" }
 ,{ "cipher" }
 ,{ "key" }
 ,{ "length)." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "BlockLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "cipher" }
 ,{ "block" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "KeyLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "key" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "GetName()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "cipher" }
 ,{ "common" }
 ,{ "name," }
 ,{ "like" }
 ,{ "\"AES128\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "object." }
 ,{ "It" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "cipher." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "assigns" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key" }
 ,{ "to" }
 ,{ "it." }
 ,{ "This" }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "cipher" }
 ,{ "data." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Destructor" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "unkey" }
 ,{ "cipher" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "cleans" }
 ,{ "all" }
 ,{ "internal" }
 ,{ "buffers" }
 ,{ "with" }
 ,{ "sensitive" }
 ,{ "data." }
 ,{ "If" }
 ,{ "the" }
 ,{ "cipher" }
 ,{ "implementation" }
 ,{ "uses" }
 ,{ "some" }
 ,{ "hardware" }
 ,{ "support," }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "hardware" }
 ,{ "entities" }
 ,{ "also" }
 ,{ "must" }
 ,{ "be" }
 ,{ "cleaned." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "key()" , & fmt_text_b }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "key" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
 ,{ "After" }
 ,{ "call" }
 ,{ "of" }
 ,{ "this" }
 ,{ "method" }
 ,{ "the" }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "cipher" }
 ,{ "data" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "unkey()" , & fmt_text_b }
 ,{ "erases" }
 ,{ "the" }
 ,{ "key" }
 ,{ "information" }
 ,{ "from" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "apply()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "cipher" }
 ,{ "operation" }
 ,{ "on" }
 ,{ "the" }
 ,{ "given" }
 ,{ "block" }
 ,{ "of" }
 ,{ "data" }
 ,{ "in-place" }
 ,{ "or" }
 ,{ "out-of-place." }
 ,{ "The" }
 ,{ "first" }
 ,{ "variant" }
 ,{ "operates" }
 ,{ "on" }
 ,{ "two" }
 ,{ "distinct" }
 ,{ "data" }
 ,{ "buffers." }
 ,{ "The" }
 ,{ "second" }
 ,{ "ciphers" }
 ,{ "data" }
 ,{ "in-place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "single" }
 ,{ "data" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "An" }
 ,{ "attempt" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "apply()" , & fmt_text_b }
 ,{ "without" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "assigned" }
 ,{ "key" }
 ,{ "cause" }
 ,{ "an" }
 ,{ "exception." }
 ,{ "This" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "guard" }
 ,{ "function:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "real" }
 ,{ "job" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "class" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Concept" }
 ,{ "CipherType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "cipher" }
 ,{ "classes" }
 ,{ "like" }
 ,{ "BlockCipher<...>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_BlockCipher" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_BlockFifo {

Text b0 = { {
 { "BlockFifo" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/BlockFifo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/BlockFifo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "BlockFifo" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "The" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "BlockFifo" , & fmt_text_b }
 ,{ "implements" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "fifo" }
 ,{ "upon" }
 ,{ "a" }
 ,{ "provided" }
 ,{ "buffer." }
 ,{ "Unlike" }
 ,{ "the" }
 ,{ "Fifo" , & fmt_text_a }
 ,{ "class," }
 ,{ "it" }
 ,{ "provides" }
 ,{ "block" }
 ,{ "put/get" }
 ,{ "operations," }
 ,{ "i.e." }
 ,{ "these" }
 ,{ "operations" }
 ,{ "put/get" }
 ,{ "multiple" }
 ,{ "objects" }
 ,{ "a" }
 ,{ "time." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "fifo" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fifo." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getAvail()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "available" }
 ,{ "positions" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fifo." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "isEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "fifo" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "isFull()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "fifo" }
 ,{ "is" }
 ,{ "full." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "fifo." }
 ,{ "It" }
 ,{ "becomes" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "put(ulen,Func)" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fifo." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "generic." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects," }
 ,{ "required" }
 ,{ "to" }
 ,{ "be" }
 ,{ "put." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor." }
 ,{ "This" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "data." }
 ,{ "It" }
 ,{ "may" }
 ,{ "be" }
 ,{ "called" }
 ,{ "up" }
 ,{ "to" }
 ,{ "two" }
 ,{ "times" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "desired" }
 ,{ "values." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "handled" }
 ,{ "objects" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "put(PtrLen<const" , & fmt_text_b }
 ,{ "T>)" , & fmt_text_b }
 ,{ "puts" }
 ,{ "objects" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fifo." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "have" }
 ,{ "been" }
 ,{ "copied" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "less," }
 ,{ "than" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "room." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "get(ulen,Func)" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "from" }
 ,{ "the" }
 ,{ "fifo." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "generic." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects," }
 ,{ "required" }
 ,{ "to" }
 ,{ "be" }
 ,{ "get." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor." }
 ,{ "This" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "extract" }
 ,{ "data." }
 ,{ "It" }
 ,{ "may" }
 ,{ "be" }
 ,{ "called" }
 ,{ "up" }
 ,{ "to" }
 ,{ "two" }
 ,{ "times" }
 ,{ "to" }
 ,{ "copy" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "from" }
 ,{ "the" }
 ,{ "fifo." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "handled" }
 ,{ "objects" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "get()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "objects" }
 ,{ "from" }
 ,{ "the" }
 ,{ "fifo" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "have" }
 ,{ "been" }
 ,{ "copied" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "BlockFifoBuf" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "The" }
 ,{ "class" }
 ,{ "BlockFifoBuf" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "upgraded" }
 ,{ "class" }
 ,{ "BlockFifo" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "embedded" }
 ,{ "buffer:" }
} , & fmt_text , & align_text } ;

Page page = { "page_BlockFifo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Bridge {

Text b0 = { {
 { "Bridge" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/Bridge.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/Bridge.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Bridge" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "class" }
 ,{ "for" }
 ,{ "net" }
 ,{ "testing." }
 ,{ "This" }
 ,{ "class" }
 ,{ "delivers" }
 ,{ "packets" }
 ,{ "between" }
 ,{ "server" }
 ,{ "and" }
 ,{ "multiple" }
 ,{ "clients." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Once" }
 ,{ "a" }
 ,{ "Bridge" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "created," }
 ,{ "it" }
 ,{ "creates" }
 ,{ "and" }
 ,{ "registers" }
 ,{ "a" }
 ,{ "server" }
 ,{ "device" }
 ,{ "and" }
 ,{ "number" }
 ,{ "of" }
 ,{ "client" }
 ,{ "devices." }
 ,{ "The" }
 ,{ "server" }
 ,{ "device" }
 ,{ "has" }
 ,{ "the" }
 ,{ "name" }
 ,{ "ServerName()" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "build" }
 ,{ "a" }
 ,{ "client" }
 ,{ "device" }
 ,{ "name" }
 ,{ "use" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "ClientName" , & fmt_text_b }
 ,{ "." }
 ,{ "Numbers" }
 ,{ "of" }
 ,{ "client" }
 ,{ "devices" }
 ,{ "are" }
 ,{ "1" , & fmt_text_b }
 ,{ ".." , & fmt_text_b }
 ,{ "num_clients" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "fields" }
 ,{ "str" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "built" }
 ,{ "client" }
 ,{ "device" }
 ,{ "name." }
 ,{ "Server" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "co-interface." }
 ,{ "Clients" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "co-interface." }
 ,{ "The" }
 ,{ "port" }
 ,{ "numbering" }
 ,{ "is" }
 ,{ "trivial:" }
 ,{ "all" }
 ,{ "addresses" }
 ,{ "ports" }
 ,{ "are" }
 ,{ "zero." }
 ,{ "So" }
 ,{ "you" }
 ,{ "can" }
 ,{ "attach" }
 ,{ "to" }
 ,{ "these" }
 ,{ "devices" }
 ,{ "another" }
 ,{ "protocol" }
 ,{ "devices." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "allows" }
 ,{ "you" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "packet" }
 ,{ "formats" }
 ,{ "to" }
 ,{ "and" }
 ,{ "from" }
 ,{ "server." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "set" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "drop" }
 ,{ "rate" }
 ,{ "to" }
 ,{ "simulate" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "loss." }
 ,{ "Use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "setDropRate()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "drop" }
 ,{ "probability" }
 ,{ "is" }
 ,{ "drop_rate/drop_den" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "To" }
 ,{ "drive" }
 ,{ "the" }
 ,{ "Bridge" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "start" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Bridge" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CancelPacketList {

Text b0 = { {
 { "CancelPacketList" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CancelPacketList.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CancelPacketList.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "CancelPacketList" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "cancellation" }
 ,{ "for" }
 ,{ "packets," }
 ,{ "stored" }
 ,{ "in" }
 ,{ "some" }
 ,{ "PacketList" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "a" }
 ,{ "\"reference" }
 ,{ "design\"" }
 ,{ "for" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "cancellation" }
 ,{ "in" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "constructors" }
 ,{ "argument" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "mutex." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "counts" }
 ,{ "some" }
 ,{ "events" }
 ,{ "and" }
 ,{ "the" }
 ,{ "event" }
 ,{ "statistic" }
 ,{ "is" }
 ,{ "available" }
 ,{ "through" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getStat()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "class" }
 ,{ "can" }
 ,{ "serve" }
 ,{ "multiple" }
 ,{ "packet" }
 ,{ "lists." }
 ,{ "To" }
 ,{ "put" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "there" }
 ,{ "are" }
 ,{ "two" }
 ,{ "main" }
 ,{ "methods" }
 ,{ "(and" }
 ,{ "two" }
 ,{ "variants):" }
 ,{ "try_put()" , & fmt_text_b }
 ,{ "and" }
 ,{ "put()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "put()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "upgrade" }
 ,{ "over" }
 ,{ "try_put()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "try_put()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "and" }
 ,{ "assigns" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "to" }
 ,{ "it." }
 ,{ "So" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "can" }
 ,{ "be" }
 ,{ "removed" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "upon" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "request." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "comes" }
 ,{ "in" }
 ,{ "the" }
 ,{ "canceled" }
 ,{ "state" }
 ,{ "(or" }
 ,{ "the" }
 ,{ "cancellation" }
 ,{ "happens" }
 ,{ "during" }
 ,{ "the" }
 ,{ "try_put()" , & fmt_text_b }
 ,{ "processing)," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "not" }
 ,{ "placed" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "(or" }
 ,{ "handled" }
 ,{ "by" }
 ,{ "another" }
 ,{ "way)." }
 ,{ "put()" , & fmt_text_b }
 ,{ "simply" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "try_put()" , & fmt_text_b }
 ,{ "is" }
 ,{ "working" }
 ,{ "under" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "protection." }
 ,{ "It" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "the" }
 ,{ "setting" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "clean," }
 ,{ "then" }
 ,{ "try_put()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "it" }
 ,{ "with" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "put" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list." }
 ,{ "Now" }
 ,{ "packet" }
 ,{ "has" }
 ,{ "the" }
 ,{ "assigned" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "and" }
 ,{ "it" }
 ,{ "remembers" }
 ,{ "from" }
 ,{ "which" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "removed." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "also" }
 ,{ "is" }
 ,{ "working" }
 ,{ "under" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "protection." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "It" }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "removes" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "list." }
 ,{ "Then" }
 ,{ "in" }
 ,{ "the" }
 ,{ "lock-free" }
 ,{ "context" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "is" }
 ,{ "popped" }
 ,{ "and" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "completed." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "pointer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "null," }
 ,{ "because" }
 ,{ "it" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "To" }
 ,{ "extract" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "To" }
 ,{ "get" }
 ,{ "a" }
 ,{ "packet," }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "is" }
 ,{ "locked," }
 ,{ "then" }
 ,{ "the" }
 ,{ "first" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "extracted" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "If" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "the" }
 ,{ "method" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "and" }
 ,{ "the" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "is" }
 ,{ "cleared." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "was" }
 ,{ "not" }
 ,{ "canceled," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "is" }
 ,{ "popped" }
 ,{ "and" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "and" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "dropped." }
 ,{ "That" }
 ,{ "is" }
 ,{ "because" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "originator" }
 ,{ "has" }
 ,{ "already" }
 ,{ "taken" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "and" }
 ,{ "going" }
 ,{ "to" }
 ,{ "call" }
 ,{ "it" }
 ,{ "or" }
 ,{ "may" }
 ,{ "did" }
 ,{ "it" }
 ,{ "already." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "execution" }
 ,{ "will" }
 ,{ "be" }
 ,{ "delayed" }
 ,{ "on" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "lock" }
 ,{ "and" }
 ,{ "continues" }
 ,{ "as" }
 ,{ "soon" }
 ,{ "as" }
 ,{ "we" }
 ,{ "release" }
 ,{ "the" }
 ,{ "mutex." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "extracted" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "so" }
 ,{ "we" }
 ,{ "have" }
 ,{ "to" }
 ,{ "nullify" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "the" }
 ,{ "second" }
 ,{ "attempt" }
 ,{ "to" }
 ,{ "remove" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "And" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "will" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "last" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "helpers." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "get(PacketList" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "moves" }
 ,{ "all" }
 ,{ "not" }
 ,{ "canceled" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "to" }
 ,{ "another" }
 ,{ "list" }
 ,{ "for" }
 ,{ "a" }
 ,{ "further" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "complete()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "list" }
 ,{ "becomes" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Page page = { "page_CancelPacketList" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CapString {

Text b0 = { {
 { "CapString" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CapString.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CapString.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CapString" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "helper" }
 ,{ "class." }
 ,{ "It" }
 ,{ "copies" }
 ,{ "the" }
 ,{ "given" }
 ,{ "string" }
 ,{ "to" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer," }
 ,{ "caps" }
 ,{ "the" }
 ,{ "string" }
 ,{ "if" }
 ,{ "neccessary" }
 ,{ "and" }
 ,{ "makes" }
 ,{ "it" }
 ,{ "zero-terminated." }
 ,{ "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "the" }
 ,{ "cap" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Page page = { "page_CapString" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CCoreGeneral {

Text b0 = { {
 { "CCore" }
 ,{ "General" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Source" }
 ,{ "code" }
 ,{ "organization" }
} , & fmt_h3 , & align_h3 } ;

Text b2 = { {
 { "Most" }
 ,{ "of" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "declarations" }
 ,{ "are" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "inner" }
 ,{ "namespaces," }
 ,{ "like" }
 ,{ "Meta" , & fmt_text_b }
 ,{ "," }
 ,{ "Net" , & fmt_text_b }
 ,{ "," }
 ,{ "Math" , & fmt_text_b }
 ,{ "," }
 ,{ "Sys" , & fmt_text_b }
 ,{ "," }
 ,{ "Crypton" , & fmt_text_b }
 ,{ "," }
 ,{ "DDL" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Source" }
 ,{ "code" }
 ,{ "is" }
 ,{ "split" }
 ,{ "into" }
 ,{ "several" }
 ,{ "major" }
 ,{ "parts:" }
 ,{ "Simple" , & fmt_text_b }
 ,{ "," }
 ,{ "Fundamental" , & fmt_text_b }
 ,{ "," }
 ,{ "Applied" , & fmt_text_b }
 ,{ "," }
 ,{ "HCore" , & fmt_text_b }
 ,{ "," }
 ,{ "XCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "Target" , & fmt_text_b }
 ,{ "." }
 ,{ "First" }
 ,{ "five" }
 ,{ "are" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "same" }
 ,{ "named" }
 ,{ "directories" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "root" , & fmt_text_b }
 ,{ "." }
 ,{ "Last" }
 ,{ "one" }
 ,{ "is" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "Target/<TargetName>" , & fmt_text_b }
 ,{ "." }
 ,{ "Tools" }
 ,{ "are" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "tools" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Source" }
 ,{ "code" }
 ,{ "parts" }
 ,{ "consist" }
 ,{ "of" }
 ,{ "three" }
 ,{ "directories" }
 ,{ ":" }
 ,{ "inc" , & fmt_text_b }
 ,{ "," }
 ,{ "src" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "test" , & fmt_text_b }
 ,{ "." }
 ,{ "So" }
 ,{ "to" }
 ,{ "include" }
 ,{ "a" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "header" }
 ,{ "write" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Each" }
 ,{ "CCore" , & fmt_text_b }
 ,{ ".h" , & fmt_text_b }
 ,{ "file" }
 ,{ "has" }
 ,{ "a" }
 ,{ "correspondent" }
 ,{ ".cpp" , & fmt_text_b }
 ,{ "file," }
 ,{ "even" }
 ,{ "if" }
 ,{ "it" }
 ,{ "defines" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Each" }
 ,{ "target" }
 ,{ "is" }
 ,{ "either" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "or" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "target," }
 ,{ "so" }
 ,{ "it" }
 ,{ "includes" }
 ,{ "only" }
 ,{ "one" }
 ,{ "part:" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "or" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "HCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "are" }
 ,{ "host" }
 ,{ "targets," }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "are" }
 ,{ "device" }
 ,{ "targets." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "CCore" , & fmt_h3_b }
 ,{ "-based" }
 ,{ "projects" }
} , & fmt_h3 , & align_h3 } ;

Text b9 = { {
 { "To" }
 ,{ "create" }
 ,{ "a" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "-based" }
 ,{ "project" }
 ,{ "select" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "for" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "place" }
 ,{ "in" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "(or" }
 ,{ "in" }
 ,{ "subdirectories)" }
 ,{ "a" }
 ,{ "source" }
 ,{ "code." }
 ,{ "Two" }
 ,{ "source" }
 ,{ "files" }
 ,{ "must" }
 ,{ "not" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "name," }
 ,{ "even" }
 ,{ "if" }
 ,{ "they" }
 ,{ "are" }
 ,{ "in" }
 ,{ "different" }
 ,{ "subdirectories." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "files" }
 ,{ "with" }
 ,{ "extension" }
 ,{ "\".cpp\"" , & fmt_text_b }
 ,{ "for" }
 ,{ "C++" }
 ,{ "source" }
 ,{ "files" }
 ,{ "ans" }
 ,{ "\".s\"" , & fmt_text_b }
 ,{ "for" }
 ,{ "assembler" }
 ,{ "source" }
 ,{ "files." }
 ,{ "Create" }
 ,{ "the" }
 ,{ "Makefile" , & fmt_text_b }
 ,{ "." }
 ,{ "Select" }
 ,{ "and" }
 ,{ "create" }
 ,{ "a" }
 ,{ "subdirectory" }
 ,{ "for" }
 ,{ "object" }
 ,{ "files" }
 ,{ "(and" }
 ,{ "other" }
 ,{ "intermediate" }
 ,{ "files)," }
 ,{ "usually" }
 ,{ ".obj" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "issue" }
 ,{ "the" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "Cygwin" , & fmt_text_b }
 ,{ "console." }
 ,{ "If" }
 ,{ "you" }
 ,{ "change" }
 ,{ "the" }
 ,{ "source" }
 ,{ "file" }
 ,{ "set," }
 ,{ "then" }
 ,{ "issue" }
 ,{ "the" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "list" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "erase" }
 ,{ "dependency" }
 ,{ "files" }
 ,{ "using" }
 ,{ "the" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "dep" , & fmt_text_b }
 ,{ "(sometimes" }
 ,{ "required)." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "Makefile" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "define" }
 ,{ "the" }
 ,{ "following" }
 ,{ "variables." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "CCORE_ROOT" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "path" }
 ,{ "to" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "root" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "CCORE_TARGET" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "target" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "OBJ_PATH" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "path" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "file" }
 ,{ "directory." }
 ,{ "This" }
 ,{ "variable" }
 ,{ "can" }
 ,{ "be" }
 ,{ "omitted," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "default" }
 ,{ "value" }
 ,{ "\".obj\"" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "TARGET" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "application" }
 ,{ "file" }
 ,{ "name." }
 ,{ "This" }
 ,{ "variable" }
 ,{ "can" }
 ,{ "be" }
 ,{ "omitted," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "default" }
 ,{ "value" }
 ,{ "\"main.exe\"" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "following" }
 ,{ "\"magic" }
 ,{ "line\"" }
 ,{ "must" }
 ,{ "follow:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "For" }
 ,{ "your" }
 ,{ "convenience" }
 ,{ "you" }
 ,{ "may" }
 ,{ "include" }
 ,{ "optional" }
 ,{ "make" }
 ,{ "targets" }
 ,{ "like" }
 ,{ "run" , & fmt_text_b }
 ,{ "above." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "There" }
 ,{ "are" }
 ,{ "additional" }
 ,{ "optional" }
 ,{ "variables" }
 ,{ "you" }
 ,{ "may" }
 ,{ "define." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "SRC_PATH_LIST" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "source" }
 ,{ "file" }
 ,{ "directories." }
 ,{ "It" }
 ,{ "is" }
 ,{ "\".\"" , & fmt_text_b }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "CCOPT_EXTRA" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "additional" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "compiler." }
 ,{ "It" }
 ,{ "is" }
 ,{ "empty" }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "LDOPT_EXTRA" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "additional" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "linker." }
 ,{ "It" }
 ,{ "is" }
 ,{ "empty" }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "If" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "libray," }
 ,{ "not" }
 ,{ "an" }
 ,{ "executable," }
 ,{ "then" }
 ,{ "use" }
 ,{ "another" }
 ,{ "\"magic" }
 ,{ "line\":" }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Names" }
 ,{ "and" }
 ,{ "decorations" }
} , & fmt_h3 , & align_h3 } ;

Text b24 = { {
 { "All" }
 ,{ "global" }
 ,{ "entities" }
 ,{ "have" }
 ,{ "capitalized" }
 ,{ "names." }
 ,{ "I.e." }
 ,{ "class" }
 ,{ "names," }
 ,{ "global" }
 ,{ "objects" }
 ,{ "etc." }
 ,{ "Local" }
 ,{ "object" }
 ,{ "names," }
 ,{ "non-static" }
 ,{ "members" }
 ,{ "and" }
 ,{ "method" }
 ,{ "names" }
 ,{ "start" }
 ,{ "from" }
 ,{ "lowercase" }
 ,{ "letters." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "definition:" }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "private" }
 ,{ "part" }
 ,{ "goes" }
 ,{ "first," }
 ,{ "the" }
 ,{ "public" }
 ,{ "is" }
 ,{ "last." }
 ,{ "Members" }
 ,{ "are" }
 ,{ "decorated" }
 ,{ "like" }
 ,{ "\"item_count\"" , & fmt_text_b }
 ,{ "." }
 ,{ "Methods" }
 ,{ "like" }
 ,{ "\"getItemCount()\"" , & fmt_text_b }
 ,{ "." }
 ,{ "Getters" }
 ,{ "like" }
 ,{ "\"getItemCount()\"" , & fmt_text_b }
 ,{ "and" }
 ,{ "setters" }
 ,{ "like" }
 ,{ "\"setItemCount()\"" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "argument," }
 ,{ "used" }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "member" }
 ,{ "\"item_count\"" , & fmt_text_b }
 ,{ "," }
 ,{ "named" }
 ,{ "as" }
 ,{ "\"item_count_\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Suffixes" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "variants:" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Sections" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "group" }
 ,{ "members:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "The" }
 ,{ "popular" }
 ,{ "words" }
 ,{ "are:" }
 ,{ "\"count\"" , & fmt_text_b }
 ,{ "," }
 ,{ "\"len\"" , & fmt_text_b }
 ,{ "," }
 ,{ "\"obj\"" , & fmt_text_b }
 ,{ "," }
 ,{ "\"try...\"" , & fmt_text_b }
 ,{ "," }
 ,{ "\"zstr\"" , & fmt_text_b }
 ,{ "," }
 ,{ "\"d...\"" , & fmt_text_b }
 ,{ "to" }
 ,{ "designate" }
 ,{ "a" }
 ,{ "delta" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "A" }
 ,{ "loop" }
 ,{ "for" , & fmt_text_b }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Another" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "operator" }
 ,{ "+" }
 ,{ "and" }
 ,{ "the" }
 ,{ "\"null\"" }
 ,{ "state" }
} , & fmt_h3 , & align_h3 } ;

Text b33 = { {
 { "There" }
 ,{ "are" }
 ,{ "many" }
 ,{ "types," }
 ,{ "which" }
 ,{ "have" }
 ,{ "a" }
 ,{ "special" }
 ,{ "state" }
 ,{ "â€”" }
 ,{ "\"null\"" }
 ,{ "state." }
 ,{ "Usually" }
 ,{ "for" }
 ,{ "such" }
 ,{ "types" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "\"null\"" }
 ,{ "object." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "often" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "Nothing" , & fmt_text_b }
 ,{ "-constructor" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "same." }
 ,{ "And" }
 ,{ "two" }
 ,{ "operators:" }
 ,{ "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "\"null\"." }
} , & fmt_text , & align_text } ;

Page page = { "page_CCoreGeneral" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b33 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CharProp {

Text b0 = { {
 { "Basic" }
 ,{ "character" }
 ,{ "properties" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CharProp.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CharProp.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "header" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "character" }
 ,{ "properties." }
 ,{ "They" }
 ,{ "are" }
 ,{ "all" }
 ,{ "efficient," }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context" }
 ,{ "and" }
 ,{ "non-mutable," }
 ,{ "i.e." }
 ,{ "do" }
 ,{ "not" }
 ,{ "depend" }
 ,{ "on" }
 ,{ "any" }
 ,{ "global" }
 ,{ "settings," }
 ,{ "like" }
 ,{ "locale." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "CharCode" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "CCore" , & fmt_text_b }
 ,{ "assumes" }
 ,{ "the" }
 ,{ "character" }
 ,{ "type" }
 ,{ "is" }
 ,{ "8-bit" }
 ,{ "and" }
 ,{ "uses" }
 ,{ "ASCII" }
 ,{ "encoding" }
 ,{ "(at" }
 ,{ "least" }
 ,{ "for" }
 ,{ "the" }
 ,{ "first" }
 ,{ "128" }
 ,{ "code" }
 ,{ "positions)." }
 ,{ "The" }
 ,{ "class" }
 ,{ "ASCIICode" , & fmt_text_b }
 ,{ "represents" }
 ,{ "an" }
 ,{ "ASCII" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ASCIICode" , & fmt_text_b }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "zero" }
 ,{ "ASCII" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ASCIICode" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "maps" }
 ,{ "a" }
 ,{ "character" }
 ,{ "(one" }
 ,{ "of" }
 ,{ "type" }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "signed" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ ")" }
 ,{ "into" }
 ,{ "its" }
 ,{ "ASCII" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "isSpecial()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "special," }
 ,{ "i.e." }
 ,{ "not" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "isVisible()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "visible," }
 ,{ "i.e." }
 ,{ "printable" }
 ,{ "and" }
 ,{ "not" }
 ,{ "a" }
 ,{ "space." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "isPrintable()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "printable," }
 ,{ "i.e." }
 ,{ "not" }
 ,{ "a" }
 ,{ "special." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "isSpace()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "space" }
 ,{ "and" }
 ,{ "some" }
 ,{ "special" }
 ,{ "\"space-like\"" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "isPunct()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "punctuation" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "isSpaceOrPunct()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "equivalent" }
 ,{ "of" }
 ,{ "isSpace()" , & fmt_text_b }
 ,{ "||" , & fmt_text_b }
 ,{ "isPunct()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "decValue()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "decimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character," }
 ,{ "or" }
 ,{ "-1" }
 ,{ "if" }
 ,{ "not" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "hexValue()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "hexadecimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character," }
 ,{ "or" }
 ,{ "-1" }
 ,{ "if" }
 ,{ "not" }
 ,{ "a" }
 ,{ "hexadecimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getChar()" , & fmt_text_b }
 ,{ "maps" }
 ,{ "the" }
 ,{ "code" }
 ,{ "back" }
 ,{ "to" }
 ,{ "the" }
 ,{ "character" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "ASCIICode" , & fmt_text_b }
 ,{ "is" }
 ,{ "printable." }
 ,{ "Special" }
 ,{ "characters" }
 ,{ "are" }
 ,{ "printed" }
 ,{ "using" }
 ,{ "C-backslash" }
 ,{ "representation," }
 ,{ "like" }
 ,{ "\"\\n\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "CharCode" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "typedef" }
 ,{ "for" }
 ,{ "the" }
 ,{ "ASCIICode" , & fmt_text_b }
 ,{ "," }
 ,{ "it's" }
 ,{ "an" }
 ,{ "abstraction" }
 ,{ "from" }
 ,{ "an" }
 ,{ "exact" }
 ,{ "type" }
 ,{ "of" }
 ,{ "encoding." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "ExtCharCode" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "ExtCharCode" , & fmt_text_b }
 ,{ "prints" }
 ,{ "a" }
 ,{ "symbol." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "this" }
 ,{ "class" }
 ,{ "holds" }
 ,{ "a" }
 ,{ "UTF8Code" , & fmt_text_b }
 ,{ "value" }
 ,{ "and" }
 ,{ "prints" }
 ,{ "it" }
 ,{ "using" }
 ,{ "C-backslash" }
 ,{ "notation," }
 ,{ "if" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "special." }
 ,{ "Otherwise" }
 ,{ "this" }
 ,{ "type" }
 ,{ "is" }
 ,{ "CharCode" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "PrintCString" }
} , & fmt_h4 , & align_h4 } ;

Text b21 = { {
 { "PrintCString" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "to" }
 ,{ "print" }
 ,{ "a" }
 ,{ "string." }
 ,{ "Each" }
 ,{ "special" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "using" }
 ,{ "its" }
 ,{ "C" }
 ,{ "representation," }
 ,{ "like" }
 ,{ "\"\\n\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Link link_Prop = { & page , { 22 } } ;

Text b22 = { {
 { "Character" }
 ,{ "properties" }
} , & fmt_h4 , & align_h4 } ;

Text b23 = { {
 { "The" }
 ,{ "following" }
 ,{ "functions" }
 ,{ "return" }
 ,{ "character" }
 ,{ "properties." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "type" }
 ,{ "is" }
 ,{ "one" }
 ,{ "of" }
 ,{ "traditional" }
 ,{ "character" }
 ,{ "types:" }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "signed" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "CharIsSpecial()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "special," }
 ,{ "i.e." }
 ,{ "not" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "CharIsVisible()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "visible," }
 ,{ "i.e." }
 ,{ "printable" }
 ,{ "and" }
 ,{ "not" }
 ,{ "a" }
 ,{ "space." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "CharIsPrintable()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "printable," }
 ,{ "i.e." }
 ,{ "not" }
 ,{ "a" }
 ,{ "special." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "CharIsSpace()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "space" }
 ,{ "and" }
 ,{ "some" }
 ,{ "special" }
 ,{ "characters." }
 ,{ "The" }
 ,{ "full" }
 ,{ "list" }
 ,{ "is" }
 ,{ "\"" , & fmt_text_b }
 ,{ "\\t\\f\\v\\r\\n\"" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "list" }
 ,{ "can" }
 ,{ "be" }
 ,{ "obtained" }
 ,{ "by" }
 ,{ "the" }
 ,{ "GetSpaceChars()" , & fmt_text_b }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "CharIsPunct()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "punctuation" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "CharIsSpaceOrPunct()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "equivalent" }
 ,{ "of" }
 ,{ "CharIsSpace()" , & fmt_text_b }
 ,{ "||" , & fmt_text_b }
 ,{ "CharIsPunct()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "CharDecValue()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "decimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character," }
 ,{ "or" }
 ,{ "-1" , & fmt_text_b }
 ,{ "if" }
 ,{ "not" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "CharHexValue()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "hexadecimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character," }
 ,{ "or" }
 ,{ "-1" , & fmt_text_b }
 ,{ "if" }
 ,{ "not" }
 ,{ "a" }
 ,{ "hexadecimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "there" }
 ,{ "are" }
 ,{ "extra" }
 ,{ "functions" }
 ,{ "for" }
 ,{ "Utf8Code" , & fmt_text_b }
 ,{ "argument:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Character" }
 ,{ "sets" }
} , & fmt_h4 , & align_h4 } ;

Text b34 = { {
 { "The" }
 ,{ "following" }
 ,{ "functions" }
 ,{ "return" }
 ,{ "zero-terminated" }
 ,{ "strings," }
 ,{ "these" }
 ,{ "strings" }
 ,{ "contain" }
 ,{ "some" }
 ,{ "important" }
 ,{ "character" }
 ,{ "sets." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "GetSpaceChars()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "\"traditional\"" }
 ,{ "C-space" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "GetPunctChars()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "punctuation" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "GetDigitChars()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "decimal" }
 ,{ "digits." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "GetHexDigitChars()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "hexadecimal" }
 ,{ "digits." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "GetCLetterChars()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "C-letters," }
 ,{ "including" }
 ,{ "underscore." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "Line" }
 ,{ "parsing" }
} , & fmt_h4 , & align_h4 } ;

Text b41 = { {
 { "The" }
 ,{ "following" }
 ,{ "function" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "split" }
 ,{ "the" }
 ,{ "given" }
 ,{ "text" }
 ,{ "into" }
 ,{ "lines:" }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "The" }
 ,{ "function" }
 ,{ "performs" }
 ,{ "a" }
 ,{ "text" }
 ,{ "search" }
 ,{ "for" }
 ,{ "the" }
 ,{ "line-end" }
 ,{ "dividers:" }
 ,{ "\"\\r\"," , & fmt_text_b }
 ,{ "\"\\n\"," , & fmt_text_b }
 ,{ "\"\\r\\n\"" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "a" }
 ,{ "divider" }
 ,{ "is" }
 ,{ "found," }
 ,{ "the" }
 ,{ "part" }
 ,{ "before" }
 ,{ "the" }
 ,{ "divider" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "and" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "changed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "part" }
 ,{ "after" }
 ,{ "the" }
 ,{ "divider." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "entire" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "and" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "changed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Page page = { "page_CharProp" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CharUtils {

Text b0 = { {
 { "CharUtils" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CharUtils.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CharUtils.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "simple" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "text," }
 ,{ "represented" }
 ,{ "by" }
 ,{ "a" }
 ,{ "Char" , & fmt_text_b }
 ,{ "sequence." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "conversion" }
 ,{ "from" }
 ,{ "char" , & fmt_text_b }
 ,{ "text" }
 ,{ "into" }
 ,{ "Char" , & fmt_text_b }
 ,{ "text" }
 ,{ "is" }
 ,{ "performed." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "FillCharBuf" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "fills" }
 ,{ "a" }
 ,{ "Char" , & fmt_text_b }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "a" }
 ,{ "text." }
 ,{ "The" }
 ,{ "result" }
 ,{ "fields" }
 ,{ "is" }
 ,{ "the" }
 ,{ "output" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "PrintCharBuf" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "This" }
 ,{ "class" }
 ,{ "prints" }
 ,{ "into" }
 ,{ "a" }
 ,{ "Char" , & fmt_text_b }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "close()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "output" }
 ,{ "range." }
 ,{ "If" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "this" }
 ,{ "method" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "overflow." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ScanCharString" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "This" }
 ,{ "class" }
 ,{ "scans" }
 ,{ "from" }
 ,{ "a" }
 ,{ "Char" , & fmt_text_b }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Page page = { "page_CharUtils" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CheckedData {

Text b0 = { {
 { "CheckedData" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/CheckedData.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/CheckedData.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "CheckedData" , & fmt_text_b }
 ,{ "is" }
 ,{ "useful" }
 ,{ "for" }
 ,{ "net" }
 ,{ "testing." }
 ,{ "You" }
 ,{ "can" }
 ,{ "fill" }
 ,{ "a" }
 ,{ "data" }
 ,{ "payload" }
 ,{ "with" }
 ,{ "checked" }
 ,{ "random" }
 ,{ "data" }
 ,{ "and" }
 ,{ "verify" }
 ,{ "its" }
 ,{ "integrity." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "method" }
 ,{ "getLen()" , & fmt_text_b }
 ,{ "selects" }
 ,{ "the" }
 ,{ "random" }
 ,{ "length" }
 ,{ "from" }
 ,{ "2" , & fmt_text_b }
 ,{ "to" }
 ,{ "max_len" , & fmt_text_b }
 ,{ "." }
 ,{ "max_len" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ ">" , & fmt_text_b }
 ,{ "2" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "max_len" , & fmt_text_b }
 ,{ "<=" }
 ,{ "2," }
 ,{ "the" }
 ,{ "max_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "always" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "fill()" , & fmt_text_b }
 ,{ "fills" }
 ,{ "the" }
 ,{ "given" }
 ,{ "byte" }
 ,{ "range" }
 ,{ "with" }
 ,{ "checked" }
 ,{ "random" }
 ,{ "data." }
 ,{ "It" }
 ,{ "is" }
 ,{ "expected," }
 ,{ "the" }
 ,{ "range" }
 ,{ "lengtn" }
 ,{ "is" }
 ,{ ">=" , & fmt_text_b }
 ,{ "2" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "method" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "check()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "the" }
 ,{ "data" }
 ,{ "range" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "correct." }
 ,{ "random" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "used" }
 ,{ "in" }
 ,{ "this" }
 ,{ "method," }
 ,{ "so" }
 ,{ "this" }
 ,{ "method" }
 ,{ "is" }
 ,{ "multi-thread" }
 ,{ "safe." }
} , & fmt_text , & align_text } ;

Page page = { "page_CheckedData" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Classification {

Text b0 = { {
 { "Classification" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Classification.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Classification.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "variety" }
 ,{ "of" }
 ,{ "widely-used" }
 ,{ "concepts" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Simple" }
 ,{ "concepts" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "AnyType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "any" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "NoType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "no" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "UIntType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "i.e." }
 ,{ "types" }
 ,{ "with" }
 ,{ "Meta::IsUInt<T>" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "SIntType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "i.e." }
 ,{ "types" }
 ,{ "with" }
 ,{ "Meta::IsSInt<T>" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "S2sIntType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "subset" }
 ,{ "of" }
 ,{ "SIntType" , & fmt_text_b }
 ,{ "with" }
 ,{ "2s" }
 ,{ "complemet" }
 ,{ "arithmetic." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "SUIntType" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "union" }
 ,{ "of" }
 ,{ "the" }
 ,{ "UIntType" , & fmt_text_b }
 ,{ "and" }
 ,{ "SIntType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "VoidType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "void" , & fmt_text_b }
 ,{ "and" }
 ,{ "const" , & fmt_text_b }
 ,{ "void" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "ConstCharType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "and" }
 ,{ "const" , & fmt_text_b }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "CharType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "and" }
 ,{ "const" , & fmt_text_b }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
 ,{ "ConstCharType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "CharType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "ULenType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "IsType<S>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "the" }
 ,{ "type" }
 ,{ "S" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "OneOfTypes<T" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,T" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "T" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,T" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "IsDerivedFrom<S>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types," }
 ,{ "derived" }
 ,{ "from" }
 ,{ "S" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "EnumType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "enums." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "ClassType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "PODType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "POD" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "NothrowDtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "nothrow" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "TrivDtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "trivial" }
 ,{ "destructor." }
 ,{ "TrivDtorType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "NothrowDtorType" , & fmt_text_b }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "DefaultCtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "NothrowDefaultCtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "nothrow" }
 ,{ "default" }
 ,{ "constructor." }
 ,{ "NothrowDefaultCtorType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "DefaultCtorType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "MoveCtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "move" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "CopyCtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "copy" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "NothrowCopyCtorType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types" }
 ,{ "with" }
 ,{ "nothrow" }
 ,{ "copy" }
 ,{ "constructor." }
 ,{ "NothrowCopyCtorType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "CopyCtorType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "MovableType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "movable" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "CopyableType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "copyable" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "NothrowCopyableType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "nothrow" }
 ,{ "copyable" }
 ,{ "types." }
 ,{ "NothrowCopyableType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "CopyableType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Complex" }
 ,{ "concepts" }
} , & fmt_h3 , & align_h3 } ;

Text b31 = { {
 { "ConstructibleType<T,S" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,S" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "is" }
 ,{ "satisfied" }
 ,{ "for" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "," }
 ,{ "constructible" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list" }
 ,{ "S" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,S" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "FuncArgType<Func,A" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,A" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "is" }
 ,{ "satisfied" }
 ,{ "for" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "type" }
 ,{ "Func" , & fmt_text_b }
 ,{ "," }
 ,{ "callable" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list" }
 ,{ "A" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,A" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "FuncType<Func,R,A" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,A" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "is" }
 ,{ "satisfied" }
 ,{ "for" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "type" }
 ,{ "Func" , & fmt_text_b }
 ,{ "," }
 ,{ "callable" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list" }
 ,{ "A" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,A" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "result" }
 ,{ "type," }
 ,{ "implicitly" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "R" , & fmt_text_b }
 ,{ "." }
 ,{ "FuncType<Func,R,A" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,A" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "=>" }
 ,{ "FuncArgType<Func,A" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ ",...,A" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "OpLessType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "<" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "OpEqualType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "==" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "OpNotEqualType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "!=" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "OpCmpType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "all" }
 ,{ "comparison" }
 ,{ "operators." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "OpLessTypes" , & fmt_text_b }
 ,{ "covers" }
 ,{ "couples" }
 ,{ "of" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "<" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "OpLessEqualTypes" , & fmt_text_b }
 ,{ "covers" }
 ,{ "couples" }
 ,{ "of" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "<=" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "OpGreaterTypes" , & fmt_text_b }
 ,{ "covers" }
 ,{ "couples" }
 ,{ "of" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ ">" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "OpGreaterEqualTypes" , & fmt_text_b }
 ,{ "covers" }
 ,{ "couples" }
 ,{ "of" }
 ,{ "types," }
 ,{ "comparable" }
 ,{ "by" }
 ,{ "the" }
 ,{ ">=" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "NullableType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "model" }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "NullableType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "NothrowDefaultCtorType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "IndirectOverType<T>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "dereferencable" }
 ,{ "types" }
 ,{ "with" }
 ,{ "result," }
 ,{ "implicitly" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "IndirectCastType<T>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "dereferencable" }
 ,{ "types" }
 ,{ "with" }
 ,{ "result," }
 ,{ "casted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "RangeAccessType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "model" }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "CursorType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "model" }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "CursorType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "NothrowCopyableType" , & fmt_text_b }
 ,{ "$" }
 ,{ "NullableType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "CursorOverType<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "conjunction" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CursorType" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "IndirectOverType<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "CursorCastType<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "conjunction" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CursorType" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "IndirectCastType<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "RecursorType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "model" }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "RecursorOverType<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "conjunction" }
 ,{ "of" }
 ,{ "the" }
 ,{ "RecursorType" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "IndirectOverType<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "RecursorCastType<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "conjunction" }
 ,{ "of" }
 ,{ "the" }
 ,{ "RecursorType" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "IndirectCastType<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "RanType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"pointer" }
 ,{ "kind\"" }
 ,{ "type." }
 ,{ "It" }
 ,{ "has" }
 ,{ "a" }
 ,{ "bunch" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "be" }
 ,{ "dealt" }
 ,{ "with." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "RanType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "NothrowCopyableType" , & fmt_text_b }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "RanType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "NothrowDefaultCtorType" , & fmt_text_b }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "RanType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "OpCmpType" , & fmt_text_b }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "ToOpNotEqualFuncType<T>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "functors" }
 ,{ "with" }
 ,{ "arguments" }
 ,{ "const" , & fmt_text_b }
 ,{ "T" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "and" }
 ,{ "with" }
 ,{ "return" }
 ,{ "value," }
 ,{ "comparable" }
 ,{ "with" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "ToOpLessFuncType<T>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "functors" }
 ,{ "with" }
 ,{ "arguments" }
 ,{ "const" , & fmt_text_b }
 ,{ "T" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "and" }
 ,{ "with" }
 ,{ "return" }
 ,{ "value," }
 ,{ "comparable" }
 ,{ "with" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "PtrToOpLessFuncType<Ptr>" , & fmt_text_b }
 ,{ "covers" }
 ,{ "functors" }
 ,{ "with" }
 ,{ "arguments" }
 ,{ "const" , & fmt_text_b }
 ,{ "T" , & fmt_text_b }
 ,{ "&" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "*Ptr" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "with" }
 ,{ "return" }
 ,{ "value," }
 ,{ "comparable" }
 ,{ "with" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "PrinterType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "model" }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "ScannerType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "model" }
} , & fmt_text , & align_text } ;

Page page = { "page_Classification" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CmdInput {

Text b0 = { {
 { "CmdInput" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CmdInput.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CmdInput.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CmdInput" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "CmdInput" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "character" }
 ,{ "input" }
 ,{ "processing" }
 ,{ "class." }
 ,{ "It" }
 ,{ "recognizes" }
 ,{ "a" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "commands." }
 ,{ "It" }
 ,{ "works" }
 ,{ "with" }
 ,{ "some" }
 ,{ "target" }
 ,{ "class." }
 ,{ "The" }
 ,{ "target" }
 ,{ "builds" }
 ,{ "the" }
 ,{ "command" }
 ,{ "set" }
 ,{ "and" }
 ,{ "provides" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "execute" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "CmdInput" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "target." }
 ,{ "It" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "target" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "buildCmdList()" , & fmt_text_b }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "the" }
 ,{ "command" }
 ,{ "set." }
 ,{ "Target" }
 ,{ "must" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "addCommand()" , & fmt_text_b }
 ,{ "to" }
 ,{ "add" }
 ,{ "a" }
 ,{ "command" }
 ,{ "to" }
 ,{ "the" }
 ,{ "set." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "strings" }
 ,{ "cmd" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "persistent" }
 ,{ "(at" }
 ,{ "least" }
 ,{ "for" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CmdInput" , & fmt_text_b }
 ,{ "object)," }
 ,{ "usually" }
 ,{ "they" }
 ,{ "are" }
 ,{ "string" }
 ,{ "literals." }
 ,{ "You" }
 ,{ "should" }
 ,{ "define" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "command" }
 ,{ "to" }
 ,{ "react" }
 ,{ "on" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "command" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "to" }
 ,{ "process" }
 ,{ "a" }
 ,{ "character" }
 ,{ "input:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "start()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "an" }
 ,{ "input" }
 ,{ "command." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "put(char)" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" }
 ,{ "character." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "valid," }
 ,{ "i.e." }
 ,{ "can" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "to" }
 ,{ "a" }
 ,{ "command." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "put(StrLen)" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" }
 ,{ "string" }
 ,{ "of" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "back()" , & fmt_text_b }
 ,{ "backs" }
 ,{ "one" }
 ,{ "character." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false," }
 ,{ "if" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "empty" }
 ,{ "and" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "backed." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Two" }
 ,{ "last" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "to" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "input." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "complete()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "valid." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "commands," }
 ,{ "which" }
 ,{ "can" }
 ,{ "be" }
 ,{ "received" }
 ,{ "by" }
 ,{ "completing" }
 ,{ "the" }
 ,{ "input," }
 ,{ "str" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "completing" }
 ,{ "string," }
 ,{ "if" }
 ,{ "the" }
 ,{ "count" , & fmt_text_b }
 ,{ "equals" }
 ,{ "1." }
 ,{ "This" }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "auto-completion." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "finish()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "a" }
 ,{ "command." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "non-null" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "target" }
 ,{ "method" }
 ,{ "to" }
 ,{ "execute" }
 ,{ "the" }
 ,{ "command." }
 ,{ "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "call." }
 ,{ "The" }
 ,{ "first" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "(StrLen" , & fmt_text_b }
 ,{ "arg)" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "second" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "(StrLen" , & fmt_text_b }
 ,{ "arg,Report" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "call" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "try-catch" }
 ,{ "block," }
 ,{ "report" }
 ,{ "is" }
 ,{ "an" }
 ,{ "ReportException" , & fmt_text_a }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "CmdInputCon" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "CmdInputCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "complex" }
 ,{ "class," }
 ,{ "it" }
 ,{ "combines" }
 ,{ "the" }
 ,{ "CmdInput" , & fmt_text_b }
 ,{ "and" }
 ,{ "some" }
 ,{ "console" }
 ,{ "reader" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "a" }
 ,{ "target," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "prompt" }
 ,{ "string." }
 ,{ "This" }
 ,{ "string" }
 ,{ "must" }
 ,{ "be" }
 ,{ "persistent" }
 ,{ "for" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "a" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "console" }
 ,{ "reader" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "\"Bad" }
 ,{ "character\"" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "during" }
 ,{ "command" }
 ,{ "input," }
 ,{ "if" }
 ,{ "the" }
 ,{ "entered" }
 ,{ "string" }
 ,{ "is" }
 ,{ "not" }
 ,{ "correct." }
 ,{ "For" }
 ,{ "example," }
 ,{ "if" }
 ,{ "the" }
 ,{ "command" }
 ,{ "set" }
 ,{ "is" }
 ,{ "\"start\"," }
 ,{ "\"exit\"" }
 ,{ "and" }
 ,{ "the" }
 ,{ "string" }
 ,{ "\"s\"" }
 ,{ "is" }
 ,{ "entered," }
 ,{ "then" }
 ,{ "typing" }
 ,{ "any" }
 ,{ "character," }
 ,{ "other" }
 ,{ "than" }
 ,{ "'t'" }
 ,{ "is" }
 ,{ "echoed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "bad" }
 ,{ "character." }
 ,{ "By" }
 ,{ "default," }
 ,{ "the" }
 ,{ "bad" }
 ,{ "character" }
 ,{ "is" }
 ,{ "'?'." }
 ,{ "The" }
 ,{ "method" }
 ,{ "setBadChar()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "The" }
 ,{ "main" }
 ,{ "method" }
 ,{ "is" }
 ,{ "the" }
 ,{ "command()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "enters" }
 ,{ "and" }
 ,{ "executes" }
 ,{ "a" }
 ,{ "single" }
 ,{ "command" }
 ,{ "from" }
 ,{ "the" }
 ,{ "console." }
 ,{ "An" }
 ,{ "additional" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "argument" }
 ,{ "may" }
 ,{ "be" }
 ,{ "provided" }
 ,{ "to" }
 ,{ "execute" }
 ,{ "a" }
 ,{ "command" }
 ,{ "in" }
 ,{ "a" }
 ,{ "try-catch" , & fmt_text_b }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "A" }
 ,{ "complete" }
 ,{ "example" }
 ,{ "of" }
 ,{ "using" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Page page = { "page_CmdInput" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Cmp {

Text b0 = { {
 { "3-way" }
 ,{ "Cmp" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Cmp.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Cmp.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Ordering" }
 ,{ "is" }
 ,{ "the" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "most" }
 ,{ "important" }
 ,{ "concept" }
 ,{ "in" }
 ,{ "the" }
 ,{ "software" }
 ,{ "world." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "supports" }
 ,{ "and" }
 ,{ "utilizes" }
 ,{ "the" }
 ,{ "3-way" , & fmt_text_b }
 ,{ "comparison" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "you" }
 ,{ "do" }
 ,{ "compare" }
 ,{ "two" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "linear" }
 ,{ "ordered" }
 ,{ "set," }
 ,{ "then" }
 ,{ "there" }
 ,{ "are" }
 ,{ "3" }
 ,{ "possible" }
 ,{ "outcomes:" }
 ,{ "less," }
 ,{ "equal" }
 ,{ "and" }
 ,{ "greater." }
 ,{ "Pitiful" }
 ,{ "(and" }
 ,{ "shameful)," }
 ,{ "but" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "a" }
 ,{ "natural" }
 ,{ "support" }
 ,{ "for" }
 ,{ "the" }
 ,{ "3-way" }
 ,{ "comparison" }
 ,{ "in" }
 ,{ "the" }
 ,{ "language." }
 ,{ "So" }
 ,{ "the" }
 ,{ "following" }
 ,{ "helper" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "used" }
 ,{ "for" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "enum" , & fmt_text_b }
 ,{ "CmpResult" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "an" }
 ,{ "outcome" }
 ,{ "of" }
 ,{ "a" }
 ,{ "3-way" }
 ,{ "comparison." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "function" }
 ,{ "LessCmp()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "3-way" }
 ,{ "comparison" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "types" }
 ,{ "with" }
 ,{ "defined" }
 ,{ "operator" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "covers" }
 ,{ "all" }
 ,{ "basic" }
 ,{ "integral" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "To" }
 ,{ "compare" }
 ,{ "objects" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Cmp()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "defined" }
 ,{ "method" }
 ,{ "objCmp()" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "Cmp()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "this" }
 ,{ "method," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "calls" }
 ,{ "LessCmp()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "AlphaCmp()" , & fmt_text_b }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "alphabetical" }
 ,{ "comparison:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "function" }
 ,{ "AlphaCmp()" , & fmt_text_b }
 ,{ "expects" }
 ,{ "any" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pairs" }
 ,{ "of" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "use" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "pair" }
 ,{ "a" }
 ,{ "single" }
 ,{ "CmpResult" , & fmt_text_b }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "RangeCmp()" , & fmt_text_b }
 ,{ "or" }
 ,{ "RangeLess()" , & fmt_text_b }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "alphabetical" }
 ,{ "comparison" }
 ,{ "of" }
 ,{ "two" }
 ,{ "ranges" }
 ,{ "of" }
 ,{ "objects:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "There" }
 ,{ "are" }
 ,{ "also" }
 ,{ "\"by\"" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "variants" }
 ,{ "use" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "by" , & fmt_text_b }
 ,{ "to" }
 ,{ "compare" }
 ,{ "objects:" }
 ,{ "to" }
 ,{ "compare" }
 ,{ "objects" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "they" }
 ,{ "do" }
 ,{ "compare" }
 ,{ "by(a)" , & fmt_text_b }
 ,{ "and" }
 ,{ "by(b)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "There" }
 ,{ "are" }
 ,{ "...Of" , & fmt_text_b }
 ,{ "variants" }
 ,{ "with" }
 ,{ "combined" }
 ,{ "range" }
 ,{ "extraction:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Use" }
 ,{ "the" }
 ,{ "functions" }
 ,{ "StrCmp()" , & fmt_text_b }
 ,{ "or" }
 ,{ "StrLess()" , & fmt_text_b }
 ,{ "to" }
 ,{ "compare" }
 ,{ "strings" }
 ,{ "(and" }
 ,{ "...Of" , & fmt_text_b }
 ,{ "variants):" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Starting" , & fmt_text_Alert }
 ,{ "from" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "version" , & fmt_text_Alert }
 ,{ "3.50" , & fmt_text_Alert }
 ,{ "comparision" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "performed" , & fmt_text_Alert }
 ,{ "using" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "unsigned" , & fmt_text_Alert }
 ,{ "character" , & fmt_text_Alert }
 ,{ "code." , & fmt_text_Alert }
 ,{ "It" }
 ,{ "makes" }
 ,{ "these" }
 ,{ "operations" }
 ,{ "UTF8-compatible." }
 ,{ "To" }
 ,{ "compare" }
 ,{ "single" }
 ,{ "characters" }
 ,{ "the" }
 ,{ "following" }
 ,{ "two" }
 ,{ "functions" }
 ,{ "has" }
 ,{ "been" }
 ,{ "added:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "class" }
 ,{ "CmpAsStr" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "adapter" }
 ,{ "class" }
 ,{ "to" }
 ,{ "help" }
 ,{ "combine" }
 ,{ "the" }
 ,{ "string" }
 ,{ "comparison" }
 ,{ "with" }
 ,{ "the" }
 ,{ "string" }
 ,{ "extraction:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "Property" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "classes" }
 ,{ "LessComparable" , & fmt_text_b }
 ,{ "and" }
 ,{ "CmpComparable" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "They" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "simplify" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "comparable" }
 ,{ "classes:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Why" }
 ,{ "3-Way" }
 ,{ "is" }
 ,{ "better" }
 ,{ "than" }
 ,{ "2-Way?" }
} , & fmt_h2 , & align_h2 } ;

Text b18 = { {
 { "The" }
 ,{ "answer" }
 ,{ "is" }
 ,{ "simple:" }
 ,{ "it" }
 ,{ "is" }
 ,{ "more" }
 ,{ "efficient" }
 ,{ "and" }
 ,{ "more" }
 ,{ "usable" }
 ,{ "in" }
 ,{ "applications." }
 ,{ "3-Way" }
 ,{ "comparison" }
 ,{ "has" }
 ,{ "near" }
 ,{ "the" }
 ,{ "same" }
 ,{ "cost" }
 ,{ "for" }
 ,{ "the" }
 ,{ "simple" }
 ,{ "types" }
 ,{ "as" }
 ,{ "2-Way." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "the" }
 ,{ "comparison" }
 ,{ "commands" }
 ,{ "on" }
 ,{ "the" }
 ,{ "modern" }
 ,{ "CPUs" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "complete" }
 ,{ "answers" }
 ,{ "how" }
 ,{ "two" }
 ,{ "integral" }
 ,{ "values" }
 ,{ "are" }
 ,{ "ordered." }
 ,{ "So" }
 ,{ "in" }
 ,{ "practice" }
 ,{ "only" }
 ,{ "the" }
 ,{ "absence" }
 ,{ "of" }
 ,{ "the" }
 ,{ "language" }
 ,{ "support" }
 ,{ "for" }
 ,{ "3-Way" }
 ,{ "or" }
 ,{ "the" }
 ,{ "lack" }
 ,{ "of" }
 ,{ "optimization" }
 ,{ "capabilities" }
 ,{ "of" }
 ,{ "compilers" }
 ,{ "makes" }
 ,{ "3-Way" }
 ,{ "comparison" }
 ,{ "of" }
 ,{ "basic" }
 ,{ "types" }
 ,{ "is" }
 ,{ "less" }
 ,{ "efficient." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "But" }
 ,{ "once" }
 ,{ "we" }
 ,{ "compare" }
 ,{ "combined" }
 ,{ "types" }
 ,{ "(usually" }
 ,{ "using" }
 ,{ "alphabetical" }
 ,{ "ordering)" }
 ,{ "we" }
 ,{ "start" }
 ,{ "winning:" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "All" }
 ,{ "usual" }
 ,{ "comparison" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "simply" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "Cmp()" , & fmt_text_b }
 ,{ "." }
 ,{ "And," }
 ,{ "finally," }
 ,{ "many" }
 ,{ "algorithms" }
 ,{ "have" }
 ,{ "advantage" }
 ,{ "using" }
 ,{ "3-Way" }
 ,{ "than" }
 ,{ "2-Way" }
 ,{ "both" }
 ,{ "in" }
 ,{ "efficiency" }
 ,{ "and" }
 ,{ "simplicity." }
} , & fmt_text , & align_text } ;

Page page = { "page_Cmp" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CommonIntAlgo {

Text b0 = { {
 { "CommonIntAlgo" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/CommonIntAlgo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/CommonIntAlgo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "two" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s" }
 ,{ "with" }
 ,{ "some" }
 ,{ "useful" }
 ,{ "integer" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "BitIntAlgo" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "package" }
 ,{ "is" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "three" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "IsEven()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "even." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "BitScan()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "zero" }
 ,{ "least" }
 ,{ "significant" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "which" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "zero." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "exponent" }
 ,{ "of" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "two," }
 ,{ "which" }
 ,{ "divides" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "OddPart()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "\"odd" }
 ,{ "part\"" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "which" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "zero." }
 ,{ "\"Odd" }
 ,{ "part\"" }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "odd" }
 ,{ "divisor" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number." }
 ,{ "Each" }
 ,{ "non-zero" }
 ,{ "number" }
 ,{ "is" }
 ,{ "a" }
 ,{ "product" }
 ,{ "of" }
 ,{ "its" }
 ,{ "\"odd" }
 ,{ "part\"" }
 ,{ "and" }
 ,{ "a" }
 ,{ "power" }
 ,{ "of" }
 ,{ "two." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "CommonIntAlgo" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "This" }
 ,{ "package" }
 ,{ "contains" }
 ,{ "algorithms" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "GCD" }
 ,{ "(great" }
 ,{ "common" }
 ,{ "divisor)" }
 ,{ "and" }
 ,{ "LCM" }
 ,{ "(least" }
 ,{ "common" }
 ,{ "multiple)." }
 ,{ "The" }
 ,{ "first" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "type" }
 ,{ "of" }
 ,{ "algorithms." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "an" }
 ,{ "algorithm" }
 ,{ "package," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "BitIntAlgo<UInt>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Functions" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "GCD" }
 ,{ "and" }
 ,{ "LCM" }
 ,{ "for" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "They" }
 ,{ "call" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "algorithms" }
 ,{ "from" }
 ,{ "the" }
 ,{ "CommonIntAlgo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_CommonIntAlgo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CompactLists {

Text b0 = { {
 { "Compact" }
 ,{ "lists" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CompactList.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CompactList.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Compact" }
 ,{ "lists" }
 ,{ "are" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "traditional" , & fmt_text_a }
 ,{ "lists" , & fmt_text_a }
 ,{ "." }
 ,{ "They" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "and" }
 ,{ "behavior," }
 ,{ "except" }
 ,{ "compact" }
 ,{ "lists" }
 ,{ "move" }
 ,{ "elements" }
 ,{ "during" }
 ,{ "delete" }
 ,{ "operations." }
 ,{ "Compact" }
 ,{ "lists" }
 ,{ "are" }
 ,{ "more" }
 ,{ "efficient" }
 ,{ "and" }
 ,{ "consume" }
 ,{ "less" }
 ,{ "memory," }
 ,{ "than" }
 ,{ "traditional." }
 ,{ "They" }
 ,{ "require" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "to" }
 ,{ "be" }
 ,{ "swappable." }
 ,{ "They" }
 ,{ "also" }
 ,{ "have" }
 ,{ "no" }
 ,{ "node" }
 ,{ "allocator" }
 ,{ "template" }
 ,{ "parameter:" }
 ,{ "compact" , & fmt_text_a }
 ,{ "node" , & fmt_text_a }
 ,{ "allocator" , & fmt_text_a }
 ,{ "is" }
 ,{ "always" }
 ,{ "used." }
 ,{ "Constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "allocator." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "CompactList" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "LinearDList" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "CompactList2" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "LinearDList2" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "CompactCircularList" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CircularDList" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_CompactLists" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CompactMaps {

Text b0 = { {
 { "Compact" }
 ,{ "maps" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CompactMap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CompactMap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "These" }
 ,{ "two" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "compact" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "traditional" , & fmt_text_a }
 ,{ "maps" , & fmt_text_a }
 ,{ "." }
 ,{ "They" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "and" }
 ,{ "behavior," }
 ,{ "except" }
 ,{ "compact" }
 ,{ "maps" }
 ,{ "move" }
 ,{ "elements" }
 ,{ "during" }
 ,{ "delete" }
 ,{ "operations." }
 ,{ "Compact" }
 ,{ "maps" }
 ,{ "are" }
 ,{ "more" }
 ,{ "efficient" }
 ,{ "and" }
 ,{ "consume" }
 ,{ "less" }
 ,{ "memory," }
 ,{ "than" }
 ,{ "traditional." }
 ,{ "They" }
 ,{ "require" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "to" }
 ,{ "be" }
 ,{ "swappable." }
 ,{ "They" }
 ,{ "also" }
 ,{ "have" }
 ,{ "no" }
 ,{ "node" }
 ,{ "allocator" }
 ,{ "template" }
 ,{ "parameter:" }
 ,{ "compact" , & fmt_text_a }
 ,{ "node" , & fmt_text_a }
 ,{ "allocator" , & fmt_text_a }
 ,{ "is" }
 ,{ "always" }
 ,{ "used." }
 ,{ "Constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "allocator." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "CompactRBTreeMap" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "map" }
 ,{ "is" }
 ,{ "a" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "RBTreeMap" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "CompactRadixTreeMap" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "This" }
 ,{ "map" }
 ,{ "is" }
 ,{ "a" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "RadixTreeMap" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_CompactMaps" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CompactNodeAllocator {

Text b0 = { {
 { "Compact" }
 ,{ "node" }
 ,{ "allocator" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CompactNodeAllocator.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CompactNodeAllocator.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Compact" }
 ,{ "node" }
 ,{ "allocator" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "destroy" }
 ,{ "list" }
 ,{ "and" }
 ,{ "tree" }
 ,{ "nodes" }
 ,{ "in" }
 ,{ "compact" }
 ,{ "lists" }
 ,{ "and" }
 ,{ "tree" }
 ,{ "maps." }
 ,{ "It" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "node" , & fmt_text_a }
 ,{ "allocators" , & fmt_text_a }
 ,{ "," }
 ,{ "but" }
 ,{ "have" }
 ,{ "different" }
 ,{ "node" }
 ,{ "deletion" }
 ,{ "methods." }
 ,{ "This" }
 ,{ "allocator" }
 ,{ "is" }
 ,{ "efficient" }
 ,{ "both" }
 ,{ "in" }
 ,{ "the" }
 ,{ "performance" }
 ,{ "and" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "utilization." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "node" }
 ,{ "block" }
 ,{ "length" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "it" }
 ,{ "is" }
 ,{ "100" , & fmt_text_b }
 ,{ "by" }
 ,{ "default." }
 ,{ "Memory" }
 ,{ "for" }
 ,{ "nodes" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "in" }
 ,{ "blocks" }
 ,{ "of" }
 ,{ "this" }
 ,{ "capacity." }
 ,{ "Destructor" }
 ,{ "calls" }
 ,{ "abort," }
 ,{ "if" }
 ,{ "not" }
 ,{ "all" }
 ,{ "nodes" }
 ,{ "are" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "CompactNodeAllocator" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "there" }
 ,{ "are" }
 ,{ "allocated" }
 ,{ "nodes." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "allocated" }
 ,{ "nodes." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "node." }
 ,{ "Arguments" }
 ,{ "are" }
 ,{ "forwarder" }
 ,{ "to" }
 ,{ "the" }
 ,{ "node" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "erase()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "all" }
 ,{ "allocated" }
 ,{ "nodes." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "nodes" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "todel()" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "\"special\"" }
 ,{ "node," }
 ,{ "which" }
 ,{ "can" }
 ,{ "be" }
 ,{ "deleted." }
 ,{ "If" }
 ,{ "there" }
 ,{ "are" }
 ,{ "no" }
 ,{ "allocated" }
 ,{ "nodes," }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Unlike" }
 ,{ "other" }
 ,{ "node" }
 ,{ "allocators," }
 ,{ "compact" }
 ,{ "variant" }
 ,{ "can" }
 ,{ "delete" }
 ,{ "only" }
 ,{ "one" }
 ,{ "special" }
 ,{ "node" }
 ,{ "from" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "allocated" }
 ,{ "nodes." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "special" }
 ,{ "node," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "CompactNodeAllocator" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Page page = { "page_CompactNodeAllocator" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CompletePacket {

Text b0 = { {
 { "(XCore)" }
 ,{ "CompletePacket" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/CompletePacket.h" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "function" }
 ,{ "CompletePacket_int" , & fmt_text_b }
 ,{ "is" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "only." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "complete" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "call" }
 ,{ "complete()" , & fmt_text_b }
 ,{ "directly" }
 ,{ "there," }
 ,{ "so" }
 ,{ "the" }
 ,{ "special" }
 ,{ "high" }
 ,{ "priority" }
 ,{ "task" }
 ,{ "â€”" }
 ,{ "Complete" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "," }
 ,{ "is" }
 ,{ "running" }
 ,{ "in" }
 ,{ "the" }
 ,{ "system" }
 ,{ "to" }
 ,{ "do" }
 ,{ "this" }
 ,{ "job." }
 ,{ "The" }
 ,{ "function" }
 ,{ "simply" }
 ,{ "puts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "its" }
 ,{ "input" }
 ,{ "queue" }
 ,{ "and" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "semaphore." }
 ,{ "This" }
 ,{ "function" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "only" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Page page = { "page_CompletePacket" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CondLangLR1 {

Text b0 = { {
 { "CondLangLR1" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "This" }
 ,{ "utility" }
 ,{ "generates" }
 ,{ "LR1" }
 ,{ "parsing" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "LR1" }
 ,{ "language." }
 ,{ "The" }
 ,{ "language" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "using" }
 ,{ "the" }
 ,{ "conditional" , & fmt_text_i }
 ,{ "recursive" , & fmt_text_i }
 ,{ "grammar" , & fmt_text_i }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "The" }
 ,{ "only" }
 ,{ "command-line" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "language" }
 ,{ "file" }
 ,{ "name." }
 ,{ "If" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "has" }
 ,{ "no" }
 ,{ "extension," }
 ,{ ".lang" , & fmt_text_b }
 ,{ "is" }
 ,{ "added." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "On" }
 ,{ "success" }
 ,{ "two" }
 ,{ "files" }
 ,{ "are" }
 ,{ "generated:" }
 ,{ ".txt" , & fmt_text_b }
 ,{ "file" }
 ,{ "and" }
 ,{ ".ddl" , & fmt_text_b }
 ,{ "file." }
 ,{ "They" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "name" }
 ,{ "as" }
 ,{ "the" }
 ,{ "input" }
 ,{ "file" }
 ,{ "and" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "same" }
 ,{ "directory." }
 ,{ ".txt" , & fmt_text_b }
 ,{ "file" }
 ,{ "contains" }
 ,{ "processing" }
 ,{ "information" }
 ,{ "in" }
 ,{ "a" }
 ,{ "readable" }
 ,{ "form." }
 ,{ ".ddl" , & fmt_text_b }
 ,{ "file" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "description" }
 ,{ "in" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "format." }
 ,{ "The" }
 ,{ "file" }
 ,{ "LangType.ddl" , & fmt_text_b }
 ,{ "in" }
 ,{ "CCORE_ROOT/tools/CondLangLR1" , & fmt_text_b }
 ,{ "contains" }
 ,{ "required" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "type" }
 ,{ "definitions." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "On" }
 ,{ "failure" }
 ,{ "the" }
 ,{ "only" }
 ,{ ".bad.txt" , & fmt_text_b }
 ,{ "file" }
 ,{ "is" }
 ,{ "generated." }
 ,{ "You" }
 ,{ "can" }
 ,{ "examine" }
 ,{ "this" }
 ,{ "file" }
 ,{ "to" }
 ,{ "understand," }
 ,{ "why" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "not" }
 ,{ "an" }
 ,{ "LR1" }
 ,{ "language" }
 ,{ "and" }
 ,{ "try" }
 ,{ "to" }
 ,{ "fix" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "AMP" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "Below" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "AMP.lang" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AMP" , & fmt_text_b }
 ,{ "language." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "You" }
 ,{ "may" }
 ,{ "see" }
 ,{ "the" }
 ,{ "output" }
 ,{ "for" }
 ,{ "this" }
 ,{ "language" }
 ,{ "in" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "CCORE_ROOT/tools/CondLangLR1/AMP" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Conditional" }
 ,{ "recursive" }
 ,{ "grammar" }
} , & fmt_h2 , & align_h2 } ;

Text b9 = { {
 { "Conditional" }
 ,{ "recursive" }
 ,{ "grammar" }
 ,{ "is" }
 ,{ "an" }
 ,{ "advanced" }
 ,{ "version" }
 ,{ "of" }
 ,{ "context-free" , & fmt_text_b }
 ,{ "grammer" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "define" }
 ,{ "a" }
 ,{ "language" }
 ,{ "by" }
 ,{ "a" }
 ,{ "uniquely" }
 ,{ "decoded" }
 ,{ "grammar" }
 ,{ "it" }
 ,{ "is" }
 ,{ "often" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "introduce" }
 ,{ "extra" }
 ,{ "non-terminals." }
 ,{ "For" }
 ,{ "example," }
 ,{ "you" }
 ,{ "can" }
 ,{ "define" }
 ,{ "AMP" , & fmt_text_b }
 ,{ "language" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "grammar:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "but" }
 ,{ "this" }
 ,{ "grammar" }
 ,{ "is" }
 ,{ "not" }
 ,{ "uniquely" }
 ,{ "decoded." }
 ,{ "To" }
 ,{ "make" }
 ,{ "it" }
 ,{ "such" }
 ,{ "you" }
 ,{ "may" }
 ,{ "introduce" }
 ,{ "extra" }
 ,{ "non-terminals:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Conditional" }
 ,{ "grammar" }
 ,{ "is" }
 ,{ "an" }
 ,{ "alternative" }
 ,{ "way." }
 ,{ "Instead" }
 ,{ "defining" }
 ,{ "of" }
 ,{ "new" }
 ,{ "non-terminals," }
 ,{ "we" }
 ,{ "introduce" }
 ,{ "\"kinds\"." }
 ,{ "Kind" }
 ,{ "is" }
 ,{ "a" }
 ,{ "property" }
 ,{ "of" }
 ,{ "a" }
 ,{ "non-terminal" }
 ,{ "production." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "non-terminal" }
 ,{ "EXPR" , & fmt_text_b }
 ,{ "with" }
 ,{ "three" }
 ,{ "associated" }
 ,{ "kinds:" }
 ,{ "A" , & fmt_text_b }
 ,{ "," }
 ,{ "M" , & fmt_text_b }
 ,{ "and" }
 ,{ "P" , & fmt_text_b }
 ,{ "." }
 ,{ "When" }
 ,{ "we" }
 ,{ "produce" }
 ,{ "a" }
 ,{ "word" }
 ,{ "of" }
 ,{ "this" }
 ,{ "non-terminal" }
 ,{ "class," }
 ,{ "we" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "kind" }
 ,{ "to" }
 ,{ "it," }
 ,{ "it" }
 ,{ "is" }
 ,{ "designated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "trailing" }
 ,{ "=" , & fmt_text_b }
 ,{ "kind" , & fmt_text_b }
 ,{ "statement." }
 ,{ "A" }
 ,{ "particular" }
 ,{ "production" }
 ,{ "rule" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "condition," }
 ,{ "this" }
 ,{ "condition" }
 ,{ "must" }
 ,{ "be" }
 ,{ "satisfied" }
 ,{ "to" }
 ,{ "apply" }
 ,{ "this" }
 ,{ "rule." }
 ,{ "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "rule" }
 ,{ "opAdd" , & fmt_text_b }
 ,{ "can" }
 ,{ "only" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "if" }
 ,{ "the" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "the" }
 ,{ "second" }
 ,{ "subexpression" }
 ,{ "(" }
 ,{ ".a" , & fmt_text_b }
 ,{ ")" }
 ,{ "is" }
 ,{ "M" , & fmt_text_b }
 ,{ "or" }
 ,{ "P" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Using" }
 ,{ "conditional" }
 ,{ "grammars" }
 ,{ "you" }
 ,{ "avoid" }
 ,{ "rule" }
 ,{ "redundancy." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "\"cast\"" }
 ,{ "rules." }
 ,{ "The" }
 ,{ "language" }
 ,{ "description" }
 ,{ "becomes" }
 ,{ "also" }
 ,{ "more" }
 ,{ "intuitive." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "You" }
 ,{ "can" }
 ,{ "read" }
 ,{ "more" }
 ,{ "about" }
 ,{ "conditional" }
 ,{ "recursive" }
 ,{ "grammars" }
 ,{ "in" }
 ,{ "this" , & fmt_text_a }
 ,{ "document" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Grammar" }
 ,{ "description" }
} , & fmt_h2 , & align_h2 } ;

Text b16 = { {
 { "We" }
 ,{ "use" }
 ,{ "the" }
 ,{ "term" }
 ,{ "\"syntax" }
 ,{ "class\"" }
 ,{ "or" }
 ,{ "\"synt\"" }
 ,{ "for" }
 ,{ "non-terminals." }
 ,{ "The" }
 ,{ "grammar" }
 ,{ "description" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "synt" }
 ,{ "descriptions." }
 ,{ "Each" }
 ,{ "synt" }
 ,{ "has" }
 ,{ "a" }
 ,{ "unique" }
 ,{ "name," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "C" , & fmt_text_b }
 ,{ "name." }
 ,{ "Some" }
 ,{ "synts" }
 ,{ "(usually" }
 ,{ "one)" }
 ,{ "are" }
 ,{ "language" }
 ,{ "synts," }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "language" }
 ,{ "is" }
 ,{ "a" }
 ,{ "union" }
 ,{ "of" }
 ,{ "these" }
 ,{ "synt's" }
 ,{ "productions." }
 ,{ "These" }
 ,{ "synts" }
 ,{ "are" }
 ,{ "prefixed" }
 ,{ "with" }
 ,{ "the" }
 ,{ "character" }
 ,{ "!" , & fmt_text_b }
 ,{ "." }
 ,{ "A" }
 ,{ "synt" }
 ,{ "description" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "name," }
 ,{ "optionally" }
 ,{ "preceded" }
 ,{ "by" }
 ,{ "the" }
 ,{ "character" }
 ,{ "!" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "has" }
 ,{ "associated" }
 ,{ "kinds," }
 ,{ "the" }
 ,{ "synt" }
 ,{ "description" }
 ,{ "continues" }
 ,{ "with" }
 ,{ "the" }
 ,{ "sign" }
 ,{ ":" , & fmt_text_b }
 ,{ "and" }
 ,{ "following" }
 ,{ "comma" }
 ,{ "separated" }
 ,{ "kind" }
 ,{ "names." }
 ,{ "Kind" }
 ,{ "names" }
 ,{ "must" }
 ,{ "be" }
 ,{ "C" , & fmt_text_b }
 ,{ "names" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "unique" }
 ,{ "for" }
 ,{ "each" }
 ,{ "synt." }
 ,{ "At" }
 ,{ "least" }
 ,{ "one" }
 ,{ "kind" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
 ,{ "Then" }
 ,{ "production" }
 ,{ "rule" }
 ,{ "descriptions" }
 ,{ "follows," }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "figure" }
 ,{ "brackets." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Kinds" }
 ,{ "of" }
 ,{ "the" }
 ,{ "same" }
 ,{ "synt" }
 ,{ "are" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "linear" }
 ,{ "ordered." }
 ,{ "The" }
 ,{ "order" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "appearance," }
 ,{ "i.e." }
 ,{ "a" }
 ,{ "kind" }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "another" }
 ,{ "kind," }
 ,{ "if" }
 ,{ "it" }
 ,{ "appears" }
 ,{ "earlier" }
 ,{ "in" }
 ,{ "the" }
 ,{ "kinds" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "A" }
 ,{ "kind" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "numeric" }
 ,{ "value," }
 ,{ "which" }
 ,{ "is" }
 ,{ "the" }
 ,{ "index" }
 ,{ "in" }
 ,{ "the" }
 ,{ "kinds" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Rules" }
 ,{ "description" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "rule" }
 ,{ "descriptions." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Each" }
 ,{ "rule" }
 ,{ "description" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "elements" }
 ,{ "sequence." }
 ,{ "During" }
 ,{ "this" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "input" }
 ,{ "the" }
 ,{ "text" }
 ,{ "is" }
 ,{ "parsed" }
 ,{ "by" }
 ,{ "words," }
 ,{ "divided" }
 ,{ "by" }
 ,{ "space" }
 ,{ "characters." }
 ,{ "To" }
 ,{ "terminate" }
 ,{ "it" }
 ,{ "you" }
 ,{ "must" }
 ,{ "enter" }
 ,{ "either" }
 ,{ ":" , & fmt_text_b }
 ,{ "to" }
 ,{ "finish" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "elements" }
 ,{ "sequence" }
 ,{ "or" }
 ,{ "}" , & fmt_text_b }
 ,{ "to" }
 ,{ "close" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "descriptions," }
 ,{ "surrounded" }
 ,{ "by" }
 ,{ "at" }
 ,{ "least" }
 ,{ "one" }
 ,{ "space" }
 ,{ "character" }
 ,{ "before" }
 ,{ "and" }
 ,{ "after." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Each" }
 ,{ "rule" }
 ,{ "has" }
 ,{ "a" }
 ,{ "rule" }
 ,{ "name," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "either" }
 ,{ "a" }
 ,{ "C" , & fmt_text_b }
 ,{ "name" }
 ,{ "or" }
 ,{ "a" }
 ,{ "compound" }
 ,{ "C" , & fmt_text_b }
 ,{ "name," }
 ,{ "concatenated" }
 ,{ "from" }
 ,{ "several" }
 ,{ "C" , & fmt_text_b }
 ,{ "names" }
 ,{ "by" }
 ,{ "the" }
 ,{ "character" }
 ,{ "@" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "unique" }
 ,{ "for" }
 ,{ "each" }
 ,{ "synt." }
 ,{ "If" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "has" }
 ,{ "kinds," }
 ,{ "a" }
 ,{ "rule" }
 ,{ "kind" }
 ,{ "must" }
 ,{ "be" }
 ,{ "given," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "must" }
 ,{ "not" }
 ,{ "present." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Rule" }
 ,{ "elements" }
 ,{ "part" }
 ,{ "is" }
 ,{ "parsed" }
 ,{ "on" }
 ,{ "words," }
 ,{ "separated" }
 ,{ "by" }
 ,{ "space" }
 ,{ "characters." }
 ,{ "Each" }
 ,{ "word" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "printable" }
 ,{ "non-space" }
 ,{ "characters." }
 ,{ "The" }
 ,{ "word" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "synt" }
 ,{ "name" }
 ,{ "or" }
 ,{ "an" }
 ,{ "atom" }
 ,{ "name." }
 ,{ "Synt" }
 ,{ "name" }
 ,{ "may" }
 ,{ "have" }
 ,{ "a" }
 ,{ "dot-suffix" }
 ,{ "with" }
 ,{ "variable" }
 ,{ "name." }
 ,{ "Everything" }
 ,{ "which" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "synt" }
 ,{ "name" }
 ,{ "is" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "an" }
 ,{ "atom" }
 ,{ "name." }
 ,{ "Language" }
 ,{ "atom" }
 ,{ "set" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "implicitly" }
 ,{ "by" }
 ,{ "collecting" }
 ,{ "atom" }
 ,{ "names" }
 ,{ "from" }
 ,{ "rule" }
 ,{ "definitions." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Two" }
 ,{ "one-character" }
 ,{ "words" }
 ,{ "}" , & fmt_text_b }
 ,{ "and" }
 ,{ ":" , & fmt_text_b }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "define" }
 ,{ "an" }
 ,{ "atom." }
 ,{ "But" }
 ,{ "you" }
 ,{ "can" }
 ,{ "introduce" }
 ,{ "an" }
 ,{ "atom" }
 ,{ "with" }
 ,{ "such" }
 ,{ "name" }
 ,{ "using" }
 ,{ "the" }
 ,{ "character" }
 ,{ "`" , & fmt_text_b }
 ,{ "as" }
 ,{ "the" }
 ,{ "prefix," }
 ,{ "i.e." }
 ,{ "`}" , & fmt_text_b }
 ,{ "and" }
 ,{ "`:" , & fmt_text_b }
 ,{ "are" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "atom" }
 ,{ "names," }
 ,{ "but" }
 ,{ "modified" }
 ,{ "to" }
 ,{ "the" }
 ,{ "names" }
 ,{ "}" , & fmt_text_b }
 ,{ "and" }
 ,{ ":" , & fmt_text_b }
 ,{ "." }
 ,{ "Also" }
 ,{ "``}" , & fmt_text_b }
 ,{ "is" }
 ,{ "modified" }
 ,{ "to" }
 ,{ "`}" , & fmt_text_b }
 ,{ "," }
 ,{ "```}" , & fmt_text_b }
 ,{ "to" }
 ,{ "``}" , & fmt_text_b }
 ,{ "and" }
 ,{ "so" }
 ,{ "on." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "A" }
 ,{ "rule" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "rule" }
 ,{ "condition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "form:" }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "A" }
 ,{ "condition" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "an" }
 ,{ "expression," }
 ,{ "built" }
 ,{ "from" }
 ,{ "prime" }
 ,{ "expressions" }
 ,{ "using" }
 ,{ "the" }
 ,{ "logical" }
 ,{ "operations" }
 ,{ "$" , & fmt_text_b }
 ,{ "(logical" }
 ,{ "AND)," }
 ,{ "|" , & fmt_text_b }
 ,{ "(logical" }
 ,{ "OR)" }
 ,{ "and" }
 ,{ "!" , & fmt_text_b }
 ,{ "(logical" }
 ,{ "NOT)." }
 ,{ "$" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "higher" }
 ,{ "priority" }
 ,{ "than" }
 ,{ "|" , & fmt_text_b }
 ,{ "." }
 ,{ "Brackets" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "order" }
 ,{ "of" }
 ,{ "evaluation." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Prime" }
 ,{ "expressions" }
 ,{ "are" }
 ,{ "comparison" }
 ,{ "expressions:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Each" }
 ,{ "name" }
 ,{ "either" }
 ,{ "a" }
 ,{ "variable" }
 ,{ "name" }
 ,{ "or" }
 ,{ "a" }
 ,{ "kind" }
 ,{ "name." }
 ,{ "At" }
 ,{ "least" }
 ,{ "one" }
 ,{ "name" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "variable" }
 ,{ "name." }
 ,{ "Variables" }
 ,{ "are" }
 ,{ "introduced" }
 ,{ "in" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "element" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "dot-suffix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "name." }
 ,{ "For" }
 ,{ "example," }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "here" }
 ,{ "two" }
 ,{ "variables" }
 ,{ "were" }
 ,{ "introduced:" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "." }
 ,{ "Each" }
 ,{ "of" }
 ,{ "them" }
 ,{ "designate" }
 ,{ "the" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "synt" }
 ,{ "production." }
 ,{ "If" }
 ,{ "the" }
 ,{ "name" }
 ,{ "is" }
 ,{ "a" }
 ,{ "kind" }
 ,{ "name," }
 ,{ "the" }
 ,{ "corespondent" }
 ,{ "kind" }
 ,{ "is" }
 ,{ "looked-up" }
 ,{ "among" }
 ,{ "the" }
 ,{ "kinds" }
 ,{ "of" }
 ,{ "the" }
 ,{ "synt," }
 ,{ "the" }
 ,{ "other" }
 ,{ "name" }
 ,{ "is" }
 ,{ "a" }
 ,{ "variable" }
 ,{ "of." }
 ,{ "I.e." }
 ,{ "in" }
 ,{ "the" }
 ,{ "example" }
 ,{ "above" }
 ,{ "P" , & fmt_text_b }
 ,{ "is" }
 ,{ "looked-up" }
 ,{ "among" }
 ,{ "the" }
 ,{ "kinds" }
 ,{ "of" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "EXPR" , & fmt_text_b }
 ,{ "." }
 ,{ "Kinds" }
 ,{ "are" }
 ,{ "compared" }
 ,{ "using" }
 ,{ "they" }
 ,{ "numeric" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "synts:" }
 ,{ "noneof" , & fmt_text_b }
 ,{ "synts." }
 ,{ "They" }
 ,{ "are" }
 ,{ "described" }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "This" }
 ,{ "synt" }
 ,{ "produces" }
 ,{ "all" }
 ,{ "one-atom" }
 ,{ "words" }
 ,{ "from" }
 ,{ "atoms" }
 ,{ "not" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "list." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "equivalent" }
 ,{ "the" }
 ,{ "following" }
 ,{ "description:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "DDL" }
 ,{ "output" }
} , & fmt_h2 , & align_h2 } ;

Text b32 = { {
 { "DDL" , & fmt_text_b }
 ,{ "output" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "full" }
 ,{ "description" }
 ,{ "of" }
 ,{ "the" }
 ,{ "language" }
 ,{ "and" }
 ,{ "the" }
 ,{ "LR1" }
 ,{ "parsing" }
 ,{ "state" }
 ,{ "machine." }
 ,{ "This" }
 ,{ "output" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "single" }
 ,{ "constant" }
 ,{ "lang" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Lang" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "type" }
 ,{ "definitions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "found" }
 ,{ "in" }
 ,{ "the" }
 ,{ "file" }
 ,{ "CCORE_ROOT/tools/CondLangLR1/LangType.ddl" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "There" }
 ,{ "are" }
 ,{ "following" }
 ,{ "description" }
 ,{ "entities:" }
 ,{ "Atom" , & fmt_text_b }
 ,{ "," }
 ,{ "Synt" , & fmt_text_b }
 ,{ "," }
 ,{ "Kind" , & fmt_text_b }
 ,{ "," }
 ,{ "Element" , & fmt_text_b }
 ,{ "," }
 ,{ "Rule" , & fmt_text_b }
 ,{ "," }
 ,{ "TopRule" , & fmt_text_b }
 ,{ "," }
 ,{ "State" , & fmt_text_b }
 ,{ "and" }
 ,{ "Final" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "structure" }
 ,{ "Lang" , & fmt_text_b }
 ,{ "consists" }
 ,{ "of" }
 ,{ "arrays" }
 ,{ "of" }
 ,{ "these" }
 ,{ "entities." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "lang" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "the" }
 ,{ "array" }
 ,{ "of" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "Synt" , & fmt_text_b }
 ,{ "," }
 ,{ "these" }
 ,{ "synts" }
 ,{ "are" }
 ,{ "language" }
 ,{ "synts." }
 ,{ "Each" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "index" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "field" }
 ,{ "is" }
 ,{ "the" }
 ,{ "index" }
 ,{ "in" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "structure" }
 ,{ "array." }
 ,{ "For" }
 ,{ "example," }
 ,{ "lang.atoms[I].index==I" , & fmt_text_b }
 ,{ "." }
 ,{ "Also" }
 ,{ "those" }
 ,{ "structures," }
 ,{ "which" }
 ,{ "has" }
 ,{ "the" }
 ,{ "associated" }
 ,{ "name," }
 ,{ "have" }
 ,{ "the" }
 ,{ "field" }
 ,{ "name" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "text" , & fmt_text_b }
 ,{ "with" }
 ,{ "this" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Atom" , & fmt_text_b }
 ,{ "has" }
 ,{ "fields" }
 ,{ "index" , & fmt_text_b }
 ,{ "," }
 ,{ "name" , & fmt_text_b }
 ,{ "and" }
 ,{ "element" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "last" }
 ,{ "field" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "Element" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Synt" , & fmt_text_b }
 ,{ "has" }
 ,{ "fields" }
 ,{ "index" , & fmt_text_b }
 ,{ "," }
 ,{ "name" , & fmt_text_b }
 ,{ "," }
 ,{ "kinds" , & fmt_text_b }
 ,{ "and" }
 ,{ "rules" , & fmt_text_b }
 ,{ "." }
 ,{ "kinds" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "kinds," }
 ,{ "associated" }
 ,{ "with" }
 ,{ "this" }
 ,{ "synt." }
 ,{ "If" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "has" }
 ,{ "no" }
 ,{ "kinds," }
 ,{ "this" }
 ,{ "array" }
 ,{ "has" }
 ,{ "the" }
 ,{ "length" }
 ,{ "1" , & fmt_text_b }
 ,{ "and" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "single" }
 ,{ "auto-generated" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "this" }
 ,{ "synt." }
 ,{ "The" }
 ,{ "array" }
 ,{ "rules" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "rules" }
 ,{ "for" }
 ,{ "this" }
 ,{ "synt." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Kind" , & fmt_text_b }
 ,{ "has" }
 ,{ "two" }
 ,{ "indexes." }
 ,{ "First," }
 ,{ "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "index" }
 ,{ "in" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "Synt" , & fmt_text_b }
 ,{ "array." }
 ,{ "Another," }
 ,{ "kindex" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "global" }
 ,{ "kind" }
 ,{ "index" }
 ,{ "for" }
 ,{ "all" }
 ,{ "kinds" }
 ,{ "of" }
 ,{ "all" }
 ,{ "synts." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "auto-generated" }
 ,{ "kind" }
 ,{ "is" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "string." }
 ,{ "The" }
 ,{ "field" }
 ,{ "synt" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "this" }
 ,{ "kind" }
 ,{ "belongs" }
 ,{ "to." }
 ,{ "The" }
 ,{ "field" }
 ,{ "element" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "element." }
 ,{ "The" }
 ,{ "array" }
 ,{ "rules" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "\"top\"" }
 ,{ "rules" }
 ,{ "for" }
 ,{ "this" }
 ,{ "kind." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Element" , & fmt_text_b }
 ,{ "describes" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "element" }
 ,{ "set" }
 ,{ "is" }
 ,{ "a" }
 ,{ "disjoint" }
 ,{ "union" }
 ,{ "of" }
 ,{ "atoms" }
 ,{ "and" }
 ,{ "synt" }
 ,{ "kinds." }
 ,{ "Atoms" }
 ,{ "go" }
 ,{ "first" }
 ,{ "and" }
 ,{ "kinds" }
 ,{ "after." }
 ,{ "The" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "fields" }
 ,{ "index" , & fmt_text_b }
 ,{ "and" }
 ,{ "elem" , & fmt_text_b }
 ,{ "." }
 ,{ "elem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "polymorphic" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "atom" }
 ,{ "or" }
 ,{ "kind." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Rule" , & fmt_text_b }
 ,{ "describes" }
 ,{ "a" }
 ,{ "rule." }
 ,{ "The" }
 ,{ "field" }
 ,{ "result" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "synt." }
 ,{ "The" }
 ,{ "field" }
 ,{ "args" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "rule" }
 ,{ "arguments." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "atoms" }
 ,{ "and" }
 ,{ "synts." }
 ,{ "This" }
 ,{ "description" }
 ,{ "has" }
 ,{ "no" }
 ,{ "rule" }
 ,{ "conditions." }
 ,{ "Instead," }
 ,{ "we" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "\"top\"" }
 ,{ "rules." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "The" }
 ,{ "structure" }
 ,{ "TopRule" , & fmt_text_b }
 ,{ "describes" }
 ,{ "a" }
 ,{ "top" }
 ,{ "rule." }
 ,{ "The" }
 ,{ "field" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "top" }
 ,{ "rule." }
 ,{ "This" }
 ,{ "name" }
 ,{ "is" }
 ,{ "a" }
 ,{ "composition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "bottom" }
 ,{ "rule" }
 ,{ "name" }
 ,{ "and" }
 ,{ "dot" }
 ,{ "suffixes" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "kinds." }
 ,{ "The" }
 ,{ "field" }
 ,{ "bottom" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "bottom" }
 ,{ "rule," }
 ,{ "this" }
 ,{ "top" }
 ,{ "rule" }
 ,{ "has" }
 ,{ "been" }
 ,{ "derived" }
 ,{ "from." }
 ,{ "The" }
 ,{ "field" }
 ,{ "result" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "result." }
 ,{ "The" }
 ,{ "field" }
 ,{ "args" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "rule" }
 ,{ "arguments." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "atoms" }
 ,{ "and" }
 ,{ "kinds." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "The" }
 ,{ "structure" }
 ,{ "State" , & fmt_text_b }
 ,{ "describes" }
 ,{ "a" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "parsing" }
 ,{ "state" }
 ,{ "machine." }
 ,{ "It" }
 ,{ "has" }
 ,{ "fields" }
 ,{ "index" , & fmt_text_b }
 ,{ "," }
 ,{ "final" , & fmt_text_b }
 ,{ "and" }
 ,{ "transitions" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "state" }
 ,{ "(with" }
 ,{ "the" }
 ,{ "index" }
 ,{ "0" , & fmt_text_b }
 ,{ ")" }
 ,{ "is" }
 ,{ "the" }
 ,{ "start" }
 ,{ "state." }
 ,{ "transitions" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "transitions" }
 ,{ "from" }
 ,{ "this" }
 ,{ "state." }
 ,{ "Each" }
 ,{ "transition" }
 ,{ "is" }
 ,{ "described" }
 ,{ "by" }
 ,{ "an" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "State#Transition" , & fmt_text_b }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "element" , & fmt_text_b }
 ,{ "and" }
 ,{ "state" , & fmt_text_b }
 ,{ "." }
 ,{ "element" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "element," }
 ,{ "which" }
 ,{ "cause" }
 ,{ "the" }
 ,{ "transition," }
 ,{ "and" }
 ,{ "state" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "target" }
 ,{ "state." }
 ,{ "final" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "\"final\"," }
 ,{ "associated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "state." }
 ,{ "The" }
 ,{ "array" }
 ,{ "transitions" , & fmt_text_b }
 ,{ "is" }
 ,{ "ordered" }
 ,{ "by" }
 ,{ "the" }
 ,{ "element->index" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Final" , & fmt_text_b }
 ,{ "describes" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "actions." }
 ,{ "Each" }
 ,{ "action" }
 ,{ "is" }
 ,{ "described" }
 ,{ "by" }
 ,{ "an" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Final#Action" , & fmt_text_b }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "atom" , & fmt_text_b }
 ,{ "and" }
 ,{ "rule" , & fmt_text_b }
 ,{ "." }
 ,{ "atom" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "an" }
 ,{ "atom" }
 ,{ "or" }
 ,{ "null." }
 ,{ "If" }
 ,{ "this" }
 ,{ "atom" }
 ,{ "(or" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "atom" }
 ,{ "sequence)" }
 ,{ "is" }
 ,{ "seen," }
 ,{ "then" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "rule" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "applied." }
 ,{ "rule" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "action" }
 ,{ "rule" }
 ,{ "or" }
 ,{ "null," }
 ,{ "if" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "must" }
 ,{ "be" }
 ,{ "shifted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "parsing" }
 ,{ "stack." }
 ,{ "If" }
 ,{ "the" }
 ,{ "atom" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "then" }
 ,{ "the" }
 ,{ "null" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "rule" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "parsing" }
 ,{ "process." }
 ,{ "The" }
 ,{ "array" }
 ,{ "actions" , & fmt_text_b }
 ,{ "is" }
 ,{ "ordered" }
 ,{ "by" }
 ,{ "the" }
 ,{ "atom->index" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "action" }
 ,{ "with" }
 ,{ "null" }
 ,{ "atom" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "any," }
 ,{ "goes" }
 ,{ "first." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "txt" }
 ,{ "output" }
} , & fmt_h2 , & align_h2 } ;

Text b43 = { {
 { "A" }
 ,{ "text" }
 ,{ "output" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "sections" }
 ,{ "(all" }
 ,{ "examples" }
 ,{ "are" }
 ,{ "for" }
 ,{ "the" }
 ,{ "AMP" , & fmt_text_b }
 ,{ ")." }
 ,{ "The" }
 ,{ "section" }
 ,{ "Atoms" , & fmt_text_b }
 ,{ "with" }
 ,{ "atom" }
 ,{ "descriptions." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "The" }
 ,{ "section" }
 ,{ "Syntax" , & fmt_text_b }
 ,{ "classes" , & fmt_text_b }
 ,{ "with" }
 ,{ "synt" }
 ,{ "descriptions." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "The" }
 ,{ "section" }
 ,{ "Rules" , & fmt_text_b }
 ,{ "with" }
 ,{ "rule" }
 ,{ "descriptions." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "The" }
 ,{ "section" }
 ,{ "States" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "description." }
 ,{ "Each" }
 ,{ "state" }
 ,{ "has" }
 ,{ "an" }
 ,{ "element" }
 ,{ "sequence," }
 ,{ "leading" }
 ,{ "to" }
 ,{ "this" }
 ,{ "state." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "final," }
 ,{ "given" }
 ,{ "by" }
 ,{ "its" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "The" }
 ,{ "last" }
 ,{ "section" }
 ,{ "is" }
 ,{ "the" }
 ,{ "final" }
 ,{ "list." }
 ,{ "Each" }
 ,{ "final" }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "couples:" }
 ,{ "atom," }
 ,{ "rule." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Bad" }
 ,{ "txt" }
 ,{ "output" }
} , & fmt_h2 , & align_h2 } ;

Text b49 = { {
 { "If" }
 ,{ "the" }
 ,{ "language" }
 ,{ "is" }
 ,{ "not" }
 ,{ "an" }
 ,{ "LR1" }
 ,{ "language," }
 ,{ "then" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "extension" }
 ,{ ".bad.txt" , & fmt_text_b }
 ,{ "is" }
 ,{ "produced." }
 ,{ "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "bad" }
 ,{ "states" }
 ,{ "with" }
 ,{ "conflicts." }
 ,{ "For" }
 ,{ "example," }
 ,{ "for" }
 ,{ "the" }
 ,{ "language" }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "the" }
 ,{ "output" }
 ,{ "is" }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "conflict" }
 ,{ "state." }
 ,{ "In" }
 ,{ "this" }
 ,{ "state" }
 ,{ "if" }
 ,{ "we" }
 ,{ "see" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "a" , & fmt_text_b }
 ,{ "we" }
 ,{ "cannot" }
 ,{ "decide," }
 ,{ "which" }
 ,{ "rule," }
 ,{ "shift" , & fmt_text_b }
 ,{ "or" }
 ,{ "op2" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "applied." }
} , & fmt_text , & align_text } ;

Page page = { "page_CondLangLR1" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ConsoleInput {

Text b0 = { {
 { "Console" }
 ,{ "input" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ReadCon.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ReadCon.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/ReadConType.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ReadConType.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "ReadCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "that" }
 ,{ "can" }
 ,{ "read" }
 ,{ "a" }
 ,{ "console" }
 ,{ "input." }
 ,{ "Any" }
 ,{ "class" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "interface" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "console" }
 ,{ "reader." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "console" }
 ,{ "reader," }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "CCore/inc/ReadCon.h" , & fmt_text_b }
 ,{ "." }
 ,{ "Console" }
 ,{ "reader" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "\"non-buffered" }
 ,{ "read" }
 ,{ "without" }
 ,{ "echo\"." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ReadConType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "concept" }
 ,{ "for" }
 ,{ "console" }
 ,{ "reader" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "next" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "console." }
 ,{ "This" }
 ,{ "function" }
 ,{ "can" }
 ,{ "block" }
 ,{ "indefinitely." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "get(MSec,char" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "next" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "console," }
 ,{ "but" }
 ,{ "waits" }
 ,{ "up" }
 ,{ "to" }
 ,{ "time-out." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "character" }
 ,{ "was" }
 ,{ "received." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "get(TimeScope,char" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "previous," }
 ,{ "time-out" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "the" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "put(char)" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "single" }
 ,{ "character" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "put(const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "*,ulen)" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "string" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "put(StrLen)" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "string" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "put(Symbol)" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "All" }
 ,{ "methods" }
 ,{ "put()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "output." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "HCore" }
 ,{ "console" }
 ,{ "reader" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "HCore" , & fmt_text_b }
 ,{ "ReadCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "built" }
 ,{ "upon" }
 ,{ "the" }
 ,{ "target-provided" }
 ,{ "class" }
 ,{ "Sys::ConRead" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysCon.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "XCore" }
 ,{ "console" }
 ,{ "reader" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "XCore" , & fmt_text_b }
 ,{ "ReadCon" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "extra" }
 ,{ "argument" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "methods" }
 ,{ "put()" , & fmt_text_b }
 ,{ "for" }
 ,{ "nano-packet" }
 ,{ "allocation." }
 ,{ "Normally," }
 ,{ "you" }
 ,{ "should" }
 ,{ "use" }
 ,{ "the" }
 ,{ "default" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Sys::OwnConInput" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysCon.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Constructor" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "\"owns\"" }
 ,{ "the" }
 ,{ "console" }
 ,{ "input" }
 ,{ "and" }
 ,{ "directs" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "function." }
 ,{ "The" }
 ,{ "function" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "any" }
 ,{ "execution" }
 ,{ "context," }
 ,{ "including" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "It" }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "a" }
 ,{ "character" }
 ,{ "has" }
 ,{ "arrived," }
 ,{ "the" }
 ,{ "character" }
 ,{ "is" }
 ,{ "passed" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "function" }
 ,{ "must" }
 ,{ "return" }
 ,{ "a" }
 ,{ "value," }
 ,{ "which" }
 ,{ "indicates" }
 ,{ "the" }
 ,{ "required" }
 ,{ "reaction:" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Con_Drop" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "character" }
 ,{ "must" }
 ,{ "be" }
 ,{ "counted" }
 ,{ "as" }
 ,{ "dropped." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Con_Echo" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "character" }
 ,{ "must" }
 ,{ "be" }
 ,{ "echoed." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Con_NoEcho" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "character" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "echoed." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Con_EOL" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "character" }
 ,{ "must" }
 ,{ "be" }
 ,{ "echoed" }
 ,{ "as" }
 ,{ "the" }
 ,{ "End-Of-Line" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Destructor" }
 ,{ "releases" }
 ,{ "the" }
 ,{ "console" }
 ,{ "input." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "(XCore)" }
 ,{ "StdioReadCon" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "XCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "some" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library" }
 ,{ "functions," }
 ,{ "including" }
 ,{ "stdio" , & fmt_text_b }
 ,{ "functions." }
 ,{ "By" }
 ,{ "default," }
 ,{ "the" }
 ,{ "stdin" , & fmt_text_b }
 ,{ "stream" }
 ,{ "is" }
 ,{ "not" }
 ,{ "connected" }
 ,{ "to" }
 ,{ "any" }
 ,{ "input." }
 ,{ "To" }
 ,{ "connect" }
 ,{ "this" }
 ,{ "stream" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console" }
 ,{ "input," }
 ,{ "the" }
 ,{ "class" }
 ,{ "StdioReadCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Constructor" }
 ,{ "makes" }
 ,{ "connection," }
 ,{ "destructor" }
 ,{ "disconnects." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "(XCore)" }
 ,{ "RedirectPTPCon" }
} , & fmt_h4 , & align_h4 } ;

Text b28 = { {
 { "Usually" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "console" }
 ,{ "is" }
 ,{ "backed" }
 ,{ "by" }
 ,{ "a" }
 ,{ "serial" }
 ,{ "port." }
 ,{ "But" }
 ,{ "it" }
 ,{ "is" }
 ,{ "possible" }
 ,{ "to" }
 ,{ "redirect" }
 ,{ "console" }
 ,{ "input/output" }
 ,{ "to" }
 ,{ "another" }
 ,{ "device." }
 ,{ "The" }
 ,{ "class" }
 ,{ "RedirectPTPCon" , & fmt_text_b }
 ,{ "redirects" }
 ,{ "the" }
 ,{ "console" }
 ,{ "to" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_a }
 ,{ "Con" , & fmt_text_a }
 ,{ "client" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Constructor" }
 ,{ "opens" }
 ,{ "PTP" }
 ,{ "console" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "and" }
 ,{ "configuration" }
 ,{ "parameters" }
 ,{ "using" }
 ,{ "the" }
 ,{ "given" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Con" , & fmt_text_b }
 ,{ "device." }
 ,{ "Then" }
 ,{ "it" }
 ,{ "redirects" }
 ,{ "console" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PTP" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Destructor" }
 ,{ "stops" }
 ,{ "redirection" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "PTP" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Link link_ReadPTPCon = { & page , { 31 } } ;

Text b31 = { {
 { "ReadPTPCon" }
} , & fmt_h4 , & align_h4 } ;

Text b32 = { {
 { "The" }
 ,{ "class" }
 ,{ "ReadPTPCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Con" , & fmt_text_b }
 ,{ "device" }
 ,{ "reader." }
 ,{ "It" }
 ,{ "is" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "print/PrintPTPCon.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Constructor" }
 ,{ "binds" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PTPConOpenClose" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "the" }
 ,{ "opened" }
 ,{ "PTP" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Page page = { "page_ConsoleInput" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ContainerLists {

Text b0 = { {
 { "Container" }
 ,{ "lists" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ContainerList.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ContainerList.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Here" }
 ,{ "are" }
 ,{ "six" }
 ,{ "non-intrusive" }
 ,{ "container" }
 ,{ "list" }
 ,{ "classes." }
 ,{ "They" }
 ,{ "are" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "node" , & fmt_text_a }
 ,{ "allocator" , & fmt_text_a }
 ,{ "type" , & fmt_text_a }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "NodeAllocator" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "only" }
 ,{ "requirement" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "is" }
 ,{ "its" }
 ,{ "destructor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "no-throw." }
 ,{ "The" }
 ,{ "default" }
 ,{ "node" }
 ,{ "allocator" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "new" , & fmt_text_b }
 ,{ "and" }
 ,{ "delete" , & fmt_text_b }
 ,{ "operation" }
 ,{ "to" }
 ,{ "allocate/destroy" }
 ,{ "each" }
 ,{ "list" }
 ,{ "node." }
 ,{ "It" }
 ,{ "may" }
 ,{ "be" }
 ,{ "expensive." }
 ,{ "To" }
 ,{ "improve" }
 ,{ "the" }
 ,{ "performance" }
 ,{ "and" }
 ,{ "reduce" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "usage" }
 ,{ "consider" }
 ,{ "the" }
 ,{ "using" }
 ,{ "of" }
 ,{ "the" }
 ,{ "NodePoolAllocator" , & fmt_text_b }
 ,{ "or" }
 ,{ "compact" , & fmt_text_a }
 ,{ "lists" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Common" }
 ,{ "lists" }
 ,{ "properties" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "All" }
 ,{ "lists" }
 ,{ "have" }
 ,{ "much" }
 ,{ "common" }
 ,{ "methods" }
 ,{ "and" }
 ,{ "properties." }
 ,{ "So" }
 ,{ "here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"common" }
 ,{ "class\"" }
 ,{ "AnyList" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Constant" }
 ,{ "lists" }
 ,{ "propagate" }
 ,{ "constantness" }
 ,{ "to" }
 ,{ "its" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "List" }
 ,{ "ins/del" }
 ,{ "methods" }
 ,{ "do" }
 ,{ "not" }
 ,{ "move" }
 ,{ "existing" }
 ,{ "list" }
 ,{ "elements," }
 ,{ "but" }
 ,{ "may" }
 ,{ "invalidate" }
 ,{ "list" }
 ,{ "cursors." }
 ,{ "If" }
 ,{ "such" }
 ,{ "method" }
 ,{ "is" }
 ,{ "using" }
 ,{ "a" }
 ,{ "cursor" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "this" }
 ,{ "cursor" }
 ,{ "remains" }
 ,{ "valid" }
 ,{ "and" }
 ,{ "it" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "during" }
 ,{ "the" }
 ,{ "operation," }
 ,{ "if" }
 ,{ "necessary." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Constructor" }
 ,{ "forwards" }
 ,{ "its" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "node" }
 ,{ "allocator." }
 ,{ "Destructor" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "list" }
 ,{ "with" }
 ,{ "all" }
 ,{ "its" }
 ,{ "elements." }
 ,{ "It's" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "the" }
 ,{ "allocator" }
 ,{ "constructor" }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "AnyList" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "list" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "List" }
 ,{ "has" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "access" }
 ,{ "some" }
 ,{ "specific" }
 ,{ "list" }
 ,{ "elements." }
 ,{ "They" }
 ,{ "are" }
 ,{ "following" }
 ,{ "the" }
 ,{ "shown" }
 ,{ "above" }
 ,{ "pattern." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "To" }
 ,{ "access" }
 ,{ "list" }
 ,{ "elements" }
 ,{ "a" }
 ,{ "list" }
 ,{ "cursor" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used." }
 ,{ "Any" }
 ,{ "list" }
 ,{ "always" }
 ,{ "has" }
 ,{ "a" }
 ,{ "forward" }
 ,{ "cursor." }
 ,{ "Methods" }
 ,{ "getStart...()" , & fmt_text_b }
 ,{ "return" }
 ,{ "a" }
 ,{ "forward" }
 ,{ "cursor," }
 ,{ "positioned" }
 ,{ "on" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "For" }
 ,{ "double" }
 ,{ "linked" }
 ,{ "lists" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "type" }
 ,{ "has" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "--" , & fmt_text_b }
 ,{ "to" }
 ,{ "move" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "List" }
 ,{ "may" }
 ,{ "have" }
 ,{ "a" }
 ,{ "backward" }
 ,{ "cursor." }
 ,{ "Methods" }
 ,{ "getStartReverse...()" , & fmt_text_b }
 ,{ "return" }
 ,{ "a" }
 ,{ "backward" }
 ,{ "cursor," }
 ,{ "positioned" }
 ,{ "on" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Lists" }
 ,{ "implement" }
 ,{ "methods" }
 ,{ "begin()/end()" , & fmt_text_b }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "List" }
 ,{ "may" }
 ,{ "support" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "order" }
 ,{ "for" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "loop" }
 ,{ "methods" }
 ,{ "reverse...()" , & fmt_text_b }
 ,{ "are" }
 ,{ "provided." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Each" }
 ,{ "list" }
 ,{ "has" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "ins/del" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "insert" }
 ,{ "or" }
 ,{ "delete" }
 ,{ "list" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "method" }
 ,{ "erase()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "all" }
 ,{ "elements," }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "destroyed" }
 ,{ "elements" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Methods" }
 ,{ "apply...()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "apply" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "list" }
 ,{ "elements." }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "Pattern" , & fmt_text_a }
 ,{ "is" }
 ,{ "used." }
 ,{ "Double" }
 ,{ "linked" }
 ,{ "lists" }
 ,{ "can" }
 ,{ "apply" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order" }
 ,{ "using" }
 ,{ "methods" }
 ,{ "applyReverse...()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "All" }
 ,{ "lists" }
 ,{ "are" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "LinearSList" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "linear" }
 ,{ "single" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "with" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "getTop...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "ins()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "insAfter()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "LinearSList2" }
} , & fmt_h4 , & align_h4 } ;

Text b26 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "linear" }
 ,{ "single" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "with" }
 ,{ "first" }
 ,{ "and" }
 ,{ "last" }
 ,{ "element" }
 ,{ "pointers." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "getFirst...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "getLast...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "insFirst()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "insLast()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "insAfter()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "delFirst()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "CircularSList" }
} , & fmt_h4 , & align_h4 } ;

Text b34 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "circular" }
 ,{ "single" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "with" }
 ,{ "a" }
 ,{ "bottom" }
 ,{ "element" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "getBottom...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "bottom" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "ins()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "insAfter()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "The" }
 ,{ "method" }
 ,{ "rotate()" , & fmt_text_b }
 ,{ "is" }
 ,{ "specific" }
 ,{ "for" }
 ,{ "circular" }
 ,{ "lists." }
 ,{ "It" }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "top" }
 ,{ "element" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "bottom." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Link link_LinearDList = { & page , { 40 } } ;

Text b40 = { {
 { "LinearDList" }
} , & fmt_h4 , & align_h4 } ;

Text b41 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "linear" }
 ,{ "double" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "with" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "getTop...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Cursor" }
 ,{ "can" }
 ,{ "move" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "ins()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "insBefore()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "before" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "insAfter()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "delAndMove()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "at" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "to" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Link link_LinearDList2 = { & page , { 49 } } ;

Text b49 = { {
 { "LinearDList2" }
} , & fmt_h4 , & align_h4 } ;

Text b50 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "linear" }
 ,{ "double" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "with" }
 ,{ "first" }
 ,{ "and" }
 ,{ "last" }
 ,{ "element" }
 ,{ "pointers." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "getFirst...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "getLast...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "Cursor" }
 ,{ "can" }
 ,{ "move" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "This" }
 ,{ "list" }
 ,{ "supports" }
 ,{ "a" }
 ,{ "backward" }
 ,{ "cursor." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "This" }
 ,{ "list" }
 ,{ "supports" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "order" }
 ,{ "for" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "insFirst()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "insLast()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "insBefore()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "before" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "(forward" }
 ,{ "or" }
 ,{ "backward)" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "insAfter()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "(forward" }
 ,{ "or" }
 ,{ "backward)" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "delFirst()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "delLast()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "delAndMove()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "at" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "(forward" }
 ,{ "or" }
 ,{ "backward)" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "to" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element" }
 ,{ "(in" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "movement" }
 ,{ "direction)." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "This" }
 ,{ "list" }
 ,{ "supports" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "functor" }
 ,{ "applying." }
} , & fmt_text , & align_text } ;

Link link_CircularDList = { & page , { 64 } } ;

Text b64 = { {
 { "CircularDList" }
} , & fmt_h4 , & align_h4 } ;

Text b65 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "circular" }
 ,{ "double" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "with" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "getTop...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "Cursor" }
 ,{ "can" }
 ,{ "move" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "This" }
 ,{ "list" }
 ,{ "supports" }
 ,{ "a" }
 ,{ "backward" }
 ,{ "cursor." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "This" }
 ,{ "list" }
 ,{ "supports" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "order" }
 ,{ "for" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "insFirst()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "insLast()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "as" }
 ,{ "a" }
 ,{ "last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer." }
 ,{ "Method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "insBefore()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "before" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "(forward" }
 ,{ "or" }
 ,{ "backward)" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
 ,{ "Backward" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "updated." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "insAfter()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "(forward" }
 ,{ "or" }
 ,{ "backward)" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Extra" }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
 ,{ "Forward" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "updated." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "delFirst()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "delLast()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "if" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "was" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "delAndMove()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "at" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "(forward" }
 ,{ "or" }
 ,{ "backward)" }
 ,{ "given" }
 ,{ "non-null" }
 ,{ "position." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "to" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element" }
 ,{ "(in" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "movement" }
 ,{ "direction)." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "This" }
 ,{ "list" }
 ,{ "supports" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "functor" }
 ,{ "applying." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "The" }
 ,{ "following" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "rotate...()" , & fmt_text_b }
 ,{ "are" }
 ,{ "specific" }
 ,{ "for" }
 ,{ "circular" }
 ,{ "lists." }
 ,{ "They" }
 ,{ "rotate" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "rotateForward()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "list" }
 ,{ "forward." }
 ,{ "The" }
 ,{ "top" }
 ,{ "element" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "bottom." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "rotateBackward()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "list" }
 ,{ "backward." }
 ,{ "The" }
 ,{ "bottom" }
 ,{ "element" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "top." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_ContainerLists" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Counters {

Text b0 = { {
 { "Counters" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Counters.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Counters.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Counting" }
 ,{ "events" }
 ,{ "is" }
 ,{ "a" }
 ,{ "very" }
 ,{ "useful" }
 ,{ "programming" }
 ,{ "technique" }
 ,{ "for" }
 ,{ "the" }
 ,{ "testing/debugging/monitoring" }
 ,{ "applications." }
 ,{ "It" }
 ,{ "is" }
 ,{ "widely" }
 ,{ "used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "class" }
 ,{ "Counters" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "simplify" }
 ,{ "this" }
 ,{ "task." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Counters" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "counters," }
 ,{ "indexed" }
 ,{ "by" }
 ,{ "members" }
 ,{ "of" }
 ,{ "some" }
 ,{ "enum" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "method" }
 ,{ "reset()" , & fmt_text_b }
 ,{ "set" }
 ,{ "all" }
 ,{ "counters" }
 ,{ "to" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "method" }
 ,{ "count()" , & fmt_text_b }
 ,{ "increments" }
 ,{ "or" }
 ,{ "increments" }
 ,{ "by" }
 ,{ "some" }
 ,{ "value" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "specific" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "+=" , & fmt_text_b }
 ,{ "adds" }
 ,{ "counters" }
 ,{ "from" }
 ,{ "another" }
 ,{ "counter" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "-=" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "counters" }
 ,{ "from" }
 ,{ "another" }
 ,{ "counter" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "diff()" , & fmt_text_b }
 ,{ "to" }
 ,{ "differentiate" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "counters:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Finally," }
 ,{ "you" }
 ,{ "can" }
 ,{ "print" }
 ,{ "the" }
 ,{ "counters," }
 ,{ "to" }
 ,{ "give" }
 ,{ "names" }
 ,{ "to" }
 ,{ "indexes" }
 ,{ "define" }
 ,{ "GetTextDesc(Enum)" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "print" }
 ,{ "options" }
 ,{ "per" }
 ,{ "enum" , & fmt_text_b }
 ,{ "." }
 ,{ "Only" }
 ,{ "non-null" }
 ,{ "counters" }
 ,{ "are" }
 ,{ "printed." }
} , & fmt_text , & align_text } ;

Page page = { "page_Counters" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Crc {

Text b0 = { {
 { "Crc" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Crc.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Crc.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "Crc" }
 ,{ "classes:" }
 ,{ "Crc16" , & fmt_text_b }
 ,{ "," }
 ,{ "Crc24" , & fmt_text_b }
 ,{ "," }
 ,{ "Crc32" , & fmt_text_b }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "a" }
 ,{ "CRC" }
 ,{ "value" }
 ,{ "of" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "sequence." }
 ,{ "Technically," }
 ,{ "CRC" }
 ,{ "is" }
 ,{ "a" }
 ,{ "polynomial" }
 ,{ "division" }
 ,{ "reminder." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "sudden" }
 ,{ "errors" }
 ,{ "in" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "stream." }
 ,{ "There" }
 ,{ "are" }
 ,{ "3" }
 ,{ "popular" }
 ,{ "and" }
 ,{ "standard" }
 ,{ "such" }
 ,{ "CRC," }
 ,{ "widely" }
 ,{ "used" }
 ,{ "in" }
 ,{ "IT." }
 ,{ "We" }
 ,{ "call" }
 ,{ "them" }
 ,{ "Crc16," }
 ,{ "Crc24" }
 ,{ "and" }
 ,{ "Crc32" }
 ,{ "by" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "output" }
 ,{ "bits." }
 ,{ "In" }
 ,{ "practical" }
 ,{ "applications" }
 ,{ "they" }
 ,{ "are" }
 ,{ "used" }
 ,{ "with" }
 ,{ "some" }
 ,{ "adjustments," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "byte" }
 ,{ "sequence" }
 ,{ "is" }
 ,{ "extended" }
 ,{ "with" }
 ,{ "some" }
 ,{ "start" }
 ,{ "sequence" }
 ,{ "in" }
 ,{ "order" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "its" }
 ,{ "CRC." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "CRC" }
 ,{ "based" }
 ,{ "on" }
 ,{ "lookup" }
 ,{ "tables." }
 ,{ "So" }
 ,{ "Crc16" , & fmt_text_b }
 ,{ "," }
 ,{ "Crc24" , & fmt_text_b }
 ,{ "," }
 ,{ "Crc32" , & fmt_text_b }
 ,{ "are" }
 ,{ "instantiations" }
 ,{ "of" }
 ,{ "the" }
 ,{ "generic" }
 ,{ "CrcAccumulator" , & fmt_text_b }
 ,{ "class," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s" }
 ,{ "AlgoCrc16," , & fmt_text_b }
 ,{ "AlgoCrc24," , & fmt_text_b }
 ,{ "AlgoCrc32" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "CrcAccumulator" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "\"accumulator\"" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "can" }
 ,{ "built" }
 ,{ "the" }
 ,{ "result" }
 ,{ "by" }
 ,{ "\"feeding\"" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "by" }
 ,{ "pieces" }
 ,{ "of" }
 ,{ "data." }
 ,{ "You" }
 ,{ "can" }
 ,{ "put" }
 ,{ "bytes" }
 ,{ "one-by-one" }
 ,{ "or" }
 ,{ "add" }
 ,{ "by" }
 ,{ "ranges." }
 ,{ "The" }
 ,{ "type" }
 ,{ "R" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "method" }
 ,{ "addRange()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "over" }
 ,{ "a" }
 ,{ "piece" }
 ,{ "of" }
 ,{ "data." }
 ,{ "By" }
 ,{ "default," }
 ,{ "CrcAccumulator" , & fmt_text_b }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "value" }
 ,{ "1." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Crc" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_CreateAt {

Text b0 = { {
 { "CreateAt" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/CreateAt.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/CreateAt.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CreateAt()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "manipulate" }
 ,{ "members" }
 ,{ "of" }
 ,{ "non-trivial" }
 ,{ "unions." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "For" }
 ,{ "example," }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "make" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "the" }
 ,{ "member" }
 ,{ "a" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "union" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "CreateAt()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_CreateAt" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Crypton {

Text b0 = { {
 { "Crypton" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Crypton" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "cryptography" }
 ,{ "tools" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Crypton" , & fmt_text_b }
 ,{ "and" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "subfolders" }
 ,{ "crypton" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Crypton" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DDL {

Text b0 = { {
 { "DDL" }
 ,{ "language" }
 ,{ "(v.2)" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "DDL" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "Data" , & fmt_text_b }
 ,{ "Definition" , & fmt_text_b }
 ,{ "Language" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "language" }
 ,{ "is" }
 ,{ "to" }
 ,{ "record" }
 ,{ "a" }
 ,{ "general-kind" }
 ,{ "data" }
 ,{ "in" }
 ,{ "a" }
 ,{ "textual" }
 ,{ "form" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "C" }
 ,{ "language." }
 ,{ "But" }
 ,{ "there" }
 ,{ "are" }
 ,{ "important" }
 ,{ "differences" }
 ,{ "between" }
 ,{ "how" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "and" }
 ,{ "C" , & fmt_text_b }
 ,{ "interprets" }
 ,{ "data" }
 ,{ "and" }
 ,{ "expressions." }
 ,{ "DDL" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"bye-bye" }
 ,{ "XML" , & fmt_text_b }
 ,{ "\"" }
 ,{ "language." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Brief" }
 ,{ "introduction" }
} , & fmt_h2 , & align_h2 } ;

Text b3 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "brief" }
 ,{ "introduction" }
 ,{ "to" }
 ,{ "the" }
 ,{ "language." }
 ,{ "You" }
 ,{ "can" }
 ,{ "read" }
 ,{ "this" , & fmt_text_a }
 ,{ "document" , & fmt_text_a }
 ,{ "for" }
 ,{ "further" }
 ,{ "details." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "DDL" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "define" }
 ,{ "named" }
 ,{ "constants." }
 ,{ "Each" }
 ,{ "constant" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "type." }
 ,{ "Types" }
 ,{ "can" }
 ,{ "be" }
 ,{ "basic" }
 ,{ "or" }
 ,{ "derived." }
 ,{ "The" }
 ,{ "most" }
 ,{ "important" }
 ,{ "derived" }
 ,{ "types" }
 ,{ "are" }
 ,{ "structures." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Basic" }
 ,{ "types" }
 ,{ "are" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "text" , & fmt_text_b }
 ,{ "and" }
 ,{ "ip" , & fmt_text_b }
 ,{ "." }
 ,{ "Integral" }
 ,{ "types" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "text" , & fmt_text_b }
 ,{ "type" }
 ,{ "represents" }
 ,{ "a" }
 ,{ "character" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "ip" , & fmt_text_b }
 ,{ "type" }
 ,{ "represents" }
 ,{ "an" }
 ,{ "IPv4" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "int" , & fmt_text_b }
 ,{ "," }
 ,{ "sint" , & fmt_text_b }
 ,{ "," }
 ,{ "uint" , & fmt_text_b }
 ,{ "are" }
 ,{ "target-dependent" }
 ,{ "\"machine-word-length\"" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "ulen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "target-dependent" }
 ,{ "\"machine-address-length\"" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Derived" }
 ,{ "types" }
 ,{ "are" }
 ,{ "pointers," }
 ,{ "arrays" }
 ,{ "and" }
 ,{ "structures:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "If" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length" }
 ,{ "is" }
 ,{ "not" }
 ,{ "given" }
 ,{ "explicitly," }
 ,{ "then" }
 ,{ "it" }
 ,{ "is" }
 ,{ "inferred" }
 ,{ "from" }
 ,{ "the" }
 ,{ "initializer." }
 ,{ "Structure" }
 ,{ "members" }
 ,{ "may" }
 ,{ "have" }
 ,{ "default" }
 ,{ "initializers." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Type" }
 ,{ "aliases" }
 ,{ "and" }
 ,{ "scopes" }
 ,{ "(aka" }
 ,{ "\"namespaces\")" }
 ,{ "are" }
 ,{ "supported:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Dots" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "designate" }
 ,{ "the" }
 ,{ "current" }
 ,{ "scope" }
 ,{ "or" }
 ,{ "parent" }
 ,{ "scopes:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "language" }
 ,{ "is" }
 ,{ "commutative," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "order" }
 ,{ "of" }
 ,{ "declarations" }
 ,{ "is" }
 ,{ "not" }
 ,{ "important:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Structures" }
 ,{ "define" }
 ,{ "scopes" }
 ,{ "and" }
 ,{ "may" }
 ,{ "declare" }
 ,{ "types" }
 ,{ "and" }
 ,{ "constants:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "DDL" , & fmt_text_b }
 ,{ "supports" }
 ,{ "file" }
 ,{ "inclusion:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "But" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "an" }
 ,{ "included" }
 ,{ "file" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "text," }
 ,{ "except" }
 ,{ "names" }
 ,{ "may" }
 ,{ "not" }
 ,{ "be" }
 ,{ "defined" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "included" }
 ,{ "file." }
 ,{ "Binding" }
 ,{ "a" }
 ,{ "file" }
 ,{ "name" }
 ,{ "with" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "file" }
 ,{ "(real" }
 ,{ "or" }
 ,{ "virtual)" }
 ,{ "is" }
 ,{ "implementation-defined." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "DDL" }
 ,{ "elements" }
} , & fmt_h2 , & align_h2 } ;

Text b19 = { {
 { "DDL" , & fmt_text_b }
 ,{ "elements" }
 ,{ "are:" }
 ,{ "scopes," }
 ,{ "types," }
 ,{ "type" }
 ,{ "aliases," }
 ,{ "constants," }
 ,{ "literals" }
 ,{ "and" }
 ,{ "expressions." }
 ,{ "DDL" , & fmt_text_b }
 ,{ "text" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "definitions." }
 ,{ "A" }
 ,{ "definition" }
 ,{ "defines" }
 ,{ "a" }
 ,{ "scope," }
 ,{ "a" }
 ,{ "structure," }
 ,{ "a" }
 ,{ "type" }
 ,{ "alias" }
 ,{ "or" }
 ,{ "a" }
 ,{ "constant." }
 ,{ "Literals" }
 ,{ "and" }
 ,{ "expressions" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "define" }
 ,{ "a" }
 ,{ "constants" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Comments" }
} , & fmt_h3 , & align_h3 } ;

Text b21 = { {
 { "DDL" , & fmt_text_b }
 ,{ "accepts" }
 ,{ "long" }
 ,{ "and" }
 ,{ "short" }
 ,{ "comments:" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Scopes" }
} , & fmt_h3 , & align_h3 } ;

Text b23 = { {
 { "Scope" }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"definition" }
 ,{ "directory\"." }
 ,{ "Scopes" }
 ,{ "can" }
 ,{ "be" }
 ,{ "nested" }
 ,{ "or" }
 ,{ "split." }
 ,{ "Each" }
 ,{ "named" }
 ,{ "language" }
 ,{ "element" }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "some" }
 ,{ "scope." }
 ,{ "The" }
 ,{ "full" }
 ,{ "element" }
 ,{ "name" }
 ,{ "is" }
 ,{ "#" , & fmt_text_b }
 ,{ "Scope1Name" , & fmt_text_b }
 ,{ "#" , & fmt_text_b }
 ,{ "Scope2Name" , & fmt_text_b }
 ,{ "#" , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "#" , & fmt_text_b }
 ,{ "ElementName" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "When" }
 ,{ "a" }
 ,{ "name" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "refer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "language" }
 ,{ "element," }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "either" }
 ,{ "relative" }
 ,{ "or" }
 ,{ "absolute." }
 ,{ "A" }
 ,{ "relative" }
 ,{ "name" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "a" }
 ,{ "name," }
 ,{ "an" }
 ,{ "absolute" }
 ,{ "name" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "#" , & fmt_text_b }
 ,{ "or" }
 ,{ "one" }
 ,{ "or" }
 ,{ "more" }
 ,{ "dots." }
 ,{ "One" }
 ,{ "dot" }
 ,{ "means" }
 ,{ "the" }
 ,{ "current" }
 ,{ "scope," }
 ,{ "2" }
 ,{ "dots" }
 ,{ "means" }
 ,{ "the" }
 ,{ "parent" }
 ,{ "scope" }
 ,{ "and" }
 ,{ "so" }
 ,{ "on." }
 ,{ "A" }
 ,{ "relative" }
 ,{ "name" }
 ,{ "is" }
 ,{ "looked" }
 ,{ "in" }
 ,{ "all" }
 ,{ "scopes" }
 ,{ "down" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Types" }
 ,{ "and" }
 ,{ "type" }
 ,{ "aliases" }
} , & fmt_h3 , & align_h3 } ;

Text b26 = { {
 { "There" }
 ,{ "are" }
 ,{ "basic" }
 ,{ "types" }
 ,{ "and" }
 ,{ "derived" }
 ,{ "types." }
 ,{ "Basic" }
 ,{ "types" }
 ,{ "are" }
 ,{ "designated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "keywords:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Derived" }
 ,{ "types" }
 ,{ "are" }
 ,{ "pointers," }
 ,{ "arrays" }
 ,{ "and" }
 ,{ "structures." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Pointer" }
 ,{ "type" }
 ,{ "is" }
 ,{ "designated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "following" }
 ,{ "asterisk:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Array" }
 ,{ "type" }
 ,{ "is" }
 ,{ "designated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pair" }
 ,{ "of" }
 ,{ "square" }
 ,{ "brackets" }
 ,{ "with" }
 ,{ "the" }
 ,{ "optional" }
 ,{ "expression" }
 ,{ "inside:" }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "The" }
 ,{ "expression" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "type" }
 ,{ "of" }
 ,{ "this" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Non-pointer" }
 ,{ "and" }
 ,{ "non-array" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "basic" }
 ,{ "type" }
 ,{ "name," }
 ,{ "a" }
 ,{ "type" }
 ,{ "alias" }
 ,{ "name," }
 ,{ "a" }
 ,{ "structure" }
 ,{ "name" }
 ,{ "or" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "definition." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Type" }
 ,{ "alias" }
 ,{ "definition" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Structures" }
} , & fmt_h3 , & align_h3 } ;

Text b34 = { {
 { "Structure" }
 ,{ "definition" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Each" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "a" }
 ,{ "name" }
 ,{ "and" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "fields." }
 ,{ "Each" }
 ,{ "field" }
 ,{ "has" }
 ,{ "a" }
 ,{ "name," }
 ,{ "a" }
 ,{ "type" }
 ,{ "and" }
 ,{ "an" }
 ,{ "optional" }
 ,{ "default" }
 ,{ "value," }
 ,{ "determined" }
 ,{ "by" }
 ,{ "an" }
 ,{ "expression." }
 ,{ "A" }
 ,{ "structure" }
 ,{ "also" }
 ,{ "defines" }
 ,{ "a" }
 ,{ "scope." }
 ,{ "This" }
 ,{ "scope" }
 ,{ "can" }
 ,{ "be" }
 ,{ "extended." }
 ,{ "A" }
 ,{ "structure" }
 ,{ "definition" }
 ,{ "can" }
 ,{ "also" }
 ,{ "defines" }
 ,{ "a" }
 ,{ "scope" }
 ,{ "type" }
 ,{ "aliases," }
 ,{ "structures" }
 ,{ "and" }
 ,{ "constants:" }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "To" }
 ,{ "define" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "(not" }
 ,{ "a" }
 ,{ "field)" }
 ,{ "the" }
 ,{ "keyword" }
 ,{ "const" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "Constants" }
} , & fmt_h3 , & align_h3 } ;

Text b38 = { {
 { "Constant" }
 ,{ "definition" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "This" }
 ,{ "definition" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "in" }
 ,{ "the" }
 ,{ "current" }
 ,{ "scope" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "and" }
 ,{ "value," }
 ,{ "determined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "expression." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "Constant" }
 ,{ "can" }
 ,{ "be" }
 ,{ "defined" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "definition" }
 ,{ "with" }
 ,{ "the" }
 ,{ "keyword" }
 ,{ "const" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "Without" }
 ,{ "const" , & fmt_text_b }
 ,{ "it" }
 ,{ "would" }
 ,{ "be" }
 ,{ "a" }
 ,{ "field" }
 ,{ "definition." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Literals" }
} , & fmt_h3 , & align_h3 } ;

Text b43 = { {
 { "Universal" }
 ,{ "null" }
 ,{ "literal:" }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "Decimal" }
 ,{ "literals:" }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "Hexadecimal" }
 ,{ "literals:" }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "Binary" }
 ,{ "literals:" }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "Simple" }
 ,{ "string" }
 ,{ "literals:" }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Advanced" }
 ,{ "string" }
 ,{ "literals" }
 ,{ "accept" }
 ,{ "usual" }
 ,{ "back-slash" }
 ,{ "special" }
 ,{ "character" }
 ,{ "representations:" }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "IP" }
 ,{ "literals:" }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Expressions" }
} , & fmt_h3 , & align_h3 } ;

Text b51 = { {
 { "Expressions" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "value" }
 ,{ "to" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "(including" }
 ,{ "implicitly" }
 ,{ "defined" }
 ,{ "constants," }
 ,{ "like" }
 ,{ "array" }
 ,{ "lengths" }
 ,{ "or" }
 ,{ "default" }
 ,{ "structure" }
 ,{ "member" }
 ,{ "values)." }
 ,{ "Expression" }
 ,{ "can" }
 ,{ "be" }
 ,{ "scalar" }
 ,{ "or" }
 ,{ "compound." }
 ,{ "Scalar" }
 ,{ "expressions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "value" }
 ,{ "of" }
 ,{ "a" }
 ,{ "basic" }
 ,{ "type," }
 ,{ "compound" }
 ,{ "â€”" }
 ,{ "for" }
 ,{ "structures" }
 ,{ "and" }
 ,{ "arrays." }
 ,{ "A" }
 ,{ "special" }
 ,{ "class" }
 ,{ "of" }
 ,{ "scalar" }
 ,{ "expressions" }
 ,{ "defines" }
 ,{ "pointer" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "The" }
 ,{ "most" }
 ,{ "important" }
 ,{ "thing" }
 ,{ "about" }
 ,{ "expressions:" }
 ,{ "they" }
 ,{ "are" }
 ,{ "calculated" }
 ,{ "in" }
 ,{ "the" }
 ,{ "context" }
 ,{ "of" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "type." }
 ,{ "Resulting" }
 ,{ "type" }
 ,{ "of" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "constant" }
 ,{ "this" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "value" }
 ,{ "to." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "Compound" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "expressions," }
 ,{ "or" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "named" }
 ,{ "expressions:" }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "Named" }
 ,{ "lists" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "value" }
 ,{ "modifiers:" }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "Usual" }
 ,{ "arithmetic" }
 ,{ "operations" }
 ,{ "+a," , & fmt_text_b }
 ,{ "-a," , & fmt_text_b }
 ,{ "a+b," , & fmt_text_b }
 ,{ "a-b," , & fmt_text_b }
 ,{ "a*b," , & fmt_text_b }
 ,{ "a/b," , & fmt_text_b }
 ,{ "a%b" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "integral" }
 ,{ "values." }
 ,{ "Operands" }
 ,{ "are" }
 ,{ "evaluated" }
 ,{ "to" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "and" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "this" }
 ,{ "value" }
 ,{ "types." }
 ,{ "Additive" }
 ,{ "integral" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "multiplication" }
 ,{ "are" }
 ,{ "operations" }
 ,{ "in" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "residual" }
 ,{ "ring." }
 ,{ "Division" }
 ,{ "operations" }
 ,{ "follows" }
 ,{ "C" , & fmt_text_b }
 ,{ "convention:" }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "Signed" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "use" }
 ,{ "2'd" }
 ,{ "complementary" }
 ,{ "representation." }
 ,{ "Integral" }
 ,{ "literal" }
 ,{ "conversions" }
 ,{ "are" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "reduction." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "integral" }
 ,{ "cast" }
 ,{ "operation:" }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "The" }
 ,{ "expression" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "cast" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "evaluated" }
 ,{ "to" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "cast" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "ip" , & fmt_text_b }
 ,{ "constant" }
 ,{ "can" }
 ,{ "be" }
 ,{ "received" }
 ,{ "only" }
 ,{ "from" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "literal." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "text" , & fmt_text_b }
 ,{ "constant" }
 ,{ "can" }
 ,{ "be" }
 ,{ "received" }
 ,{ "from" }
 ,{ "a" }
 ,{ "text" }
 ,{ "literal," }
 ,{ "an" }
 ,{ "IP" }
 ,{ "literal," }
 ,{ "an" }
 ,{ "integral" }
 ,{ "literal" }
 ,{ "and" }
 ,{ "from" }
 ,{ "a" }
 ,{ "binary" }
 ,{ "plus" }
 ,{ "operator." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "Integral" }
 ,{ "literals" }
 ,{ "are" }
 ,{ "converted" }
 ,{ "as" }
 ,{ "is." }
 ,{ "IP" }
 ,{ "literals" }
 ,{ "are" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "first." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "null" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"universal" }
 ,{ "null\"." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "Pointers" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "in" }
 ,{ "C" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "Polymorphic" }
 ,{ "pointers" }
} , & fmt_h3 , & align_h3 } ;

Text b65 = { {
 { "Polymorphic" }
 ,{ "pointer" }
 ,{ "may" }
 ,{ "point" }
 ,{ "to" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "different" }
 ,{ "types." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "Point" }
 ,{ "of" }
 ,{ "usage" }
 ,{ "name" }
 ,{ "binding" }
} , & fmt_h3 , & align_h3 } ;

Text b67 = { {
 { "When" }
 ,{ "you" }
 ,{ "define" }
 ,{ "a" }
 ,{ "default" }
 ,{ "value" }
 ,{ "for" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "field," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "name" }
 ,{ "with" }
 ,{ "question" }
 ,{ "mark" }
 ,{ "to" }
 ,{ "refer" }
 ,{ "a" }
 ,{ "name," }
 ,{ "which" }
 ,{ "is" }
 ,{ "bounded" }
 ,{ "with" }
 ,{ "the" }
 ,{ "definition" }
 ,{ "at" }
 ,{ "the" }
 ,{ "point" }
 ,{ "of" }
 ,{ "usage." }
} , & fmt_text , & align_text } ;

Page page = { "page_DDL" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b67 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DDLEngine {

Text b0 = { {
 { "DDLEngine" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ddl/DDLEngine.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl/DDLEngine.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/ddl/DDLMap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl/DDLMap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Files" }
 ,{ "CCore/inc/ddl/DDLTypedMap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl/DDLTypeMap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "Files" }
 ,{ "CCore/inc/ddl/DDLPlatformTypes.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl/DDLPlatformTypes.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b5 = { {
 { "Files" }
 ,{ "CCore/inc/ddl/DDLMapTypes.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl/DDLMapTypes.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b6 = { {
 { "Files" }
 ,{ "CCore/inc/ddl/DDLMapBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl/DDLMapBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b7 = { {
 { "Subfolders" }
 ,{ "CCore/inc/ddl" , & fmt_text_Files_b }
 ,{ "CCore/src/ddl" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b8 = { {
 { "DDL" }
 ,{ "implementation" }
} , & fmt_h2 , & align_h2 } ;

Text b9 = { {
 { "The" }
 ,{ "directory" }
 ,{ "ddl" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "implementation." }
 ,{ "It" }
 ,{ "is" }
 ,{ "contained" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "process" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "source" }
 ,{ "there" }
 ,{ "are" }
 ,{ "two" }
 ,{ "main" }
 ,{ "classes:" }
 ,{ "TextEngine" , & fmt_text_b }
 ,{ "and" }
 ,{ "FileEngine" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "most" }
 ,{ "of" }
 ,{ "content" }
 ,{ "of" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "a" }
 ,{ "DDL2" , & fmt_text_b }
 ,{ "parser" }
 ,{ "implementation" }
 ,{ "and" }
 ,{ "not" }
 ,{ "needed" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Engines" }
 ,{ "return" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "processing" }
 ,{ "of" }
 ,{ "the" }
 ,{ "following" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "It's" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "lightweight" }
 ,{ "data" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields." }
 ,{ "eval" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "EvalResult" , & fmt_text_b }
 ,{ "object," }
 ,{ "this" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "constant" }
 ,{ "value" }
 ,{ "table." }
 ,{ "body" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "root" }
 ,{ "body" }
 ,{ "node," }
 ,{ "this" }
 ,{ "node" }
 ,{ "represents" }
 ,{ "the" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "source." }
 ,{ "Walking" }
 ,{ "from" }
 ,{ "this" }
 ,{ "node" }
 ,{ "you" }
 ,{ "can" }
 ,{ "examine" }
 ,{ "the" }
 ,{ "whole" }
 ,{ "source" }
 ,{ "content." }
 ,{ "If" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "has" }
 ,{ "failed," }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "stream," }
 ,{ "where" }
 ,{ "error" }
 ,{ "messages" }
 ,{ "will" }
 ,{ "be" }
 ,{ "printed" }
 ,{ "to." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "text" }
 ,{ "to" }
 ,{ "be" }
 ,{ "processed." }
 ,{ "The" }
 ,{ "third" }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"pretext\"." }
 ,{ "It" }
 ,{ "is" }
 ,{ "included" }
 ,{ "before" }
 ,{ "the" }
 ,{ "text" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "process()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "engine" }
 ,{ "does" }
 ,{ "not" }
 ,{ "support" }
 ,{ "the" }
 ,{ "file" }
 ,{ "inclusion." }
 ,{ "This" }
 ,{ "engine" }
 ,{ "is" }
 ,{ "one-shoot," }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "process" }
 ,{ "one" }
 ,{ "input" }
 ,{ "once." }
 ,{ "Result" }
 ,{ "objects" }
 ,{ "life-time" }
 ,{ "is" }
 ,{ "ended" }
 ,{ "with" }
 ,{ "the" }
 ,{ "engine" }
 ,{ "life-time" }
 ,{ "end." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "FileEngine" , & fmt_text_b }
 ,{ "can" }
 ,{ "process" }
 ,{ "a" }
 ,{ "complex" }
 ,{ "input" }
 ,{ "from" }
 ,{ "a" }
 ,{ "real" }
 ,{ "or" }
 ,{ "a" }
 ,{ "virtual" }
 ,{ "file" }
 ,{ "system." }
 ,{ "Two" }
 ,{ "template" }
 ,{ "parameters" }
 ,{ "controls" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "processing" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "content" }
 ,{ "mapping." }
 ,{ "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "error" }
 ,{ "report" }
 ,{ "stream." }
 ,{ "Others" }
 ,{ "are" }
 ,{ "different" }
 ,{ "engine" }
 ,{ "limits." }
 ,{ "The" }
 ,{ "method" }
 ,{ "process()" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "job." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "file" }
 ,{ "name" }
 ,{ "with" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "text." }
 ,{ "Additional" }
 ,{ "files" }
 ,{ "may" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "during" }
 ,{ "include" }
 ,{ "operations." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"pretext\"." }
 ,{ "It" }
 ,{ "is" }
 ,{ "included" }
 ,{ "before" }
 ,{ "the" }
 ,{ "file" }
 ,{ "text." }
 ,{ "The" }
 ,{ "method" }
 ,{ "process()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "multiple" }
 ,{ "times" }
 ,{ "for" }
 ,{ "different" }
 ,{ "files." }
 ,{ "Loaded" }
 ,{ "files" }
 ,{ "are" }
 ,{ "cached." }
 ,{ "Result" }
 ,{ "objects" }
 ,{ "life-time" }
 ,{ "is" }
 ,{ "ended" }
 ,{ "with" }
 ,{ "the" }
 ,{ "next" }
 ,{ "call" }
 ,{ "of" }
 ,{ "process()" , & fmt_text_b }
 ,{ "," }
 ,{ "or" }
 ,{ "with" }
 ,{ "the" }
 ,{ "engine" }
 ,{ "life-time" }
 ,{ "end." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "reset()" , & fmt_text_b }
 ,{ "cleans" }
 ,{ "the" }
 ,{ "engine" }
 ,{ "context." }
 ,{ "In" }
 ,{ "particular," }
 ,{ "all" }
 ,{ "result" }
 ,{ "nodes" }
 ,{ "are" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "purge()" , & fmt_text_b }
 ,{ "purges" }
 ,{ "the" }
 ,{ "file" }
 ,{ "cache." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "first" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "FileName" , & fmt_text_b }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "manipulation." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" , & fmt_text_a }
 ,{ "implementation" , & fmt_text_a }
 ,{ "of" , & fmt_text_a }
 ,{ "this" , & fmt_text_a }
 ,{ "class" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "use" }
 ,{ "this" }
 ,{ "implementation." }
 ,{ "Any" }
 ,{ "other" }
 ,{ "implementation" }
 ,{ "must" }
 ,{ "be" }
 ,{ "interface" }
 ,{ "compatible" }
 ,{ "with" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "must" }
 ,{ "do" }
 ,{ "the" }
 ,{ "same" }
 ,{ "thing" }
 ,{ "as" }
 ,{ "the" }
 ,{ "FileToMem" , & fmt_text_b }
 ,{ "class," }
 ,{ "i.e." }
 ,{ "load" }
 ,{ "the" }
 ,{ "file" }
 ,{ "content" }
 ,{ "into" }
 ,{ "the" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "On" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "FileToMem" , & fmt_text_a }
 ,{ "as" }
 ,{ "the" }
 ,{ "FileText" , & fmt_text_b }
 ,{ "template" }
 ,{ "parameter." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "You" }
 ,{ "may" }
 ,{ "supply" }
 ,{ "additional" }
 ,{ "arguments" }
 ,{ "using" }
 ,{ "the" }
 ,{ "variables" }
 ,{ "args" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "from" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "FileEngine" , & fmt_text_b }
 ,{ "and" }
 ,{ "stored" }
 ,{ "inside" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
 ,{ "Then" }
 ,{ "these" }
 ,{ "copies" }
 ,{ "are" }
 ,{ "used" }
 ,{ "in" }
 ,{ "FileText" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "calls." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "EvalResult" }
} , & fmt_h3 , & align_h3 } ;

Text b21 = { {
 { "EvalResult" , & fmt_text_b }
 ,{ "contains" }
 ,{ "two" }
 ,{ "tables." }
 ,{ "Each" }
 ,{ "constant," }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "DDL2" , & fmt_text_b }
 ,{ "source," }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "ConstNode" , & fmt_text_b }
 ,{ "object." }
 ,{ "This" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "field" }
 ,{ "index" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "entry" }
 ,{ "in" }
 ,{ "the" }
 ,{ "const_table" , & fmt_text_b }
 ,{ "with" }
 ,{ "this" }
 ,{ "index" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "calculated" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constant." }
 ,{ "Each" }
 ,{ "array" }
 ,{ "type" }
 ,{ "with" }
 ,{ "an" }
 ,{ "explicit" }
 ,{ "array" }
 ,{ "length" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "LenNode" , & fmt_text_b }
 ,{ "object." }
 ,{ "This" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "field" }
 ,{ "index" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "entry" }
 ,{ "in" }
 ,{ "the" }
 ,{ "len_table" , & fmt_text_b }
 ,{ "with" }
 ,{ "this" }
 ,{ "index" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "calculated" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "ConstResult" , & fmt_text_b }
 ,{ "contains" }
 ,{ "three" }
 ,{ "fields." }
 ,{ "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "TypeNode" , & fmt_text_b }
 ,{ "pointer," }
 ,{ "node" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "ConstNode" , & fmt_text_b }
 ,{ "pointer," }
 ,{ "value" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "calculated" }
 ,{ "constant" }
 ,{ "value." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "printable." }
 ,{ "To" }
 ,{ "print" }
 ,{ "you" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "option," }
 ,{ "bounded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "original" }
 ,{ "EvalResult" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "LenResult" , & fmt_text_b }
 ,{ "contains" }
 ,{ "two" }
 ,{ "fields." }
 ,{ "node" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "LenNode" , & fmt_text_b }
 ,{ "pointer," }
 ,{ "value" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "calculated" }
 ,{ "length" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "All" }
 ,{ "LenNode" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "zero-based" }
 ,{ "indexed." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "index" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "index" , & fmt_text_b }
 ,{ "field." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "All" }
 ,{ "ConstNode" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "zero-based" }
 ,{ "indexed." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "index" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "index" , & fmt_text_b }
 ,{ "field." }
 ,{ "ConstNode" , & fmt_text_b }
 ,{ "contains" }
 ,{ "also" }
 ,{ "the" }
 ,{ "filed" }
 ,{ "name" , & fmt_text_b }
 ,{ "with" }
 ,{ "its" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "field" }
 ,{ "parent" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ScopeNode" , & fmt_text_b }
 ,{ "which" }
 ,{ "it" }
 ,{ "belongs" }
 ,{ "to." }
 ,{ "depth" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "depth." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "ScopeNode" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "parent" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ScopeNode" , & fmt_text_b }
 ,{ "which" }
 ,{ "it" }
 ,{ "belongs" }
 ,{ "to." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "name" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "NameIdNode" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getStr()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "item." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Value" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "union" }
 ,{ "of" }
 ,{ "different" }
 ,{ "types." }
 ,{ "The" }
 ,{ "actual" }
 ,{ "member" }
 ,{ "depends" }
 ,{ "on" }
 ,{ "the" }
 ,{ "value" }
 ,{ "type." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "get<Type>()" , & fmt_text_b }
 ,{ "and" }
 ,{ "set<Type>()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "to" }
 ,{ "get" }
 ,{ "and" }
 ,{ "set" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "To" }
 ,{ "represent" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "imp_XXX" , & fmt_text_b }
 ,{ "are" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Integral" }
 ,{ "types" }
 ,{ "are:" }
 ,{ "sint8," , & fmt_text_b }
 ,{ "uint8," , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "and" }
 ,{ "sint_type," , & fmt_text_b }
 ,{ "uint_type," , & fmt_text_b }
 ,{ "ulen_type" , & fmt_text_b }
 ,{ "." }
 ,{ "Last" }
 ,{ "three" }
 ,{ "types" }
 ,{ "are" }
 ,{ "platform-dependent." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Text" , & fmt_text_b }
 ,{ "represents" }
 ,{ "text" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "IP" , & fmt_text_b }
 ,{ "represents" }
 ,{ "ip" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Non-scalar" }
 ,{ "values," }
 ,{ "like" }
 ,{ "structures" }
 ,{ "and" }
 ,{ "arrays," }
 ,{ "are" }
 ,{ "represented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Block" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Each" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "element" }
 ,{ "of" }
 ,{ "aggregate." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Pointer" }
 ,{ "values" }
 ,{ "are" }
 ,{ "represented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Ptr" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "The" }
 ,{ "field" }
 ,{ "ptr_node" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PtrNode" , & fmt_text_b }
 ,{ "object." }
 ,{ "This" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "three" }
 ,{ "fields." }
 ,{ "type" , & fmt_text_b }
 ,{ "describes" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "pointee" }
 ,{ "constant" }
 ,{ "or" }
 ,{ "sub-constant." }
 ,{ "If" }
 ,{ "this" }
 ,{ "constant" }
 ,{ "is" }
 ,{ "a" }
 ,{ "full" }
 ,{ "constant," }
 ,{ "then" }
 ,{ "parent" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "ConstNode" , & fmt_text_b }
 ,{ "index." }
 ,{ "Otherwise" }
 ,{ "parent" , & fmt_text_b }
 ,{ "represents" }
 ,{ "the" }
 ,{ "aggregate," }
 ,{ "the" }
 ,{ "sub-constant" }
 ,{ "is" }
 ,{ "an" }
 ,{ "element" }
 ,{ "of," }
 ,{ "and" }
 ,{ "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "aggregate" }
 ,{ "element" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "If" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "some" }
 ,{ "type," }
 ,{ "then" }
 ,{ "the" }
 ,{ "field" }
 ,{ "null" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "and" }
 ,{ "ptr_node->type" , & fmt_text_b }
 ,{ "describes" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "TypeNode" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "type." }
 ,{ "Different" }
 ,{ "type" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "encoded" }
 ,{ "using" }
 ,{ "AnyPtr" , & fmt_text_b }
 ,{ "field" }
 ,{ "ptr" , & fmt_text_b }
 ,{ "." }
 ,{ "For" }
 ,{ "example," }
 ,{ "to" }
 ,{ "encode" }
 ,{ "the" }
 ,{ "type" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "ptr" , & fmt_text_b }
 ,{ "is" }
 ,{ "initialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "type" }
 ,{ "TypeNode::Base" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "field" }
 ,{ "type" , & fmt_text_b }
 ,{ "of" }
 ,{ "this" }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "TypeNode::Base::Type_uint8" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "AliasNode" , & fmt_text_b }
 ,{ "repesents" }
 ,{ "a" }
 ,{ "type" }
 ,{ "declaration." }
 ,{ "The" }
 ,{ "field" }
 ,{ "result_type" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "some" }
 ,{ "\"resulting\"" }
 ,{ "TypeNode" , & fmt_text_b }
 ,{ "," }
 ,{ "this" }
 ,{ "node" }
 ,{ "represents" }
 ,{ "the" }
 ,{ "aliased" }
 ,{ "type" }
 ,{ "and" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "Ref" , & fmt_text_b }
 ,{ "node" }
 ,{ "with" }
 ,{ "another" }
 ,{ "AliasNode" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "StructNode" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "declaration." }
 ,{ "The" }
 ,{ "field" }
 ,{ "scope_node" , & fmt_text_b }
 ,{ "represents" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "scope." }
 ,{ "The" }
 ,{ "field" }
 ,{ "field_list" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "structure" }
 ,{ "fields." }
 ,{ "dep_index" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "zero-based" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure." }
 ,{ "These" }
 ,{ "indexes" }
 ,{ "respect" }
 ,{ "structure" }
 ,{ "dependencies:" }
 ,{ "if" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "A" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "filed" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "type" }
 ,{ "B" , & fmt_text_b }
 ,{ "(or" }
 ,{ "B[]" , & fmt_text_b }
 ,{ "or" }
 ,{ "B[Len]" , & fmt_text_b }
 ,{ ")," }
 ,{ "then" }
 ,{ "the" }
 ,{ "dep_index" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "the" }
 ,{ "dep_index" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "A" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "FieldNode" , & fmt_text_b }
 ,{ "describes" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "field." }
 ,{ "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "zero-based" }
 ,{ "field" }
 ,{ "index" }
 ,{ "among" }
 ,{ "all" }
 ,{ "fields" }
 ,{ "of" }
 ,{ "all" }
 ,{ "structures." }
 ,{ "field_index" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "zero-based" }
 ,{ "field" }
 ,{ "index" }
 ,{ "of" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "structure." }
 ,{ "name" , & fmt_text_b }
 ,{ "describes" }
 ,{ "the" }
 ,{ "field" }
 ,{ "name" }
 ,{ "and" }
 ,{ "type_node" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "field" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "These" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "type" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Map" }
} , & fmt_h2 , & align_h2 } ;

Text b44 = { {
 { "The" }
 ,{ "best" }
 ,{ "way" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "processing" }
 ,{ "result" }
 ,{ "is" }
 ,{ "to" }
 ,{ "map" }
 ,{ "it" }
 ,{ "into" }
 ,{ "a" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory." }
 ,{ "The" }
 ,{ "class" }
 ,{ "Map" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "do" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "You" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Map" , & fmt_text_b }
 ,{ "," }
 ,{ "providing" }
 ,{ "the" }
 ,{ "EngineResult" , & fmt_text_b }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "an" }
 ,{ "aligned" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "getLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "Once" }
 ,{ "it's" }
 ,{ "done," }
 ,{ "use" }
 ,{ "the" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "to" }
 ,{ "map" }
 ,{ "data" }
 ,{ "into" }
 ,{ "this" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "You" }
 ,{ "may" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "Map" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "Engine" , & fmt_text_b }
 ,{ "object" }
 ,{ "at" }
 ,{ "this" }
 ,{ "point" }
 ,{ "and" }
 ,{ "keep" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "as" }
 ,{ "long" }
 ,{ "as" }
 ,{ "required." }
 ,{ "To" }
 ,{ "find" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "constant" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "name" }
 ,{ "and" }
 ,{ "type," }
 ,{ "encoded" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "TypeDesc" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "constant" }
 ,{ "or" }
 ,{ "types" }
 ,{ "mismatch" }
 ,{ "then" }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "mapped" }
 ,{ "value" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "MapBase" , & fmt_text_b }
 ,{ "to" }
 ,{ "help" }
 ,{ "with" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "for" }
 ,{ "a" }
 ,{ "Map" , & fmt_text_b }
 ,{ "object" }
 ,{ "(the" }
 ,{ "actual" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "slightly" }
 ,{ "different):" }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "TypeDesc" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "for" }
 ,{ "the" }
 ,{ "family" }
 ,{ "of" }
 ,{ "derived" }
 ,{ "classes," }
 ,{ "designed" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "different" }
 ,{ "type" }
 ,{ "classes." }
 ,{ "The" }
 ,{ "field" }
 ,{ "tag" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "describing" }
 ,{ "type" }
 ,{ "value," }
 ,{ "and" }
 ,{ "derived" }
 ,{ "classes" }
 ,{ "has" }
 ,{ "additional" }
 ,{ "fields" }
 ,{ "with" }
 ,{ "extra" }
 ,{ "information" }
 ,{ "if" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "basic" }
 ,{ "types." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "type" }
 ,{ "tag." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "single" }
 ,{ "type" }
 ,{ "pointers." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "the" }
 ,{ "type" }
 ,{ "descriptor." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "polymorphic" }
 ,{ "pointer" }
 ,{ "types." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "type" }
 ,{ "descriptors." }
 ,{ "TypeCount" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "array" }
 ,{ "types" }
 ,{ "without" }
 ,{ "length." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "the" }
 ,{ "element" }
 ,{ "type" }
 ,{ "descriptor." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "array" }
 ,{ "types" }
 ,{ "with" }
 ,{ "a" }
 ,{ "given" }
 ,{ "length." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "the" }
 ,{ "element" }
 ,{ "type" }
 ,{ "descriptor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "array" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "array" }
 ,{ "types" }
 ,{ "with" }
 ,{ "a" }
 ,{ "given" }
 ,{ "length." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "the" }
 ,{ "element" }
 ,{ "type" }
 ,{ "descriptor." }
 ,{ "But" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "array" }
 ,{ "length" }
 ,{ "is" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "descriptor" }
 ,{ "must" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "directly" }
 ,{ "or" }
 ,{ "indirectly" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "later." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "structure" }
 ,{ "types." }
 ,{ "You" }
 ,{ "provide" }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "field" }
 ,{ "type" }
 ,{ "descriptors." }
 ,{ "FieldCount" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "fields." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "some" }
 ,{ "internal" }
 ,{ "fields," }
 ,{ "these" }
 ,{ "fields" }
 ,{ "are" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "descriptor" }
 ,{ "must" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "directly" }
 ,{ "or" }
 ,{ "indirectly" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "later." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "DataPtr" }
} , & fmt_h3 , & align_h3 } ;

Text b56 = { {
 { "DataPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"universal" }
 ,{ "pointer\"" }
 ,{ "class." }
 ,{ "You" }
 ,{ "may" }
 ,{ "initialize" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "by" }
 ,{ "the" }
 ,{ "value," }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "Then" }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "object" }
 ,{ "to" }
 ,{ "get" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "value." }
 ,{ "Use" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "and" }
 ,{ "assign" }
 ,{ "the" }
 ,{ "result" }
 ,{ "to" }
 ,{ "the" }
 ,{ "variable" }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "type." }
 ,{ "You" }
 ,{ "may" }
 ,{ "find" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "type" }
 ,{ "in" }
 ,{ "the" }
 ,{ "TypeTag" , & fmt_text_b }
 ,{ "definition" }
 ,{ "above." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "You" }
 ,{ "cannot" }
 ,{ "use" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "," }
 ,{ "however," }
 ,{ "if" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "or" }
 ,{ "an" }
 ,{ "array" }
 ,{ "with" }
 ,{ "length." }
 ,{ "For" }
 ,{ "structure" }
 ,{ "types" }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "select()" , & fmt_text_b }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "DataPtr" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "desired" }
 ,{ "field." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "type" }
 ,{ "descriptor," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "zero-based" }
 ,{ "field" }
 ,{ "index." }
 ,{ "The" }
 ,{ "descriptor" }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "some" }
 ,{ "internal" }
 ,{ "values," }
 ,{ "filled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "findConst()" , & fmt_text_b }
 ,{ "to" }
 ,{ "locate" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "field." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "If" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "type" }
 ,{ "is" }
 ,{ "an" }
 ,{ "array" }
 ,{ "without" }
 ,{ "length," }
 ,{ "you" }
 ,{ "can" }
 ,{ "cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ArrayPtr" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "you" }
 ,{ "can" }
 ,{ "also" }
 ,{ "use" }
 ,{ "the" }
 ,{ "type" }
 ,{ "PtrLen<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" }
 ,{ "corresponds" }
 ,{ "to" }
 ,{ "the" }
 ,{ "element" }
 ,{ "type." }
 ,{ "Again," }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "do" }
 ,{ "it," }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "or" }
 ,{ "an" }
 ,{ "array" }
 ,{ "with" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "This" }
 ,{ "structure" }
 ,{ "holds" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array" }
 ,{ "and" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array" }
 ,{ "elements." }
 ,{ "You" }
 ,{ "may" }
 ,{ "initialize" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "type" }
 ,{ "DataPtr" , & fmt_text_b }
 ,{ "from" }
 ,{ "this" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "If" }
 ,{ "a" }
 ,{ "DataPtr" , & fmt_text_b }
 ,{ "object" }
 ,{ "corresponds" }
 ,{ "to" }
 ,{ "an" }
 ,{ "array" }
 ,{ "with" }
 ,{ "length," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "range()" , & fmt_text_b }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "PtrLen<T>" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "access" }
 ,{ "array" }
 ,{ "elements." }
 ,{ "Just" }
 ,{ "cast" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "range" }
 ,{ "type." }
 ,{ "The" }
 ,{ "element" }
 ,{ "type" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "or" }
 ,{ "array" }
 ,{ "with" }
 ,{ "length" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "To" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "an" }
 ,{ "array" }
 ,{ "of" }
 ,{ "structures," }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "elem()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "descriptor." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "TypedDataPtr" }
} , & fmt_h3 , & align_h3 } ;

Text b64 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "polymorphic" }
 ,{ "pointers." }
 ,{ "It" }
 ,{ "inherits" }
 ,{ "the" }
 ,{ "type" }
 ,{ "DataPtr" , & fmt_text_b }
 ,{ "and" }
 ,{ "has" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "field" }
 ,{ "type" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "value" }
 ,{ "of" }
 ,{ "this" }
 ,{ "field" }
 ,{ "is" }
 ,{ "a" }
 ,{ "1-based" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "type" }
 ,{ "list." }
 ,{ "It" }
 ,{ "is" }
 ,{ "zero" }
 ,{ "if" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "a" }
 ,{ "typeless" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Link link_TypedMap = { & page , { 65 } } ;

Text b65 = { {
 { "TypedMap" }
} , & fmt_h2 , & align_h2 } ;

Text b66 = { {
 { "The" }
 ,{ "most" }
 ,{ "convenient" }
 ,{ "way" }
 ,{ "to" }
 ,{ "map" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "data" }
 ,{ "is" }
 ,{ "the" }
 ,{ "class" }
 ,{ "TypedMap" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "with" }
 ,{ "this" }
 ,{ "class" }
 ,{ "you" }
 ,{ "are" }
 ,{ "bounded" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "structure" }
 ,{ "types." }
 ,{ "These" }
 ,{ "type" }
 ,{ "set" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "TypeSet" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "should" }
 ,{ "use" }
 ,{ "the" }
 ,{ "utility" }
 ,{ "DDLTypeSet" , & fmt_text_a }
 ,{ "to" }
 ,{ "generate" }
 ,{ "the" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "source." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "TypedMap" , & fmt_text_b }
 ,{ "class" }
 ,{ "usage" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "for" }
 ,{ "Map" , & fmt_text_b }
 ,{ "class." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "is" }
 ,{ "you" }
 ,{ "have" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "get" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "constant" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "findConst()" , & fmt_text_b }
 ,{ "searches" }
 ,{ "for" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "it." }
 ,{ "Null" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "constant" }
 ,{ "or" }
 ,{ "it" }
 ,{ "has" }
 ,{ "a" }
 ,{ "different" }
 ,{ "type." }
 ,{ "The" }
 ,{ "type" }
 ,{ "is" }
 ,{ "specified" }
 ,{ "as" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "takeConst()" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "value" }
 ,{ "and" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "on" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "you" }
 ,{ "always" }
 ,{ "get" }
 ,{ "a" }
 ,{ "value" }
 ,{ "of" }
 ,{ "some" }
 ,{ "C++" }
 ,{ "type," }
 ,{ "compatible" }
 ,{ "with" }
 ,{ "the" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "type." }
 ,{ "These" }
 ,{ "types" }
 ,{ "are" }
 ,{ "available" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ddl/DDLMapTypes.h" , & fmt_text_b }
 ,{ "include" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "For" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "the" }
 ,{ "compatible" }
 ,{ "type" }
 ,{ "is" }
 ,{ "an" }
 ,{ "integral" }
 ,{ "C++" }
 ,{ "type." }
 ,{ "I.e." }
 ,{ "uint8" , & fmt_text_b }
 ,{ "is" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "etc." }
 ,{ "sint" , & fmt_text_b }
 ,{ "is" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "sint_type" , & fmt_text_b }
 ,{ "," }
 ,{ "uint" , & fmt_text_b }
 ,{ "as" }
 ,{ "uint_type" , & fmt_text_b }
 ,{ "and" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "as" }
 ,{ "ulen_type" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "ip" , & fmt_text_b }
 ,{ "is" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "MapText" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "Pointers" }
 ,{ "are" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "MapPtr" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "Polymorphic" }
 ,{ "pointers" }
 ,{ "are" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "MapPolyPtr" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "Arrays" }
 ,{ "are" }
 ,{ "mapped" }
 ,{ "as" }
 ,{ "MapRange" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "Finally," }
 ,{ "structure" }
 ,{ "types" }
 ,{ "are" }
 ,{ "mapped" }
 ,{ "using" }
 ,{ "C++" }
 ,{ "structure" }
 ,{ "definitions" }
 ,{ "from" }
 ,{ "the" }
 ,{ "TypeSet" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "Example" }
} , & fmt_h3 , & align_h3 } ;

Text b79 = { {
 { "Here" }
 ,{ "is" }
 ,{ "LangTypes.ddl" , & fmt_text_b }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "DDLTypeSet" , & fmt_text_b }
 ,{ "generates" }
 ,{ "two" }
 ,{ "C++" }
 ,{ "header" }
 ,{ "files:" }
 ,{ "LanTypeDef.gen.h" , & fmt_text_b }
 ,{ "and" }
 ,{ "LangTypeSet.gen.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "The" }
 ,{ "first" }
 ,{ "defines" }
 ,{ "C++" }
 ,{ "structure" }
 ,{ "types" }
 ,{ "and" }
 ,{ "aliases." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "You" }
 ,{ "should" }
 ,{ "use" }
 ,{ "TypeDef" , & fmt_text_b }
 ,{ "namespace" }
 ,{ "to" }
 ,{ "refer" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "structure" }
 ,{ "or" }
 ,{ "a" }
 ,{ "type" }
 ,{ "alias." }
 ,{ "Use" }
 ,{ "the" }
 ,{ "same" }
 ,{ "name," }
 ,{ "as" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "entity." }
} , & fmt_text , & align_text } ;

Text b83 = { {
 { "To" }
 ,{ "use" }
 ,{ "this" }
 ,{ "file" }
 ,{ "include" }
 ,{ "it" }
 ,{ "in" }
 ,{ "your" }
 ,{ "C++" }
 ,{ "source" }
 ,{ "code" }
 ,{ "inside" }
 ,{ "some" }
 ,{ "namespace" }
 ,{ "to" }
 ,{ "isolate" }
 ,{ "it" }
 ,{ "from" }
 ,{ "the" }
 ,{ "other" }
 ,{ "stuff." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "Each" }
 ,{ "structure" }
 ,{ "definition" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "declaration" }
 ,{ "of" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure" }
 ,{ "Ext" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "provide" }
 ,{ "definitions" }
 ,{ "of" }
 ,{ "these" }
 ,{ "structures" }
 ,{ "to" }
 ,{ "add" }
 ,{ "additional" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "these" }
 ,{ "structures." }
} , & fmt_text , & align_text } ;

Text b85 = { {
 { "You" }
 ,{ "may" }
 ,{ "assign" }
 ,{ "some" }
 ,{ "structures" }
 ,{ "the" }
 ,{ "extra" }
 ,{ "field" }
 ,{ "ext" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "do" }
 ,{ "so" }
 ,{ "use" }
 ,{ "the" }
 ,{ "ext" }
 ,{ "list" }
 ,{ "of" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "the" }
 ,{ "DDLTypeSet" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "This" }
 ,{ "extra" }
 ,{ "field" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "zero" }
 ,{ "during" }
 ,{ "the" }
 ,{ "data" }
 ,{ "mapping." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "The" }
 ,{ "second" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "TypeSet" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "Use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "as" }
 ,{ "the" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "for" }
 ,{ "the" }
 ,{ "TypedMap" , & fmt_text_b }
 ,{ "class" }
 ,{ "template." }
} , & fmt_text , & align_text } ;

Page page = { "page_DDLEngine" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b5 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b6 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b7 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b8 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_text , outer_text , back_text }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_text , outer_text , back_text }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DDLShow {

Text b0 = { {
 { "DDLShow" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "DDLShow" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "utility," }
 ,{ "it" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "file" }
 ,{ "and" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "processing" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "This" }
 ,{ "command" }
 ,{ "processes" }
 ,{ "each" }
 ,{ "of" }
 ,{ "given" }
 ,{ "files" }
 ,{ "and" }
 ,{ "prints" }
 ,{ "a" }
 ,{ "processing" }
 ,{ "result" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ ".txt" , & fmt_text_b }
 ,{ "file:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "utility" }
 ,{ "to" }
 ,{ "learn" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_DDLShow" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DDLTypeSet {

Text b0 = { {
 { "DDLTypeSet" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "DDLTypeSet" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "for" }
 ,{ "generation" }
 ,{ "a" }
 ,{ "TypeSet" , & fmt_text_b }
 ,{ "class." }
 ,{ "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "map" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "data" }
 ,{ "using" }
 ,{ "the" }
 ,{ "DDL::TypedMap" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "ddl-file-name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "file," }
 ,{ "which" }
 ,{ "contains" }
 ,{ "type" }
 ,{ "definitions." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "typedef-file" , & fmt_text_b }
 ,{ "will" }
 ,{ "contain" }
 ,{ "TypeDef" , & fmt_text_b }
 ,{ "declarations." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "typeset-file" , & fmt_text_b }
 ,{ "will" }
 ,{ "contain" }
 ,{ "TypeSet" , & fmt_text_b }
 ,{ "declarations." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ext-list" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "names." }
 ,{ "All" }
 ,{ "structures" }
 ,{ "with" }
 ,{ "these" }
 ,{ "names" }
 ,{ "will" }
 ,{ "have" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "field" }
 ,{ "ext" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "field" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "zero" , & fmt_text_b }
 ,{ "during" }
 ,{ "the" }
 ,{ "data" }
 ,{ "mapping" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "applications" }
 ,{ "for" }
 ,{ "various" }
 ,{ "purposes." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "For" }
 ,{ "an" }
 ,{ "example," }
 ,{ "see" }
 ,{ "files" }
 ,{ "LangTypes.ddl" , & fmt_text_b }
 ,{ "," }
 ,{ "LangTypeDef.gen.h" , & fmt_text_b }
 ,{ "," }
 ,{ "LangTypeSet.gen.h" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "CCORE_ROOT/tools/CondLangLR1" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_DDLTypeSet" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DecodeFile {

Text b0 = { {
 { "DecodeFile" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/DecodeFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DecodeFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "DecodeFile" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "A" }
 ,{ "DecodeFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "serialization" , & fmt_text_a }
 ,{ "input" , & fmt_text_a }
 ,{ "device" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "gets" }
 ,{ "data" }
 ,{ "bytes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Defalut" }
 ,{ "constructor" }
 ,{ "creats" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "closed" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "To" }
 ,{ "create" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object" }
 ,{ "use" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Destructor" }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "opened," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "closed" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "and" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "the" }
 ,{ "FileMultiError" , & fmt_text_a }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "To" }
 ,{ "read" }
 ,{ "the" }
 ,{ "file" }
 ,{ "contetnt" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "serialization" }
 ,{ "methods," }
 ,{ "but" }
 ,{ "you" }
 ,{ "can" }
 ,{ "also" }
 ,{ "use" }
 ,{ "raw" }
 ,{ "input" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "more()" , & fmt_text_b }
 ,{ "retuns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "next" }
 ,{ "data" }
 ,{ "chunk." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "pump()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "next" }
 ,{ "data" }
 ,{ "chunk." }
 ,{ "This" }
 ,{ "range" }
 ,{ "is" }
 ,{ "valid" }
 ,{ "until" }
 ,{ "a" }
 ,{ "next" }
 ,{ "object" }
 ,{ "method" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "DecodeBinFile" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "DecodeBinFile" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "similar" }
 ,{ "class," }
 ,{ "but" }
 ,{ "it" }
 ,{ "uses" }
 ,{ "BinFileToRead" , & fmt_text_a }
 ,{ "to" }
 ,{ "read" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Page page = { "page_DecodeFile" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DefaultFileDevice {

Text b0 = { {
 { "(XCore)" }
 ,{ "DefaultFileDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/DefaultFileDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DefaultFileDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "global" }
 ,{ "default" }
 ,{ "file" }
 ,{ "device" }
 ,{ "name." }
 ,{ "By" }
 ,{ "default," }
 ,{ "it" }
 ,{ "is" }
 ,{ "\"host\"" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "get" }
 ,{ "or" }
 ,{ "set" }
 ,{ "this" }
 ,{ "name" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "name." }
 ,{ "The" }
 ,{ "name" }
 ,{ "length" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "MaxPathLen" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "second" }
 ,{ "function" }
 ,{ "makes" }
 ,{ "a" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "name" }
 ,{ "in" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "buffer" }
 ,{ "length" }
 ,{ "must" }
 ,{ "be" }
 ,{ "MaxPathLen" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "name" }
 ,{ "length" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Both" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "thread-safe." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "helper" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "simplify" }
 ,{ "the" }
 ,{ "name" }
 ,{ "extraction." }
} , & fmt_text , & align_text } ;

Page page = { "page_DefaultFileDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DefaultTimeout {

Text b0 = { {
 { "DefaultTimeout" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/DefaultTimeout.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/DefaultTimeout.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Defines" }
 ,{ "DefaultTimeout" , & fmt_text_b }
 ,{ "equals" }
 ,{ "10" }
 ,{ "seconds." }
 ,{ "See" }
 ,{ "MSec" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_DefaultTimeout" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DeferCall {

Text b0 = { {
 { "DeferCalls" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/DeferCall.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DeferCall.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "DeferCall" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "engine." }
 ,{ "It" }
 ,{ "allows" }
 ,{ "record" }
 ,{ "actions" }
 ,{ "and" }
 ,{ "execute" }
 ,{ "them" }
 ,{ "in" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "loop." }
 ,{ "This" }
 ,{ "technology" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "message" }
 ,{ "loop" }
 ,{ "processing," }
 ,{ "known" }
 ,{ "in" }
 ,{ "the" }
 ,{ "GUI" }
 ,{ "application" }
 ,{ "development," }
 ,{ "but" }
 ,{ "is" }
 ,{ "not" }
 ,{ "restricted" }
 ,{ "to" }
 ,{ "a" }
 ,{ "predefined" }
 ,{ "set" }
 ,{ "of" }
 ,{ "messages." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "DeferCall" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "single-threaded." }
 ,{ "You" }
 ,{ "may" }
 ,{ "run" }
 ,{ "several" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "loops" }
 ,{ "on" }
 ,{ "one" }
 ,{ "per" }
 ,{ "thread" }
 ,{ "basis." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "loop," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "forward()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "queue" }
 ,{ "is" }
 ,{ "empty." }
 ,{ "This" }
 ,{ "method" }
 ,{ "must" }
 ,{ "generate" }
 ,{ "new" }
 ,{ "defer" }
 ,{ "calls" }
 ,{ "or" }
 ,{ "sleep" }
 ,{ "within" }
 ,{ "the" }
 ,{ "given" }
 ,{ "time_scope" , & fmt_text_b }
 ,{ "period." }
 ,{ "forward()" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "generate" }
 ,{ "defer" }
 ,{ "calls" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "external" }
 ,{ "events," }
 ,{ "like" }
 ,{ "key" }
 ,{ "pressing" }
 ,{ "of" }
 ,{ "mouse" }
 ,{ "movement." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Next," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "queue" }
 ,{ "object," }
 ,{ "then" }
 ,{ "prepare" }
 ,{ "other" }
 ,{ "entities" }
 ,{ "and" }
 ,{ "run" }
 ,{ "the" }
 ,{ "loop." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "To" }
 ,{ "stop" }
 ,{ "the" }
 ,{ "loop" }
 ,{ "use" }
 ,{ "the" }
 ,{ "DeferCallQueue::Stop()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "global" }
 ,{ "methods" }
 ,{ "address" }
 ,{ "the" }
 ,{ "current" }
 ,{ "active" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "object" }
 ,{ "for" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread." }
 ,{ "Objects," }
 ,{ "involved" }
 ,{ "in" }
 ,{ "the" }
 ,{ "DeferQueue" , & fmt_text_b }
 ,{ "processing" }
 ,{ "on" }
 ,{ "this" }
 ,{ "thread," }
 ,{ "should" }
 ,{ "live" }
 ,{ "withing" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "object" }
 ,{ "life-time." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "To" }
 ,{ "add" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "input" }
 ,{ "to" }
 ,{ "some" }
 ,{ "class" }
 ,{ "use" }
 ,{ "the" }
 ,{ "DeferInput" , & fmt_text_b }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "DeferCall" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "The" }
 ,{ "class" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "serves" }
 ,{ "as" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class" }
 ,{ "of" }
 ,{ "other" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "classes." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "it" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "call()" , & fmt_text_b }
 ,{ "is" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "and" }
 ,{ "is" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "processing" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "destroy()" , & fmt_text_b }
 ,{ "is" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "to" }
 ,{ "properly" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "safeCall()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "the" }
 ,{ "call()" , & fmt_text_b }
 ,{ "and" }
 ,{ "catches" }
 ,{ "and" }
 ,{ "ignores" }
 ,{ "all" }
 ,{ "exceptions." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "free" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "DeferCallHeap" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "The" }
 ,{ "class" }
 ,{ "DeferCallHeap" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "free" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "objects." }
 ,{ "An" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "a" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "object" }
 ,{ "for" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "management." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "taken" }
 ,{ "from" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "of" }
 ,{ "mem_len" , & fmt_text_b }
 ,{ "length." }
 ,{ "This" }
 ,{ "block" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "released" }
 ,{ "by" }
 ,{ "the" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "null," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "memory" }
 ,{ "available." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "free()" , & fmt_text_b }
 ,{ "argument" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "GetMaxLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "caching." }
 ,{ "To" }
 ,{ "speed" }
 ,{ "up" }
 ,{ "memory" }
 ,{ "operations" }
 ,{ "for" }
 ,{ "short" }
 ,{ "objects" }
 ,{ "DeferCallHeap" , & fmt_text_b }
 ,{ "maintains" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "short" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "up" }
 ,{ "to" }
 ,{ "some" }
 ,{ "count" }
 ,{ "for" }
 ,{ "such" }
 ,{ "allocations." }
 ,{ "GetMaxLen()" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "short" }
 ,{ "allocation" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "DeferCallQueue" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "The" }
 ,{ "class" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "main" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "engine" }
 ,{ "class." }
 ,{ "It" }
 ,{ "maintains" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "s" }
 ,{ "and" }
 ,{ "executes" }
 ,{ "them" }
 ,{ "in" }
 ,{ "a" }
 ,{ "loop." }
 ,{ "The" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "is" }
 ,{ "registered" }
 ,{ "per" }
 ,{ "thread" }
 ,{ "as" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "loop" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "forward()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "queue" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "activate()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "constructor" }
 ,{ "to" }
 ,{ "register" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread." }
 ,{ "If" }
 ,{ "some" }
 ,{ "object" }
 ,{ "is" }
 ,{ "already" }
 ,{ "registered," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "deactivate()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "destructor" }
 ,{ "to" }
 ,{ "unregister" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "DefaultMemLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "heap" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "The" }
 ,{ "argument" }
 ,{ "tick_period" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "period," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "DefaultTickPeriod" , & fmt_text_b }
 ,{ "," }
 ,{ "equals" }
 ,{ "40" }
 ,{ "milliseconds," }
 ,{ "that" }
 ,{ "gives" }
 ,{ "25" }
 ,{ "Hz" }
 ,{ "tick" }
 ,{ "frequency." }
 ,{ "The" }
 ,{ "tick" }
 ,{ "period" }
 ,{ "is" }
 ,{ "maintained" }
 ,{ "as" }
 ,{ "accurate," }
 ,{ "as" }
 ,{ "possible." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "The" }
 ,{ "argument" }
 ,{ "mem_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "heap" }
 ,{ "capacity." }
 ,{ "All" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "objects" }
 ,{ "for" }
 ,{ "this" }
 ,{ "loop" }
 ,{ "are" }
 ,{ "created" }
 ,{ "in" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "of" }
 ,{ "this" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "The" }
 ,{ "following" }
 ,{ "four" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "heap" }
 ,{ "methods." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "these" }
 ,{ "methods" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "try_alloc()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "null," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "memory." }
 ,{ "It" }
 ,{ "also" }
 ,{ "stops" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "defer" , & fmt_text_Alert }
 ,{ "call" , & fmt_text_Alert }
 ,{ "loop" , & fmt_text_Alert }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "free()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "memory," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "destroy()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "a" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "following" }
 ,{ "four" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "queue" }
 ,{ "methods." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "these" }
 ,{ "methods" }
 ,{ "directly." }
 ,{ "Arguments" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "post()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "queue." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "consumed." }
 ,{ "It" }
 ,{ "will" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "after" }
 ,{ "processing" }
 ,{ "or" }
 ,{ "during" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "cleanup" }
 ,{ "after" }
 ,{ "stop." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "post_first()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "head." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "consumed." }
 ,{ "It" }
 ,{ "will" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "after" }
 ,{ "processing" }
 ,{ "or" }
 ,{ "during" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "cleanup" }
 ,{ "after" }
 ,{ "stop." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "start_tick()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "ticks" }
 ,{ "on" }
 ,{ "the" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "consumed." }
 ,{ "It" }
 ,{ "retains" }
 ,{ "the" }
 ,{ "owner." }
 ,{ "Defer" }
 ,{ "tick" }
 ,{ "is" }
 ,{ "a" }
 ,{ "periodic" }
 ,{ "event," }
 ,{ "during" }
 ,{ "this" }
 ,{ "event" }
 ,{ "all" }
 ,{ "specified" }
 ,{ "defer" }
 ,{ "calls" }
 ,{ "are" }
 ,{ "called" }
 ,{ "to" }
 ,{ "do" }
 ,{ "a" }
 ,{ "periodic" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "stop_tick()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "ticks" }
 ,{ "on" }
 ,{ "the" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "now." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "The" }
 ,{ "next" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "loop" }
 ,{ "methods." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "these" }
 ,{ "methods" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "loop()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "calls" }
 ,{ "loop." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "stop()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "the" }
 ,{ "loop." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Finally," }
 ,{ "four" }
 ,{ "global" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Get()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "active" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "object." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "IsActive()" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "there" }
 ,{ "is" }
 ,{ "an" }
 ,{ "active" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "Loop()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "loop." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "Stop()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "the" }
 ,{ "loop." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "DeferCouple" }
} , & fmt_h4 , & align_h4 } ;

Text b48 = { {
 { "The" }
 ,{ "class" }
 ,{ "DeferCouple" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class," }
 ,{ "it" }
 ,{ "stores" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "object." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "directly." }
 ,{ "If" }
 ,{ "you" }
 ,{ "desire" }
 ,{ "to" }
 ,{ "do" }
 ,{ "it," }
 ,{ "think" }
 ,{ "throw" }
 ,{ "how" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "working," }
 ,{ "they" }
 ,{ "have" }
 ,{ "been" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "serve" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "purpose." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "NothingType" , & fmt_text_b }
 ,{ "-constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "given" }
 ,{ "object" }
 ,{ "pointers." }
 ,{ "If" }
 ,{ "the" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "null," }
 ,{ "a" }
 ,{ "null" }
 ,{ "object" }
 ,{ "is" }
 ,{ "constructed." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "destructor," }
 ,{ "so" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "object" }
 ,{ "manually" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "cleanup()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "operator" , & fmt_text_b }
 ,{ "!()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "cleanup()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "DeferCall" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "posts" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "or" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "on" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "DeferTick" }
} , & fmt_h4 , & align_h4 } ;

Text b56 = { {
 { "The" }
 ,{ "class" }
 ,{ "DeferTick" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "may" }
 ,{ "own" }
 ,{ "some" }
 ,{ "defer" }
 ,{ "call," }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "DeferCouple" , & fmt_text_b }
 ,{ "object." }
 ,{ "If" }
 ,{ "it" }
 ,{ "owns" }
 ,{ "some" }
 ,{ "defer" }
 ,{ "call," }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "can" }
 ,{ "be" }
 ,{ "started" }
 ,{ "on" }
 ,{ "this" }
 ,{ "defer" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "Constructor" }
 ,{ "builds" }
 ,{ "the" }
 ,{ "object," }
 ,{ "owning" }
 ,{ "the" }
 ,{ "given" }
 ,{ "defer" }
 ,{ "call," }
 ,{ "provided" }
 ,{ "as" }
 ,{ "a" }
 ,{ "DeferCouple" , & fmt_text_b }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "DeferCouple" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "tick" }
 ,{ "object" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "Destructor" }
 ,{ "resets" }
 ,{ "the" }
 ,{ "object." }
 ,{ "If" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "object" }
 ,{ "was" }
 ,{ "owned," }
 ,{ "it" }
 ,{ "is" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "set()" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "sets" }
 ,{ "a" }
 ,{ "new" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "object," }
 ,{ "or" }
 ,{ "null." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "is" }
 ,{ "destroyed," }
 ,{ "if" }
 ,{ "any." }
 ,{ "If" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "was" }
 ,{ "started," }
 ,{ "it" }
 ,{ "remains" }
 ,{ "started" }
 ,{ "on" }
 ,{ "the" }
 ,{ "new" }
 ,{ "defer" }
 ,{ "call," }
 ,{ "unless" }
 ,{ "null" }
 ,{ "is" }
 ,{ "provided." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "becomes" }
 ,{ "stopped" }
 ,{ "and" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "reset()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "set(Nothing)" , & fmt_text_b }
 ,{ "." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "old" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "object" }
 ,{ "and" }
 ,{ "resets" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
 ,{ "The" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "is" }
 ,{ "stopped," }
 ,{ "if" }
 ,{ "it" }
 ,{ "was" }
 ,{ "running." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "start()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "on" }
 ,{ "the" }
 ,{ "owned" }
 ,{ "defer" }
 ,{ "call," }
 ,{ "if" }
 ,{ "any." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "has" }
 ,{ "been" }
 ,{ "successfully" }
 ,{ "started." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "stop()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "running." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "has" }
 ,{ "been" }
 ,{ "successfully" }
 ,{ "stopped." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "All" }
 ,{ "four" }
 ,{ "methods" }
 ,{ "return" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "status" }
 ,{ "(running" }
 ,{ "or" }
 ,{ "stopped)" }
 ,{ "has" }
 ,{ "been" }
 ,{ "changed." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "DeferInput" }
} , & fmt_h4 , & align_h4 } ;

Text b65 = { {
 { "The" }
 ,{ "class" }
 ,{ "DeferInput" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "\"input\"" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "and" }
 ,{ "use" }
 ,{ "defer" }
 ,{ "calls," }
 ,{ "bounded" }
 ,{ "with" }
 ,{ "method" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "some" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "target" }
 ,{ "object." }
 ,{ "It" }
 ,{ "should" }
 ,{ "be" }
 ,{ "non-null" }
 ,{ "(otherwise" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "useless)." }
 ,{ "The" }
 ,{ "object" }
 ,{ "life-time" }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "DeferInput" , & fmt_text_b }
 ,{ "object" }
 ,{ "life-time." }
 ,{ "Constructor" }
 ,{ "also" }
 ,{ "captures" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "current" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "object." }
 ,{ "So" }
 ,{ "the" }
 ,{ "input" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "withing" }
 ,{ "the" }
 ,{ "thread" }
 ,{ "has" }
 ,{ "created" }
 ,{ "the" }
 ,{ "input" }
 ,{ "object" }
 ,{ "and" }
 ,{ "after" }
 ,{ "the" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "with" }
 ,{ "a" }
 ,{ "DeferCallQueue" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "cancel()" , & fmt_text_b }
 ,{ "deactivates" }
 ,{ "all" }
 ,{ "pending" }
 ,{ "defer" }
 ,{ "calls." }
 ,{ "They" }
 ,{ "call()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "become" }
 ,{ "\"doing" }
 ,{ "nothing\"." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "groups" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "for" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "creation" }
 ,{ "and" }
 ,{ "submission." }
 ,{ "The" }
 ,{ "first" }
 ,{ "method" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "one" }
 ,{ "as" }
 ,{ "a" }
 ,{ "DeferCouple" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "second" }
 ,{ "creates" }
 ,{ "and" }
 ,{ "posts" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call." }
 ,{ "The" }
 ,{ "third" }
 ,{ "creates" }
 ,{ "and" }
 ,{ "posts" }
 ,{ "at" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "head." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "The" }
 ,{ "first" }
 ,{ "group" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "from" }
 ,{ "an" }
 ,{ "object" }
 ,{ "method" }
 ,{ "and" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "arguments." }
 ,{ "Rememebr," }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "and" }
 ,{ "stored," }
 ,{ "so" }
 ,{ "you" }
 ,{ "must" }
 ,{ "be" }
 ,{ "caution" }
 ,{ "with" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "a" }
 ,{ "\"pointer" }
 ,{ "type\"." }
 ,{ "Also" }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "is" }
 ,{ "failed" }
 ,{ "due" }
 ,{ "to" }
 ,{ "the" }
 ,{ "lack" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "loop" }
 ,{ "will" }
 ,{ "be" }
 ,{ "stopped." }
 ,{ "The" }
 ,{ "method" }
 ,{ "can" }
 ,{ "also" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "from" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "copying." }
 ,{ "This" }
 ,{ "situation" }
 ,{ "is" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "a" }
 ,{ "bad" }
 ,{ "design," }
 ,{ "it's" }
 ,{ "better" }
 ,{ "avoid" }
 ,{ "it." }
 ,{ "Don't" }
 ,{ "use" }
 ,{ "types" }
 ,{ "with" }
 ,{ "not" }
 ,{ "efficient" }
 ,{ "copy" }
 ,{ "constructors!" }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "create" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "method" }
 ,{ "and" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "arguments." }
 ,{ "You" }
 ,{ "need" }
 ,{ "this" }
 ,{ "method" }
 ,{ "for" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "tick" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "post()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "and" }
 ,{ "post" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "method" }
 ,{ "and" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "post_first()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "and" }
 ,{ "post" }
 ,{ "at" }
 ,{ "the" }
 ,{ "head" }
 ,{ "a" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "method" }
 ,{ "and" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "The" }
 ,{ "second" }
 ,{ "group" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "try" }
 ,{ "variants." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "try_create()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "create()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "no" }
 ,{ "memory." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "null" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "try_post()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "post()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "no" }
 ,{ "memory." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "method" }
 ,{ "does" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "try_post_first()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "post_first()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "no" }
 ,{ "memory." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "method" }
 ,{ "does" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "Last" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "similar," }
 ,{ "but" }
 ,{ "create" }
 ,{ "defer" }
 ,{ "calls" }
 ,{ "not" }
 ,{ "from" }
 ,{ "object" }
 ,{ "methods," }
 ,{ "but" }
 ,{ "from" }
 ,{ "functor" }
 ,{ "initialization" }
 ,{ "objects." }
 ,{ "Each" }
 ,{ "time" }
 ,{ "the" }
 ,{ "defer" }
 ,{ "call" }
 ,{ "is" }
 ,{ "called," }
 ,{ "the" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "created" }
 ,{ "from" }
 ,{ "the" }
 ,{ "initializer" }
 ,{ "and" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Page page = { "page_DeferCall" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Deflate {

Text b0 = { {
 { "Deflate" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Deflate.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Deflate.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "deflate" }
 ,{ "compression" }
 ,{ "algorithms," }
 ,{ "as" }
 ,{ "specified" }
 ,{ "in" }
 ,{ "the" }
 ,{ "RFC1951" , & fmt_text_a }
 ,{ "." }
 ,{ "This" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "a" }
 ,{ "reengineered" }
 ,{ "version" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Crypto++" , & fmt_text_a }
 ,{ "variant." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Deflate" , & fmt_text_b }
 ,{ "namespace." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "compress" }
 ,{ "a" }
 ,{ "data" }
 ,{ "stream" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Deflator" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "output" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "output" }
 ,{ "processed" }
 ,{ "data." }
 ,{ "To" }
 ,{ "inject" }
 ,{ "source" }
 ,{ "data" }
 ,{ "into" }
 ,{ "the" }
 ,{ "object" }
 ,{ "methods" }
 ,{ "put()" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "and" }
 ,{ "the" }
 ,{ "method" }
 ,{ "complete()" , & fmt_text_b }
 ,{ "to" }
 ,{ "indicate" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "data" }
 ,{ "stream." }
 ,{ "This" }
 ,{ "method" }
 ,{ "completes" }
 ,{ "the" }
 ,{ "data" }
 ,{ "processing" }
 ,{ "and" }
 ,{ "flushes" }
 ,{ "the" }
 ,{ "output." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "uncompress" }
 ,{ "a" }
 ,{ "data" }
 ,{ "stream" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Inflator" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "output" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "output" }
 ,{ "processed" }
 ,{ "data." }
 ,{ "To" }
 ,{ "inject" }
 ,{ "source" }
 ,{ "data" }
 ,{ "into" }
 ,{ "the" }
 ,{ "object" }
 ,{ "methods" }
 ,{ "put()" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "and" }
 ,{ "the" }
 ,{ "method" }
 ,{ "complete()" , & fmt_text_b }
 ,{ "to" }
 ,{ "indicate" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "data" }
 ,{ "stream." }
 ,{ "This" }
 ,{ "method" }
 ,{ "completes" }
 ,{ "the" }
 ,{ "data" }
 ,{ "processing" }
 ,{ "and" }
 ,{ "flushes" }
 ,{ "the" }
 ,{ "output." }
 ,{ "The" }
 ,{ "source" }
 ,{ "data" }
 ,{ "stream" }
 ,{ "may" }
 ,{ "consist" }
 ,{ "of" }
 ,{ "several" }
 ,{ "compressed" }
 ,{ "substreams." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "repeat" , & fmt_text_b }
 ,{ "to" }
 ,{ "true" , & fmt_text_b }
 ,{ "when" }
 ,{ "constructing" }
 ,{ "the" }
 ,{ "object." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "trigger" , & fmt_text_b }
 ,{ "," }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "each" }
 ,{ "time" }
 ,{ "the" }
 ,{ "compressed" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "processed" }
 ,{ "and" }
 ,{ "flushed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "output." }
 ,{ "If" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "repeat" , & fmt_text_b }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "input" }
 ,{ "data" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "output" }
 ,{ "unchanged" }
 ,{ "after" }
 ,{ "the" }
 ,{ "compressed" }
 ,{ "part" }
 ,{ "is" }
 ,{ "finished." }
} , & fmt_text , & align_text } ;

Page page = { "page_Deflate" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DestroyGuard {

Text b0 = { {
 { "DestroyGuard" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/DestroyGuard.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DestroyGuard.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "DestroyGuard" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "guard" }
 ,{ "the" }
 ,{ "object" }
 ,{ "destruction." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "signal" , & fmt_text_a }
 ,{ "implementation" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "flag" }
 ,{ "locked" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "set" }
 ,{ "for" }
 ,{ "the" }
 ,{ "duration" }
 ,{ "of" }
 ,{ "some" }
 ,{ "scope" }
 ,{ "using" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "class" }
 ,{ "Lock" , & fmt_text_b }
 ,{ "to" }
 ,{ "protect" }
 ,{ "against" }
 ,{ "some" }
 ,{ "unwanted" }
 ,{ "actions" }
 ,{ "(in" }
 ,{ "particular," }
 ,{ "from" }
 ,{ "the" }
 ,{ "object" }
 ,{ "destruction" }
 ,{ "while" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "in" }
 ,{ "use)." }
 ,{ "To" }
 ,{ "do" }
 ,{ "it" }
 ,{ "these" }
 ,{ "actions" }
 ,{ "must" }
 ,{ "guard" }
 ,{ "itself" }
 ,{ "using" }
 ,{ "a" }
 ,{ "methods" }
 ,{ "guard()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "locked," }
 ,{ "then" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "The" }
 ,{ "DestroyGuard" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "guards" }
 ,{ "itself," }
 ,{ "so" }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object" }
 ,{ "while" }
 ,{ "it" }
 ,{ "is" }
 ,{ "locked." }
} , & fmt_text , & align_text } ;

Page page = { "page_DestroyGuard" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DHExp {

Text b0 = { {
 { "DHExp" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/DHExp.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/DHExp.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "tool" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "Diffie-Hellman" }
 ,{ "key" }
 ,{ "exchange" }
 ,{ "protocol." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "abstract" }
 ,{ "Diffie-Hellman" }
 ,{ "protocol" }
 ,{ "uses" }
 ,{ "some" }
 ,{ "finite" }
 ,{ "group" }
 ,{ "G" , & fmt_text_b }
 ,{ "with" }
 ,{ "efficient" }
 ,{ "octet" }
 ,{ "representation." }
 ,{ "\"Efficient\"" }
 ,{ "means" }
 ,{ "that" }
 ,{ "group" }
 ,{ "operations" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "efficiently" }
 ,{ "from" }
 ,{ "the" }
 ,{ "octet" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "elements." }
 ,{ "Some" }
 ,{ "group" }
 ,{ "element" }
 ,{ "g" , & fmt_text_b }
 ,{ "with" }
 ,{ "large" }
 ,{ "order" }
 ,{ "is" }
 ,{ "chosen" }
 ,{ "also." }
 ,{ "Two" }
 ,{ "peers" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "generate" }
 ,{ "secret" }
 ,{ "data" }
 ,{ "x" , & fmt_text_b }
 ,{ "and" }
 ,{ "y" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "are" }
 ,{ "long" }
 ,{ "integer" }
 ,{ "numbers." }
 ,{ "Then" }
 ,{ "A" , & fmt_text_b }
 ,{ "sends" }
 ,{ "g" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "to" }
 ,{ "B" , & fmt_text_b }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "sends" }
 ,{ "g" , & fmt_text_b }
 ,{ "y" , & fmt_text_b }
 ,{ "to" }
 ,{ "A" , & fmt_text_b }
 ,{ "." }
 ,{ "Each" }
 ,{ "side" }
 ,{ "can" }
 ,{ "calculate" }
 ,{ "g" , & fmt_text_b }
 ,{ "xy" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "common" }
 ,{ "secret." }
 ,{ "It" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "figured" }
 ,{ "out" }
 ,{ "from" }
 ,{ "intercepted" }
 ,{ "data," }
 ,{ "if" }
 ,{ "the" }
 ,{ "task" }
 ,{ "of" }
 ,{ "calculation" }
 ,{ "x" , & fmt_text_b }
 ,{ "from" }
 ,{ "g" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "difficult." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "simplest" }
 ,{ "example" }
 ,{ "of" }
 ,{ "G" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multiplicative" }
 ,{ "group" }
 ,{ "of" }
 ,{ "invertible" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ring" }
 ,{ "Z/(p)" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "p" }
 ,{ "is" }
 ,{ "a" }
 ,{ "large" }
 ,{ "prime" }
 ,{ "number." }
 ,{ "Two" }
 ,{ "particular" }
 ,{ "such" }
 ,{ "numbers" }
 ,{ "are" }
 ,{ "well" }
 ,{ "known" }
 ,{ "as" }
 ,{ "Diffie-Hellman" }
 ,{ "Group" }
 ,{ "I" }
 ,{ "and" }
 ,{ "Diffie-Hellman" }
 ,{ "Group" }
 ,{ "II" }
 ,{ "primes." }
 ,{ "In" }
 ,{ "both" }
 ,{ "cases" }
 ,{ "g" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "class" }
 ,{ "of" }
 ,{ "2" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "This" }
 ,{ "class" }
 ,{ "implements" }
 ,{ "required" }
 ,{ "functionality" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "Diffie-Hellman" }
 ,{ "protocol." }
 ,{ "The" }
 ,{ "first" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "group" }
 ,{ "related" }
 ,{ "data." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "with" }
 ,{ "required" }
 ,{ "long" }
 ,{ "integer" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "GLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "group" }
 ,{ "element" }
 ,{ "octet" }
 ,{ "representation." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "pow(a,x,ax)" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "element" }
 ,{ "a" , & fmt_text_b }
 ,{ "in" }
 ,{ "x" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "ax" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "pow(x,gx)" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "g" , & fmt_text_b }
 ,{ "in" }
 ,{ "x" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "gx" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "In" }
 ,{ "both" }
 ,{ "methods" }
 ,{ "x" , & fmt_text_b }
 ,{ "represents" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "number" }
 ,{ "in" }
 ,{ "the" }
 ,{ "lendian" }
 ,{ "byte" }
 ,{ "order." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "These" }
 ,{ "two" }
 ,{ "types" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "DHMod" , & fmt_text_b }
 ,{ "and" }
 ,{ "contains" }
 ,{ "all" }
 ,{ "required" }
 ,{ "precalculated" }
 ,{ "data" }
 ,{ "for" }
 ,{ "Diffie-Hellman" }
 ,{ "Groups" }
 ,{ "I" }
 ,{ "and" }
 ,{ "II." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "GLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "octet" }
 ,{ "reprsentation" }
 ,{ "of" }
 ,{ "group" }
 ,{ "elements." }
 ,{ "A" }
 ,{ "group" }
 ,{ "element" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "long" }
 ,{ "unsigned" }
 ,{ "number," }
 ,{ "using" }
 ,{ "the" }
 ,{ "lendian" }
 ,{ "representation." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Mod" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "prime" }
 ,{ "module." }
 ,{ "This" }
 ,{ "number" }
 ,{ "is" }
 ,{ "normalized," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "equals" }
 ,{ "1" , & fmt_text_b }
 ,{ "." }
 ,{ "D" , & fmt_text_b }
 ,{ "below" }
 ,{ "is" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "2" , & fmt_text_b }
 ,{ "," }
 ,{ "D" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "2" , & fmt_text_b }
 ,{ "8*GLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "G" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generator." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "InvMod" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "inversion" }
 ,{ "of" }
 ,{ "Mod" , & fmt_text_b }
 ,{ "by" }
 ,{ "module" }
 ,{ "D" , & fmt_text_b }
 ,{ "," }
 ,{ "i.e." }
 ,{ "InvMod*Mod" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ "(mod" , & fmt_text_b }
 ,{ "D)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Lift" , & fmt_text_b }
 ,{ "is" }
 ,{ "((D-Mod)*D)/Mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "pattern" }
 ,{ "for" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "Algo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Unit" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type," }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "long" }
 ,{ "integer" }
 ,{ "unit." }
 ,{ "Long" }
 ,{ "integers" }
 ,{ "are" }
 ,{ "represented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "lendian" }
 ,{ "unit" }
 ,{ "order." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "UnitBits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Unit" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Two" }
 ,{ "inner" }
 ,{ "classes" }
 ,{ "MulOp" , & fmt_text_b }
 ,{ "and" }
 ,{ "AddOp" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "required" }
 ,{ "long" }
 ,{ "integer" }
 ,{ "operations." }
 ,{ "They" }
 ,{ "are" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "long" }
 ,{ "integer" }
 ,{ "length" }
 ,{ "Len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "MulOp" , & fmt_text_b }
 ,{ "operations" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "mul()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double" }
 ,{ "length" }
 ,{ "in" }
 ,{ "C" , & fmt_text_b }
 ,{ "." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "C" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "or" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "mulHi()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "high" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "C" , & fmt_text_b }
 ,{ "." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "C" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "or" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "mulLo()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "C" , & fmt_text_b }
 ,{ "." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "C" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "or" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "mulLo1()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "Len+1" , & fmt_text_b }
 ,{ "in" }
 ,{ "C" , & fmt_text_b }
 ,{ "." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "C" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "or" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "sq()" , & fmt_text_b }
 ,{ "squares" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double" }
 ,{ "length" }
 ,{ "in" }
 ,{ "B" , & fmt_text_b }
 ,{ "." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "B" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "AddOp" , & fmt_text_b }
 ,{ "operations" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "sub()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "B" , & fmt_text_b }
 ,{ "from" }
 ,{ "A" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "C" , & fmt_text_b }
 ,{ "." }
 ,{ "Borrow" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "C" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "or" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "A" , & fmt_text_b }
 ,{ "to" }
 ,{ "B" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "carry." }
 ,{ "No" }
 ,{ "overlap" }
 ,{ "B" , & fmt_text_b }
 ,{ "with" }
 ,{ "A" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "neg()" , & fmt_text_b }
 ,{ "negates" }
 ,{ "A" , & fmt_text_b }
 ,{ "." }
 ,{ "Borrow" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Algo" , & fmt_text_b }
 ,{ "," }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "Math::IntegerFastAlgo" , & fmt_text_b }
 ,{ "package." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Concept" }
 ,{ "DHExpType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "Diffie-Hellman" }
 ,{ "classes" }
 ,{ "like" }
 ,{ "DHExp<....>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_DHExp" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DirTreeRun {

Text b0 = { {
 { "DirTreeRun" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/DirTreeRun.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DirTreeRun.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "DirTreeRun" , & fmt_text_b }
 ,{ "can" }
 ,{ "recursively" }
 ,{ "iterate" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "content." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Constructor" }
 ,{ "prepares" }
 ,{ "the" }
 ,{ "object," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "root" }
 ,{ "directory" }
 ,{ "(the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "to" }
 ,{ "be" }
 ,{ "iterated)." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "pathOfRoot()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "full" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "root" }
 ,{ "directory" }
 ,{ "in" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "apply()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "working" }
 ,{ "method." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "a" }
 ,{ "processing" }
 ,{ "object." }
 ,{ "Methods" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "are" }
 ,{ "called" }
 ,{ "per" }
 ,{ "each" }
 ,{ "directory" }
 ,{ "entry." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "processing" }
 ,{ "object" }
 ,{ "class" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "following" }
 ,{ "interface:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "During" }
 ,{ "directory" }
 ,{ "iteration" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "DataType" , & fmt_text_b }
 ,{ "is" }
 ,{ "created" }
 ,{ "per" }
 ,{ "each" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "first" }
 ,{ "method" }
 ,{ "dir()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "for" }
 ,{ "the" }
 ,{ "root" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "root" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "root" }
 ,{ "directory" }
 ,{ "path." }
 ,{ "The" }
 ,{ "method" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "data" }
 ,{ "object" }
 ,{ "for" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "second" }
 ,{ "method" }
 ,{ "dir()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "per" }
 ,{ "each" }
 ,{ "subdirectory." }
 ,{ "The" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "parent" }
 ,{ "directory" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "name." }
 ,{ "The" }
 ,{ "parent_data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "parent" }
 ,{ "directory" }
 ,{ "data" }
 ,{ "object." }
 ,{ "The" }
 ,{ "method" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "data" }
 ,{ "object" }
 ,{ "for" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "method" }
 ,{ "file()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "per" }
 ,{ "each" }
 ,{ "file." }
 ,{ "The" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "parent" }
 ,{ "directory" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "path" , & fmt_text_b }
 ,{ "looks" }
 ,{ "like" }
 ,{ "root/." , & fmt_text_b }
 ,{ "or" }
 ,{ "root/./dir" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ "/.../dir" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "parent_data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "parent" }
 ,{ "directory" }
 ,{ "data" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "method" }
 ,{ "enddir()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "once" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "content" }
 ,{ "is" }
 ,{ "iterated." }
 ,{ "The" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "parent" }
 ,{ "directory" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "name." }
 ,{ "The" }
 ,{ "data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "data" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "the" }
 ,{ "root" }
 ,{ "directory," }
 ,{ "then" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "root" }
 ,{ "path" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "equals" }
 ,{ "\".\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_DirTreeRun" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_DynObject {

Text b0 = { {
 { "DynObject" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/DynObject.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DynObject.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "DynObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "with" }
 ,{ "exclusive" }
 ,{ "ownership" }
 ,{ "and" }
 ,{ "constant" }
 ,{ "propagation." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "dynamically." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed" }
 ,{ "when" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "gets" }
 ,{ "out" }
 ,{ "of" }
 ,{ "the" }
 ,{ "scope." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "New()/Delete()" , & fmt_text_a }
 ,{ "with" }
 ,{ "the" }
 ,{ "DefaultHeapAlloc" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "and" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object." }
 ,{ "So" }
 ,{ "you" }
 ,{ "don't" }
 ,{ "have" }
 ,{ "to" }
 ,{ "derive" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "MemBase" , & fmt_text_a }
 ,{ "." }
 ,{ "Any" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used," }
 ,{ "the" }
 ,{ "only" }
 ,{ "assumption" }
 ,{ "is" }
 ,{ "that" }
 ,{ "the" }
 ,{ "object" }
 ,{ "destructor" }
 ,{ "is" }
 ,{ "nothrow." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "null" }
 ,{ "pointer." }
 ,{ "It" }
 ,{ "points" }
 ,{ "to" }
 ,{ "no" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "NothingType-constructor" , & fmt_text_a }
 ,{ "creates" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object," }
 ,{ "constructed" }
 ,{ "using" }
 ,{ "it's" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "DynObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "movable" }
 ,{ "using" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "For" }
 ,{ "an" }
 ,{ "existing" }
 ,{ "pointer" }
 ,{ "you" }
 ,{ "can" }
 ,{ "recreate" }
 ,{ "the" }
 ,{ "object" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "create()" , & fmt_text_b }
 ,{ "(the" }
 ,{ "previous" }
 ,{ "object," }
 ,{ "if" }
 ,{ "any," }
 ,{ "is" }
 ,{ "destroyed)" }
 ,{ "or" }
 ,{ "destroy" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
 ,{ "The" }
 ,{ "method" }
 ,{ "create()" , & fmt_text_b }
 ,{ "preserves" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "state," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "creation" }
 ,{ "ends" }
 ,{ "with" }
 ,{ "the" }
 ,{ "throwing" }
 ,{ "of" }
 ,{ "an" }
 ,{ "exception." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "usual" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "access" }
 ,{ "the" }
 ,{ "object." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_a }
 ,{ "Pointer" , & fmt_text_a }
 ,{ "Interface" , & fmt_text_a }
 ,{ "is" }
 ,{ "that" }
 ,{ "the" }
 ,{ "constantness" }
 ,{ "is" }
 ,{ "propagated" }
 ,{ "from" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "DynObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "-movable." }
} , & fmt_text , & align_text } ;

Page page = { "page_DynObject" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_EchoDevice {

Text b0 = { {
 { "EchoDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/EchoDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/EchoDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "EchoDevice" , & fmt_text_b }
 ,{ "implements" }
 ,{ "echo" }
 ,{ "service." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "multi-point" }
 ,{ "device." }
 ,{ "Been" }
 ,{ "attached" }
 ,{ "the" }
 ,{ "service" }
 ,{ "simply" }
 ,{ "reflects" }
 ,{ "incoming" }
 ,{ "packets." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "in" }
 ,{ "a" }
 ,{ "net" }
 ,{ "testing." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Constructor" }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "multi-point" }
 ,{ "device," }
 ,{ "registered" }
 ,{ "under" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "usage." }
 ,{ "If" }
 ,{ "the" }
 ,{ "show_flag" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "object" }
 ,{ "will" }
 ,{ "print" }
 ,{ "messages" }
 ,{ "about" }
 ,{ "connection" }
 ,{ "events" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getTraffic()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "traffic" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Page page = { "page_EchoDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_EchoServer {

Text b0 = { {
 { "EchoServer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "EchoServer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "echo" }
 ,{ "server." }
 ,{ "It" }
 ,{ "occupied" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "echo" }
 ,{ "port" }
 ,{ "7" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "server" }
 ,{ "accepts" }
 ,{ "only" }
 ,{ "\"short\"" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "packets" }
 ,{ "with" }
 ,{ "the" }
 ,{ "payload" }
 ,{ "length" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "1472" , & fmt_text_b }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "There" }
 ,{ "are" }
 ,{ "no" }
 ,{ "command" }
 ,{ "line" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "can" }
 ,{ "show" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "statistic" }
 ,{ "using" }
 ,{ "the" }
 ,{ "command" }
 ,{ "stat" , & fmt_text_i }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_EchoServer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ElementPool {

Text b0 = { {
 { "Element" }
 ,{ "pool" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ElementPool.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ElementPool.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Element" }
 ,{ "pool" }
 ,{ "is" }
 ,{ "a" }
 ,{ "domain," }
 ,{ "where" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "different" }
 ,{ "types" }
 ,{ "can" }
 ,{ "be" }
 ,{ "created" }
 ,{ "and" }
 ,{ "stored." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "restriction:" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "must" }
 ,{ "have" }
 ,{ "a" }
 ,{ "trivial" }
 ,{ "destructor." }
 ,{ "All" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "dies" }
 ,{ "together" }
 ,{ "when" }
 ,{ "the" }
 ,{ "element" }
 ,{ "pool" }
 ,{ "is" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Element" }
 ,{ "pool" }
 ,{ "is" }
 ,{ "required" }
 ,{ "when" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "bunch" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "dynamically" }
 ,{ "and" }
 ,{ "then" }
 ,{ "to" }
 ,{ "finish" }
 ,{ "their" }
 ,{ "life-time" }
 ,{ "simultaneously." }
 ,{ "Element" }
 ,{ "pool" }
 ,{ "can" }
 ,{ "speed" }
 ,{ "up" }
 ,{ "this" }
 ,{ "process," }
 ,{ "because" }
 ,{ "its" }
 ,{ "allocation" }
 ,{ "function" }
 ,{ "is" }
 ,{ "faster" }
 ,{ "and" }
 ,{ "you" }
 ,{ "don't" }
 ,{ "have" }
 ,{ "to" }
 ,{ "track" }
 ,{ "objects" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "them." }
 ,{ "Destruction" }
 ,{ "process" }
 ,{ "is" }
 ,{ "also" }
 ,{ "cheap:" }
 ,{ "it's" }
 ,{ "just" }
 ,{ "a" }
 ,{ "few" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "release." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "two" }
 ,{ "classes" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "pooling:" }
 ,{ "MemPool" , & fmt_text_b }
 ,{ "and" }
 ,{ "ElementPool" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ElementPool" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "ElementPool" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "accepts" }
 ,{ "the" }
 ,{ "same" }
 ,{ "arguments," }
 ,{ "as" }
 ,{ "the" }
 ,{ "MemPool" , & fmt_text_b }
 ,{ "(see" }
 ,{ "below)." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "method" }
 ,{ "create<T>()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "it." }
 ,{ "On" }
 ,{ "failure" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "Arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "T" , & fmt_text_b }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "method" }
 ,{ "dup()" , & fmt_text_b }
 ,{ "duplicates" }
 ,{ "the" }
 ,{ "given" }
 ,{ "string" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "duplicate." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "cat()" , & fmt_text_b }
 ,{ "casts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "and" }
 ,{ "makes" }
 ,{ "a" }
 ,{ "string" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "by" }
 ,{ "the" }
 ,{ "concatenation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "received" }
 ,{ "strings." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "shrink_extra()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "memory" }
 ,{ "at" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "tail." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "erase()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "all" }
 ,{ "pool" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "bunch" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "create" }
 ,{ "an" }
 ,{ "array" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pool." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "basic" }
 ,{ "method" }
 ,{ "createArray()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "array" }
 ,{ "by" }
 ,{ "default." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "an" }
 ,{ "array" }
 ,{ "length" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "created" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Other" }
 ,{ "variations" }
 ,{ "of" }
 ,{ "the" }
 ,{ "createArray()" , & fmt_text_b }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "semantic" }
 ,{ "as" }
 ,{ "the" }
 ,{ "different" }
 ,{ "Array" , & fmt_text_a }
 ,{ "constructors" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "createArray_raw()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "uninitialized" }
 ,{ "array," }
 ,{ "if" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type." }
 ,{ "You" }
 ,{ "must" }
 ,{ "give" }
 ,{ "values" }
 ,{ "to" }
 ,{ "array" }
 ,{ "elements" }
 ,{ "after." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "createArray_fill()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "array," }
 ,{ "where" }
 ,{ "each" }
 ,{ "element" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "same" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "provided" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "createArray_copy()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "array" }
 ,{ "by" }
 ,{ "per" }
 ,{ "element" }
 ,{ "copying" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "createArray_cast()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "array" }
 ,{ "by" }
 ,{ "per" }
 ,{ "element" }
 ,{ "casting" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "range" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "createArray_swap()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "swap-create," }
 ,{ "i.e." }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "then" }
 ,{ "do" }
 ,{ "swap." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "createArray(ulen" , & fmt_text_b }
 ,{ "len,Creator" , & fmt_text_b }
 ,{ "creator)" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "to" }
 ,{ "create" }
 ,{ "array" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "ElementPool" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "kills" }
 ,{ "all" }
 ,{ "created" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "ElementPool" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable/movable" }
 ,{ "(but" }
 ,{ "not" }
 ,{ "std" }
 ,{ "movable)." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "MemPool" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "You" }
 ,{ "probably" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "directly." }
 ,{ "MemPool" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "pool" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "blocks." }
 ,{ "You" }
 ,{ "may" }
 ,{ "create" }
 ,{ "a" }
 ,{ "new" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "." }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "required" }
 ,{ "block" }
 ,{ "length." }
 ,{ "On" }
 ,{ "success," }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "Place<void>" , & fmt_text_b }
 ,{ "at" }
 ,{ "the" }
 ,{ "begining" }
 ,{ "of" }
 ,{ "the" }
 ,{ "block." }
 ,{ "Blocks" }
 ,{ "are" }
 ,{ "always" }
 ,{ "aligned." }
 ,{ "On" }
 ,{ "failure" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "MemPool" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "releases" }
 ,{ "all" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "blocks." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "MemPool" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "accepts" }
 ,{ "two" }
 ,{ "arguments:" }
 ,{ "block_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "large" }
 ,{ "blocks" }
 ,{ "length," }
 ,{ "64" , & fmt_text_b }
 ,{ "KBytes" , & fmt_text_b }
 ,{ "by" }
 ,{ "default," }
 ,{ "mem_cap" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "total" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "cap," }
 ,{ "no" }
 ,{ "cap" }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "shrink_extra()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "memory" }
 ,{ "at" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "tail." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "erase()" , & fmt_text_b }
 ,{ "like" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "releases" }
 ,{ "all" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "blocks." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "MemPool" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable/movable" }
 ,{ "(but" }
 ,{ "not" }
 ,{ "std" }
 ,{ "movable)." }
} , & fmt_text , & align_text } ;

Page page = { "page_ElementPool" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ELF {

Text b0 = { {
 { "ELF" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Elf.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Elf.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CCore" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "ELF" }
 ,{ "file" }
 ,{ "parser." }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "comprehensive," }
 ,{ "but" }
 ,{ "sufficient" }
 ,{ "for" }
 ,{ "the" }
 ,{ "current" }
 ,{ "purpose." }
 ,{ "The" }
 ,{ "parser" }
 ,{ "and" }
 ,{ "related" }
 ,{ "software" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Elf" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Parse" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "The" }
 ,{ "main" }
 ,{ "parser" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "Parse" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "template." }
 ,{ "The" }
 ,{ "second" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "a" }
 ,{ "processing" }
 ,{ "device" }
 ,{ "type." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "type." }
 ,{ "But" }
 ,{ "the" }
 ,{ "first" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Custom" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "LeOrder" , & fmt_text_b }
 ,{ "or" }
 ,{ "BeOrder" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "parameter" }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "byte-to-integer" }
 ,{ "conversion" }
 ,{ "method" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "parser" }
 ,{ "during" }
 ,{ "the" }
 ,{ "ELF" }
 ,{ "image" }
 ,{ "processing." }
 ,{ "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "processing" }
 ,{ "device." }
 ,{ "The" }
 ,{ "object" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "with" }
 ,{ "various" }
 ,{ "piece" }
 ,{ "of" }
 ,{ "the" }
 ,{ "image" }
 ,{ "data." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "range," }
 ,{ "it" }
 ,{ "is" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "an" }
 ,{ "ELF" }
 ,{ "image." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "type" }
 ,{ "Dev" , & fmt_text_b }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "first" }
 ,{ "operator" }
 ,{ "is" }
 ,{ "called" }
 ,{ "first" }
 ,{ "with" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "image" }
 ,{ "header." }
 ,{ "This" }
 ,{ "operator" }
 ,{ "should" }
 ,{ "check" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "image" }
 ,{ "properties" }
 ,{ "and" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "they" }
 ,{ "are" }
 ,{ "not" }
 ,{ "such." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "second" }
 ,{ "and" }
 ,{ "the" }
 ,{ "third" }
 ,{ "operators" }
 ,{ "are" }
 ,{ "called" }
 ,{ "next" }
 ,{ "per" }
 ,{ "each" }
 ,{ "image" }
 ,{ "section." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "section" }
 ,{ "index." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "section" }
 ,{ "name." }
 ,{ "The" }
 ,{ "third" }
 ,{ "is" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "section" }
 ,{ "header." }
 ,{ "Finally," }
 ,{ "if" }
 ,{ "the" }
 ,{ "section" }
 ,{ "must" }
 ,{ "be" }
 ,{ "loaded" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "the" }
 ,{ "section" }
 ,{ "data" }
 ,{ "is" }
 ,{ "provided." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "last" }
 ,{ "operator" }
 ,{ "is" }
 ,{ "called" }
 ,{ "last" }
 ,{ "to" }
 ,{ "finish" }
 ,{ "the" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Each" }
 ,{ "of" }
 ,{ "operators" }
 ,{ "may" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Image" }
 ,{ "description" }
 ,{ "types" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "Header" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "Header" , & fmt_text_b }
 ,{ "describes" }
 ,{ "various" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "an" }
 ,{ "ELF" }
 ,{ "image." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "most" }
 ,{ "interesting" }
 ,{ "properties" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "bit_type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "image" }
 ,{ "bit" }
 ,{ "type." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "BitType_32" , & fmt_text_b }
 ,{ "to" }
 ,{ "proceed" }
 ,{ "further." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "endian_type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "image" }
 ,{ "endian" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "cpu_type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "CPU" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "entry_point" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "image" }
 ,{ "entry" }
 ,{ "point," }
 ,{ "if" }
 ,{ "the" }
 ,{ "image" }
 ,{ "is" }
 ,{ "executable." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "check_id()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "bit" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "endian" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "check_cpu()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "CPU" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "SectHeader" }
} , & fmt_h4 , & align_h4 } ;

Text b21 = { {
 { "SectHeader" , & fmt_text_b }
 ,{ "describes" }
 ,{ "various" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "a" }
 ,{ "section." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "The" }
 ,{ "most" }
 ,{ "interesting" }
 ,{ "properties" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "flags" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "section" }
 ,{ "flags." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "address" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "section" }
 ,{ "load" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "size" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "section" }
 ,{ "size." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "isLoadable()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "section" }
 ,{ "must" }
 ,{ "be" }
 ,{ "loaded." }
} , & fmt_text , & align_text } ;

Page page = { "page_ELF" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_EllipticPi {

Text b0 = { {
 { "EllipticPi" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "This" }
 ,{ "program" }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "$," }
 ,{ "using" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "Integer" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "interval" }
 ,{ "arithmetic" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "error" }
 ,{ "estimate." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "To" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "desired" }
 ,{ "precision" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "edit" }
 ,{ "the" }
 ,{ "function" }
 ,{ "main()" , & fmt_text_b }
 ,{ "," }
 ,{ "uncomment" }
 ,{ "the" }
 ,{ "line" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "run:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "output" }
 ,{ "is" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "file" }
 ,{ "piXXX.txt" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_EllipticPi" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ErrorText {

Text b0 = { {
 { "ErrorText" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ErrorText.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ErrorText.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "word" }
 ,{ "Success" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "and" }
 ,{ "the" }
 ,{ "simple" }
 ,{ "type" }
 ,{ "ErrorText" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "This" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "a" }
 ,{ "error" }
 ,{ "description." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "ok" , & fmt_text_b }
 ,{ "and" }
 ,{ "etext" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "indicates" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation," }
 ,{ "the" }
 ,{ "secind" }
 ,{ "is" }
 ,{ "a" }
 ,{ "error" }
 ,{ "description." }
 ,{ "The" }
 ,{ "third" }
 ,{ "constructor" }
 ,{ "trims" }
 ,{ "the" }
 ,{ "error" }
 ,{ "text" }
 ,{ "(it" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "the" }
 ,{ "text" }
 ,{ "is" }
 ,{ "created" }
 ,{ "in" }
 ,{ "some" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "can" }
 ,{ "outfit" }
 ,{ "it)." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "last" }
 ,{ "type" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ErrorText" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "contains" }
 ,{ "some" }
 ,{ "return" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Page page = { "page_ErrorText" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_EthDevice {

Text b0 = { {
 { "EthDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/EthDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/EthDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "EthDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "interface." }
 ,{ "This" }
 ,{ "interface" }
 ,{ "should" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "by" }
 ,{ "an" }
 ,{ "Ethernet" }
 ,{ "device" }
 ,{ "driver" }
 ,{ "class" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "such." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "interface" }
 ,{ "are" }
 ,{ "called" }
 ,{ "asynchronously." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "must" }
 ,{ "take" }
 ,{ "all" }
 ,{ "necessary" }
 ,{ "measures" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "the" }
 ,{ "race" }
 ,{ "condition." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "first" }
 ,{ "three" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "static" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "the" }
 ,{ "device." }
 ,{ "They" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "changed" }
 ,{ "during" }
 ,{ "the" }
 ,{ "object" }
 ,{ "life-time." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getAddress()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "MAC" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getTxFormat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "packet" , & fmt_text_a }
 ,{ "format" , & fmt_text_a }
 ,{ "for" }
 ,{ "outbound" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getRxFormat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "for" }
 ,{ "inbound" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "max_len" , & fmt_text_b }
 ,{ "of" }
 ,{ "both" }
 ,{ "packet" }
 ,{ "formats" }
 ,{ "must" }
 ,{ "be" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "IPLen" , & fmt_text_b }
 ,{ "type" }
 ,{ "(i.e." }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "2" }
 ,{ "16" }
 ,{ "-1)." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "To" }
 ,{ "process" }
 ,{ "the" }
 ,{ "traffic" }
 ,{ "a" }
 ,{ "traffic" }
 ,{ "processor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "attached." }
 ,{ "Only" }
 ,{ "one" }
 ,{ "processor" }
 ,{ "may" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "at" }
 ,{ "the" }
 ,{ "time." }
 ,{ "While" }
 ,{ "a" }
 ,{ "processor" }
 ,{ "is" }
 ,{ "attached," }
 ,{ "it" }
 ,{ "is" }
 ,{ "received" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "traffic" }
 ,{ "as" }
 ,{ "well" }
 ,{ "as" }
 ,{ "other" }
 ,{ "notification" }
 ,{ "events." }
 ,{ "It" }
 ,{ "also" }
 ,{ "serves" }
 ,{ "as" }
 ,{ "the" }
 ,{ "source" }
 ,{ "of" }
 ,{ "outbound" }
 ,{ "packets." }
 ,{ "It" }
 ,{ "must" }
 ,{ "stay" }
 ,{ "alive" }
 ,{ "while" }
 ,{ "been" }
 ,{ "attached." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "attach()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processor." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "detach()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processor." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "next" }
 ,{ "group" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "deals" }
 ,{ "with" }
 ,{ "dynamic" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "the" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "getPromiscMode()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "promiscuous" }
 ,{ "mode" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "setPromiscMode()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "promiscuous" }
 ,{ "mode" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "last" }
 ,{ "methods" }
 ,{ "signals" }
 ,{ "to" }
 ,{ "the" }
 ,{ "device," }
 ,{ "that" }
 ,{ "there" }
 ,{ "are" }
 ,{ "some" }
 ,{ "outbound" }
 ,{ "packets." }
 ,{ "In" }
 ,{ "response" }
 ,{ "driver" }
 ,{ "must" }
 ,{ "extract" }
 ,{ "and" }
 ,{ "send" }
 ,{ "out" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "traffic" }
 ,{ "processor." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "signalOutbound()" , & fmt_text_b }
 ,{ "signals" }
 ,{ "to" }
 ,{ "push" }
 ,{ "outbound" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "EthStatInfo" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "EthStatInfo" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "statistic" }
 ,{ "counters" }
 ,{ "for" }
 ,{ "Ethernet" }
 ,{ "driver." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "EthProc" }
} , & fmt_h4 , & align_h4 } ;

Text b21 = { {
 { "EthProc" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "interface" }
 ,{ "of" }
 ,{ "a" }
 ,{ "traffic" }
 ,{ "processor." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "responsibility" }
 ,{ "of" }
 ,{ "the" }
 ,{ "driver" }
 ,{ "to" }
 ,{ "call" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "interface" }
 ,{ "synchronously." }
 ,{ "So" }
 ,{ "traffic" }
 ,{ "processor" }
 ,{ "don't" }
 ,{ "have" }
 ,{ "to" }
 ,{ "protect" }
 ,{ "method" }
 ,{ "calls" }
 ,{ "by" }
 ,{ "a" }
 ,{ "mutex." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "start()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "once" }
 ,{ "at" }
 ,{ "the" }
 ,{ "moment" }
 ,{ "the" }
 ,{ "driver" }
 ,{ "is" }
 ,{ "started." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "linkUp()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "inform" }
 ,{ "the" }
 ,{ "link" }
 ,{ "is" }
 ,{ "up." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "linkDown()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "inform" }
 ,{ "the" }
 ,{ "link" }
 ,{ "is" }
 ,{ "down." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "tick()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "periodically" }
 ,{ "with" }
 ,{ "the" }
 ,{ "frequence" }
 ,{ "InboundTicksPerSec" , & fmt_text_b }
 ,{ "(10" }
 ,{ "Hz)" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "a" }
 ,{ "protocols" }
 ,{ "timeout" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "inbound()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "process" }
 ,{ "an" }
 ,{ "inbound" }
 ,{ "Ethernet" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "packet" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "(" }
 ,{ "getRxFormat()" , & fmt_text_b }
 ,{ ")" }
 ,{ "and" }
 ,{ "has" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "extension" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "EthRxExt" , & fmt_text_b }
 ,{ "with" }
 ,{ "additional" }
 ,{ "information." }
 ,{ "Packet" }
 ,{ "carries" }
 ,{ "an" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "payload." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "prepareOutbound()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "process" }
 ,{ "the" }
 ,{ "outbound" }
 ,{ "traffic." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "first" }
 ,{ "as" }
 ,{ "the" }
 ,{ "reaction" }
 ,{ "on" }
 ,{ "the" }
 ,{ "signalOutbound()" , & fmt_text_b }
 ,{ "method" }
 ,{ "call." }
 ,{ "Then" }
 ,{ "driver" }
 ,{ "extracts" }
 ,{ "and" }
 ,{ "sends" }
 ,{ "out" }
 ,{ "packets" }
 ,{ "by" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "outbound()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "outbound()" , & fmt_text_b }
 ,{ "method" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "retrieve" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "outbound" }
 ,{ "packet" }
 ,{ "queue." }
 ,{ "The" }
 ,{ "null" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "returned," }
 ,{ "if" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "is" }
 ,{ "empty." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "carry" }
 ,{ "Ethernet" }
 ,{ "payload" }
 ,{ "and" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "(" }
 ,{ "getTxFormat()" , & fmt_text_b }
 ,{ ")." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "EthTxExt" , & fmt_text_b }
 ,{ "with" }
 ,{ "additional" }
 ,{ "information." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "stop()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "once" }
 ,{ "at" }
 ,{ "the" }
 ,{ "moment" }
 ,{ "the" }
 ,{ "driver" }
 ,{ "is" }
 ,{ "stopped." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "It" }
 ,{ "is" }
 ,{ "intended" }
 ,{ "that" }
 ,{ "packet" }
 ,{ "formats" }
 ,{ "reserve" }
 ,{ "a" }
 ,{ "space" }
 ,{ "for" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "header" }
 ,{ "and" }
 ,{ "uses" }
 ,{ "max_data" , & fmt_text_b }
 ,{ "to" }
 ,{ "reflect" }
 ,{ "the" }
 ,{ "MTU" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "A" }
 ,{ "typical" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Ethernet" }
 ,{ "driver" }
 ,{ "would" }
 ,{ "start" }
 ,{ "a" }
 ,{ "task" }
 ,{ "for" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "(\"Ethernet" }
 ,{ "task\")." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" }
 ,{ "traffic" }
 ,{ "processor" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "first" }
 ,{ "and" }
 ,{ "then" }
 ,{ "task" }
 ,{ "is" }
 ,{ "started." }
 ,{ "At" }
 ,{ "that" }
 ,{ "moment" }
 ,{ "the" }
 ,{ "method" }
 ,{ "start()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "At" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "moment" }
 ,{ "a" }
 ,{ "management" }
 ,{ "entity" }
 ,{ "should" }
 ,{ "stop" }
 ,{ "the" }
 ,{ "task," }
 ,{ "the" }
 ,{ "task" }
 ,{ "calls" }
 ,{ "stop()" , & fmt_text_b }
 ,{ "before" }
 ,{ "exit." }
 ,{ "Then" }
 ,{ "traffic" }
 ,{ "processor" }
 ,{ "is" }
 ,{ "detached" }
 ,{ "and" }
 ,{ "may" }
 ,{ "be" }
 ,{ "destroyed," }
 ,{ "as" }
 ,{ "well" }
 ,{ "as" }
 ,{ "the" }
 ,{ "driver" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "EthTxExt" }
} , & fmt_h4 , & align_h4 } ;

Text b34 = { {
 { "This" }
 ,{ "structure" }
 ,{ "supplements" }
 ,{ "outbound" }
 ,{ "packets" }
 ,{ "and" }
 ,{ "used" }
 ,{ "by" }
 ,{ "a" }
 ,{ "driver" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "header." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "dst" , & fmt_text_b }
 ,{ "with" }
 ,{ "a" }
 ,{ "destination" }
 ,{ "MAC" }
 ,{ "address" }
 ,{ "and" }
 ,{ "type" , & fmt_text_b }
 ,{ "with" }
 ,{ "an" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "EthRxExt" }
} , & fmt_h4 , & align_h4 } ;

Text b36 = { {
 { "This" }
 ,{ "structure" }
 ,{ "supplements" }
 ,{ "inbound" }
 ,{ "packets" }
 ,{ "and" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "a" }
 ,{ "driver" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "header." }
 ,{ "It" }
 ,{ "has" }
 ,{ "three" }
 ,{ "fields:" }
 ,{ "src" , & fmt_text_b }
 ,{ "with" }
 ,{ "a" }
 ,{ "source" }
 ,{ "MAC" }
 ,{ "address," }
 ,{ "dst" , & fmt_text_b }
 ,{ "with" }
 ,{ "a" }
 ,{ "destination" }
 ,{ "MAC" }
 ,{ "address" }
 ,{ "and" }
 ,{ "type" , & fmt_text_b }
 ,{ "with" }
 ,{ "an" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Page page = { "page_EthDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_EuclidRotate {

Text b0 = { {
 { "EuclidRotate" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/EuclidRotate.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/EuclidRotate.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "EuclidRotateAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "generalized" }
 ,{ "range" }
 ,{ "type" }
 ,{ "and" }
 ,{ "contains" }
 ,{ "range" }
 ,{ "rotation" }
 ,{ "algorithms." }
 ,{ "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "BaseRangeAlgo<R>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Rotate()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "range." }
 ,{ "Rotation" }
 ,{ "is" }
 ,{ "a" }
 ,{ "permutation" }
 ,{ "of" }
 ,{ "range" }
 ,{ "elements," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "the" }
 ,{ "swapping" }
 ,{ "two" }
 ,{ "subranges:" }
 ,{ "prefix" }
 ,{ "and" }
 ,{ "suffix." }
 ,{ "prefix" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "length," }
 ,{ "suffix" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "length." }
 ,{ "Permutation" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "swapping" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Rotate_prefix()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "range," }
 ,{ "prefix" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "length." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "rotation" }
 ,{ "left" }
 ,{ "by" }
 ,{ "prefix" , & fmt_text_b }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Rotate_suffix()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "range," }
 ,{ "suffix" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "length." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "rotation" }
 ,{ "right" }
 ,{ "by" }
 ,{ "suffix" , & fmt_text_b }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions" }
 ,{ "for" }
 ,{ "the" }
 ,{ "range" }
 ,{ "rotation." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "They" }
 ,{ "call" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "rotate" }
 ,{ "algorithms" }
 ,{ "from" }
 ,{ "the" }
 ,{ "EuclidRotateAlgo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_EuclidRotate" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Event {

Text b0 = { {
 { "Event" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/Event.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/Event.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Event" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "counter" }
 ,{ "it" }
 ,{ "has" }
 ,{ "a" }
 ,{ "boolean" }
 ,{ "flag" }
 ,{ "as" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "logical" }
 ,{ "state." }
 ,{ "The" }
 ,{ "method" }
 ,{ "trigger()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "this" }
 ,{ "flag." }
 ,{ "And" }
 ,{ "the" }
 ,{ "method" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "clears" }
 ,{ "it" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "set." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "cleared," }
 ,{ "the" }
 ,{ "method" }
 ,{ "is" }
 ,{ "waiting" }
 ,{ "until" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "event" }
 ,{ "\"basket\"" }
 ,{ "can" }
 ,{ "store" }
 ,{ "only" }
 ,{ "one" }
 ,{ "apple." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "flag" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "event" }
 ,{ "state." }
 ,{ "It" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "trigger()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "already" }
 ,{ "set," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "try_wait()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "consume" }
 ,{ "the" }
 ,{ "event." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
 ,{ "If" }
 ,{ "the" }
 ,{ "event" }
 ,{ "is" }
 ,{ "not" }
 ,{ "triggered," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "wait()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "until" }
 ,{ "the" }
 ,{ "event" }
 ,{ "can" }
 ,{ "be" }
 ,{ "consumed" }
 ,{ "and" }
 ,{ "consume" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "wait(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "wait(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "HCore" }
 ,{ "Event" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "HCore" , & fmt_text_b }
 ,{ "Event" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "common" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "XCore" }
 ,{ "Event" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "XCore" , & fmt_text_b }
 ,{ "Event" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "has" }
 ,{ "trigger()" , & fmt_text_b }
 ,{ "method" }
 ,{ "variants" }
 ,{ "for" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts." }
} , & fmt_text , & align_text } ;

Page page = { "page_Event" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_EventRecord {

Text b0 = { {
 { "Event" }
 ,{ "Recording" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/EventRecorder.h" , & fmt_text_Files_b }
 ,{ "CCore/src/EventRecorder.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/task/TaskEvent.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/TaskEvent.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Event" }
 ,{ "recorder" }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "to" }
 ,{ "trace" }
 ,{ "an" }
 ,{ "application" }
 ,{ "execution." }
 ,{ "It" }
 ,{ "record" }
 ,{ "events:" }
 ,{ "small" }
 ,{ "data" }
 ,{ "structures" }
 ,{ "with" }
 ,{ "high-precision" }
 ,{ "time-stamp" }
 ,{ "and" }
 ,{ "event" }
 ,{ "id." }
 ,{ "An" }
 ,{ "event" }
 ,{ "may" }
 ,{ "also" }
 ,{ "contain" }
 ,{ "some" }
 ,{ "additional" }
 ,{ "descriptive" }
 ,{ "fields." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Event" }
 ,{ "recorder" }
 ,{ "is" }
 ,{ "efficient," }
 ,{ "event" }
 ,{ "record" }
 ,{ "operation" }
 ,{ "takes" }
 ,{ "only" }
 ,{ "a" }
 ,{ "small" }
 ,{ "number" }
 ,{ "of" }
 ,{ "CPU" }
 ,{ "clocks." }
 ,{ "On" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "recording" }
 ,{ "is" }
 ,{ "permitted" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context," }
 ,{ "including" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "Once" }
 ,{ "recording" }
 ,{ "if" }
 ,{ "finished," }
 ,{ "you" }
 ,{ "can" }
 ,{ "save" }
 ,{ "recorded" }
 ,{ "data" }
 ,{ "in" }
 ,{ "a" }
 ,{ "binary" }
 ,{ "form" }
 ,{ "and" }
 ,{ "transport" }
 ,{ "it" }
 ,{ "to" }
 ,{ "a" }
 ,{ "host" }
 ,{ "machine." }
 ,{ "Binary" }
 ,{ "representation" }
 ,{ "contains" }
 ,{ "meta-information," }
 ,{ "which" }
 ,{ "helps" }
 ,{ "display" }
 ,{ "events" }
 ,{ "in" }
 ,{ "a" }
 ,{ "user-friendly" }
 ,{ "fashion." }
 ,{ "The" }
 ,{ "data" }
 ,{ "format" }
 ,{ "is" }
 ,{ "standard." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "prototype" }
 ,{ "tool" }
 ,{ "EventView" , & fmt_text_b }
 ,{ "to" }
 ,{ "display" }
 ,{ "and" }
 ,{ "work" }
 ,{ "with" }
 ,{ "event" }
 ,{ "records." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "create" }
 ,{ "and" }
 ,{ "use" }
 ,{ "your" }
 ,{ "own" }
 ,{ "such" }
 ,{ "tools" }
 ,{ "for" }
 ,{ "your" }
 ,{ "particular" }
 ,{ "purpose." }
} , & fmt_text , & align_text } ;

Bitmap b5 = { "EventView.zipmap" } ;

Text b6 = { {
 { "EventRecorder" }
} , & fmt_h2 , & align_h2 } ;

Text b7 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "main" }
 ,{ "event" }
 ,{ "recording" }
 ,{ "classes:" }
 ,{ "EventRecorderHost" , & fmt_text_b }
 ,{ "and" }
 ,{ "EventRecorder" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "serves" }
 ,{ "as" }
 ,{ "a" }
 ,{ "recoding" }
 ,{ "operation" }
 ,{ "class." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "recording" }
 ,{ "operation" }
 ,{ "buffer." }
 ,{ "Normally," }
 ,{ "you" }
 ,{ "create" }
 ,{ "a" }
 ,{ "global" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "type" }
 ,{ "(or" }
 ,{ "use" }
 ,{ "the" }
 ,{ "default" }
 ,{ "one)" }
 ,{ "and" }
 ,{ "use" }
 ,{ "it" }
 ,{ "for" }
 ,{ "the" }
 ,{ "event" }
 ,{ "recording." }
 ,{ "Events" }
 ,{ "are" }
 ,{ "not" }
 ,{ "recorded," }
 ,{ "unless" }
 ,{ "some" }
 ,{ "EventRecorder" , & fmt_text_b }
 ,{ "is" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "EventRecorderHost" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Both" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "default" }
 ,{ "event" }
 ,{ "recorders." }
 ,{ "They" }
 ,{ "are" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "task/TaskEvent.h" , & fmt_text_b }
 ,{ "," }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Task.h" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "enable" }
 ,{ "event" }
 ,{ "recording," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "uncomment" }
 ,{ "the" }
 ,{ "following" }
 ,{ "line:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "and" }
 ,{ "rebuild" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "comment" }
 ,{ "or" }
 ,{ "uncomment" }
 ,{ "the" }
 ,{ "lines:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "recording" }
 ,{ "of" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "event" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Below" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "recoding" }
 ,{ "object" }
 ,{ "declarations:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "class" }
 ,{ "TaskEventAlgo" , & fmt_text_b }
 ,{ "contains" }
 ,{ "some" }
 ,{ "basic" }
 ,{ "algorithms," }
 ,{ "required" }
 ,{ "by" }
 ,{ "the" }
 ,{ "class" }
 ,{ "EventRecorder" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "Core" , & fmt_text_b }
 ,{ "-specific." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "TaskEventRecorder" , & fmt_text_b }
 ,{ "and" }
 ,{ "TaskEventHostType" , & fmt_text_b }
 ,{ "are" }
 ,{ "the" }
 ,{ "default" }
 ,{ "recorder" }
 ,{ "and" }
 ,{ "the" }
 ,{ "recorder" }
 ,{ "host" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "TaskEventHost" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "event" }
 ,{ "recorder" }
 ,{ "host," }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "record" }
 ,{ "events." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "To" }
 ,{ "record" }
 ,{ "an" }
 ,{ "event" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "use" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "methods:" }
 ,{ "add()" , & fmt_text_b }
 ,{ "," }
 ,{ "addSync()" , & fmt_text_b }
 ,{ "," }
 ,{ "addProto()" , & fmt_text_b }
 ,{ "and" }
 ,{ "addDev()" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "do" }
 ,{ "the" }
 ,{ "same" }
 ,{ "thing:" }
 ,{ "record" }
 ,{ "an" }
 ,{ "event." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "is:" }
 ,{ "some" }
 ,{ "of" }
 ,{ "these" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "defined" }
 ,{ "as" }
 ,{ "NOP" }
 ,{ "operations," }
 ,{ "by" }
 ,{ "commenting" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "macros." }
 ,{ "It" }
 ,{ "allows" }
 ,{ "to" }
 ,{ "filter" }
 ,{ "out" }
 ,{ "events" }
 ,{ "by" }
 ,{ "their" }
 ,{ "sources." }
 ,{ "Sync" , & fmt_text_b }
 ,{ "events" }
 ,{ "come" }
 ,{ "from" }
 ,{ "synchronization" }
 ,{ "classes," }
 ,{ "Proto" , & fmt_text_b }
 ,{ "events" }
 ,{ "come" }
 ,{ "from" }
 ,{ "protocols" }
 ,{ "and" }
 ,{ "Dev" , & fmt_text_b }
 ,{ "events" }
 ,{ "come" }
 ,{ "from" }
 ,{ "device" }
 ,{ "drivers." }
 ,{ "Any" }
 ,{ "other" }
 ,{ "events" }
 ,{ "come" }
 ,{ "from" }
 ,{ "the" }
 ,{ "application" }
 ,{ "layer." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "tick()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "add" }
 ,{ "tick" }
 ,{ "events." }
 ,{ "You" }
 ,{ "done" }
 ,{ "need" }
 ,{ "to" }
 ,{ "call" }
 ,{ "this" }
 ,{ "method" }
 ,{ "directly." }
 ,{ "On" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "it" }
 ,{ "is" }
 ,{ "called" }
 ,{ "from" }
 ,{ "the" }
 ,{ "timer" }
 ,{ "interrupt." }
 ,{ "On" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "task" }
 ,{ "to" }
 ,{ "generate" }
 ,{ "this" }
 ,{ "event." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "start" }
 ,{ "it" }
 ,{ "manually." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "starts" }
 ,{ "and" }
 ,{ "stops" }
 ,{ "the" }
 ,{ "event" }
 ,{ "recording." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "process," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "recorder" }
 ,{ "host," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "recorder" }
 ,{ "buffer." }
 ,{ "Destructor" }
 ,{ "stops" }
 ,{ "the" }
 ,{ "recording." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "EventRecorderHost" }
} , & fmt_h3 , & align_h3 } ;

Text b19 = { {
 { "This" }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "event" }
 ,{ "recording" }
 ,{ "logic" }
 ,{ "and" }
 ,{ "the" }
 ,{ "recorder" }
 ,{ "attach/detach" }
 ,{ "logic." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "StartStop" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "start/stop" }
 ,{ "recording." }
 ,{ "Constructors" }
 ,{ "starts" }
 ,{ "operations," }
 ,{ "destructor" }
 ,{ "stops" }
 ,{ "them." }
 ,{ "The" }
 ,{ "recorder" , & fmt_text_b }
 ,{ "must" }
 ,{ "live" }
 ,{ "while" }
 ,{ "the" }
 ,{ "recording" }
 ,{ "is" }
 ,{ "running." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "an" }
 ,{ "event." }
 ,{ "The" }
 ,{ "event" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided" }
 ,{ "as" }
 ,{ "well" }
 ,{ "as" }
 ,{ "required" }
 ,{ "by" }
 ,{ "this" }
 ,{ "type" }
 ,{ "event" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "type" }
 ,{ "must" }
 ,{ "follow" }
 ,{ "the" }
 ,{ "event" }
 ,{ "type" }
 ,{ "class" }
 ,{ "rules." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "tick()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "EventControl" , & fmt_text_b }
 ,{ "event." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "event" }
 ,{ "type:" }
 ,{ "EventControl" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "start" }
 ,{ "event" }
 ,{ "of" }
 ,{ "this" }
 ,{ "types" }
 ,{ "begins" }
 ,{ "the" }
 ,{ "recording," }
 ,{ "stop" }
 ,{ "event" }
 ,{ "ends" }
 ,{ "it" }
 ,{ "and" }
 ,{ "tick" }
 ,{ "events" }
 ,{ "must" }
 ,{ "be" }
 ,{ "generated" }
 ,{ "periodically." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "EventRecorder" }
} , & fmt_h3 , & align_h3 } ;

Text b24 = { {
 { "The" }
 ,{ "class" }
 ,{ "EventRecorder" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "recorder" }
 ,{ "class." }
 ,{ "It" }
 ,{ "stores" }
 ,{ "recorded" }
 ,{ "events." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "event" }
 ,{ "buffer" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "an" }
 ,{ "event." }
 ,{ "The" }
 ,{ "first" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "event" }
 ,{ "object" }
 ,{ "type" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided" }
 ,{ "explicitly." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "space" }
 ,{ "the" }
 ,{ "event" }
 ,{ "is" }
 ,{ "discarded." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "parse()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "recorder" }
 ,{ "content." }
 ,{ "For" }
 ,{ "each" }
 ,{ "recorded" }
 ,{ "event" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "called" }
 ,{ "with" }
 ,{ "three" }
 ,{ "arguments:" }
 ,{ "EventMetaInfo" , & fmt_text_b }
 ,{ "constant" }
 ,{ "reference," }
 ,{ "the" }
 ,{ "event" }
 ,{ "EventMetaInfo::EventDesc" , & fmt_text_b }
 ,{ "constant" }
 ,{ "reference" }
 ,{ "and" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "event" }
 ,{ "record." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "save()" , & fmt_text_b }
 ,{ "saves" }
 ,{ "the" }
 ,{ "recorder" }
 ,{ "content" }
 ,{ "in" }
 ,{ "a" }
 ,{ "binary" }
 ,{ "form" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "binary" , & fmt_text_a }
 ,{ "output" , & fmt_text_a }
 ,{ "device" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "recorder" }
 ,{ "content" }
 ,{ "(can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "large" }
 ,{ "output)." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "You" }
 ,{ "may" }
 ,{ "find" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "the" }
 ,{ "event" }
 ,{ "recording" }
 ,{ "in" }
 ,{ "the" }
 ,{ "test3028.PTP.cpp" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "TaskEventAlgo" }
} , & fmt_h2 , & align_h2 } ;

Text b32 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "core-specific" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "some" }
 ,{ "basic" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "RecordAlign" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "alignment" }
 ,{ "for" }
 ,{ "event" }
 ,{ "types." }
 ,{ "This" }
 ,{ "value" }
 ,{ "equals" }
 ,{ "4" }
 ,{ "both" }
 ,{ "for" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "means" }
 ,{ "any" }
 ,{ "event" }
 ,{ "type" }
 ,{ "must" }
 ,{ "not" }
 ,{ "have" }
 ,{ "stronger" }
 ,{ "alignment" }
 ,{ "requirement" }
 ,{ "than" }
 ,{ "this" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "TimeFreq" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "time-stamp" }
 ,{ "frequency." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "0" }
 ,{ "for" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "a" }
 ,{ "real" }
 ,{ "timer" }
 ,{ "interrupt" }
 ,{ "frequency" }
 ,{ "on" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "The" }
 ,{ "last" }
 ,{ "member" }
 ,{ "is" }
 ,{ "the" }
 ,{ "class" }
 ,{ "AllocPos" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "space" }
 ,{ "for" }
 ,{ "an" }
 ,{ "event" }
 ,{ "and" }
 ,{ "time-stamp" }
 ,{ "it." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "differ" }
 ,{ "on" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "than" }
 ,{ "on" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "TickTask" }
} , & fmt_h2 , & align_h2 } ;

Text b37 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "on" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "to" }
 ,{ "inject" }
 ,{ "tick" }
 ,{ "events" }
 ,{ "with" }
 ,{ "10" }
 ,{ "Hz" }
 ,{ "frequency." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Constructor" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "task," }
 ,{ "destructor" }
 ,{ "stops" }
 ,{ "it." }
 ,{ "You" }
 ,{ "should" }
 ,{ "always" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "on" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "to" }
 ,{ "properly" }
 ,{ "time" }
 ,{ "events," }
 ,{ "because" }
 ,{ "the" }
 ,{ "time-stamp" }
 ,{ "frequency" }
 ,{ "is" }
 ,{ "unknown" }
 ,{ "and" }
 ,{ "may" }
 ,{ "vary." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "The" }
 ,{ "class" }
 ,{ "with" }
 ,{ "the" }
 ,{ "same" }
 ,{ "name" }
 ,{ "exists" }
 ,{ "on" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "also," }
 ,{ "but" }
 ,{ "it" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "Event" }
 ,{ "types" }
} , & fmt_h2 , & align_h2 } ;

Text b41 = { {
 { "Each" }
 ,{ "event" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "short" }
 ,{ "POD" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "starting" }
 ,{ "fields:" }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "It" }
 ,{ "must" }
 ,{ "also" }
 ,{ "have" }
 ,{ "two" }
 ,{ "methods:" }
 ,{ "init()" , & fmt_text_b }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "Register()" , & fmt_text_b }
 ,{ "to" }
 ,{ "register" }
 ,{ "a" }
 ,{ "type" }
 ,{ "meta-information." }
 ,{ "The" }
 ,{ "total" }
 ,{ "structure" }
 ,{ "length" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "256" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Additional" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "init()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided" }
 ,{ "in" }
 ,{ "the" }
 ,{ "method" }
 ,{ "add()" , & fmt_text_b }
 ,{ "during" }
 ,{ "an" }
 ,{ "event" }
 ,{ "recording." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "type" }
 ,{ "EventControl" , & fmt_text_b }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "And" }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "method" }
 ,{ "Register()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "To" }
 ,{ "register" }
 ,{ "a" }
 ,{ "type," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "add" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "description" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "EventMetaInfo" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "then" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "registration" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "setStructId()" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "EventMetaInfo::EventDesc" , & fmt_text_b }
 ,{ "descriptor" }
 ,{ "object" }
 ,{ "as" }
 ,{ "shown" }
 ,{ "above." }
 ,{ "To" }
 ,{ "add" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "description" }
 ,{ "you" }
 ,{ "do" }
 ,{ "the" }
 ,{ "following" }
 ,{ "chain" }
 ,{ "call:" }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "To" }
 ,{ "add" }
 ,{ "a" }
 ,{ "field" }
 ,{ "description" }
 ,{ "you" }
 ,{ "will" }
 ,{ "need" }
 ,{ "the" }
 ,{ "\"field" }
 ,{ "cast" }
 ,{ "function\"." }
 ,{ "This" }
 ,{ "function" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "field." }
 ,{ "In" }
 ,{ "the" }
 ,{ "example" }
 ,{ "above" }
 ,{ "Offset_time()" , & fmt_text_b }
 ,{ "," }
 ,{ "Offset_id()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Offset_type()" , & fmt_text_b }
 ,{ "are" }
 ,{ "such" }
 ,{ "functions." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "add" }
 ,{ "a" }
 ,{ "field" }
 ,{ "description:" }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "The" }
 ,{ "first" }
 ,{ "three" }
 ,{ "methods" }
 ,{ "describe" }
 ,{ "fields" }
 ,{ "of" }
 ,{ "types" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "uint16" , & fmt_text_b }
 ,{ "and" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "next" }
 ,{ "three" }
 ,{ "describe" }
 ,{ "\"enum\"" }
 ,{ "fields." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "id." }
 ,{ "And" }
 ,{ "the" }
 ,{ "last" }
 ,{ "one" }
 ,{ "describes" }
 ,{ "a" }
 ,{ "\"structure\"" }
 ,{ "field." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "id." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "type" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "\"Enum\"" }
 ,{ "types" }
 ,{ "are," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "the" }
 ,{ "types" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "uint16" , & fmt_text_b }
 ,{ "and" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "supplied" }
 ,{ "with" }
 ,{ "names" }
 ,{ "for" }
 ,{ "some" }
 ,{ "values" }
 ,{ "(and" }
 ,{ "optionally" }
 ,{ "event" }
 ,{ "markers)." }
 ,{ "To" }
 ,{ "add" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "description" }
 ,{ "you" }
 ,{ "do" }
 ,{ "the" }
 ,{ "following" }
 ,{ "chain" }
 ,{ "call:" }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "add" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "description:" }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "The" }
 ,{ "following" }
 ,{ "method" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "add" }
 ,{ "a" }
 ,{ "value" }
 ,{ "description:" }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "You" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "an" }
 ,{ "\"append\"" }
 ,{ "function" }
 ,{ "for" }
 ,{ "enum:" }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "for" }
 ,{ "each" }
 ,{ "enum" }
 ,{ "description" }
 ,{ "after" }
 ,{ "the" }
 ,{ "recording" }
 ,{ "process" }
 ,{ "is" }
 ,{ "stopped" }
 ,{ "to" }
 ,{ "update" }
 ,{ "value/name" }
 ,{ "couples." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "EventEnumValue" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "implements" }
 ,{ "a" }
 ,{ "run-time" }
 ,{ "enum" }
 ,{ "name" }
 ,{ "allocation." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "In" }
 ,{ "some" }
 ,{ "cases" }
 ,{ "you" }
 ,{ "may" }
 ,{ "want" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "same" }
 ,{ "meta" }
 ,{ "type" }
 ,{ "to" }
 ,{ "define" }
 ,{ "multiple" }
 ,{ "meta" }
 ,{ "types." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "for" }
 ,{ "this" }
 ,{ "the" }
 ,{ "EventTypeId" , & fmt_text_b }
 ,{ "template:" }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "The" }
 ,{ "structure" }
 ,{ "TypeReg" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "registration" }
 ,{ "method:" }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "You" }
 ,{ "may" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "classid" }
 ,{ "to" }
 ,{ "the" }
 ,{ "event," }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "classId()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "An" }
 ,{ "event" }
 ,{ "descriptor" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "the" }
 ,{ "event" }
 ,{ "classid," }
 ,{ "equals" }
 ,{ "the" }
 ,{ "event" }
 ,{ "id" }
 ,{ "by" }
 ,{ "default." }
 ,{ "But" }
 ,{ "you" }
 ,{ "may" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "different" }
 ,{ "classid." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "group" }
 ,{ "multiple" }
 ,{ "event" }
 ,{ "types" }
 ,{ "into" }
 ,{ "a" }
 ,{ "group" }
 ,{ "to" }
 ,{ "help" }
 ,{ "a" }
 ,{ "visualization" }
 ,{ "of" }
 ,{ "events" }
 ,{ "of" }
 ,{ "related" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "EventMarker" }
} , & fmt_h2 , & align_h2 } ;

Text b59 = { {
 { "EventMarker" , & fmt_text_b }
 ,{ "may" }
 ,{ "be" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value." }
 ,{ "This" }
 ,{ "marker" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "event" }
 ,{ "visualization" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "show" }
 ,{ "a" }
 ,{ "marker" }
 ,{ "on" }
 ,{ "this" }
 ,{ "event." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "list" }
 ,{ "of" }
 ,{ "marker" }
 ,{ "glyphs." }
} , & fmt_text , & align_text } ;

Bitmap b60 = { "Markers.zipmap" } ;

Text b61 = { {
 { "By" }
 ,{ "convention," }
 ,{ "the" }
 ,{ "marker" }
 ,{ "from" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "field" }
 ,{ "with" }
 ,{ "a" }
 ,{ "non-null" }
 ,{ "markers" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "mark" }
 ,{ "an" }
 ,{ "event." }
 ,{ "The" }
 ,{ "field" }
 ,{ "with" }
 ,{ "the" }
 ,{ "name" }
 ,{ "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "preferred" }
 ,{ "over" }
 ,{ "others." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "EventControl" }
} , & fmt_h2 , & align_h2 } ;

Text b63 = { {
 { "EventControl" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "control" }
 ,{ "event." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "type" , & fmt_text_b }
 ,{ "with" }
 ,{ "possible" }
 ,{ "four" }
 ,{ "enum" }
 ,{ "values:" }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "The" }
 ,{ "event" }
 ,{ "Start" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "as" }
 ,{ "the" }
 ,{ "first" }
 ,{ "event" }
 ,{ "once" }
 ,{ "the" }
 ,{ "recording" }
 ,{ "process" }
 ,{ "is" }
 ,{ "started." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Push" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "The" }
 ,{ "event" }
 ,{ "Tick" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "with" }
 ,{ "some" }
 ,{ "period" }
 ,{ "during" }
 ,{ "the" }
 ,{ "recording" }
 ,{ "process." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Tick" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "The" }
 ,{ "event" }
 ,{ "Stop" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "event" }
 ,{ "once" }
 ,{ "the" }
 ,{ "recording" }
 ,{ "process" }
 ,{ "is" }
 ,{ "stopped." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Stop" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "The" }
 ,{ "event" }
 ,{ "End" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "generated," }
 ,{ "but" }
 ,{ "added" }
 ,{ "during" }
 ,{ "the" }
 ,{ "saving" }
 ,{ "operation" }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "event" }
 ,{ "to" }
 ,{ "mark" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "binary" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "EventEnumValue" }
} , & fmt_h2 , & align_h2 } ;

Text b69 = { {
 { "The" }
 ,{ "class" }
 ,{ "EventEnumValue" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "update" }
 ,{ "a" }
 ,{ "value/name" }
 ,{ "couple" }
 ,{ "list" }
 ,{ "of" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "at" }
 ,{ "run-time." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "You" }
 ,{ "must" }
 ,{ "declare" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "some" }
 ,{ "static" }
 ,{ "members" }
 ,{ "first." }
 ,{ "The" }
 ,{ "members" }
 ,{ "are:" }
 ,{ "ValueType" , & fmt_text_b }
 ,{ "," }
 ,{ "Base" , & fmt_text_b }
 ,{ "and" }
 ,{ "Lim" , & fmt_text_b }
 ,{ "." }
 ,{ "A" }
 ,{ "value" }
 ,{ "range" }
 ,{ "from" }
 ,{ "Base" , & fmt_text_b }
 ,{ "to" }
 ,{ "Lim" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "value" }
 ,{ "with" }
 ,{ "an" }
 ,{ "assigned" }
 ,{ "name." }
 ,{ "To" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "value" }
 ,{ "simply" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "EventEnumValue<T>" , & fmt_text_b }
 ,{ "." }
 ,{ "Constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "argument" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "value" }
 ,{ "name." }
 ,{ "The" }
 ,{ "static" }
 ,{ "method" }
 ,{ "Append" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "append" }
 ,{ "function" }
 ,{ "when" }
 ,{ "registering" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "enum" }
 ,{ "meta-type." }
 ,{ "T::Marker" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "when" }
 ,{ "appending" }
 ,{ "allocated" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "Binary" }
 ,{ "output" }
 ,{ "format" }
} , & fmt_h2 , & align_h2 } ;

Text b72 = { {
 { "Binary" }
 ,{ "output" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "big-endian" }
 ,{ "byte" }
 ,{ "order" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "base" }
 ,{ "types" }
 ,{ "(" }
 ,{ "uint8," , & fmt_text_b }
 ,{ "uint16," , & fmt_text_b }
 ,{ "uint32," , & fmt_text_b }
 ,{ "uint64" , & fmt_text_b }
 ,{ ")." }
 ,{ "The" }
 ,{ "following" }
 ,{ "type" }
 ,{ "representation" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "encode" }
 ,{ "the" }
 ,{ "meta-information." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "An" }
 ,{ "item" }
 ,{ "id" }
 ,{ "is" }
 ,{ "the" }
 ,{ "index" }
 ,{ "in" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "item" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "time_freq" , & fmt_text_b }
 ,{ "may" }
 ,{ "be" }
 ,{ "zero." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "time-stamp" }
 ,{ "frequency" }
 ,{ "is" }
 ,{ "unknown" }
 ,{ "and" }
 ,{ "should" }
 ,{ "be" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "tick" }
 ,{ "events." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "A" }
 ,{ "binary" }
 ,{ "output" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "meta-information" }
 ,{ "and" }
 ,{ "followed" }
 ,{ "by" }
 ,{ "event" }
 ,{ "records." }
 ,{ "The" }
 ,{ "last" }
 ,{ "record" }
 ,{ "is" }
 ,{ "the" }
 ,{ "record" }
 ,{ "of" }
 ,{ "the" }
 ,{ "EventControl" , & fmt_text_b }
 ,{ "event" }
 ,{ "with" }
 ,{ "the" }
 ,{ "type" }
 ,{ "equals" }
 ,{ "End" , & fmt_text_b }
 ,{ "." }
 ,{ "Each" }
 ,{ "event" }
 ,{ "record" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "two" }
 ,{ "fields:" }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "You" }
 ,{ "may" }
 ,{ "parse" }
 ,{ "an" }
 ,{ "event" }
 ,{ "record" }
 ,{ "using" }
 ,{ "the" }
 ,{ "event" }
 ,{ "id." }
 ,{ "The" }
 ,{ "rest" }
 ,{ "of" }
 ,{ "the" }
 ,{ "event" }
 ,{ "record" }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "fields" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "structure" }
 ,{ "(except" }
 ,{ "first" }
 ,{ "two)." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "also" }
 ,{ "the" }
 ,{ "save_len" , & fmt_text_b }
 ,{ "field" }
 ,{ "of" }
 ,{ "the" }
 ,{ "event" }
 ,{ "meta-info." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "Time-stamp" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "." }
 ,{ "As" }
 ,{ "long" }
 ,{ "as" }
 ,{ "a" }
 ,{ "periodic" }
 ,{ "tick" }
 ,{ "is" }
 ,{ "present" }
 ,{ "in" }
 ,{ "the" }
 ,{ "record" }
 ,{ "with" }
 ,{ "enough" }
 ,{ "frequency" }
 ,{ "you" }
 ,{ "always" }
 ,{ "may" }
 ,{ "restore" }
 ,{ "the" }
 ,{ "extended" }
 ,{ "time-stamp" }
 ,{ "by" }
 ,{ "the" }
 ,{ "differentiation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "following" }
 ,{ "reaccumulation" }
 ,{ "of" }
 ,{ "time" }
 ,{ "stamps" }
 ,{ "in" }
 ,{ "a" }
 ,{ "variable" }
 ,{ "with" }
 ,{ "higher" }
 ,{ "value" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Page page = { "page_EventRecord" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_img , outer_img , back_img }
 ,{ & b6 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_img , outer_img , back_img }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Exceptions {

Text b0 = { {
 { "Exceptions" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Exception.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Exception.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "specially" }
 ,{ "designed" }
 ,{ "pattern" }
 ,{ "to" }
 ,{ "throw" }
 ,{ "exceptions." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "just" }
 ,{ "print" }
 ,{ "a" }
 ,{ "message" }
 ,{ "to" }
 ,{ "one" }
 ,{ "of" }
 ,{ "two" }
 ,{ "targets:" }
 ,{ "Exception" , & fmt_text_b }
 ,{ "or" }
 ,{ "NoException" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "you" }
 ,{ "print" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Exception" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "print" }
 ,{ "statement" }
 ,{ "will" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "CatchType" , & fmt_text_b }
 ,{ "." }
 ,{ "Printing" }
 ,{ "to" }
 ,{ "the" }
 ,{ "NoException" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception." }
 ,{ "But" }
 ,{ "it" }
 ,{ "prints" }
 ,{ "a" }
 ,{ "message" }
 ,{ "and" }
 ,{ "setup" }
 ,{ "a" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "in" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "report" }
 ,{ "object" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "keep" }
 ,{ "these" }
 ,{ "statements" }
 ,{ "in" }
 ,{ ".cpp" , & fmt_text_b }
 ,{ "files." }
 ,{ "The" }
 ,{ "pattern" }
 ,{ "for" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "message" }
 ,{ "is" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "PrintException" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "The" }
 ,{ "class" }
 ,{ "PrintException" , & fmt_text_b }
 ,{ "serves" }
 ,{ "as" }
 ,{ "a" }
 ,{ "print" }
 ,{ "adapter" }
 ,{ "for" }
 ,{ "the" }
 ,{ "enum" , & fmt_text_b }
 ,{ "ExceptionType" , & fmt_text_b }
 ,{ "(the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "constants" }
 ,{ "Exception" , & fmt_text_b }
 ,{ "and" }
 ,{ "NoException" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "this" }
 ,{ "class" }
 ,{ "for" }
 ,{ "a" }
 ,{ "direct" }
 ,{ "usage." }
 ,{ "It" }
 ,{ "does" }
 ,{ "its" }
 ,{ "job" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "Printf()" , & fmt_text_b }
 ,{ "statement:" }
 ,{ "finds" }
 ,{ "a" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "object," }
 ,{ "prints" }
 ,{ "the" }
 ,{ "message" }
 ,{ "to" }
 ,{ "it," }
 ,{ "setup" }
 ,{ "a" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "and" }
 ,{ "finally" }
 ,{ "in" }
 ,{ "destructor" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "if" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ReportException" }
} , & fmt_h3 , & align_h3 } ;

Text b9 = { {
 { "Each" }
 ,{ "thread" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "this" }
 ,{ "object" }
 ,{ "is" }
 ,{ "to" }
 ,{ "serve" }
 ,{ "as" }
 ,{ "the" }
 ,{ "printing" }
 ,{ "target" }
 ,{ "for" }
 ,{ "exception" }
 ,{ "messages." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "flag," }
 ,{ "which" }
 ,{ "signals" }
 ,{ "if" }
 ,{ "there" }
 ,{ "were" }
 ,{ "exception" }
 ,{ "messages." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "By" }
 ,{ "default," }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "prints" }
 ,{ "a" }
 ,{ "text" }
 ,{ "to" }
 ,{ "the" }
 ,{ "default" }
 ,{ "console." }
 ,{ "But" }
 ,{ "you" }
 ,{ "may" }
 ,{ "alter" }
 ,{ "this" }
 ,{ "by" }
 ,{ "deriving" }
 ,{ "a" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "and" }
 ,{ "overriding" }
 ,{ "virtual" }
 ,{ "methods" }
 ,{ "print()" , & fmt_text_b }
 ,{ "," }
 ,{ "start()" , & fmt_text_b }
 ,{ "," }
 ,{ "add()" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "end()" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "redirect" }
 ,{ "the" }
 ,{ "text" }
 ,{ "output," }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "override" }
 ,{ "only" }
 ,{ "the" }
 ,{ "method" }
 ,{ "print()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "you" }
 ,{ "may" }
 ,{ "alter" }
 ,{ "the" }
 ,{ "formating" }
 ,{ "or" }
 ,{ "processing" }
 ,{ "the" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "message" }
 ,{ "by" }
 ,{ "overriding" }
 ,{ "other" }
 ,{ "methods." }
 ,{ "Print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
 ,{ "Be" }
 ,{ "caution" }
 ,{ "in" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "these" }
 ,{ "methods:" }
 ,{ "they" , & fmt_text_Alert }
 ,{ "must" , & fmt_text_Alert }
 ,{ "not" , & fmt_text_Alert }
 ,{ "throw" , & fmt_text_Alert }
 ,{ "exceptions," , & fmt_text_Alert }
 ,{ "it" , & fmt_text_Alert }
 ,{ "will" , & fmt_text_Alert }
 ,{ "lead" , & fmt_text_Alert }
 ,{ "to" , & fmt_text_Alert }
 ,{ "abort" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "static" }
 ,{ "method" }
 ,{ "Clear()" , & fmt_text_b }
 ,{ "clears" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "flag" }
 ,{ "for" }
 ,{ "the" }
 ,{ "current" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "object," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "SilentReportException" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "such" }
 ,{ "derived" }
 ,{ "class," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "nowhere." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "ReportException" , & fmt_text_b }
 ,{ "objects" }
 ,{ "must" }
 ,{ "be" }
 ,{ "created" }
 ,{ "as" }
 ,{ "local" }
 ,{ "variables" }
 ,{ "to" }
 ,{ "setup" }
 ,{ "a" }
 ,{ "report" }
 ,{ "exception" }
 ,{ "target" }
 ,{ "for" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread" }
 ,{ "for" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "duration." }
 ,{ "Usually," }
 ,{ "you" }
 ,{ "should" }
 ,{ "couple" }
 ,{ "such" }
 ,{ "object" }
 ,{ "with" }
 ,{ "a" }
 ,{ "try/catch" , & fmt_text_b }
 ,{ "block." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Or" }
 ,{ "the" }
 ,{ "following" }
 ,{ "way:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "If" }
 ,{ "you" }
 ,{ "have" }
 ,{ "multiple" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "objects," }
 ,{ "then" }
 ,{ "the" }
 ,{ "last" }
 ,{ "is" }
 ,{ "the" }
 ,{ "current." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "ReportExceptionTo" }
} , & fmt_h3 , & align_h3 } ;

Text b17 = { {
 { "ReportExceptionTo" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ReportException" , & fmt_text_b }
 ,{ "," }
 ,{ "this" }
 ,{ "class" }
 ,{ "redirects" }
 ,{ "exception" }
 ,{ "message" }
 ,{ "output" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "output" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "and" }
 ,{ "stores" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "target" }
 ,{ "object." }
 ,{ "The" }
 ,{ "class" }
 ,{ "of" }
 ,{ "this" }
 ,{ "object" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "method" }
 ,{ "put(const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "*str,ulen" , & fmt_text_b }
 ,{ "len)" , & fmt_text_b }
 ,{ "." }
 ,{ "For" }
 ,{ "example," }
 ,{ "any" }
 ,{ "printing" }
 ,{ "object" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "acceptable." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "The" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "print()" , & fmt_text_b }
 ,{ "is" }
 ,{ "public" }
 ,{ "for" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Custom" }
 ,{ "exceptions" }
} , & fmt_h3 , & align_h3 } ;

Text b21 = { {
 { "Sometimes" }
 ,{ "you" }
 ,{ "may" }
 ,{ "want" }
 ,{ "to" }
 ,{ "throw" }
 ,{ "not" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "CatchType" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "something" }
 ,{ "more." }
 ,{ "To" }
 ,{ "do" }
 ,{ "this" }
 ,{ "use" }
 ,{ "the" }
 ,{ "PrintCustomException" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "For" }
 ,{ "example," }
 ,{ "that" }
 ,{ "is" }
 ,{ "the" }
 ,{ "way" }
 ,{ "we" }
 ,{ "throw" }
 ,{ "the" }
 ,{ "\"no-memory\"" }
 ,{ "exception:" }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "We" }
 ,{ "have" }
 ,{ "to" }
 ,{ "do" }
 ,{ "it" }
 ,{ "so" }
 ,{ "to" }
 ,{ "satisfy" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "standard" }
 ,{ "requirements." }
} , & fmt_text , & align_text } ;

Page page = { "page_Exceptions" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ExceptionType {

Text b0 = { {
 { "ExceptionType" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/ExceptionType.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/ExceptionType.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ExceptionType" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "enum" , & fmt_text_b }
 ,{ "with" }
 ,{ "two" }
 ,{ "named" }
 ,{ "values." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "an" }
 ,{ "exceptional" }
 ,{ "situation" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "CatchType" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "base" }
 ,{ "class" }
 ,{ "for" }
 ,{ "exception" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Handling" }
 ,{ "exceptional" }
 ,{ "situations" }
} , & fmt_h2 , & align_h2 } ;

Text b5 = { {
 { "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "exceptional" }
 ,{ "situations." }
 ,{ "To" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "statement" }
 ,{ "picks" }
 ,{ "up" }
 ,{ "an" }
 ,{ "installed" }
 ,{ "error" }
 ,{ "report" }
 ,{ "handler," }
 ,{ "prints" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "error" }
 ,{ "message" }
 ,{ "and" }
 ,{ "then" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "CatchType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "To" }
 ,{ "report" }
 ,{ "a" }
 ,{ "error" }
 ,{ "without" }
 ,{ "throwing" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "(i.e." }
 ,{ "inside" }
 ,{ "a" }
 ,{ "destructor):" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "To" }
 ,{ "catch" }
 ,{ "exceptions" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "See" }
 ,{ "Exceptions" , & fmt_text_a }
 ,{ "for" }
 ,{ "more" }
 ,{ "details." }
} , & fmt_text , & align_text } ;

Page page = { "page_ExceptionType" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_exectest {

Text b0 = { {
 { "exectest" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "exectest.exe" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "utility," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "command" }
 ,{ "line" }
 ,{ "arguments" }
 ,{ "into" }
 ,{ "the" }
 ,{ "file" }
 ,{ "args.txt" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "current" }
 ,{ "directory." }
 ,{ "It" }
 ,{ "is" }
 ,{ "built" }
 ,{ "in" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "CCORE_ROOT/tools/PTPServer/root" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_exectest" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FastMutex {

Text b0 = { {
 { "FastMutex" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/FastMutex.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/FastMutex.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "FastMutexBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "providing" }
 ,{ "simplified" }
 ,{ "mutex" }
 ,{ "locking" }
 ,{ "abilities." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "as" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "an" }
 ,{ "execution" }
 ,{ "serialization" }
 ,{ "in" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "Lock" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "only" }
 ,{ "way" }
 ,{ "to" }
 ,{ "lock" }
 ,{ "the" }
 ,{ "FastMutexBase" , & fmt_text_b }
 ,{ "." }
 ,{ "Locks" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "recursive." }
 ,{ "And" }
 ,{ "the" }
 ,{ "code" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "locked" }
 ,{ "region" }
 ,{ "must" }
 ,{ "be" }
 ,{ "fast," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "it" }
 ,{ "cannot" }
 ,{ "make" }
 ,{ "any" }
 ,{ "blocking" }
 ,{ "calls." }
 ,{ "Use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "to" }
 ,{ "serialize" }
 ,{ "simple" }
 ,{ "operations," }
 ,{ "like" }
 ,{ "list" }
 ,{ "manipulations." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "HCore" }
 ,{ "FastMutexBase" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "HCore" , & fmt_text_b }
 ,{ "FastMutexBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "FastMutex" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simplified" }
 ,{ "version" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "XCore" }
 ,{ "FastMutexBase" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "class" }
 ,{ "FastMutex" , & fmt_text_b }
 ,{ "in" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "class" }
 ,{ "FastMutexBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "stateless." }
 ,{ "It" }
 ,{ "is" }
 ,{ "just" }
 ,{ "the" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "code" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "locked" }
 ,{ "region" }
 ,{ "runs" }
 ,{ "without" }
 ,{ "interruption," }
 ,{ "so" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "priority" }
 ,{ "inversion" }
 ,{ "problem" }
 ,{ "here." }
} , & fmt_text , & align_text } ;

Page page = { "page_FastMutex" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FeedBuf {

Text b0 = { {
 { "FeedBuf" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FeedBuf.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FeedBuf.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "FeedBuf" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "It" }
 ,{ "copies" }
 ,{ "data" }
 ,{ "from" }
 ,{ "one" }
 ,{ "range" }
 ,{ "to" }
 ,{ "another." }
 ,{ "The" }
 ,{ "result" }
 ,{ "value" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "delta" , & fmt_text_b }
 ,{ "and" }
 ,{ "cmp" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "delta" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "object" }
 ,{ "copied," }
 ,{ "it" }
 ,{ "equlas" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "of" }
 ,{ "lengthes" }
 ,{ "of" }
 ,{ "source" }
 ,{ "and" }
 ,{ "destination" }
 ,{ "ranges." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "cmp" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "comparison" }
 ,{ "of" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "range" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "source" }
 ,{ "ones." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "function" }
 ,{ "feeds" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "source" }
 ,{ "and" }
 ,{ "updates" }
 ,{ "dst" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "range." }
 ,{ "The" }
 ,{ "overflow" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "This" }
 ,{ "function" }
 ,{ "pumps" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "source" }
 ,{ "and" }
 ,{ "updates" }
 ,{ "both" }
 ,{ "dst" , & fmt_text_b }
 ,{ "and" }
 ,{ "src" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "underflow" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_FeedBuf" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Fifo {

Text b0 = { {
 { "Fifo" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Fifo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Fifo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Fifo" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "The" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "Fifo" , & fmt_text_b }
 ,{ "implements" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "fifo" }
 ,{ "upon" }
 ,{ "a" }
 ,{ "provided" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Bitmap b4 = { "Fifo.zipmap" } ;

Text b5 = { {
 { "Constructor" }
 ,{ "builds" }
 ,{ "a" }
 ,{ "fifo" }
 ,{ "in" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "empty" }
 ,{ "state," }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer" }
 ,{ "will" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "subsequent" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fifo." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getAvail()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "available" }
 ,{ "positions" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fifo." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "isEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "the" }
 ,{ "fifo" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "isFull()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "the" }
 ,{ "fifo" }
 ,{ "is" }
 ,{ "full." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "fifo" }
 ,{ "in" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Keep" }
 ,{ "in" }
 ,{ "mind," }
 ,{ "that" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "just" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "space." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "object" , & fmt_text_b }
 ,{ "array." }
 ,{ "Some" }
 ,{ "of" }
 ,{ "these" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "the" }
 ,{ "logical" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "but" }
 ,{ "other" }
 ,{ "are" }
 ,{ "unused." }
 ,{ "It" }
 ,{ "is" }
 ,{ "nothing," }
 ,{ "if" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "int" , & fmt_text_b }
 ,{ "or" }
 ,{ "any" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "it" }
 ,{ "would" }
 ,{ "lead" }
 ,{ "to" }
 ,{ "a" }
 ,{ "resource" }
 ,{ "leak," }
 ,{ "if" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "String" , & fmt_text_b }
 ,{ "," }
 ,{ "for" }
 ,{ "example." }
 ,{ "To" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "this" }
 ,{ "problem," }
 ,{ "choose" }
 ,{ "carefully" }
 ,{ "an" }
 ,{ "exact" }
 ,{ "method" }
 ,{ "of" }
 ,{ "putting/getting" }
 ,{ "objects" }
 ,{ "into" }
 ,{ "the" }
 ,{ "fifo." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Putting/getting" }
 ,{ "methods" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "was" }
 ,{ "successful," }
 ,{ "otherwise" }
 ,{ "they" }
 ,{ "return" }
 ,{ "false" , & fmt_text_b }
 ,{ "and" }
 ,{ "does" }
 ,{ "not" }
 ,{ "change" }
 ,{ "the" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "fifo." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "put()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "using" }
 ,{ "copying." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "put_swap()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "using" }
 ,{ "swapping." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "swaps" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "target" }
 ,{ "buffer" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "put_gen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "way" }
 ,{ "to" }
 ,{ "put" }
 ,{ "an" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "its" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor," }
 ,{ "which" }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
 ,{ "func" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "as" }
 ,{ "func(dst)" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "dst" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "target" }
 ,{ "buffer" }
 ,{ "element." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "this" }
 ,{ "call" }
 ,{ "will" }
 ,{ "change" }
 ,{ "this" }
 ,{ "element" }
 ,{ "to" }
 ,{ "store" }
 ,{ "a" }
 ,{ "required" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "get()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "using" }
 ,{ "copying." }
 ,{ "The" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "remains" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "get_swap()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "using" }
 ,{ "swapping." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "preferred," }
 ,{ "if" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "clean" }
 ,{ "the" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer," }
 ,{ "or" }
 ,{ "if" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "get_gen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "method" }
 ,{ "of" }
 ,{ "extraction" }
 ,{ "an" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "fifo," }
 ,{ "it" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "func" , & fmt_text_b }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job," }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "put_gen()" , & fmt_text_b }
 ,{ "does." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "FifoBuf" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "The" }
 ,{ "class" }
 ,{ "FifoBuf" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "upgraded" }
 ,{ "class" }
 ,{ "Fifo" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "embedded" }
 ,{ "buffer:" }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "the" }
 ,{ "String" , & fmt_text_b }
 ,{ "fifo" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Fifo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_img , outer_img , back_img }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FileName {

Text b0 = { {
 { "FileName" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FileName.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FileName.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "FileName" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "developed" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "file" }
 ,{ "names" }
 ,{ "as" }
 ,{ "required" }
 ,{ "in" }
 ,{ "standard" }
 ,{ "handling" }
 ,{ "of" }
 ,{ "the" }
 ,{ "directive" }
 ,{ "include" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "DDL" , & fmt_text_a }
 ,{ "Engine." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "A" }
 ,{ "FileName" , & fmt_text_b }
 ,{ "object" }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "normalized" }
 ,{ "full" }
 ,{ "file" }
 ,{ "name." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "in" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state," }
 ,{ "it" }
 ,{ "contains" }
 ,{ "empty" }
 ,{ "string" }
 ,{ "and" }
 ,{ "useless." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Below" }
 ,{ "are" }
 ,{ "some" }
 ,{ "definitions." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "extname" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "non-empty" }
 ,{ "file" }
 ,{ "name," }
 ,{ "without" }
 ,{ "'/'" , & fmt_text_b }
 ,{ "," }
 ,{ "'\\'" , & fmt_text_b }
 ,{ "," }
 ,{ "':'" , & fmt_text_b }
 ,{ "characters," }
 ,{ "may" }
 ,{ "be" }
 ,{ "special" }
 ,{ "(" }
 ,{ "“.”" , & fmt_text_b }
 ,{ "," }
 ,{ "“..”" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "name" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "a" }
 ,{ "regular" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "General" }
 ,{ "file" }
 ,{ "name:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Normalized" }
 ,{ "file" }
 ,{ "name:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Absolute" }
 ,{ "names:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Relative" }
 ,{ "names:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "Nothing" , & fmt_text_b }
 ,{ "-constructor" }
 ,{ "create" }
 ,{ "the" }
 ,{ "null" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "getStr()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getPath()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "path" }
 ,{ "part," }
 ,{ "including" }
 ,{ "trailing" }
 ,{ "slash," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "getFile()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "file" }
 ,{ "name" }
 ,{ "part." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "For" }
 ,{ "example," }
 ,{ "if" }
 ,{ "the" }
 ,{ "full" }
 ,{ "name" }
 ,{ "is" }
 ,{ "\"c:/dir/file_name.ext\"" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "getPath()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "\"c:/dir/\"" , & fmt_text_b }
 ,{ "and" }
 ,{ "getFile()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "\"file_name.ext\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "printPos()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "method," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "followed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "text" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "FileName" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "FileName" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "The" }
 ,{ "main" }
 ,{ "job" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "doing" }
 ,{ "inside" }
 ,{ "two" }
 ,{ "non-trivial" }
 ,{ "constructors." }
 ,{ "The" }
 ,{ "first" }
 ,{ "of" }
 ,{ "them" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "converts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "general" }
 ,{ "file" }
 ,{ "name" }
 ,{ "into" }
 ,{ "the" }
 ,{ "normalized" }
 ,{ "form." }
 ,{ "If" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "is" }
 ,{ "bad" }
 ,{ "the" }
 ,{ "null" }
 ,{ "object" }
 ,{ "is" }
 ,{ "created." }
 ,{ "Exception" }
 ,{ "may" }
 ,{ "be" }
 ,{ "thrown" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "The" }
 ,{ "second" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "prepares" }
 ,{ "the" }
 ,{ "normalized" }
 ,{ "file" }
 ,{ "name" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path" }
 ,{ "and" }
 ,{ "the" }
 ,{ "given" }
 ,{ "general" }
 ,{ "file" }
 ,{ "name." }
 ,{ "If" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "is" }
 ,{ "absolute," }
 ,{ "it" }
 ,{ "is" }
 ,{ "normalized," }
 ,{ "but" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "relative," }
 ,{ "the" }
 ,{ "given" }
 ,{ "path" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "generate" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path." }
 ,{ "Again," }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "is" }
 ,{ "bad" }
 ,{ "the" }
 ,{ "null" }
 ,{ "object" }
 ,{ "is" }
 ,{ "created." }
 ,{ "Exception" }
 ,{ "may" }
 ,{ "be" }
 ,{ "thrown" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "memory." }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "expected" }
 ,{ "to" }
 ,{ "be" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "path" }
 ,{ "part," }
 ,{ "like" }
 ,{ "getPath()" , & fmt_text_b }
 ,{ "return" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Page page = { "page_FileName" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FileNameMatch {

Text b0 = { {
 { "FileNameMatch" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FileNameMatch.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FileNameMatch.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "FileNameFilter" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "designed" }
 ,{ "to" }
 ,{ "filter" }
 ,{ "file" }
 ,{ "names" }
 ,{ "according" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "usual" }
 ,{ "meta-templates" }
 ,{ "with" }
 ,{ "wildcards" }
 ,{ "'*'" , & fmt_text_b }
 ,{ "and" }
 ,{ "'?'" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "null" }
 ,{ "state." }
 ,{ "You" }
 ,{ "can" }
 ,{ "reset" }
 ,{ "an" }
 ,{ "object" }
 ,{ "to" }
 ,{ "this" }
 ,{ "state" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "reset()" , & fmt_text_b }
 ,{ "." }
 ,{ "Null" }
 ,{ "state" }
 ,{ "object" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "filter" }
 ,{ "file" }
 ,{ "names." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "it" }
 ,{ "first." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Non-default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "initialized" }
 ,{ "object." }
 ,{ "filter" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "file" }
 ,{ "name" }
 ,{ "template" }
 ,{ "with" }
 ,{ "wildcards," }
 ,{ "max_states" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "states" }
 ,{ "limit." }
 ,{ "Constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "to" }
 ,{ "examine" }
 ,{ "file" }
 ,{ "names." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "initialized." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "in" }
 ,{ "null" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "reset()" , & fmt_text_b }
 ,{ "return" }
 ,{ "the" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "reset()" , & fmt_text_b }
 ,{ "with" }
 ,{ "arguments" }
 ,{ "reinitializes" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "checks," }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "matches" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "templates." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "initialized," }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_FileNameMatch" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Files {

Text b0 = { {
 { "Files" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/GenFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/GenFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "concept" }
 ,{ "of" }
 ,{ "working" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "system." }
 ,{ "It" }
 ,{ "includes" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "common" }
 ,{ "constants" }
 ,{ "and" }
 ,{ "abstract" }
 ,{ "operations" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "any" }
 ,{ "file" }
 ,{ "system," }
 ,{ "local" }
 ,{ "or" }
 ,{ "remote." }
 ,{ "The" }
 ,{ "term" }
 ,{ "file" , & fmt_text_b }
 ,{ "means" }
 ,{ "a" }
 ,{ "true" }
 ,{ "file," }
 ,{ "i.e." }
 ,{ "a" }
 ,{ "persistent" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "octets," }
 ,{ "stored" }
 ,{ "on" }
 ,{ "some" }
 ,{ "file" }
 ,{ "device" }
 ,{ "and" }
 ,{ "identified" }
 ,{ "by" }
 ,{ "its" }
 ,{ "name," }
 ,{ "which" }
 ,{ "may" }
 ,{ "include" }
 ,{ "a" }
 ,{ "device" }
 ,{ "specifier," }
 ,{ "a" }
 ,{ "path" }
 ,{ "specifier" }
 ,{ "and" }
 ,{ "finally" }
 ,{ "a" }
 ,{ "file" }
 ,{ "name." }
 ,{ "All" }
 ,{ "constant" }
 ,{ "standardize" }
 ,{ "a" }
 ,{ "name," }
 ,{ "a" }
 ,{ "type," }
 ,{ "a" }
 ,{ "meaning" }
 ,{ "and" }
 ,{ "a" }
 ,{ "value." }
 ,{ "You" }
 ,{ "may" }
 ,{ "find" }
 ,{ "these" }
 ,{ "definitions" }
 ,{ "in" }
 ,{ "the" }
 ,{ "txt/cpp/GenFile.txt.cpp" , & fmt_text_b }
 ,{ "also." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "File" }
 ,{ "constants" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "FilePosType" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "file" }
 ,{ "position" }
 ,{ "and" }
 ,{ "a" }
 ,{ "length," }
 ,{ "it" }
 ,{ "is" }
 ,{ "64-bit" }
 ,{ "wide." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "CmpFileTimeType" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "file" }
 ,{ "time," }
 ,{ "it" }
 ,{ "is" }
 ,{ "64-bit" }
 ,{ "wide." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "time" }
 ,{ "value," }
 ,{ "without" }
 ,{ "any" }
 ,{ "known" }
 ,{ "resolution." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "compare" }
 ,{ "file" }
 ,{ "times." }
 ,{ "Null" }
 ,{ "value" }
 ,{ "is" }
 ,{ "reserved" }
 ,{ "for" }
 ,{ "non-existing" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "MaxPathLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "path" }
 ,{ "length" }
 ,{ "limit." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "FileOpenFlags" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "flags" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "a" }
 ,{ "file" }
 ,{ "open" }
 ,{ "operation." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "|" , & fmt_text_b }
 ,{ "to" }
 ,{ "combine" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "flags" }
 ,{ "into" }
 ,{ "a" }
 ,{ "single" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Open_Read" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "read" }
 ,{ "operations" }
 ,{ "must" }
 ,{ "be" }
 ,{ "available" }
 ,{ "on" }
 ,{ "opened" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Open_Write" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "write" }
 ,{ "operations" }
 ,{ "must" }
 ,{ "be" }
 ,{ "available" }
 ,{ "on" }
 ,{ "opened" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Open_Pos" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "position" }
 ,{ "operations" }
 ,{ "must" }
 ,{ "be" }
 ,{ "available" }
 ,{ "on" }
 ,{ "opened" }
 ,{ "file," }
 ,{ "this" }
 ,{ "includes" }
 ,{ "a" }
 ,{ "file" }
 ,{ "length" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "used," }
 ,{ "if" }
 ,{ "a" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "sequential" }
 ,{ "access" }
 ,{ "set" }
 ,{ "of" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Open_Create" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "create" }
 ,{ "a" }
 ,{ "new" }
 ,{ "file," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "a" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "not" }
 ,{ "set" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "does" }
 ,{ "not" }
 ,{ "exist," }
 ,{ "the" }
 ,{ "open" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Open_Erase" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "erase" }
 ,{ "the" }
 ,{ "file," }
 ,{ "if" }
 ,{ "one" }
 ,{ "exists." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Open_New" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "file" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "new" }
 ,{ "file." }
 ,{ "If" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "exists," }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flags" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "Open_Create" , & fmt_text_b }
 ,{ "and" }
 ,{ "Open_Erase" , & fmt_text_b }
 ,{ "flags" }
 ,{ "are" }
 ,{ "ignored." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Open_AutoDelete" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "file" }
 ,{ "during" }
 ,{ "the" }
 ,{ "close" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "effect" }
 ,{ "of" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "can" }
 ,{ "be" }
 ,{ "cancelled" }
 ,{ "after" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Open_PosEnd" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "file" }
 ,{ "position" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "This" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "used" }
 ,{ "if" }
 ,{ "a" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "sequential" }
 ,{ "access" }
 ,{ "set" }
 ,{ "of" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "does" }
 ,{ "not" }
 ,{ "required" }
 ,{ "the" }
 ,{ "Open_Pos" , & fmt_text_b }
 ,{ "flag" }
 ,{ "to" }
 ,{ "be" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Open_ToRead" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "combination" }
 ,{ "Open_Read" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Open_ToWrite" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "combination" }
 ,{ "Open_Write|Open_Create|Open_Erase" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Open_ToAppend" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "combination" }
 ,{ "Open_Write|Open_Create|Open_PosEnd" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "GetTextDesc(FileOpenFlags)" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "object" }
 ,{ "to" }
 ,{ "print" }
 ,{ "a" }
 ,{ "text" }
 ,{ "description" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "output" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "\"Read|Write|Create\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "FileError" , & fmt_text_b }
 ,{ "represent" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "typical" }
 ,{ "errors" }
 ,{ "happens" }
 ,{ "during" }
 ,{ "file" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "FileType" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "designate" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type:" }
 ,{ "is" }
 ,{ "it" }
 ,{ "a" }
 ,{ "file," }
 ,{ "a" }
 ,{ "directory" }
 ,{ "or" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "There" }
 ,{ "are" }
 ,{ "situations" }
 ,{ "when" }
 ,{ "several" }
 ,{ "errors" }
 ,{ "can" }
 ,{ "be" }
 ,{ "fired" }
 ,{ "during" }
 ,{ "the" }
 ,{ "one" }
 ,{ "operation," }
 ,{ "for" }
 ,{ "example," }
 ,{ "during" }
 ,{ "file" }
 ,{ "closing." }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "can" }
 ,{ "store" }
 ,{ "multiple" }
 ,{ "error" }
 ,{ "codes." }
 ,{ "It" }
 ,{ "accumulates" }
 ,{ "up" }
 ,{ "to" }
 ,{ "10" }
 ,{ "error" }
 ,{ "codes" }
 ,{ "and" }
 ,{ "counts" }
 ,{ "any" }
 ,{ "extra." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "test" }
 ,{ "if" }
 ,{ "there" }
 ,{ "are" }
 ,{ "accumulated" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" }
 ,{ "error" }
 ,{ "code" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "getFirst()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "first" }
 ,{ "error" }
 ,{ "code" }
 ,{ "or" }
 ,{ "FileError_Ok" , & fmt_text_b }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "copyTo()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "the" }
 ,{ "state" }
 ,{ "to" }
 ,{ "another" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "File" }
 ,{ "operations" }
} , & fmt_h3 , & align_h3 } ;

Text b29 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "sets:" }
 ,{ "the" }
 ,{ "classical," }
 ,{ "where" }
 ,{ "there" }
 ,{ "is" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "position" }
 ,{ "and" }
 ,{ "the" }
 ,{ "alternative," }
 ,{ "where" }
 ,{ "read" }
 ,{ "or" }
 ,{ "write" }
 ,{ "position" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "explicitly." }
 ,{ "File" }
 ,{ "names" }
 ,{ "are" }
 ,{ "encoded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "range." }
 ,{ "No" }
 ,{ "zero-termination" }
 ,{ "is" }
 ,{ "assumed." }
 ,{ "The" }
 ,{ "length" }
 ,{ "is" }
 ,{ "given" }
 ,{ "explicitly." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Basic" }
 ,{ "types" }
 ,{ "and" }
 ,{ "constants" }
} , & fmt_h4 , & align_h4 } ;

Text b31 = { {
 { "There" }
 ,{ "are" }
 ,{ "few" }
 ,{ "basic" }
 ,{ "types" }
 ,{ "and" }
 ,{ "constants." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Classical" }
 ,{ "set" }
} , & fmt_h4 , & align_h4 } ;

Text b33 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "classical" }
 ,{ "set" }
 ,{ "of" }
 ,{ "operations" }
 ,{ "as" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "set" }
 ,{ "of" }
 ,{ "functions." }
 ,{ "The" }
 ,{ "error" }
 ,{ "reporting" }
 ,{ "is" }
 ,{ "omitted." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "To" }
 ,{ "start" }
 ,{ "working" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened." }
 ,{ "The" }
 ,{ "open" , & fmt_text_b }
 ,{ "operation" }
 ,{ "arguments" }
 ,{ "are:" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "(with" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "length)," }
 ,{ "and" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "opened" }
 ,{ "file" }
 ,{ "has" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "position." }
 ,{ "This" }
 ,{ "position" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "0," }
 ,{ "unless" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_PosEnd" , & fmt_text_b }
 ,{ "is" }
 ,{ "specified." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "the" }
 ,{ "position" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "The" }
 ,{ "close" , & fmt_text_b }
 ,{ "operation" }
 ,{ "has" }
 ,{ "the" }
 ,{ "argument:" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flag" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set" }
 ,{ "then" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "deleted" }
 ,{ "during" }
 ,{ "the" }
 ,{ "close" }
 ,{ "operation." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "is" }
 ,{ "true," }
 ,{ "it" }
 ,{ "is" }
 ,{ "preserved." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "getLen" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "changed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "write" , & fmt_text_b }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "getPos" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "setPos" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position." }
 ,{ "Setting" }
 ,{ "the" }
 ,{ "file" }
 ,{ "position" }
 ,{ "beyond" }
 ,{ "the" }
 ,{ "end-of-file" }
 ,{ "has" }
 ,{ "an" }
 ,{ "undefined" }
 ,{ "behavior." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "read" , & fmt_text_b }
 ,{ "transfers" }
 ,{ "bytes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position" }
 ,{ "to" }
 ,{ "the" }
 ,{ "user" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "updates" }
 ,{ "the" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "can" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length," }
 ,{ "if" }
 ,{ "the" }
 ,{ "end-of-file" }
 ,{ "is" }
 ,{ "encountered." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "write" , & fmt_text_b }
 ,{ "transfers" }
 ,{ "bytes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "user" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position" }
 ,{ "and" }
 ,{ "updates" }
 ,{ "the" }
 ,{ "file" }
 ,{ "position." }
 ,{ "Write" }
 ,{ "MAY" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "should" }
 ,{ "be" }
 ,{ "equal" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length," }
 ,{ "unless" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "good" }
 ,{ "reason" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "another" }
 ,{ "behavior." }
} , & fmt_text , & align_text } ;

Link link_AltSet = { & page , { 41 } } ;

Text b41 = { {
 { "Alternative" }
 ,{ "set" }
} , & fmt_h4 , & align_h4 } ;

Text b42 = { {
 { "And" }
 ,{ "the" }
 ,{ "alternative" }
 ,{ "set" }
 ,{ "is:" }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "The" }
 ,{ "open" , & fmt_text_b }
 ,{ "operation" }
 ,{ "ignores" }
 ,{ "flags" }
 ,{ "Open_Pos" , & fmt_text_b }
 ,{ "and" }
 ,{ "Open_PosEnd" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "position" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "read" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "explicitly" }
 ,{ "given" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "read" }
 ,{ "range" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "file" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "write" , & fmt_text_b }
 ,{ "also" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "explicitly" }
 ,{ "given" }
 ,{ "file" }
 ,{ "position." }
 ,{ "But" }
 ,{ "the" }
 ,{ "write" }
 ,{ "range" }
 ,{ "may" }
 ,{ "be" }
 ,{ "outside" }
 ,{ "the" }
 ,{ "file" }
 ,{ "range." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "extended." }
 ,{ "The" }
 ,{ "return" }
 ,{ "length" }
 ,{ "is" }
 ,{ "the" }
 ,{ "new" }
 ,{ "file" }
 ,{ "length." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "hole" }
 ,{ "after" }
 ,{ "the" }
 ,{ "end-of-file" }
 ,{ "and" }
 ,{ "before" }
 ,{ "the" }
 ,{ "write" }
 ,{ "position," }
 ,{ "the" }
 ,{ "hole" }
 ,{ "is" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "unpredicted" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Link link_FSO = { & page , { 46 } } ;

Text b46 = { {
 { "File" }
 ,{ "system" }
 ,{ "operations" }
} , & fmt_h3 , & align_h3 } ;

Text b47 = { {
 { "getFileType()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "getFileUpdateTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "last" }
 ,{ "modification" }
 ,{ "time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "createFile()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "new" }
 ,{ "empty" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "deleteFile()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "createDir()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "new" }
 ,{ "empty" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "deleteDir()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "directory." }
 ,{ "If" }
 ,{ "the" }
 ,{ "recursive" , & fmt_text_b }
 ,{ "is" }
 ,{ "false," }
 ,{ "the" }
 ,{ "directory" }
 ,{ "must" }
 ,{ "be" }
 ,{ "empty." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "deleted" }
 ,{ "with" }
 ,{ "the" }
 ,{ "all" }
 ,{ "content" }
 ,{ "recursively." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "rename()" , & fmt_text_b }
 ,{ "renames" }
 ,{ "or" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "file" }
 ,{ "of" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "allow_overwrite" , & fmt_text_b }
 ,{ "flag" }
 ,{ "allows" }
 ,{ "overwriting" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "remove()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "ether" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file" }
 ,{ "or" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "empty" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "To" }
 ,{ "enumerate" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "a" }
 ,{ "some" }
 ,{ "\"directory" }
 ,{ "cursor\"" }
 ,{ "is" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "The" }
 ,{ "visible" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "members:" }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "file_name" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "len" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "type" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "error" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "error" }
 ,{ "code," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "cursor" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "init()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "to" }
 ,{ "enumerate" }
 ,{ "the" }
 ,{ "given" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "at" }
 ,{ "before-the-first" }
 ,{ "element" }
 ,{ "position." }
 ,{ "If" }
 ,{ "this" }
 ,{ "operation" }
 ,{ "fails," }
 ,{ "other" }
 ,{ "operations" }
 ,{ "should" }
 ,{ "not" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "next()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element," }
 ,{ "if" }
 ,{ "such" }
 ,{ "element" }
 ,{ "exists." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "moved," }
 ,{ "otherwise," }
 ,{ "if" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "already" }
 ,{ "at" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element," }
 ,{ "the" }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "exit()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "cursor." }
} , & fmt_text , & align_text } ;

Page page = { "page_Files" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FileSystem {

Text b0 = { {
 { "FileSystem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FileSystem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FileSystem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "FileSystem" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "standard" , & fmt_text_a }
 ,{ "list" , & fmt_text_a }
 ,{ "of" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "system" , & fmt_text_a }
 ,{ "operations" , & fmt_text_a }
 ,{ "on" }
 ,{ "the" }
 ,{ "local" }
 ,{ "file" }
 ,{ "system." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Methods" }
 ,{ "throw" }
 ,{ "exceptions" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "are" }
 ,{ "extra" }
 ,{ "operations," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "exec()" , & fmt_text_b }
 ,{ "runs" }
 ,{ "a" }
 ,{ "program." }
 ,{ "dir" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "working" }
 ,{ "directory," }
 ,{ "program" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "of" }
 ,{ "the" }
 ,{ "program," }
 ,{ "arg" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "command" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "pathOf()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "path" }
 ,{ "to" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path" }
 ,{ "using" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "class" }
 ,{ "DirCursor" , & fmt_text_b }
 ,{ "can" }
 ,{ "list" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "content." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "DirCursor" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "enumerator." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "FileSystem" , & fmt_text_b }
 ,{ "object," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "next()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "file." }
 ,{ "Initially" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "is" }
 ,{ "the" }
 ,{ "\"before-the-first\"" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "getFileName()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "(path" }
 ,{ "is" }
 ,{ "not" }
 ,{ "included)." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "getFileType()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "apply()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "These" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "built" }
 ,{ "upon" }
 ,{ "the" }
 ,{ "target" }
 ,{ "classes" }
 ,{ "Sys::FileSystem" , & fmt_text_b }
 ,{ "and" }
 ,{ "Sys::FileSystem::DirCursor" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysFileSystem.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_FileSystem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FileToMem {

Text b0 = { {
 { "FileToMem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FileToMem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FileToMem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "FileToMem" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "The" }
 ,{ "class" }
 ,{ "FileToMem" , & fmt_text_b }
 ,{ "loads" }
 ,{ "the" }
 ,{ "file" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory." }
 ,{ "It" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "class" }
 ,{ "ToMemBase" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file_name" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "second" }
 ,{ "max_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "length" }
 ,{ "limit." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ToMemBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "PartFileToMem" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "PartFileToMem" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "load" }
 ,{ "parts" }
 ,{ "of" }
 ,{ "a" }
 ,{ "file" }
 ,{ "into" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "buffer." }
 ,{ "This" }
 ,{ "class" }
 ,{ "loads" }
 ,{ "file" }
 ,{ "parts" }
 ,{ "sequentially." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Constructor" }
 ,{ "has" }
 ,{ "two" }
 ,{ "arguments:" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "getFileLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "getCurPos()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "getRestLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "part" }
 ,{ "after" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "more()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "room" }
 ,{ "after" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "read()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "next" }
 ,{ "file" }
 ,{ "part" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "or" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "part" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "range" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_FileToMem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FileToRead {

Text b0 = { {
 { "FileToRead" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FileToRead.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FileToRead.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "two" }
 ,{ "BinFileToRead" , & fmt_text_a }
 ,{ "classes" }
 ,{ "for" }
 ,{ "host" }
 ,{ "targets." }
 ,{ "These" }
 ,{ "classes" }
 ,{ "uses" }
 ,{ "host" }
 ,{ "OS" }
 ,{ "file" }
 ,{ "IO" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "read" }
 ,{ "raw" }
 ,{ "data" }
 ,{ "from" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "DefBinFileToRead" , & fmt_text_b }
 ,{ "access" }
 ,{ "files" }
 ,{ "of" }
 ,{ "the" }
 ,{ "host" }
 ,{ "file" }
 ,{ "system." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "VolumeBinFileToRead" , & fmt_text_b }
 ,{ "access" }
 ,{ "files" }
 ,{ "of" }
 ,{ "the" }
 ,{ "volume" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_FileToRead" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ForcedTimeout {

Text b0 = { {
 { "ForcedTimeout" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/TaskCore.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/TaskCore.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ForcedTimeout" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "simulate" }
 ,{ "a" }
 ,{ "timeout." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "useful" }
 ,{ "to" }
 ,{ "interrupt" }
 ,{ "a" }
 ,{ "blocking" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Lets" }
 ,{ "consider" }
 ,{ "an" }
 ,{ "example." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "In" }
 ,{ "this" }
 ,{ "example" }
 ,{ "we" }
 ,{ "create" }
 ,{ "the" }
 ,{ "ForcedTimeout" , & fmt_text_b }
 ,{ "object." }
 ,{ "Then" }
 ,{ "we" }
 ,{ "take" }
 ,{ "one" }
 ,{ "of" }
 ,{ "abort" }
 ,{ "functions," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "object," }
 ,{ "and" }
 ,{ "create" }
 ,{ "and" }
 ,{ "start" }
 ,{ "a" }
 ,{ "Ticker" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "ticker" , & fmt_text_b }
 ,{ "will" }
 ,{ "call" }
 ,{ "this" }
 ,{ "function" }
 ,{ "after" }
 ,{ "the" }
 ,{ "3" , & fmt_text_b }
 ,{ "seconds" }
 ,{ "delay." }
 ,{ "Abort" }
 ,{ "function" }
 ,{ "interrupts" }
 ,{ "any" }
 ,{ "call" }
 ,{ "of" }
 ,{ "a" }
 ,{ "timed" }
 ,{ "blocking" }
 ,{ "synchronization" }
 ,{ "object" }
 ,{ "method." }
 ,{ "In" }
 ,{ "the" }
 ,{ "example" }
 ,{ "we" }
 ,{ "are" }
 ,{ "using" }
 ,{ "the" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "." }
 ,{ "Without" }
 ,{ "ForcedTimeout" , & fmt_text_b }
 ,{ "the" }
 ,{ "call" }
 ,{ "sem.take(100_sec)" , & fmt_text_b }
 ,{ "would" }
 ,{ "block" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "for" }
 ,{ "100" , & fmt_text_b }
 ,{ "seconds." }
 ,{ "Abort" }
 ,{ "function" }
 ,{ "is" }
 ,{ "interrupting" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "after" }
 ,{ "3" , & fmt_text_b }
 ,{ "seconds." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Three" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "abort" }
 ,{ "function" }
 ,{ "are" }
 ,{ "called" }
 ,{ "from" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts:" }
 ,{ "function_abort()" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "task" }
 ,{ "context," }
 ,{ "function_abort_int()" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "function_abort_any()" , & fmt_text_b }
 ,{ "from" }
 ,{ "everywhere." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Only" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "blocking" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "interrupted." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "An" }
 ,{ "abort" }
 ,{ "function" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "forced" }
 ,{ "timeout" }
 ,{ "state" }
 ,{ "for" }
 ,{ "the" }
 ,{ "task." }
 ,{ "If" }
 ,{ "this" }
 ,{ "state" }
 ,{ "is" }
 ,{ "on," }
 ,{ "the" }
 ,{ "task" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "timed" }
 ,{ "blocked," }
 ,{ "and" }
 ,{ "any" }
 ,{ "timed" }
 ,{ "block" }
 ,{ "is" }
 ,{ "released." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "method" }
 ,{ "clear()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "clear" }
 ,{ "the" }
 ,{ "forced" }
 ,{ "timeout" }
 ,{ "state" }
 ,{ "from" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "this" }
 ,{ "state," }
 ,{ "before" }
 ,{ "is" }
 ,{ "is" }
 ,{ "cleared." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "ForcedTimeout" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "clears" }
 ,{ "the" }
 ,{ "forced" }
 ,{ "timeout" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Page page = { "page_ForcedTimeout" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Forget {

Text b0 = { {
 { "Forget" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/Forget.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/Forget.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "\"Forget\"" }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions," }
 ,{ "designed" }
 ,{ "to" }
 ,{ "clean" }
 ,{ "sensitive" }
 ,{ "data." }
 ,{ "Usually" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "called" }
 ,{ "in" }
 ,{ "class" }
 ,{ "destructors" }
 ,{ "to" }
 ,{ "cleanup" }
 ,{ "such" }
 ,{ "data." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "PrepareForget()" , & fmt_text_b }
 ,{ "cleans" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "or" }
 ,{ "the" }
 ,{ "given" }
 ,{ "array." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Forget()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "cleanup" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "It" }
 ,{ "calls" }
 ,{ "PrepareForget()" , & fmt_text_b }
 ,{ "first" }
 ,{ "and" }
 ,{ "OptimizeBarrier()" , & fmt_text_b }
 ,{ "next" }
 ,{ "to" }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "changes" }
 ,{ "are" }
 ,{ "really" }
 ,{ "made." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ForgetRange()" , & fmt_text_b }
 ,{ "forgets" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "OptimizeBarrier" }
} , & fmt_h2 , & align_h2 } ;

Text b7 = { {
 { "OptimizeBarrier()" , & fmt_text_b }
 ,{ "is" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "file" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
 ,{ "It" }
 ,{ "ensures" }
 ,{ "that" }
 ,{ "memory" }
 ,{ "modifications" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "given" }
 ,{ "block" }
 ,{ "are" }
 ,{ "really" }
 ,{ "made." }
 ,{ "The" }
 ,{ "best" }
 ,{ "way" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "to" }
 ,{ "hide" }
 ,{ "the" }
 ,{ "code" }
 ,{ "in" }
 ,{ "an" }
 ,{ "assemble" }
 ,{ "file" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "from" }
 ,{ "unwanted" }
 ,{ "optimizations." }
} , & fmt_text , & align_text } ;

Page page = { "page_Forget" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ForLoop {

Text b0 = { {
 { "ForLoop" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ForLoop.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ForLoop.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Some" }
 ,{ "tools" }
 ,{ "for" }
 ,{ "range-based" }
 ,{ "for" }
 ,{ "loop." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "IndLim" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "IndLim" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "run" }
 ,{ "over" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "indexes." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ForLoop" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "ForLoop" , & fmt_text_b }
 ,{ "can" }
 ,{ "use" }
 ,{ "a" }
 ,{ "cursor" }
 ,{ "to" }
 ,{ "run" }
 ,{ "over" }
 ,{ "its" }
 ,{ "sequence." }
} , & fmt_text , & align_text } ;

Page page = { "page_ForLoop" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FuncTask {

Text b0 = { {
 { "FuncTask" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/FuncTask.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/FuncTask.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "RunFuncTask" , & fmt_text_b }
 ,{ "runs" }
 ,{ "a" }
 ,{ "task," }
 ,{ "which" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "object." }
 ,{ "The" }
 ,{ "functor" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "created" }
 ,{ "by" }
 ,{ "the" }
 ,{ "spawned" }
 ,{ "task" }
 ,{ "and" }
 ,{ "then" }
 ,{ "it" }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "may" }
 ,{ "be" }
 ,{ "an" }
 ,{ "exit" }
 ,{ "function." }
 ,{ "It" }
 ,{ "is" }
 ,{ "called" }
 ,{ "as" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "task" }
 ,{ "exit" }
 ,{ "processing." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "always" }
 ,{ "called," }
 ,{ "even" }
 ,{ "if" }
 ,{ "the" }
 ,{ "task" }
 ,{ "run" }
 ,{ "failed." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "If" }
 ,{ "the" }
 ,{ "task" }
 ,{ "run" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "then" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Remaining" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "Task" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "task" }
 ,{ "the" }
 ,{ "following" }
 ,{ "class," }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Task" , & fmt_text_b }
 ,{ "," }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Page page = { "page_FuncTask" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Function {

Text b0 = { {
 { "Function" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Function.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Function.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Function" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "universal," }
 ,{ "lightweight" }
 ,{ "callback" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "last" }
 ,{ "property" }
 ,{ "is" }
 ,{ "essential" }
 ,{ "in" }
 ,{ "the" }
 ,{ "real-time" }
 ,{ "and" }
 ,{ "system" }
 ,{ "programming." }
 ,{ "Callback" , & fmt_text_b }
 ,{ "means" }
 ,{ "a" }
 ,{ "generalized" }
 ,{ "function" }
 ,{ "pointer." }
 ,{ "You" }
 ,{ "can" }
 ,{ "call" }
 ,{ "a" }
 ,{ "function" }
 ,{ "or" }
 ,{ "a" }
 ,{ "class" }
 ,{ "method" }
 ,{ "indirectly" }
 ,{ "using" }
 ,{ "a" }
 ,{ "callback" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "\"null\"" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "default" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "R" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "You" }
 ,{ "can" }
 ,{ "bind" }
 ,{ "a" }
 ,{ "Function" , & fmt_text_b }
 ,{ "to" }
 ,{ "a" }
 ,{ "static" }
 ,{ "function," }
 ,{ "a" }
 ,{ "static" }
 ,{ "function" }
 ,{ "with" }
 ,{ "a" }
 ,{ "handle" }
 ,{ "or" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "a" }
 ,{ "method." }
 ,{ "Make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "handle" }
 ,{ "or" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "alive" }
 ,{ "when" }
 ,{ "you" }
 ,{ "do" }
 ,{ "call" }
 ,{ "the" }
 ,{ "function" }
 ,{ "â€”" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "a" }
 ,{ "life-time" }
 ,{ "control" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Function" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "object" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Funchor" , & fmt_text_b }
 ,{ "base" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "static" }
 ,{ "method" }
 ,{ "FunctionOf" , & fmt_text_b }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "Function" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "non-copyable" }
 ,{ "base" }
 ,{ "type" }
 ,{ "Funchor_nocopy" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "following" }
 ,{ "pattern" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "Function" , & fmt_text_b }
 ,{ "s:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "You" }
 ,{ "may" }
 ,{ "bind" }
 ,{ "virtual" }
 ,{ "methods" }
 ,{ "in" }
 ,{ "Function" , & fmt_text_b }
 ,{ "s," }
 ,{ "the" }
 ,{ "virtualization" }
 ,{ "is" }
 ,{ "working" }
 ,{ "in" }
 ,{ "such" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "second" }
 ,{ "way" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "Function" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "convert" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "This" }
 ,{ "function" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type," }
 ,{ "specified" }
 ,{ "by" }
 ,{ "the" }
 ,{ "first" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "and" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "Funchor" , & fmt_text_b }
 ,{ "-derived" }
 ,{ "object." }
 ,{ "The" }
 ,{ "method" }
 ,{ "function()" , & fmt_text_b }
 ,{ "of" }
 ,{ "this" }
 ,{ "object" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "proxy" }
 ,{ "Function" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "original" }
 ,{ "functor." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "it" }
 ,{ "with" }
 ,{ "lambdas." }
} , & fmt_text , & align_text } ;

Page page = { "page_Function" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_FunctorType {

Text b0 = { {
 { "FunctorType" }
 ,{ "and" }
 ,{ "Functor" }
 ,{ "Init" }
 ,{ "Pattern" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FunctorType.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FunctorType.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Functor" , & fmt_text_b }
 ,{ "Init" , & fmt_text_b }
 ,{ "Pattern" , & fmt_text_b }
 ,{ "is" }
 ,{ "widely" }
 ,{ "used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "the" }
 ,{ "modern" }
 ,{ "C++" }
 ,{ "functors" }
 ,{ "are" }
 ,{ "commonly" }
 ,{ "used." }
 ,{ "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "often" }
 ,{ "do" }
 ,{ "it" }
 ,{ "in" }
 ,{ "the" }
 ,{ "following" }
 ,{ "manner:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "I.e." }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "not" }
 ,{ "used" }
 ,{ "directly" }
 ,{ "as" }
 ,{ "a" }
 ,{ "functor." }
 ,{ "Instead" }
 ,{ "we" }
 ,{ "create" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "object" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "function" }
 ,{ "from" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "then" }
 ,{ "call" }
 ,{ "it." }
 ,{ "FunctorTypeOf<FuncInit>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "typedef," }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "FunctorType.h" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "object." }
 ,{ "The" }
 ,{ "rule" }
 ,{ "is" }
 ,{ "simple:" }
 ,{ "if" }
 ,{ "the" }
 ,{ "type" }
 ,{ "FuncInit" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "FunctorType" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "this" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "type." }
 ,{ "Otherwise" }
 ,{ "FuncInit" , & fmt_text_b }
 ,{ "itself" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "So" }
 ,{ "if" }
 ,{ "the" }
 ,{ "FuncInit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"usual" }
 ,{ "functor\"," }
 ,{ "then" }
 ,{ "Call" , & fmt_text_b }
 ,{ "just" }
 ,{ "call" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "it." }
 ,{ "But" }
 ,{ "the" }
 ,{ "more" }
 ,{ "complicated" }
 ,{ "scenario" }
 ,{ "is" }
 ,{ "possible:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "In" }
 ,{ "this" }
 ,{ "example" }
 ,{ "the" }
 ,{ "\"heavy\"" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "created" }
 ,{ "inside" }
 ,{ "Call()" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "lightweight" }
 ,{ "initializer." }
 ,{ "The" }
 ,{ "functor" }
 ,{ "may" }
 ,{ "be" }
 ,{ "non-copyable" }
 ,{ "and" }
 ,{ "may" }
 ,{ "have" }
 ,{ "a" }
 ,{ "non-trivial" }
 ,{ "destructor" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "dispose" }
 ,{ "resources" }
 ,{ "temporary)." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "FunctorRef" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "pass" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "reference:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "concepts" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "FuncType" , & fmt_text_b }
 ,{ "and" }
 ,{ "FuncArgType" , & fmt_text_b }
 ,{ "to" }
 ,{ "determine," }
 ,{ "if" }
 ,{ "some" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "Functor" , & fmt_text_b }
 ,{ "Initializer" , & fmt_text_b }
 ,{ "to" }
 ,{ "produce" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "types" }
 ,{ "of" }
 ,{ "arguments" }
 ,{ "(and" }
 ,{ "return" }
 ,{ "value)." }
} , & fmt_text , & align_text } ;

Page page = { "page_FunctorType" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Gadgets {

Text b0 = { {
 { "Gadgets" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Gadget.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Gadget.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/gadget" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Gadgets" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "simple," }
 ,{ "helpful," }
 ,{ "widely-used" }
 ,{ "tools," }
 ,{ "available" }
 ,{ "from" }
 ,{ "the" }
 ,{ "single" }
 ,{ "include" }
 ,{ "file" }
 ,{ "Gadget.h" , & fmt_text_b }
 ,{ "." }
 ,{ "All" }
 ,{ "of" }
 ,{ "them" }
 ,{ "are" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "subfolder" }
 ,{ "/gadget" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Gadgets" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_GCDConst {

Text b0 = { {
 { "GCDConst" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/GCDConst.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/GCDConst.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "two" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "s" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "GCD" }
 ,{ "(great" }
 ,{ "common" }
 ,{ "divisor)" }
 ,{ "and" }
 ,{ "LCM" }
 ,{ "(least" }
 ,{ "common" }
 ,{ "multiple)" }
 ,{ "in" }
 ,{ "the" }
 ,{ "compile-time." }
 ,{ "Arguments" }
 ,{ "are" }
 ,{ "template" }
 ,{ "parameters" }
 ,{ "of" }
 ,{ "some" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Page page = { "page_GCDConst" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Handle {

Text b0 = { {
 { "Handle" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Handle.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Handle.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Handle" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "universal" }
 ,{ "object" }
 ,{ "handle." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "union" }
 ,{ "of" }
 ,{ "four" }
 ,{ "common" }
 ,{ "handle" }
 ,{ "types:" }
 ,{ "int" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "," }
 ,{ "void" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "function" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Page page = { "page_Handle" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HashFunction {

Text b0 = { {
 { "HashFunction" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/HashFunction.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/HashFunction.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "HashFunction" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "HashFunction" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "algorithm." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "and" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "provides" }
 ,{ "all" }
 ,{ "necessary" }
 ,{ "parts" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "required" }
 ,{ "functionality." }
 ,{ "An" }
 ,{ "abstract" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "processes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "block" }
 ,{ "of" }
 ,{ "raw" }
 ,{ "data" }
 ,{ "(i.e." }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "bytes)" }
 ,{ "into" }
 ,{ "a" }
 ,{ "\"message" }
 ,{ "digest\"," }
 ,{ "i.e." }
 ,{ "a" }
 ,{ "short" }
 ,{ "block" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "of" }
 ,{ "the" }
 ,{ "defined" }
 ,{ "length." }
 ,{ "A" }
 ,{ "good" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "has" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "properties." }
 ,{ "For" }
 ,{ "instance," }
 ,{ "it" }
 ,{ "is" }
 ,{ "difficult" }
 ,{ "to" }
 ,{ "construct" }
 ,{ "an" }
 ,{ "input" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "output." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "DigestLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "digest." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "BlockLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "\"block" }
 ,{ "length\"." }
 ,{ "It" }
 ,{ "is" }
 ,{ "some" }
 ,{ "internal" }
 ,{ "property" }
 ,{ "of" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "algorithm." }
 ,{ "Usually" }
 ,{ "an" }
 ,{ "input" }
 ,{ "data" }
 ,{ "is" }
 ,{ "sliced" }
 ,{ "on" }
 ,{ "blocks" }
 ,{ "of" }
 ,{ "the" }
 ,{ "defined" }
 ,{ "length" }
 ,{ "before" }
 ,{ "the" }
 ,{ "processing." }
 ,{ "The" }
 ,{ "tail" }
 ,{ "is" }
 ,{ "padded" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "whole" }
 ,{ "number" }
 ,{ "of" }
 ,{ "blocks." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "GetName()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "common" }
 ,{ "name," }
 ,{ "like" }
 ,{ "\"SHA1\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "HashFunction" , & fmt_text_b }
 ,{ "is" }
 ,{ "working" }
 ,{ "incrementally." }
 ,{ "To" }
 ,{ "calculate" }
 ,{ "the" }
 ,{ "output," }
 ,{ "the" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "reset" }
 ,{ "first." }
 ,{ "It" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "also" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "reset()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Destructor" }
 ,{ "does" }
 ,{ "clean" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "state" }
 ,{ "from" }
 ,{ "any" }
 ,{ "information," }
 ,{ "accumulated" }
 ,{ "during" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "calculation." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "next" }
 ,{ "chunk" }
 ,{ "of" }
 ,{ "the" }
 ,{ "input." }
 ,{ "Two" }
 ,{ "variants" }
 ,{ "are" }
 ,{ "provided:" }
 ,{ "with" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "length" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "single" }
 ,{ "PtrLen<const" , & fmt_text_b }
 ,{ "uint8>" , & fmt_text_b }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "finish()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "calculation," }
 ,{ "copies" }
 ,{ "the" }
 ,{ "output" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "resets" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "real" }
 ,{ "job" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "class" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "method" }
 ,{ "forget()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "clean" }
 ,{ "the" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Concept" }
 ,{ "HashType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "hash" }
 ,{ "classes" }
 ,{ "like" }
 ,{ "HashFunction<....>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "KeyedHashFunction" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "KeyedHashFunction" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a" }
 ,{ "keyed" }
 ,{ "message" }
 ,{ "digest" }
 ,{ "according" }
 ,{ "to" }
 ,{ "the" }
 ,{ "RFC" , & fmt_text_a }
 ,{ "2104" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "a" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "of" }
 ,{ "the" }
 ,{ "same" }
 ,{ "kind" }
 ,{ "as" }
 ,{ "the" }
 ,{ "class" }
 ,{ "HashFunction" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "argument" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "working" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "HashFunction" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "main" }
 ,{ "difference" }
 ,{ "is:" }
 ,{ "before" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "calculation" }
 ,{ "a" }
 ,{ "key" }
 ,{ "must" }
 ,{ "be" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
 ,{ "Otherwise" }
 ,{ "any" }
 ,{ "attempt" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "calculation" }
 ,{ "will" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception." }
 ,{ "To" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "key" }
 ,{ "the" }
 ,{ "method" }
 ,{ "key()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used." }
 ,{ "Or" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "key" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "following" }
 ,{ "guard" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "throw" }
 ,{ "the" }
 ,{ "\"no-hash-key\"" }
 ,{ "exception:" }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "The" }
 ,{ "method" }
 ,{ "unkey()" , & fmt_text_b }
 ,{ "cleans" }
 ,{ "the" }
 ,{ "key" }
 ,{ "information" }
 ,{ "from" }
 ,{ "the" }
 ,{ "object." }
 ,{ "It" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Concept" }
 ,{ "KeyedHashType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "keyed" }
 ,{ "hash" }
 ,{ "classes" }
 ,{ "like" }
 ,{ "KeyedHashFunction<....>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_HashFunction" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCoreTargets {

Text b0 = { {
 { "HCore" }
 ,{ "Targets" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "HCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "are" }
 ,{ "required" }
 ,{ "to" }
 ,{ "build" }
 ,{ "applications," }
 ,{ "running" }
 ,{ "under" }
 ,{ "governing" }
 ,{ "of" }
 ,{ "some" }
 ,{ "operating" }
 ,{ "system," }
 ,{ "like" }
 ,{ "Windows" }
 ,{ "or" }
 ,{ "Linux." }
 ,{ "Target" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "files," }
 ,{ "located" }
 ,{ "at" }
 ,{ "some" }
 ,{ "directory" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCORE_ROOT/Target" , & fmt_text_b }
 ,{ "directory." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "the" }
 ,{ "target" }
 ,{ "name." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "GNU-compatible" }
 ,{ "make-based" }
 ,{ "build" }
 ,{ "system." }
 ,{ "To" }
 ,{ "build" }
 ,{ "an" }
 ,{ "application" }
 ,{ "for" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "target" }
 ,{ "you" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "target" }
 ,{ "name" }
 ,{ "as" }
 ,{ "one" , & fmt_text_a }
 ,{ "of" , & fmt_text_a }
 ,{ "the" , & fmt_text_a }
 ,{ "build" , & fmt_text_a }
 ,{ "variable" , & fmt_text_a }
 ,{ "in" , & fmt_text_a }
 ,{ "a" , & fmt_text_a }
 ,{ "makefile" , & fmt_text_a }
 ,{ "." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "target" }
 ,{ "Vanilla-H" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "target" }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "for" }
 ,{ "any" }
 ,{ "host" }
 ,{ "target." }
 ,{ "If" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "new" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "target," }
 ,{ "you" }
 ,{ "may" }
 ,{ "start" }
 ,{ "from" }
 ,{ "this" }
 ,{ "\"vanilla\"" }
 ,{ "target." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "layout" }
 ,{ "for" }
 ,{ "required" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "target" }
 ,{ "files." }
 ,{ "You" }
 ,{ "may" }
 ,{ "add" }
 ,{ "additional" }
 ,{ "features" }
 ,{ "to" }
 ,{ "your" }
 ,{ "target" }
 ,{ "by" }
 ,{ "adding" }
 ,{ "extra" }
 ,{ "source" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Target" }
 ,{ "code" }
 ,{ "from" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "sys" , & fmt_text_b }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Sys" , & fmt_text_b }
 ,{ "(inside" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "CCore" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Target" }
 ,{ "code" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file" }
 ,{ "Quick.h" , & fmt_text_b }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Quick" , & fmt_text_b }
 ,{ "(inside" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "CCore" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Makefile" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "Makefile" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "CCore.a" , & fmt_text_b }
 ,{ "library." }
 ,{ "It's" }
 ,{ "standard" }
 ,{ "and" }
 ,{ "looks" }
 ,{ "like" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "To" }
 ,{ "support" }
 ,{ "GUI" }
 ,{ "development" }
 ,{ "add" }
 ,{ "$(CCORE_ROOT)/Desktop/CCore/src" , & fmt_text_b }
 ,{ "in" }
 ,{ "SRC_PATH_LIST" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Makefile.tools" , & fmt_text_b }
 ,{ "defines" }
 ,{ "toolset" }
 ,{ "to" }
 ,{ "build" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "target" }
 ,{ "applications." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "(" }
 ,{ "WIN32" , & fmt_text_b }
 ,{ "example)" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "define" }
 ,{ "here" }
 ,{ "the" }
 ,{ "following" }
 ,{ "variables:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "ECHO" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "echo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "FIND" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "find" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "MKDIR" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "mkdir" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "CAT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "cat" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "TOUCH" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "touch" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "CC" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "C++" }
 ,{ "compiler." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "LD" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "linker." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "AS" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "assembler." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "AR" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "librarian." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "RM" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "file" }
 ,{ "delete" }
 ,{ "command." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "CCOPT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "compiler." }
 ,{ "Among" }
 ,{ "other" }
 ,{ "they" }
 ,{ "must" }
 ,{ "specify" }
 ,{ "directories" }
 ,{ "to" }
 ,{ "search" }
 ,{ "include" }
 ,{ "files." }
 ,{ "The" }
 ,{ "order" }
 ,{ "of" }
 ,{ "directories" }
 ,{ "is:" }
 ,{ "target" }
 ,{ "include" }
 ,{ "path," }
 ,{ "HCore" , & fmt_text_b }
 ,{ "include" }
 ,{ "path," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "include" }
 ,{ "paths." }
 ,{ "To" }
 ,{ "support" }
 ,{ "GUI" }
 ,{ "development" }
 ,{ "add" }
 ,{ "-I$(CCORE_ROOT)/Desktop" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "ASOPT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "assembler." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "LDOPT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "linker." }
 ,{ "Linker" }
 ,{ "options" }
 ,{ "must" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "CCore.a" , & fmt_text_b }
 ,{ "library" }
 ,{ "to" }
 ,{ "be" }
 ,{ "linked." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "To" }
 ,{ "give" }
 ,{ "a" }
 ,{ "path" }
 ,{ "from" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "file" }
 ,{ "tree," }
 ,{ "you" }
 ,{ "should" }
 ,{ "use" }
 ,{ "the" }
 ,{ "variable" }
 ,{ "CCORE_ROOT" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "To" }
 ,{ "compile" }
 ,{ "a" }
 ,{ ".cpp" , & fmt_text_b }
 ,{ "source" }
 ,{ "file" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "To" }
 ,{ "generate" }
 ,{ "a" }
 ,{ "dependency" }
 ,{ "file" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "To" }
 ,{ "compile" }
 ,{ "an" }
 ,{ ".asm" , & fmt_text_b }
 ,{ "source" }
 ,{ "file" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "To" }
 ,{ "link" }
 ,{ "an" }
 ,{ "application" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "To" }
 ,{ "build" }
 ,{ "a" }
 ,{ "library" }
 ,{ "the" }
 ,{ "following" }
 ,{ "commands" }
 ,{ "are" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Test" }
 ,{ "support" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "CCore/test" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "for" }
 ,{ "target-specific" }
 ,{ "tests." }
 ,{ "The" }
 ,{ "file" }
 ,{ "names" }
 ,{ "here" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "form:" }
 ,{ "test6XXX.NNN.cpp" , & fmt_text_b }
 ,{ "." }
 ,{ "6XXX" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "test" }
 ,{ "number," }
 ,{ "starts" }
 ,{ "from" }
 ,{ "6001" , & fmt_text_b }
 ,{ "." }
 ,{ "NNN" , & fmt_text_b }
 ,{ "is" }
 ,{ "some" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "test." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Makefile" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "test" , & fmt_text_b }
 ,{ "directory" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "target" }
 ,{ "test" }
 ,{ "application." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "standard" }
 ,{ "form" }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "main.cpp" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "test" , & fmt_text_b }
 ,{ "directory" }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "file" }
 ,{ "of" }
 ,{ "the" }
 ,{ "target" }
 ,{ "test" }
 ,{ "application." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "test" }
 ,{ "edit" }
 ,{ "the" }
 ,{ "test" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Extra" }
 ,{ "features" }
} , & fmt_h4 , & align_h4 } ;

Text b35 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "most" }
 ,{ "desired" }
 ,{ "extra" }
 ,{ "features" }
 ,{ "any" }
 ,{ "well-designed" }
 ,{ "target" }
 ,{ "must" }
 ,{ "provide:" }
 ,{ "the" }
 ,{ "fast" }
 ,{ "and" }
 ,{ "quality" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generator," }
 ,{ "the" }
 ,{ "fast" }
 ,{ "integer" }
 ,{ "arithmetic" }
 ,{ "and" }
 ,{ "the" }
 ,{ "fast" }
 ,{ "cryptography." }
 ,{ "The" }
 ,{ "modern" }
 ,{ "CPU" }
 ,{ "and" }
 ,{ "SoC" }
 ,{ "often" }
 ,{ "has" }
 ,{ "a" }
 ,{ "hardware" }
 ,{ "support" }
 ,{ "for" }
 ,{ "these" }
 ,{ "tasks." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "If" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "files" }
 ,{ "are" }
 ,{ "absent," }
 ,{ "the" }
 ,{ "default" }
 ,{ "implementation" }
 ,{ "will" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCoreTargets" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_PlanInit_CCore {

Text b0 = { {
 { "HCore" }
 ,{ "PlanInit_CCore" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PlanInit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PlanInit_CCore.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "target" }
 ,{ "plan" , & fmt_text_a }
 ,{ "initalization" , & fmt_text_a }
 ,{ "node." }
 ,{ "The" }
 ,{ "node" }
 ,{ "tag" }
 ,{ "is" }
 ,{ "\"CCore\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "In" }
 ,{ "this" }
 ,{ "example" }
 ,{ "the" }
 ,{ "required" }
 ,{ "dependencies" }
 ,{ "are" }
 ,{ "included." }
 ,{ "A" }
 ,{ "target" }
 ,{ "may" }
 ,{ "have" }
 ,{ "additional" }
 ,{ "ones." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_PlanInit_CCore" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysAbort {

Text b0 = { {
 { "HCore" }
 ,{ "SysAbort" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysAbort.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysAbort.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "target" }
 ,{ "dependent" }
 ,{ "process" }
 ,{ "abort" }
 ,{ "function" }
 ,{ "AbortProcess()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "a" }
 ,{ "0-priority" }
 ,{ "function." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "required" }
 ,{ "some" }
 ,{ "initialization," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "CCORE_INITPRI_0" , & fmt_text_b }
 ,{ "priority" , & fmt_text_a }
 ,{ "qualifier" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysAbort" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysCon {

Text b0 = { {
 { "HCore" }
 ,{ "SysCon" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysCon.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysCon.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "supports" }
 ,{ "console" }
 ,{ "input-output" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ConWrite()" , & fmt_text_b }
 ,{ "outputs" }
 ,{ "the" }
 ,{ "given" }
 ,{ "string" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "a" }
 ,{ "0-priority" }
 ,{ "function." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "required" }
 ,{ "some" }
 ,{ "initialization," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "CCORE_INITPRI_0" , & fmt_text_b }
 ,{ "priority" , & fmt_text_a }
 ,{ "qualifier" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "structure" }
 ,{ "ConRead" , & fmt_text_b }
 ,{ "supports" }
 ,{ "the" }
 ,{ "console" }
 ,{ "reading." }
 ,{ "To" }
 ,{ "read" }
 ,{ "characters" }
 ,{ "from" }
 ,{ "the" }
 ,{ "console," }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure," }
 ,{ "initialize" }
 ,{ "it" }
 ,{ "and" }
 ,{ "then" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "read" }
 ,{ "the" }
 ,{ "input" }
 ,{ "character" }
 ,{ "stream." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
 ,{ "The" }
 ,{ "reader" }
 ,{ "implements" }
 ,{ "\"non-buffered" }
 ,{ "read" }
 ,{ "without" }
 ,{ "echo\"." }
 ,{ "It" }
 ,{ "means," }
 ,{ "if" }
 ,{ "the" }
 ,{ "console" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty," }
 ,{ "the" }
 ,{ "read" }
 ,{ "operations" }
 ,{ "do" }
 ,{ "not" }
 ,{ "block." }
 ,{ "If" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "they" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "input." }
 ,{ "No" }
 ,{ "echo" }
 ,{ "is" }
 ,{ "printed." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "init()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "initialization." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "exit()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "uninitialization." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "read()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "read" }
 ,{ "the" }
 ,{ "input" }
 ,{ "stream" }
 ,{ "into" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "third" }
 ,{ "variant" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "time_scope" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "All" }
 ,{ "functions" }
 ,{ "return" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "type" }
 ,{ "IOResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "zero," }
 ,{ "then" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "characters," }
 ,{ "copied" }
 ,{ "to" }
 ,{ "the" }
 ,{ "buffer." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "may" }
 ,{ "block" }
 ,{ "infinitely." }
 ,{ "The" }
 ,{ "second" }
 ,{ "and" }
 ,{ "third" }
 ,{ "â€”" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "timeout." }
 ,{ "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "must" }
 ,{ "either" }
 ,{ "return" }
 ,{ "a" }
 ,{ "error" }
 ,{ "or" }
 ,{ "a" }
 ,{ "character(s)." }
 ,{ "The" }
 ,{ "second" }
 ,{ "and" }
 ,{ "third" }
 ,{ "may" }
 ,{ "return" }
 ,{ "neither" }
 ,{ "error," }
 ,{ "nor" }
 ,{ "character," }
 ,{ "if" }
 ,{ "the" }
 ,{ "user" }
 ,{ "did" }
 ,{ "not" }
 ,{ "hit" }
 ,{ "any" }
 ,{ "key" }
 ,{ "during" }
 ,{ "the" }
 ,{ "given" }
 ,{ "time" }
 ,{ "period." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysCon" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysError {

Text b0 = { {
 { "HCore" }
 ,{ "SysError" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysError.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysError.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "reports" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "error" }
 ,{ "codes." }
 ,{ "These" }
 ,{ "codes" }
 ,{ "can" }
 ,{ "be" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "text" }
 ,{ "messages." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "enumeration" }
 ,{ "ErrorType" , & fmt_text_b }
 ,{ "represents" }
 ,{ "error" }
 ,{ "codes." }
 ,{ "It" }
 ,{ "may" }
 ,{ "have" }
 ,{ "a" }
 ,{ "base" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "(usually" }
 ,{ "int" , & fmt_text_b }
 ,{ ")." }
 ,{ "All" }
 ,{ "target" }
 ,{ "functions" }
 ,{ "report" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "this" }
 ,{ "enumeration." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "NoError" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"no-error\"" }
 ,{ "code" }
 ,{ "and" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "equal" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "structure" }
 ,{ "ErrorDesc" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "convert" }
 ,{ "a" }
 ,{ "error" }
 ,{ "code" }
 ,{ "to" }
 ,{ "the" }
 ,{ "text" }
 ,{ "message." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "fields" }
 ,{ "str" , & fmt_text_b }
 ,{ "and" }
 ,{ "len" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "text" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "init()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "structure." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "text" }
 ,{ "message." }
 ,{ "It" }
 ,{ "may" }
 ,{ "or" }
 ,{ "may" }
 ,{ "not" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "copy" }
 ,{ "a" }
 ,{ "text" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "used," }
 ,{ "then" }
 ,{ "the" }
 ,{ "text" }
 ,{ "is" }
 ,{ "a" }
 ,{ "static" }
 ,{ "text." }
 ,{ "If" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "large" }
 ,{ "enough," }
 ,{ "the" }
 ,{ "message" }
 ,{ "may" }
 ,{ "be" }
 ,{ "truncated" }
 ,{ "or" }
 ,{ "the" }
 ,{ "function" }
 ,{ "may" }
 ,{ "fail." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "success." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysError" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysFile {

Text b0 = { {
 { "HCore" }
 ,{ "SysFile" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "contains" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "file" }
 ,{ "access" }
 ,{ "tools." }
 ,{ "These" }
 ,{ "tools" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "general" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operation" , & fmt_text_a }
 ,{ "set" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "These" , & fmt_text_Alert }
 ,{ "structures" , & fmt_text_Alert }
 ,{ "uses" , & fmt_text_Alert }
 ,{ "types" , & fmt_text_Alert }
 ,{ "and" , & fmt_text_Alert }
 ,{ "constants" , & fmt_text_Alert }
 ,{ "from" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "GenFile.h" , & fmt_text_Alert }
 ,{ "," , & fmt_text_Alert }
 ,{ "this" , & fmt_text_Alert }
 ,{ "includes" , & fmt_text_Alert }
 ,{ "error" , & fmt_text_Alert }
 ,{ "codes." , & fmt_text_Alert }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Classical" }
 ,{ "file" }
 ,{ "access" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "The" }
 ,{ "structure" }
 ,{ "File" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "classical" }
 ,{ "file" }
 ,{ "access." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "open" }
 ,{ "the" }
 ,{ "required" }
 ,{ "file" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "file" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "open()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance" }
 ,{ "and" }
 ,{ "prepares" }
 ,{ "it" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "flags" }
 ,{ "is" }
 ,{ "described" }
 ,{ "in" }
 ,{ "the" }
 ,{ "general" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operation" , & fmt_text_a }
 ,{ "set" , & fmt_text_a }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "close()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "first" }
 ,{ "variant" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "return" }
 ,{ "operation" }
 ,{ "error(s)." }
 ,{ "If" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "preserved," }
 ,{ "even" }
 ,{ "if" }
 ,{ "it" }
 ,{ "was" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
 ,{ "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "does" }
 ,{ "not" }
 ,{ "report" }
 ,{ "any" }
 ,{ "errors" }
 ,{ "and" }
 ,{ "does" }
 ,{ "not" }
 ,{ "preserve" }
 ,{ "the" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "write()" , & fmt_text_b }
 ,{ "writes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "byte" }
 ,{ "range" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "file" }
 ,{ "position" }
 ,{ "is" }
 ,{ "updated." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "IOResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "have" }
 ,{ "been" }
 ,{ "written" }
 ,{ "and" }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "file" }
 ,{ "may" }
 ,{ "be" }
 ,{ "extended" }
 ,{ "by" }
 ,{ "this" }
 ,{ "operation." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful," }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "length" }
 ,{ "should" }
 ,{ "be" }
 ,{ "equal" }
 ,{ "the" }
 ,{ "input" }
 ,{ "length." }
 ,{ "Other" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "not" }
 ,{ "recommended." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Write" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "read()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "byte" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file" }
 ,{ "to" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "file" }
 ,{ "position" }
 ,{ "is" }
 ,{ "updated." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "IOResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "have" }
 ,{ "been" }
 ,{ "red" }
 ,{ "and" }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful," }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "length" }
 ,{ "should" }
 ,{ "be" }
 ,{ "equal" }
 ,{ "minimum" }
 ,{ "of" }
 ,{ "the" }
 ,{ "input" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "after" }
 ,{ "the" }
 ,{ "current" }
 ,{ "file" }
 ,{ "position" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "file." }
 ,{ "Other" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "not" }
 ,{ "recommended." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Read" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure" }
 ,{ "PosResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "pos" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "pos" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file," }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Pos" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "getPos()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure" }
 ,{ "PosResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "pos" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "pos" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "position," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Pos" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "setPos()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "position" }
 ,{ "is" }
 ,{ "after" }
 ,{ "the" }
 ,{ "end-of-file," }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "undefined." }
 ,{ "If" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "file," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "write()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Pos" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Alternative" }
 ,{ "file" }
 ,{ "access" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "The" }
 ,{ "structure" }
 ,{ "AltFile" , & fmt_text_b }
 ,{ "implements" }
 ,{ "an" }
 ,{ "alternative" }
 ,{ "file" }
 ,{ "access." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "open" }
 ,{ "the" }
 ,{ "required" }
 ,{ "file" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "file" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "open()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance" }
 ,{ "and" }
 ,{ "prepares" }
 ,{ "it" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Result" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "This" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "file" }
 ,{ "has" }
 ,{ "no" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "flags" }
 ,{ "is" }
 ,{ "described" }
 ,{ "in" }
 ,{ "the" }
 ,{ "general" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operation" , & fmt_text_a }
 ,{ "set" , & fmt_text_a }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "close()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "first" }
 ,{ "variant" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "return" }
 ,{ "operation" }
 ,{ "error(s)." }
 ,{ "If" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "preserved," }
 ,{ "even" }
 ,{ "if" }
 ,{ "it" }
 ,{ "was" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
 ,{ "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "does" }
 ,{ "not" }
 ,{ "report" }
 ,{ "any" }
 ,{ "errors" }
 ,{ "and" }
 ,{ "does" }
 ,{ "not" }
 ,{ "preserve" }
 ,{ "the" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "write()" , & fmt_text_b }
 ,{ "writes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "byte" }
 ,{ "range" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "file" }
 ,{ "position" }
 ,{ "to" }
 ,{ "write" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "may" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Result" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "new" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Write" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "read()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "byte" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file" }
 ,{ "to" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "file" }
 ,{ "position" }
 ,{ "to" }
 ,{ "read" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "read" }
 ,{ "range" }
 ,{ "must" }
 ,{ "not" }
 ,{ "cross" }
 ,{ "end-of-file." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Read" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Async" }
 ,{ "file" }
 ,{ "access" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "The" }
 ,{ "structure" }
 ,{ "AltFile" , & fmt_text_b }
 ,{ "implements" }
 ,{ "an" }
 ,{ "alternative" }
 ,{ "file" }
 ,{ "access" }
 ,{ "in" }
 ,{ "an" }
 ,{ "asynchronous" }
 ,{ "manner." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "open" }
 ,{ "the" }
 ,{ "required" }
 ,{ "file" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "file" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "open()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance" }
 ,{ "and" }
 ,{ "prepares" }
 ,{ "it" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Result" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "file_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "This" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "file" }
 ,{ "has" }
 ,{ "no" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "flags" }
 ,{ "is" }
 ,{ "described" }
 ,{ "in" }
 ,{ "the" }
 ,{ "general" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operation" , & fmt_text_a }
 ,{ "set" , & fmt_text_a }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "close()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "first" }
 ,{ "variant" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "return" }
 ,{ "operation" }
 ,{ "error(s)." }
 ,{ "If" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "preserved," }
 ,{ "even" }
 ,{ "if" }
 ,{ "it" }
 ,{ "was" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
 ,{ "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "does" }
 ,{ "not" }
 ,{ "report" }
 ,{ "any" }
 ,{ "errors" }
 ,{ "and" }
 ,{ "does" }
 ,{ "not" }
 ,{ "preserve" }
 ,{ "the" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "flag." }
 ,{ "All" }
 ,{ "pending" }
 ,{ "file" }
 ,{ "read/write" }
 ,{ "operations" }
 ,{ "must" }
 ,{ "be" }
 ,{ "finished" }
 ,{ "before" }
 ,{ "the" }
 ,{ "call" }
 ,{ "of" }
 ,{ "this" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "testRead()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "the" }
 ,{ "read" }
 ,{ "position." }
 ,{ "If" }
 ,{ "the" }
 ,{ "read" }
 ,{ "range" }
 ,{ "does" }
 ,{ "not" }
 ,{ "fit" }
 ,{ "into" }
 ,{ "the" }
 ,{ "file" }
 ,{ "range" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "error." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Read" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "setWrite()" , & fmt_text_b }
 ,{ "prepares" }
 ,{ "the" }
 ,{ "file" }
 ,{ "write" }
 ,{ "operation." }
 ,{ "It" }
 ,{ "checks" }
 ,{ "the" }
 ,{ "write" }
 ,{ "range" }
 ,{ "for" }
 ,{ "overflow" }
 ,{ "and" }
 ,{ "increases" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "length" }
 ,{ "field," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "to" }
 ,{ "be" }
 ,{ "extended." }
 ,{ "This" }
 ,{ "method" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "before" }
 ,{ "the" }
 ,{ "startWrite()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Write" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "startRead()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "read" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "async" }
 ,{ "token." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "this" }
 ,{ "token" }
 ,{ "is" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Async" , & fmt_text_b }
 ,{ "and" }
 ,{ "usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "some" }
 ,{ "structure" }
 ,{ "(" }
 ,{ "AsyncState" , & fmt_text_b }
 ,{ ")." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "RWResult" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "pending" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "field" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "pending," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "no" }
 ,{ "other" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "required." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "pending," }
 ,{ "you" }
 ,{ "must" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "and" }
 ,{ "then" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "completeRead()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Read" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "completeRead()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "read" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "token," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "original" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "startRead()" , & fmt_text_b }
 ,{ "call." }
 ,{ "This" }
 ,{ "method" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "only" }
 ,{ "after" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "async" }
 ,{ "token" }
 ,{ "is" }
 ,{ "reported" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Read" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "startWrite()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "write" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "async" }
 ,{ "token." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "this" }
 ,{ "token" }
 ,{ "is" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Async" , & fmt_text_b }
 ,{ "and" }
 ,{ "usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "some" }
 ,{ "structure" }
 ,{ "(" }
 ,{ "AsyncState" , & fmt_text_b }
 ,{ ")." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "RWResult" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "pending" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "field" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "pending," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "no" }
 ,{ "other" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "required." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "pending," }
 ,{ "you" }
 ,{ "must" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "and" }
 ,{ "then" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "completeWrite()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Write" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "completeWrite()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "write" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "token," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "original" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "startWrite()" , & fmt_text_b }
 ,{ "call." }
 ,{ "This" }
 ,{ "method" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "only" }
 ,{ "after" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "async" }
 ,{ "token" }
 ,{ "is" }
 ,{ "reported" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "available" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "has" }
 ,{ "been" }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "Open_Write" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "any" }
 ,{ "read" }
 ,{ "or" }
 ,{ "write" }
 ,{ "operation" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "MaxRWLen" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "should" }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "like" }
 ,{ "1" }
 ,{ "MByte." }
 ,{ "The" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "in" }
 ,{ "use" }
 ,{ "during" }
 ,{ "the" }
 ,{ "whole" }
 ,{ "read" }
 ,{ "or" }
 ,{ "write" }
 ,{ "operation," }
 ,{ "so" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "held" }
 ,{ "intact" }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "complete." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pattern" }
 ,{ "to" }
 ,{ "do" }
 ,{ "a" }
 ,{ "read" }
 ,{ "operation:" }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pattern" }
 ,{ "to" }
 ,{ "do" }
 ,{ "a" }
 ,{ "write" }
 ,{ "operation:" }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "async" }
 ,{ "tokens" }
 ,{ "there" }
 ,{ "is" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "AsyncFileWait" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "This" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pool" }
 ,{ "of" }
 ,{ "tokens." }
 ,{ "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "tokens" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure" }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "async" }
 ,{ "file" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "init()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "async" }
 ,{ "pool" }
 ,{ "size." }
 ,{ "This" }
 ,{ "value" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "constant" }
 ,{ "MaxAsyncs" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "error." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "pool" }
 ,{ "contains" }
 ,{ "async_count" , & fmt_text_b }
 ,{ "async" }
 ,{ "tokens." }
 ,{ "They" }
 ,{ "are" }
 ,{ "indexed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "numbers" }
 ,{ "from" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,async_count)" , & fmt_text_b }
 ,{ "." }
 ,{ "Some" }
 ,{ "of" }
 ,{ "them" }
 ,{ "comprise" }
 ,{ "the" }
 ,{ "\"wait" }
 ,{ "set\"." }
 ,{ "Initially" }
 ,{ "the" }
 ,{ "set" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "exit()" , & fmt_text_b }
 ,{ "uninitializes" }
 ,{ "the" }
 ,{ "instance." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "getAsync()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "token" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "addWait()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "token" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "to" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "was" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "already" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "delWait()" , & fmt_text_b }
 ,{ "removes" }
 ,{ "the" }
 ,{ "token" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "from" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "was" }
 ,{ "excluded" }
 ,{ "from" }
 ,{ "the" }
 ,{ "set," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "already" }
 ,{ "not" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "wait()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "while" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "tokens" }
 ,{ "from" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "i.e." }
 ,{ "some" }
 ,{ "async" }
 ,{ "file" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "started" }
 ,{ "with" }
 ,{ "this" }
 ,{ "token" }
 ,{ "and" }
 ,{ "it" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "type" }
 ,{ "WaitResult" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "token" }
 ,{ "been" }
 ,{ "finished," }
 ,{ "or" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negative" }
 ,{ "special" }
 ,{ "values." }
 ,{ "Two" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "accepts" }
 ,{ "timeouts" }
 ,{ "of" }
 ,{ "different" }
 ,{ "kinds:" }
 ,{ "as" }
 ,{ "a" }
 ,{ "MSec" , & fmt_text_b }
 ,{ "or" }
 ,{ "as" }
 ,{ "a" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "special" }
 ,{ "return" }
 ,{ "values" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "meanings:" }
} , & fmt_text , & align_text } ;

Text b43_0 = { {
 { "Wait_error" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "function" }
 ,{ "has" }
 ,{ "failed" }
 ,{ "for" }
 ,{ "some" }
 ,{ "reason," }
} , & fmt_list , & align_list } ;

Text b43_1 = { {
 { "Wait_timeout" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "is" }
 ,{ "terminated" }
 ,{ "by" }
 ,{ "timeout," }
} , & fmt_list , & align_list } ;

Text b43_2 = { {
 { "Wait_interrupt" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "is" }
 ,{ "terminated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "interrupt()." , & fmt_list_b }
} , & fmt_list , & align_list } ;

TextList b43 = { {
 { '1.' , { { & b43_0 , null , ItemInner , ItemOuter } } }
 ,{ '2.' , { { & b43_1 , null , ItemInner , ItemOuter } } }
 ,{ '3.' , { { & b43_2 , null , ItemInner , ItemOuter } } }
} } ;

Text b44 = { {
 { "interrupt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "method." }
 ,{ "This" }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "interrupt" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "Unlike" }
 ,{ "other" }
 ,{ "methods," }
 ,{ "this" }
 ,{ "one" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "parallel" }
 ,{ "to" }
 ,{ "other" }
 ,{ "method" }
 ,{ "calls." }
 ,{ "This" }
 ,{ "method" }
 ,{ "has" }
 ,{ "a" }
 ,{ "\"semaphore" }
 ,{ "behavior\"," }
 ,{ "i.e." }
 ,{ "several" }
 ,{ "calls" }
 ,{ "provide" }
 ,{ "several" }
 ,{ "interrupts." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysFile" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_list , outer_list , back_list }
 ,{ & b44 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysFileSystem {

Text b0 = { {
 { "HCore" }
 ,{ "SysFileSystem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysFileSystem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysFileSystem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations." }
 ,{ "These" }
 ,{ "operations" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "general" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operation" , & fmt_text_a }
 ,{ "set" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "perform" }
 ,{ "a" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operation" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "FileSystem" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "this" }
 ,{ "structure" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "desired" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
 ,{ "It's" }
 ,{ "very" }
 ,{ "likely," }
 ,{ "that" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "no" }
 ,{ "data" }
 ,{ "fields." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "declared" }
 ,{ "static." }
 ,{ "But" }
 ,{ "you" }
 ,{ "should" }
 ,{ "not" }
 ,{ "use" }
 ,{ "them" }
 ,{ "as" }
 ,{ "such." }
 ,{ "This" , & fmt_text_Alert }
 ,{ "structure" , & fmt_text_Alert }
 ,{ "uses" , & fmt_text_Alert }
 ,{ "types" , & fmt_text_Alert }
 ,{ "and" , & fmt_text_Alert }
 ,{ "constants" , & fmt_text_Alert }
 ,{ "from" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "GenFile.h" , & fmt_text_Alert }
 ,{ "," , & fmt_text_Alert }
 ,{ "this" , & fmt_text_Alert }
 ,{ "includes" , & fmt_text_Alert }
 ,{ "error" , & fmt_text_Alert }
 ,{ "codes." , & fmt_text_Alert }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "init()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "exit()" , & fmt_text_b }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getFileType()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "specifies" }
 ,{ "a" }
 ,{ "file" }
 ,{ "or" }
 ,{ "a" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure" }
 ,{ "TypeResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "type" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getFileUpdateTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "last" }
 ,{ "modification" }
 ,{ "time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "specifies" }
 ,{ "a" }
 ,{ "file" }
 ,{ "or" }
 ,{ "a" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure" }
 ,{ "CmpTimeResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "time" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "time" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "requested" }
 ,{ "time," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "createFile()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "new" }
 ,{ "empty" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "deleteFile()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "createDir()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "deleteDir()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "recursion" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "must" }
 ,{ "be" }
 ,{ "empty." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "deleted" }
 ,{ "with" }
 ,{ "all" }
 ,{ "its" }
 ,{ "content," }
 ,{ "including" }
 ,{ "nested" }
 ,{ "subdirectories." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "rename()" , & fmt_text_b }
 ,{ "renames" }
 ,{ "or" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "file" }
 ,{ "of" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "allow_overwrite" , & fmt_text_b }
 ,{ "flag" }
 ,{ "allows" }
 ,{ "overwriting" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "remove()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "ether" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file" }
 ,{ "or" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "empty" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "exec()" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operation." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "extra" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "methods" }
 ,{ "starts" }
 ,{ "a" }
 ,{ "new" }
 ,{ "process." }
 ,{ "The" }
 ,{ "dir" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "working" }
 ,{ "directory" }
 ,{ "of" }
 ,{ "the" }
 ,{ "new" }
 ,{ "process," }
 ,{ "the" }
 ,{ "program" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "executable" }
 ,{ "file" }
 ,{ "name," }
 ,{ "the" }
 ,{ "arg" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "command" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "pathOf()" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "extra" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "method" }
 ,{ "builds" }
 ,{ "a" }
 ,{ "normalized" }
 ,{ "full" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "buf" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "storage" }
 ,{ "buffer" }
 ,{ "for" }
 ,{ "the" }
 ,{ "result." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "string" }
 ,{ "is" }
 ,{ "zero-terminated." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure" }
 ,{ "PathOfResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "path" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "path," }
 ,{ "the" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "DirCursor" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structure." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "iterate" }
 ,{ "over" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "a" }
 ,{ "directory." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "file_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "for" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "The" }
 ,{ "only" }
 ,{ "file" }
 ,{ "part" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "here." }
 ,{ "The" }
 ,{ "name" }
 ,{ "is" }
 ,{ "not" }
 ,{ "zero-terminated." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "error" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code" }
 ,{ "after" }
 ,{ "method" }
 ,{ "calls" }
 ,{ "(except" }
 ,{ "exit()" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "init()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "field" }
 ,{ "error" , & fmt_text_b }
 ,{ "will" }
 ,{ "contain" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "iterator" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "the" }
 ,{ "position" }
 ,{ "\"before" }
 ,{ "the" }
 ,{ "first\"." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "exit()" , & fmt_text_b }
 ,{ "uninitializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "No" }
 ,{ "errors" }
 ,{ "are" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "next()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "file" }
 ,{ "(or" }
 ,{ "directory)" }
 ,{ "in" }
 ,{ "the" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "such" }
 ,{ "file" }
 ,{ "is" }
 ,{ "found." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "or" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "more" }
 ,{ "files." }
 ,{ "The" }
 ,{ "field" }
 ,{ "error" , & fmt_text_b }
 ,{ "will" }
 ,{ "contain" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "Fields" }
 ,{ "file_name" , & fmt_text_b }
 ,{ "," }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "type" , & fmt_text_b }
 ,{ "contain" }
 ,{ "file" }
 ,{ "information," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "found." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysFileSystem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysLaunchPath {

Text b0 = { {
 { "HCore" }
 ,{ "SysLaunchPath" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysLaunchPath.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysLaunchPath.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "obtain" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "running" }
 ,{ "executable." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "call" }
 ,{ "the" }
 ,{ "function" }
 ,{ "you" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "length." }
 ,{ "The" }
 ,{ "path" }
 ,{ "is" }
 ,{ "copied" }
 ,{ "to" }
 ,{ "this" }
 ,{ "buffer." }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "path," }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysLaunchPath" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysMemPage {

Text b0 = { {
 { "HCore" }
 ,{ "SysMemPage" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysMemPage.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysMemPage.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "backed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "manage" }
 ,{ "memory," }
 ,{ "accessible" }
 ,{ "by" }
 ,{ "the" }
 ,{ "application." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "MemPageLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "page." }
 ,{ "All" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions" }
 ,{ "work" }
 ,{ "with" }
 ,{ "memory" }
 ,{ "pages." }
 ,{ "MemPageLen" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "aligned" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "MemPageAlloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "to" }
 ,{ "the" }
 ,{ "application" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "range" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "pages." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "to" }
 ,{ "be" }
 ,{ "allocated." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "page," }
 ,{ "or" }
 ,{ "null" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "If" }
 ,{ "the" }
 ,{ "num_pages" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "may" }
 ,{ "or" }
 ,{ "may" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
 ,{ "Such" }
 ,{ "usage" }
 ,{ "is" }
 ,{ "pointless" }
 ,{ "and" }
 ,{ "not" }
 ,{ "recommended." }
 ,{ "Typically" }
 ,{ "MemPageAlloc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "large" }
 ,{ "blocks" }
 ,{ "of" }
 ,{ "memory." }
 ,{ "If" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "it" }
 ,{ "means" }
 ,{ "that" }
 ,{ "some" }
 ,{ "range" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "freed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "function" }
 ,{ "MemPageFree()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "argument" }
 ,{ "mem" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "following" }
 ,{ "functions" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "MemPageFree()" , & fmt_text_b }
 ,{ "deallocates" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "range" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "pages." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "page" }
 ,{ "and" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "MemPageExtend()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "page" }
 ,{ "range" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "page" }
 ,{ "and" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range." }
 ,{ "The" }
 ,{ "last" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "extra" }
 ,{ "pages." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "success." }
 ,{ "If" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "does" }
 ,{ "not" }
 ,{ "support" }
 ,{ "such" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "operation" }
 ,{ "this" }
 ,{ "function" }
 ,{ "may" }
 ,{ "simply" }
 ,{ "return" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "MemPageShrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "page" }
 ,{ "range" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "page" }
 ,{ "and" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range." }
 ,{ "The" }
 ,{ "last" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "to" }
 ,{ "discard." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "discarded" }
 ,{ "from" }
 ,{ "the" }
 ,{ "range" }
 ,{ "pages." }
 ,{ "It" }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "minus_num_pages" , & fmt_text_b }
 ,{ "and" }
 ,{ "than" }
 ,{ "the" }
 ,{ "num_pages" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "null," }
 ,{ "none" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "have" }
 ,{ "been" }
 ,{ "discarded." }
 ,{ "If" }
 ,{ "the" }
 ,{ "final" }
 ,{ "number" }
 ,{ "of" }
 ,{ "pages" }
 ,{ "equals" }
 ,{ "zero," }
 ,{ "the" }
 ,{ "range" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "still" }
 ,{ "allocated" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "freed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "MemPageFree()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "does" }
 ,{ "not" }
 ,{ "support" }
 ,{ "such" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "operation" }
 ,{ "this" }
 ,{ "function" }
 ,{ "may" }
 ,{ "simply" }
 ,{ "return" }
 ,{ "0" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysMemPage" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysNet {

Text b0 = { {
 { "HCore" }
 ,{ "SysNet" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysNet.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysNet.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "network" }
 ,{ "support." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "UDPSocket" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "structure" }
 ,{ "supports" }
 ,{ "work" }
 ,{ "with" }
 ,{ "UDP" }
 ,{ "endpoints." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Using" }
 ,{ "UDP" }
 ,{ "protocol" }
 ,{ "you" }
 ,{ "can" }
 ,{ "occupy" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "port" }
 ,{ "and" }
 ,{ "receive" }
 ,{ "UDP" }
 ,{ "packets" }
 ,{ "on" }
 ,{ "that" }
 ,{ "port," }
 ,{ "also" }
 ,{ "you" }
 ,{ "can" }
 ,{ "send" }
 ,{ "UDP" }
 ,{ "packets" }
 ,{ "to" }
 ,{ "any" }
 ,{ "host:port" }
 ,{ "destination." }
 ,{ "To" }
 ,{ "start" }
 ,{ "working" }
 ,{ "with" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "UDP" }
 ,{ "port" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "UDPSocket" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure" }
 ,{ "to" }
 ,{ "send" }
 ,{ "and" }
 ,{ "receive" }
 ,{ "UDP" }
 ,{ "packets." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "open()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance" }
 ,{ "and" }
 ,{ "binds" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "UDP" }
 ,{ "port." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "close()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "close()" , & fmt_text_b }
 ,{ "uninitializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "outbound()" , & fmt_text_b }
 ,{ "sends" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "destination." }
 ,{ "Destination" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pair" }
 ,{ "IP" , & fmt_text_b }
 ,{ "address" , & fmt_text_b }
 ,{ ":" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "wait_in()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "for" }
 ,{ "inbound" }
 ,{ "packets" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "timeout." }
 ,{ "The" }
 ,{ "WaitResult" , & fmt_text_a }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "0," }
 ,{ "if" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "available" }
 ,{ "for" }
 ,{ "reading," }
 ,{ "Wait_timeout" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired" }
 ,{ "and" }
 ,{ "Wait_error" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "some" }
 ,{ "error" }
 ,{ "happened." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "indound()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "first" }
 ,{ "inbound" }
 ,{ "packet" }
 ,{ "in" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "queue" }
 ,{ "and" }
 ,{ "removes" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "queue." }
 ,{ "If" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "large" }
 ,{ "enough," }
 ,{ "a" }
 ,{ "error" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(and" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "lost)." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "InResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "three" }
 ,{ "fields:" }
 ,{ "src" , & fmt_text_b }
 ,{ "," }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "src" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "originator." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes," }
 ,{ "copied" }
 ,{ "to" }
 ,{ "the" }
 ,{ "input" }
 ,{ "buffer," }
 ,{ "this" }
 ,{ "value" }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "then" }
 ,{ "the" }
 ,{ "buf.len" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "queue" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "the" }
 ,{ "method" }
 ,{ "blocks." }
 ,{ "You" }
 ,{ "should" }
 ,{ "never" }
 ,{ "call" }
 ,{ "this" }
 ,{ "method" }
 ,{ "alone," }
 ,{ "but" }
 ,{ "only" }
 ,{ "after" }
 ,{ "the" }
 ,{ "call" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "wait_in()" , & fmt_text_b }
 ,{ "to" }
 ,{ "avoid" }
 ,{ "infinite" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "AsyncUDPSocket" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "This" }
 ,{ "structure" }
 ,{ "supports" }
 ,{ "work" }
 ,{ "with" }
 ,{ "UDP" }
 ,{ "endpoints" }
 ,{ "in" }
 ,{ "an" }
 ,{ "asynchronous" }
 ,{ "manner" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "async" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operations" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "To" }
 ,{ "start" }
 ,{ "working" }
 ,{ "with" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "UDP" }
 ,{ "port" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "UDPSocket" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure" }
 ,{ "to" }
 ,{ "send" }
 ,{ "and" }
 ,{ "receive" }
 ,{ "UDP" }
 ,{ "packets." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "open()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance" }
 ,{ "and" }
 ,{ "binds" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "UDP" }
 ,{ "port." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "close()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "close()" , & fmt_text_b }
 ,{ "uninitializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "This" , & fmt_text_Alert }
 ,{ "method" , & fmt_text_Alert }
 ,{ "aborts" , & fmt_text_Alert }
 ,{ "any" , & fmt_text_Alert }
 ,{ "pending" , & fmt_text_Alert }
 ,{ "operations" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "startOutbound()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "outbound" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "async" }
 ,{ "token." }
 ,{ "This" }
 ,{ "token" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Async" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "usually" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "structure." }
 ,{ "The" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "in" }
 ,{ "use" }
 ,{ "during" }
 ,{ "the" }
 ,{ "whole" }
 ,{ "operation," }
 ,{ "so" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "held" }
 ,{ "intact" }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "complete." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "OutResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "pending" , & fmt_text_b }
 ,{ "and" }
 ,{ "error" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "field" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "not" }
 ,{ "finished" }
 ,{ "yet." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "error" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "pending," }
 ,{ "you" }
 ,{ "must" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "and" }
 ,{ "then" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "completeOutbound()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "completeOutbound()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "pending" }
 ,{ "outbound" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "startInbound()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "async" }
 ,{ "token." }
 ,{ "This" }
 ,{ "token" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "Async" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "usually" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "structure." }
 ,{ "The" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "in" }
 ,{ "use" }
 ,{ "during" }
 ,{ "the" }
 ,{ "whole" }
 ,{ "operation," }
 ,{ "so" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "held" }
 ,{ "intact" }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "complete." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "StartInResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "pending" , & fmt_text_b }
 ,{ "and" }
 ,{ "result" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "field" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "not" }
 ,{ "finished" }
 ,{ "yet." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "an" }
 ,{ "operation" }
 ,{ "result." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "pending," }
 ,{ "you" }
 ,{ "must" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "and" }
 ,{ "then" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "completeInbound()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "completeInbound()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "pending" }
 ,{ "inbound" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "operation" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "This" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "InResult" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "three" }
 ,{ "fields:" }
 ,{ "error" , & fmt_text_b }
 ,{ "," }
 ,{ "src" , & fmt_text_b }
 ,{ "and" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "error" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "src" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "originator." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes," }
 ,{ "copied" }
 ,{ "to" }
 ,{ "the" }
 ,{ "input" }
 ,{ "buffer," }
 ,{ "this" }
 ,{ "value" }
 ,{ "is" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "then" }
 ,{ "the" }
 ,{ "buf.len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "async" }
 ,{ "tokens" }
 ,{ "there" }
 ,{ "is" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "AsyncUDPSocketWait" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "This" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pool" }
 ,{ "of" }
 ,{ "tokens." }
 ,{ "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "tokens" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "structure" }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "async" }
 ,{ "socket" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "init()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "async" }
 ,{ "pool" }
 ,{ "size." }
 ,{ "This" }
 ,{ "value" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "constant" }
 ,{ "MaxAsync" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "error." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "pool" }
 ,{ "contains" }
 ,{ "async_count" , & fmt_text_b }
 ,{ "async" }
 ,{ "tokens." }
 ,{ "They" }
 ,{ "are" }
 ,{ "indexed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "numbers" }
 ,{ "from" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,async_count)" , & fmt_text_b }
 ,{ "." }
 ,{ "Some" }
 ,{ "of" }
 ,{ "them" }
 ,{ "comprise" }
 ,{ "the" }
 ,{ "\"wait" }
 ,{ "set\"." }
 ,{ "Initially" }
 ,{ "the" }
 ,{ "set" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "exit()" , & fmt_text_b }
 ,{ "uninitalizes" }
 ,{ "the" }
 ,{ "instance." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "getAsync()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "token" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "addWait()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "token" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "to" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "was" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "already" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "delWait()" , & fmt_text_b }
 ,{ "removes" }
 ,{ "the" }
 ,{ "token" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "from" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "was" }
 ,{ "excluded" }
 ,{ "from" }
 ,{ "the" }
 ,{ "set," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "token" }
 ,{ "is" }
 ,{ "already" }
 ,{ "not" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "wait()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "while" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "tokens" }
 ,{ "from" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "i.e." }
 ,{ "some" }
 ,{ "async" }
 ,{ "socket" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "started" }
 ,{ "with" }
 ,{ "this" }
 ,{ "token" }
 ,{ "and" }
 ,{ "it" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "type" }
 ,{ "WaitResult" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "token" }
 ,{ "been" }
 ,{ "finished," }
 ,{ "or" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negative" }
 ,{ "special" }
 ,{ "values." }
 ,{ "Two" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "accepts" }
 ,{ "timeouts" }
 ,{ "of" }
 ,{ "different" }
 ,{ "kinds:" }
 ,{ "as" }
 ,{ "a" }
 ,{ "MSec" , & fmt_text_b }
 ,{ "or" }
 ,{ "as" }
 ,{ "a" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "special" }
 ,{ "return" }
 ,{ "values" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "meanings:" }
} , & fmt_text , & align_text } ;

Text b28_0 = { {
 { "Wait_error" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "function" }
 ,{ "has" }
 ,{ "failed" }
 ,{ "for" }
 ,{ "some" }
 ,{ "reason," }
} , & fmt_list , & align_list } ;

Text b28_1 = { {
 { "Wait_timeout" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "is" }
 ,{ "terminated" }
 ,{ "by" }
 ,{ "timeout," }
} , & fmt_list , & align_list } ;

Text b28_2 = { {
 { "Wait_interrupt" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "is" }
 ,{ "terminated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "interrupt()." , & fmt_list_b }
} , & fmt_list , & align_list } ;

TextList b28 = { {
 { '1.' , { { & b28_0 , null , ItemInner , ItemOuter } } }
 ,{ '2.' , { { & b28_1 , null , ItemInner , ItemOuter } } }
 ,{ '3.' , { { & b28_2 , null , ItemInner , ItemOuter } } }
} } ;

Text b29 = { {
 { "interrupt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "method." }
 ,{ "This" }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "interrupt" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "Unlike" }
 ,{ "other" }
 ,{ "methods," }
 ,{ "this" }
 ,{ "one" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "parallel" }
 ,{ "to" }
 ,{ "other" }
 ,{ "method" }
 ,{ "calls." }
 ,{ "This" }
 ,{ "method" }
 ,{ "has" }
 ,{ "a" }
 ,{ "\"semaphore" }
 ,{ "behavior\"," }
 ,{ "i.e." }
 ,{ "several" }
 ,{ "calls" }
 ,{ "provide" }
 ,{ "several" }
 ,{ "interrupts." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "waitAll()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "while" }
 ,{ "all" }
 ,{ "tokens" }
 ,{ "from" }
 ,{ "the" }
 ,{ "wait" }
 ,{ "set" }
 ,{ "are" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "0," }
 ,{ "if" }
 ,{ "it" }
 ,{ "has" }
 ,{ "happened." }
 ,{ "Otherwise" }
 ,{ "â€”" }
 ,{ "one" }
 ,{ "of" }
 ,{ "special" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysNet" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_list , outer_list , back_list }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysPlanInit {

Text b0 = { {
 { "HCore" }
 ,{ "SysPlanInit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysPlanInit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysPlanInit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "target" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "plan" , & fmt_text_a }
 ,{ "initialization" , & fmt_text_a }
 ,{ "sequence." }
 ,{ "The" }
 ,{ "plan" }
 ,{ "initialization" }
 ,{ "node" }
 ,{ "tag" }
 ,{ "is" }
 ,{ "\"Sys\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "following" }
 ,{ "target" }
 ,{ "features" }
 ,{ "must" }
 ,{ "be" }
 ,{ "ready" }
 ,{ "for" }
 ,{ "use" }
 ,{ "after" }
 ,{ "the" }
 ,{ "Sys" , & fmt_text_b }
 ,{ "point" }
 ,{ "of" }
 ,{ "initialization:" }
} , & fmt_text , & align_text } ;

Text b4_0 = { {
 { "SysAtomic," }
} , & fmt_list , & align_list } ;

Text b4_1 = { {
 { "SysError," }
} , & fmt_list , & align_list } ;

Text b4_2 = { {
 { "SysMemPage," }
} , & fmt_list , & align_list } ;

Text b4_3 = { {
 { "SysProp," }
} , & fmt_list , & align_list } ;

Text b4_4 = { {
 { "SysSem," }
} , & fmt_list , & align_list } ;

Text b4_5 = { {
 { "SysTlsSlot," }
} , & fmt_list , & align_list } ;

Text b4_6 = { {
 { "Sys::GetTaskId()" }
 ,{ "from" }
 ,{ "the" }
 ,{ "SysTask.h" }
 ,{ "." }
} , & fmt_list , & align_list } ;

TextList b4 = { {
 { '1.' , { { & b4_0 , null , ItemInner , ItemOuter } } }
 ,{ '2.' , { { & b4_1 , null , ItemInner , ItemOuter } } }
 ,{ '3.' , { { & b4_2 , null , ItemInner , ItemOuter } } }
 ,{ '4.' , { { & b4_3 , null , ItemInner , ItemOuter } } }
 ,{ '5.' , { { & b4_4 , null , ItemInner , ItemOuter } } }
 ,{ '6.' , { { & b4_5 , null , ItemInner , ItemOuter } } }
 ,{ '7.' , { { & b4_6 , null , ItemInner , ItemOuter } } }
} } ;

Text b5 = { {
 { "See" }
 ,{ "this" , & fmt_text_a }
 ,{ "document" , & fmt_text_a }
 ,{ "for" }
 ,{ "the" }
 ,{ "brief" }
 ,{ "of" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "requirements." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysPlanInit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_list , outer_list , back_list }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysProp {

Text b0 = { {
 { "HCore" }
 ,{ "SysProp" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysProp.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysProp.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "some" }
 ,{ "target" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "GetCpuCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "CPU" }
 ,{ "cores." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "GetSpinCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "recommended" }
 ,{ "\"spin" }
 ,{ "count\"." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "for" }
 ,{ "spinning." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "null" }
 ,{ "for" }
 ,{ "the" }
 ,{ "single-core" }
 ,{ "processors." }
 ,{ "For" }
 ,{ "multi-core" }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "order" }
 ,{ "1000" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysProp" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysSem {

Text b0 = { {
 { "HCore" }
 ,{ "SysSem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysSem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysSem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "semaphore." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "create" }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "semaphore" }
 ,{ "operations." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
 ,{ "Semaphore" }
 ,{ "methods," }
 ,{ "except" }
 ,{ "init()" , & fmt_text_b }
 ,{ "," }
 ,{ "do" }
 ,{ "not" }
 ,{ "produce" }
 ,{ "errors." }
 ,{ "They" }
 ,{ "must" }
 ,{ "be" }
 ,{ "successful" }
 ,{ "or" }
 ,{ "call" }
 ,{ "abort." }
 ,{ "For" }
 ,{ "example," }
 ,{ "it" }
 ,{ "must" }
 ,{ "abort" }
 ,{ "on" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "overflow." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "counter" }
 ,{ "value." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "exit()" , & fmt_text_b }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "semaphore." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "give()" , & fmt_text_b }
 ,{ "\"gives\"" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counter" }
 ,{ "(i.e." }
 ,{ "increments" }
 ,{ "it)." }
 ,{ "It" }
 ,{ "may" }
 ,{ "release" }
 ,{ "a" }
 ,{ "thread," }
 ,{ "blocked" }
 ,{ "on" }
 ,{ "the" }
 ,{ "semaphore." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "give_many()" , & fmt_text_b }
 ,{ "\"gives\"" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counter" }
 ,{ "many" }
 ,{ "times" }
 ,{ "(i.e." }
 ,{ "increases" }
 ,{ "it)" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value." }
 ,{ "It" }
 ,{ "may" }
 ,{ "release" }
 ,{ "multiple" }
 ,{ "threads," }
 ,{ "blocked" }
 ,{ "on" }
 ,{ "the" }
 ,{ "semaphore." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "try_take()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "\"take\"" }
 ,{ "the" }
 ,{ "semaphore," }
 ,{ "i.e." }
 ,{ "tries" }
 ,{ "to" }
 ,{ "decrement" }
 ,{ "its" }
 ,{ "counter." }
 ,{ "If" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "it" }
 ,{ "is" }
 ,{ "decremented" }
 ,{ "and" }
 ,{ "the" }
 ,{ "true" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "take()" , & fmt_text_b }
 ,{ "\"takes\"" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "(i.e." }
 ,{ "decrements" }
 ,{ "its" }
 ,{ "counter)." }
 ,{ "If" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "blocked" }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "becomes" }
 ,{ "possible." }
 ,{ "The" }
 ,{ "thread" }
 ,{ "may" }
 ,{ "be" }
 ,{ "blocked" }
 ,{ "infinitely." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "take(MSec" , & fmt_text_b }
 ,{ "timeout)" , & fmt_text_b }
 ,{ "and" }
 ,{ "take(TimeScope" , & fmt_text_b }
 ,{ "time_scope)" , & fmt_text_b }
 ,{ "\"takes\"" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "(i.e." }
 ,{ "decrements" }
 ,{ "its" }
 ,{ "counter)." }
 ,{ "But" }
 ,{ "it" }
 ,{ "blocks" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "timeout." }
 ,{ "If" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "was" }
 ,{ "taken" }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "means" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "was" }
 ,{ "not" }
 ,{ "taken" }
 ,{ "and" }
 ,{ "the" }
 ,{ "method" }
 ,{ "call" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "because" }
 ,{ "the" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Internally," }
 ,{ "Sem" , & fmt_text_b }
 ,{ "may" }
 ,{ "contain" }
 ,{ "only" }
 ,{ "some" }
 ,{ "\"handle\"" }
 ,{ "and" }
 ,{ "use" }
 ,{ "global" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "it:" }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysSem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysTask {

Text b0 = { {
 { "HCore" }
 ,{ "SysTask" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysTask.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysTask.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "thread" }
 ,{ "functions." }
 ,{ "We" }
 ,{ "often" }
 ,{ "use" }
 ,{ "the" }
 ,{ "term" }
 ,{ "task" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "thread." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "task" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "TaskEntry" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "The" }
 ,{ "you" }
 ,{ "can" }
 ,{ "run" }
 ,{ "a" }
 ,{ "task" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "create()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "instance" }
 ,{ "may" }
 ,{ "be" }
 ,{ "deleted" }
 ,{ "once" }
 ,{ "it's" }
 ,{ "not" }
 ,{ "in" }
 ,{ "use" }
 ,{ "(it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "running" }
 ,{ "task)." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "entry" }
 ,{ "function." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "function." }
 ,{ "Once" }
 ,{ "the" }
 ,{ "task" }
 ,{ "is" }
 ,{ "started," }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "always" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "create()" , & fmt_text_b }
 ,{ "runs" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "YieldTask()" , & fmt_text_b }
 ,{ "gives" }
 ,{ "control" }
 ,{ "to" }
 ,{ "another" }
 ,{ "running" }
 ,{ "task," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "SleepTask()" , & fmt_text_b }
 ,{ "sleeps" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "by" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "number" }
 ,{ "of" }
 ,{ "milliseconds." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "GetTaskId()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "identity." }
 ,{ "It" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "type" }
 ,{ "TaskIdType" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type," }
 ,{ "and" }
 ,{ "it" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "wider" }
 ,{ "than" }
 ,{ "the" }
 ,{ "Atomic::Type" , & fmt_text_a }
 ,{ "." }
 ,{ "Task" }
 ,{ "identity" }
 ,{ "uniquely" }
 ,{ "identifies" }
 ,{ "the" }
 ,{ "task" }
 ,{ "among" }
 ,{ "running" }
 ,{ "tasks." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysTask" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysTime {

Text b0 = { {
 { "HCore" }
 ,{ "SysTime" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysTime.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysTime.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "time" }
 ,{ "functions." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "three" }
 ,{ "time" }
 ,{ "functions," }
 ,{ "which" }
 ,{ "provides" }
 ,{ "continuous" }
 ,{ "times" }
 ,{ "with" }
 ,{ "different" }
 ,{ "resolutions." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "GetMSecTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "millisecond" }
 ,{ "time." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "type" }
 ,{ "MSecTimeType" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "GetSecTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "second" }
 ,{ "time." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "type" }
 ,{ "SecTimeType" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "GetClockTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "\"clock\"" }
 ,{ "time." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "fastest" }
 ,{ "available" }
 ,{ "time" }
 ,{ "resolution" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target," }
 ,{ "with" }
 ,{ "resolution" }
 ,{ "at" }
 ,{ "least" }
 ,{ "1" }
 ,{ "microsecond." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "has" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ClockTimeType" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "Its" }
 ,{ "recommended," }
 ,{ "that" }
 ,{ "this" }
 ,{ "type" }
 ,{ "has" }
 ,{ "64" }
 ,{ "bits" }
 ,{ "width." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysTime" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysTlsSlot {

Text b0 = { {
 { "HCore" }
 ,{ "SysTlsSlot" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysTlsSlot.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysTlsSlot.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "backed" }
 ,{ "thread" }
 ,{ "local" }
 ,{ "storage" }
 ,{ "support." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "system" }
 ,{ "TLS" }
 ,{ "slot" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "TlsSlot" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialize" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "methods" }
 ,{ "set()" , & fmt_text_b }
 ,{ "and" }
 ,{ "get()" , & fmt_text_b }
 ,{ "to" }
 ,{ "access" }
 ,{ "a" }
 ,{ "thread" }
 ,{ "variable" }
 ,{ "in" }
 ,{ "this" }
 ,{ "slot" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "void" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "initial" }
 ,{ "value" }
 ,{ "of" }
 ,{ "this" }
 ,{ "variable" }
 ,{ "is" }
 ,{ "null." }
 ,{ "Each" }
 ,{ "thread" }
 ,{ "of" }
 ,{ "execution" }
 ,{ "has" }
 ,{ "its" }
 ,{ "own" }
 ,{ "independent" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "this" }
 ,{ "variable." }
 ,{ "Finally," }
 ,{ "you" }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "instance." }
 ,{ "Copying" }
 ,{ "of" }
 ,{ "the" }
 ,{ "instances" }
 ,{ "is" }
 ,{ "prohibited." }
 ,{ "The" }
 ,{ "private" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "target-dependent." }
 ,{ "TLS" }
 ,{ "methods," }
 ,{ "except" }
 ,{ "init()" , & fmt_text_b }
 ,{ "," }
 ,{ "do" }
 ,{ "not" }
 ,{ "produce" }
 ,{ "errors." }
 ,{ "They" }
 ,{ "must" }
 ,{ "be" }
 ,{ "successful" }
 ,{ "or" }
 ,{ "call" }
 ,{ "abort." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "TLS" }
 ,{ "slot." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "initialized," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "exit()" , & fmt_text_b }
 ,{ "uninitialize" }
 ,{ "the" }
 ,{ "TLS" }
 ,{ "slot." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "get()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "thread" }
 ,{ "variable." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "set()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "thread" }
 ,{ "variable." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Internally," }
 ,{ "TlsSlot" , & fmt_text_b }
 ,{ "may" }
 ,{ "contain" }
 ,{ "only" }
 ,{ "some" }
 ,{ "\"TLS" }
 ,{ "index\"" }
 ,{ "and" }
 ,{ "use" }
 ,{ "global" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "it:" }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysTlsSlot" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HCore_SysWait {

Text b0 = { {
 { "HCore" }
 ,{ "SysWait" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysWait.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysWait.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "SysWait" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "enumeration," }
 ,{ "which" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "an" }
 ,{ "async" }
 ,{ "function" }
 ,{ "result." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "SysFile" , & fmt_text_b }
 ,{ "and" }
 ,{ "SysNet" , & fmt_text_b }
 ,{ "async" }
 ,{ "system" }
 ,{ "interfaces." }
} , & fmt_text , & align_text } ;

Page page = { "page_HCore_SysWait" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_HeapEngine {

Text b0 = { {
 { "HeapEngine" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/HeapEngine.h" , & fmt_text_Files_b }
 ,{ "CCore/src/HeapEngine.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "HeapEngine" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "fully-featured" }
 ,{ "heap" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Resource" , & fmt_text_b }
 ,{ "Provider" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "functionality" }
 ,{ "using" }
 ,{ "another" }
 ,{ "heap" }
 ,{ "class." }
 ,{ "HeapEngine" , & fmt_text_b }
 ,{ "adds" }
 ,{ "three" }
 ,{ "important" }
 ,{ "things:" }
 ,{ "mutex" , & fmt_text_b }
 ,{ "protection," }
 ,{ "statistic" }
 ,{ "accounting" }
 ,{ "and" }
 ,{ "usage" }
 ,{ "limitation." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "name" , & fmt_text_b }
 ,{ "in" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "mutex" , & fmt_text_b }
 ,{ "." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "heap" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "semantic" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "of" }
 ,{ "global" }
 ,{ "heap" }
 ,{ "functions" }
 ,{ "Mem...()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "setLim()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "limit" }
 ,{ "on" }
 ,{ "memory" }
 ,{ "allocation." }
 ,{ "Value" }
 ,{ "zero" }
 ,{ "means" }
 ,{ "no" }
 ,{ "limit." }
 ,{ "If" }
 ,{ "the" }
 ,{ "limit" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "the" }
 ,{ "HeapEngine" , & fmt_text_b }
 ,{ "will" }
 ,{ "keep" }
 ,{ "the" }
 ,{ "total" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "below" }
 ,{ "this" }
 ,{ "limit." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "statistics." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getPeak()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "peak" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "statistics." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "On" }
 ,{ "success" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "its" }
 ,{ "address," }
 ,{ "on" }
 ,{ "failure" }
 ,{ "â€”" }
 ,{ "null." }
 ,{ "Even" }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null" }
 ,{ "and" }
 ,{ "its" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "too." }
 ,{ "The" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "may" }
 ,{ "be" }
 ,{ "a" }
 ,{ "slightly" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "Memory" }
 ,{ "is" }
 ,{ "aligned," }
 ,{ "but" }
 ,{ "this" }
 ,{ "is" }
 ,{ "ensured" }
 ,{ "by" }
 ,{ "the" }
 ,{ "underlying" }
 ,{ "class" }
 ,{ "Heap" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "In" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "four" }
 ,{ "methods" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "mem" , & fmt_text_b }
 ,{ "may" }
 ,{ "be" }
 ,{ "null," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "methods" }
 ,{ "do" }
 ,{ "nothing." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "address" }
 ,{ "of" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "free()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "extend()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "possible." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "required" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "new" }
 ,{ "block." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "means" }
 ,{ "the" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "extend()" , & fmt_text_b }
 ,{ "is" }
 ,{ "always" }
 ,{ "successful" }
 ,{ "(but" }
 ,{ "does" }
 ,{ "nothing)" }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "shrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "required" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "new" }
 ,{ "block." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "means" }
 ,{ "the" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "shrink()" , & fmt_text_b }
 ,{ "fails" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Heap" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "The" }
 ,{ "underlying" }
 ,{ "class" }
 ,{ "Heap" , & fmt_text_b }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "functionality:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "It" }
 ,{ "may" }
 ,{ "have" }
 ,{ "several" }
 ,{ "constructors" }
 ,{ "with" }
 ,{ "different" }
 ,{ "arguments" }
 ,{ "as" }
 ,{ "necessary." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "It" }
 ,{ "is" }
 ,{ "highly" }
 ,{ "recommended" }
 ,{ "that" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "checks" }
 ,{ "memory" }
 ,{ "leaks" }
 ,{ "and" }
 ,{ "abort" }
 ,{ "execution" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "unreleased" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "memory." }
 ,{ "On" }
 ,{ "failure" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "null" }
 ,{ "Space" , & fmt_text_a }
 ,{ "object." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "Space" , & fmt_text_b }
 ,{ "object" }
 ,{ "contains" }
 ,{ "non-zero" }
 ,{ "memory" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "non-zero" }
 ,{ "memory" }
 ,{ "length," }
 ,{ "which" }
 ,{ "is" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "require" }
 ,{ "a" }
 ,{ "valid" }
 ,{ "non-null" }
 ,{ "pointer" }
 ,{ "mem" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "free()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "this" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "extend()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "len" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "possible." }
 ,{ "If" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful," }
 ,{ "but" }
 ,{ "change" }
 ,{ "nothing." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "DeltaLen" , & fmt_text_a }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "ok" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "indicates" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation," }
 ,{ "and" }
 ,{ "the" }
 ,{ "field" }
 ,{ "delta" , & fmt_text_b }
 ,{ "," }
 ,{ "equals" }
 ,{ "the" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "new" }
 ,{ "block" }
 ,{ "and" }
 ,{ "the" }
 ,{ "old" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "shrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "down" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "DeltaLen" , & fmt_text_b }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "ok" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "indicates" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation," }
 ,{ "and" }
 ,{ "the" }
 ,{ "field" }
 ,{ "delta" , & fmt_text_b }
 ,{ "," }
 ,{ "equals" }
 ,{ "the" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "old" }
 ,{ "block" }
 ,{ "and" }
 ,{ "the" }
 ,{ "new" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Page page = { "page_HeapEngine" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Init {

Text b0 = { {
 { "Init" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Init.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Init.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "InitExitObject" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "InitExitObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "for" }
 ,{ "the" }
 ,{ "manual" }
 ,{ "object" }
 ,{ "initialization/termination." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type," }
 ,{ "which" }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "storage" }
 ,{ "room" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "object" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "You" }
 ,{ "should" }
 ,{ "not" }
 ,{ "touch" }
 ,{ "data" }
 ,{ "members" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Method" }
 ,{ "init()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "object," }
 ,{ "exit()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "it." }
 ,{ "Using" }
 ,{ "these" }
 ,{ "methods" }
 ,{ "you" }
 ,{ "can" }
 ,{ "manually" }
 ,{ "control" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "recreate" }
 ,{ "it" }
 ,{ "if" }
 ,{ "necessary." }
 ,{ "To" }
 ,{ "use" }
 ,{ "InitExitObject" , & fmt_text_b }
 ,{ "the" }
 ,{ "prior" }
 ,{ "value" }
 ,{ "initialization" }
 ,{ "is" }
 ,{ "required." }
 ,{ "You" }
 ,{ "can" }
 ,{ "do" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "initialization" }
 ,{ "or" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "clean()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "For" }
 ,{ "example," }
 ,{ "you" }
 ,{ "can" }
 ,{ "create" }
 ,{ "a" }
 ,{ "global" }
 ,{ "variable:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "and" }
 ,{ "then" }
 ,{ "initialize" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "init()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "InitExitObject" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "Object-Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "access" }
 ,{ "it:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "InitStorage" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "InitStorage" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "structure," }
 ,{ "which" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "aligned" }
 ,{ "storage" }
 ,{ "to" }
 ,{ "create" }
 ,{ "objects" }
 ,{ "inside:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "getMem()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "raw" }
 ,{ "memory" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "storage." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "getPlace()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "Place" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "storage." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "NoObjectAbort()" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "NoObjectAbort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Abort" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "abort" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "access" }
 ,{ "to" }
 ,{ "an" }
 ,{ "absent" }
 ,{ "object." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "it" }
 ,{ "in" }
 ,{ "similar" }
 ,{ "situations." }
 ,{ "It" }
 ,{ "calls" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "with" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "diagnostic" }
 ,{ "message." }
} , & fmt_text , & align_text } ;

Page page = { "page_Init" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_InputUtils {

Text b0 = { {
 { "InputUtils" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/InputUtils.h" , & fmt_text_Files_b }
 ,{ "CCore/src/InputUtils.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "simple" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "console" }
 ,{ "input." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Utilities" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "PutSymbol()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "at" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character" }
 ,{ "range" }
 ,{ "(i.e." }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ptr+len" , & fmt_text_b }
 ,{ "position)." }
 ,{ "There" }
 ,{ "must" }
 ,{ "be" }
 ,{ "enough" }
 ,{ "room" }
 ,{ "to" }
 ,{ "store" }
 ,{ "this" }
 ,{ "symbol." }
 ,{ "The" }
 ,{ "new" }
 ,{ "range" }
 ,{ "length" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "PopSymbol()" , & fmt_text_b }
 ,{ "looks" }
 ,{ "for" }
 ,{ "the" }
 ,{ "last" }
 ,{ "symbol" }
 ,{ "at" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "charcter" }
 ,{ "range" }
 ,{ "and" }
 ,{ "\"pops\"" }
 ,{ "it" }
 ,{ "from" }
 ,{ "the" }
 ,{ "range." }
 ,{ "The" }
 ,{ "new" }
 ,{ "range" }
 ,{ "length" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ReadConBase" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "The" }
 ,{ "class" }
 ,{ "ReadConBase" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "reading" }
 ,{ "from" }
 ,{ "the" }
 ,{ "character" }
 ,{ "stream." }
 ,{ "It" }
 ,{ "may" }
 ,{ "serve" }
 ,{ "as" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "in" }
 ,{ "a" }
 ,{ "console" }
 ,{ "reader" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Reading" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "pure" }
 ,{ "virtual" }
 ,{ "method(s)" }
 ,{ "read()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "gets" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "read" }
 ,{ "to" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "received" }
 ,{ "characters." }
 ,{ "If" }
 ,{ "there" }
 ,{ "was" }
 ,{ "no" }
 ,{ "available" }
 ,{ "characters" }
 ,{ "withing" }
 ,{ "given" }
 ,{ "timeout," }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "may" }
 ,{ "be" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "SymbolParser" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "The" }
 ,{ "class" }
 ,{ "SymbolPraser" , & fmt_text_b }
 ,{ "parses" }
 ,{ "the" }
 ,{ "character" }
 ,{ "stream" }
 ,{ "into" }
 ,{ "symbols." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "parser" }
 ,{ "into" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "feed()" , & fmt_text_b }
 ,{ "feeds" }
 ,{ "the" }
 ,{ "parser" }
 ,{ "by" }
 ,{ "the" }
 ,{ "characters" }
 ,{ "(" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)." }
 ,{ "If" }
 ,{ "a" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "accumulated" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "text" , & fmt_text_b }
 ,{ "becomes" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "get()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "feed()" , & fmt_text_b }
 ,{ "returned" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "accumulated" }
 ,{ "symbol" }
 ,{ "and" }
 ,{ "resets" }
 ,{ "the" }
 ,{ "parser." }
} , & fmt_text , & align_text } ;

Page page = { "page_InputUtils" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Installation {

Text b0 = { {
 { "CCore" }
 ,{ "installation" }
} , & fmt_h1 , & align_h1 } ;

Text b1 = { {
 { "Cook" }
 ,{ "book" }
 ,{ "(updated" }
 ,{ "according" }
 ,{ "the" }
 ,{ "latest" }
 ,{ "cygwin" }
 ,{ "and" }
 ,{ "CCore-3.00" }
 ,{ "development)" }
} , & fmt_h2 , & align_h2 } ;

Text b2 = { {
 { "In" }
 ,{ "order" }
 ,{ "to" }
 ,{ "use" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "\"cook\"" }
 ,{ "it." }
 ,{ "The" }
 ,{ "following" }
 ,{ "ingredients" }
 ,{ "are" }
 ,{ "required:" }
} , & fmt_text , & align_text } ;

Text b3_0 = { {
 { "Cygwin" , & fmt_list_a }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b3_1 = { {
 { "Eclipse" , & fmt_list_a }
 ,{ "(optional)" , & fmt_list_a }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b3_2 = { {
 { "CCore" , & fmt_list_b }
 ,{ "package" }
 ,{ "(or" }
 ,{ "repository)." }
} , & fmt_list , & align_list } ;

TextList b3 = { {
 { 'â€¢' , { { & b3_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_2 , null , ItemInner , ItemOuter } } }
} } ;

Text b4 = { {
 { "Install" }
 ,{ "cygwin" , & fmt_text_b }
 ,{ "first." }
 ,{ "Include" }
 ,{ "make" , & fmt_text_b }
 ,{ "," }
 ,{ "bash" , & fmt_text_b }
 ,{ "and" }
 ,{ "g++" , & fmt_text_b }
 ,{ "in" }
 ,{ "your" }
 ,{ "installation." }
 ,{ "If" }
 ,{ "you" }
 ,{ "are" }
 ,{ "not" }
 ,{ "familiar" }
 ,{ "with" }
 ,{ "this" }
 ,{ "platform," }
 ,{ "spend" }
 ,{ "some" }
 ,{ "time" }
 ,{ "to" }
 ,{ "learn" }
 ,{ "it." }
 ,{ "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "the" }
 ,{ "current" }
 ,{ "version" }
 ,{ "of" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "gcc-7.1.0" , & fmt_text_b }
 ,{ "is" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Create" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "bin" , & fmt_text_b }
 ,{ "in" }
 ,{ "your" }
 ,{ "cygwin" , & fmt_text_b }
 ,{ "home" , & fmt_text_b }
 ,{ "directory." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "some" }
 ,{ "tools" }
 ,{ "and" }
 ,{ "utilities," }
 ,{ "they" }
 ,{ "are" }
 ,{ "built" }
 ,{ "in" }
 ,{ "and" }
 ,{ "invoked" }
 ,{ "from" }
 ,{ "this" }
 ,{ "directory." }
 ,{ "Make" }
 ,{ "sure" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "included" }
 ,{ "into" }
 ,{ "the" }
 ,{ "cygwin" , & fmt_text_b }
 ,{ "path" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "include" }
 ,{ "this" }
 ,{ "directory" }
 ,{ "into" }
 ,{ "the" }
 ,{ "Windows" , & fmt_text_b }
 ,{ "path" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Unpack" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "package" }
 ,{ "(or" }
 ,{ "checkout" }
 ,{ "the" }
 ,{ "source" }
 ,{ "tree" }
 ,{ "from" }
 ,{ "a" }
 ,{ "repository)" }
 ,{ "somewhere" }
 ,{ "under" }
 ,{ "you" }
 ,{ "cygwin" , & fmt_text_b }
 ,{ "home" , & fmt_text_b }
 ,{ "directory." }
 ,{ "Avoid" , & fmt_text_Hint }
 ,{ "file" , & fmt_text_Hint }
 ,{ "and" , & fmt_text_Hint }
 ,{ "directory" , & fmt_text_Hint }
 ,{ "names" , & fmt_text_Hint }
 ,{ "with" , & fmt_text_Hint }
 ,{ "space" , & fmt_text_Hint }
 ,{ "characters." , & fmt_text_Hint }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Open" }
 ,{ "bash" , & fmt_text_b }
 ,{ "console" }
 ,{ "(or" }
 ,{ "another" }
 ,{ "console" }
 ,{ "you" }
 ,{ "would" }
 ,{ "prefer," }
 ,{ "just" }
 ,{ "configure" }
 ,{ "it" }
 ,{ "to" }
 ,{ "use" }
 ,{ "cygwin" , & fmt_text_b }
 ,{ "bash" , & fmt_text_b }
 ,{ "as" }
 ,{ "a" }
 ,{ "command" }
 ,{ "processor)." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Go" }
 ,{ "to" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "root" , & fmt_text_b }
 ,{ "directory." }
 ,{ "The" }
 ,{ "following" }
 ,{ "commands" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "prepare," }
 ,{ "clean" }
 ,{ "and" }
 ,{ "build" }
 ,{ "the" }
 ,{ "whole" }
 ,{ "installation:" }
} , & fmt_text , & align_text } ;

Text b9_0 = { {
 { "make" , & fmt_list_Cmd }
 ,{ "â€”" }
 ,{ "to" }
 ,{ "build" }
 ,{ "all," }
} , & fmt_list , & align_list } ;

Text b9_1 = { {
 { "make" , & fmt_list_Cmd }
 ,{ "clean" , & fmt_list_Cmd }
 ,{ "â€”" }
 ,{ "to" }
 ,{ "clean," }
} , & fmt_list , & align_list } ;

Text b9_2 = { {
 { "make" , & fmt_list_Cmd }
 ,{ "list" , & fmt_list_Cmd }
 ,{ "â€”" }
 ,{ "to" }
 ,{ "build" }
 ,{ "source" }
 ,{ "file" }
 ,{ "lists;" }
 ,{ "you" }
 ,{ "will" }
 ,{ "need" }
 ,{ "this" }
 ,{ "command" }
 ,{ "if" }
 ,{ "you" }
 ,{ "alter" }
 ,{ "source" }
 ,{ "file" }
 ,{ "set," }
 ,{ "before" , & fmt_list_Alert }
 ,{ "using" , & fmt_list_Alert }
 ,{ "it" , & fmt_list_Alert }
 ,{ "you" , & fmt_list_Alert }
 ,{ "have," , & fmt_list_Alert }
 ,{ "however," , & fmt_list_Alert }
 ,{ "to" , & fmt_list_Alert }
 ,{ "build" , & fmt_list_Alert }
 ,{ "CCore" , & fmt_list_Alert }
 ,{ "tools" , & fmt_list_Alert }
 ,{ "." }
} , & fmt_list , & align_list } ;

TextList b9 = { {
 { 'â€¢' , { { & b9_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b9_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b9_2 , null , ItemInner , ItemOuter } } }
} } ;

Text b10 = { {
 { "Post-install" }
 ,{ "notes" }
} , & fmt_h2 , & align_h2 } ;

Text b11 = { {
 { "You" }
 ,{ "may" }
 ,{ "need" }
 ,{ "to" }
 ,{ "update" }
 ,{ "the" }
 ,{ "file" }
 ,{ "Makefile.tools" , & fmt_text_b }
 ,{ "in" }
 ,{ "your" }
 ,{ "host" }
 ,{ "Target" }
 ,{ "directory" }
 ,{ "to" }
 ,{ "select" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "compiler" }
 ,{ "and" }
 ,{ "other" }
 ,{ "tools." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Once" }
 ,{ "you" }
 ,{ "install" }
 ,{ "and" }
 ,{ "build" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "," }
 ,{ "tools" }
 ,{ "are" }
 ,{ "built" }
 ,{ "in" }
 ,{ "the" }
 ,{ "~/bin" , & fmt_text_b }
 ,{ "directory." }
 ,{ "Two" }
 ,{ "of" }
 ,{ "them:" }
 ,{ "CCore-MakeList.exe" , & fmt_text_b }
 ,{ "and" }
 ,{ "CCore-Regen.exe" , & fmt_text_b }
 ,{ "," }
 ,{ "are" }
 ,{ "the" }
 ,{ "essential" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "build" }
 ,{ "process," }
 ,{ "so" , & fmt_text_Alert }
 ,{ "keep" , & fmt_text_Alert }
 ,{ "them" , & fmt_text_Alert }
 ,{ "in" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "working" , & fmt_text_Alert }
 ,{ "condition" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "cygwin" , & fmt_text_b }
 ,{ "terminal" }
 ,{ "has" }
 ,{ "a" }
 ,{ "limitation" }
 ,{ "in" }
 ,{ "its" }
 ,{ "console" }
 ,{ "functions." }
 ,{ "It" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "run" }
 ,{ "some" }
 ,{ "tools" }
 ,{ "and" }
 ,{ "tests." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "console" , & fmt_text_a }
 ,{ "program" , & fmt_text_a }
 ,{ "instead" }
 ,{ "to" }
 ,{ "avoid" }
 ,{ "troubles." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "Eclipse" , & fmt_text_b }
 ,{ "as" }
 ,{ "an" }
 ,{ "IDE" , & fmt_text_b }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "-based" }
 ,{ "projects." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "package" }
 ,{ "includes" }
 ,{ "the" }
 ,{ "archive" }
 ,{ "eclipse-Oxygen.7z" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "Eclipse" , & fmt_text_b }
 ,{ "Oxygen" , & fmt_text_b }
 ,{ "workbench." }
 ,{ "You" }
 ,{ "will" }
 ,{ "need" }
 ,{ "Anonymouse" , & fmt_text_a }
 ,{ "Pro" , & fmt_text_a }
 ,{ "font" }
 ,{ "for" }
 ,{ "the" }
 ,{ "text" }
 ,{ "editor." }
 ,{ "Before" }
 ,{ "using" }
 ,{ "this" }
 ,{ "workbench" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "adjust" }
 ,{ "some" }
 ,{ "settings." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Open" }
 ,{ "menu" }
 ,{ "Window/Preferences..." , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "open" }
 ,{ "the" }
 ,{ "C++/Build/Environment" , & fmt_text_b }
 ,{ "tab." }
 ,{ "Correct" }
 ,{ "variables" }
 ,{ "CYGWIN" , & fmt_text_b }
 ,{ "and" }
 ,{ "CYGWIN64" , & fmt_text_b }
 ,{ "to" }
 ,{ "point" }
 ,{ "to" }
 ,{ "cygwin" , & fmt_text_b }
 ,{ "and" }
 ,{ "cygwin64" , & fmt_text_b }
 ,{ "installation" }
 ,{ "directories." }
} , & fmt_text , & align_text } ;

Link link_WIN64 = { & page , { 16 } } ;

Text b16 = { {
 { "WIN64" }
} , & fmt_h2 , & align_h2 } ;

Text b17 = { {
 { "CCore" , & fmt_text_b }
 ,{ "supports" }
 ,{ "the" }
 ,{ "64-bits" }
 ,{ "Windows" }
 ,{ "development" }
 ,{ "using" }
 ,{ "cygwin64" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "host" }
 ,{ "target" }
 ,{ "WIN64" , & fmt_text_b }
 ,{ "is" }
 ,{ "provided." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Place" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "at" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "directory." }
 ,{ "You" }
 ,{ "need" }
 ,{ "/bin" , & fmt_text_b }
 ,{ "subdirectory" }
 ,{ "in" }
 ,{ "your" }
 ,{ "home" }
 ,{ "directory" }
 ,{ "for" }
 ,{ "tools," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "cygwin64" , & fmt_text_b }
 ,{ "search" }
 ,{ "path." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "edit" }
 ,{ "the" }
 ,{ "file" }
 ,{ "Makefile.host" , & fmt_text_b }
 ,{ ":" }
 ,{ "change" }
 ,{ "it" }
 ,{ "from" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "to" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "LIN64" }
} , & fmt_h2 , & align_h2 } ;

Text b21 = { {
 { "CCore" , & fmt_text_b }
 ,{ "supports" }
 ,{ "the" }
 ,{ "64-bits" }
 ,{ "Linux" }
 ,{ "development." }
 ,{ "The" }
 ,{ "host" }
 ,{ "target" }
 ,{ "LIN64" , & fmt_text_b }
 ,{ "is" }
 ,{ "provided." }
 ,{ "This" }
 ,{ "target" }
 ,{ "is" }
 ,{ "developed" }
 ,{ "based" }
 ,{ "on" }
 ,{ "Ubuntu" , & fmt_text_a }
 ,{ "13.04" , & fmt_text_a }
 ,{ "(running" }
 ,{ "on" }
 ,{ "the" }
 ,{ "VirtualBox" , & fmt_text_a }
 ,{ ")," }
 ,{ "but" }
 ,{ "should" }
 ,{ "be" }
 ,{ "fine" }
 ,{ "on" }
 ,{ "others" }
 ,{ "64-bits" }
 ,{ "Linux" }
 ,{ "platforms." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "To" }
 ,{ "deploy" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "on" }
 ,{ "Linux," }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "install" }
 ,{ "some" }
 ,{ "additional" }
 ,{ "developers" }
 ,{ "components." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "First," }
 ,{ "you" }
 ,{ "need" }
 ,{ "gcc-7.1.0" , & fmt_text_b }
 ,{ "or" }
 ,{ "later." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Second," }
 ,{ "you" }
 ,{ "need" }
 ,{ "the" }
 ,{ "library" }
 ,{ "libaio" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Finally," }
 ,{ "you" }
 ,{ "need" }
 ,{ "the" }
 ,{ "library" }
 ,{ "libgmp" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "On" }
 ,{ "Ubuntu" , & fmt_text_b }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "to" }
 ,{ "install" }
 ,{ "additional" }
 ,{ "packages:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "The" }
 ,{ "packages" }
 ,{ "you" }
 ,{ "need" }
 ,{ "are:" }
 ,{ "g++" , & fmt_text_b }
 ,{ "," }
 ,{ "libaio-dev" , & fmt_text_b }
 ,{ "," }
 ,{ "libgmp-dev" , & fmt_text_b }
 ,{ "(double" }
 ,{ "check" }
 ,{ "with" }
 ,{ "the" }
 ,{ "system" }
 ,{ "support)." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "installed" }
 ,{ "required" }
 ,{ "packages," }
 ,{ "place" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "at" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "directory." }
 ,{ "You" }
 ,{ "need" }
 ,{ "/bin" , & fmt_text_b }
 ,{ "subdirectory" }
 ,{ "in" }
 ,{ "your" }
 ,{ "home" }
 ,{ "directory" }
 ,{ "for" }
 ,{ "tools," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "search" }
 ,{ "path." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "edit" }
 ,{ "the" }
 ,{ "file" }
 ,{ "Makefile.host" , & fmt_text_b }
 ,{ ":" }
 ,{ "change" }
 ,{ "it" }
 ,{ "from" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "to" }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "To" }
 ,{ "run" }
 ,{ "on" }
 ,{ "the" }
 ,{ "VirtualBox" , & fmt_text_b }
 ,{ "hack" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code" }
 ,{ "at" }
 ,{ "the" }
 ,{ "file" }
 ,{ "IntelCPUID.s" , & fmt_text_b }
 ,{ "(" }
 ,{ "Target/LIN64/CCore/src/crypton" , & fmt_text_b }
 ,{ ")." }
 ,{ "Uncomment" }
 ,{ "the" }
 ,{ "following" }
 ,{ "line" }
 ,{ "to" }
 ,{ "get" }
 ,{ "the" }
 ,{ "hardware" }
 ,{ "AES" }
 ,{ "support." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "BeagleBoneBlack" }
} , & fmt_h2 , & align_h2 } ;

Text b32 = { {
 { "CCore" , & fmt_text_b }
 ,{ "includes" }
 ,{ "the" }
 ,{ "primary" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "target" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "target" }
 ,{ "to" }
 ,{ "build" }
 ,{ "applications" }
 ,{ "running" }
 ,{ "on" }
 ,{ "the" }
 ,{ "popular" }
 ,{ "board" }
 ,{ "BeagleBone" , & fmt_text_a }
 ,{ "Black" , & fmt_text_a }
 ,{ "." }
 ,{ "Read" }
 ,{ "this" , & fmt_text_a }
 ,{ "document" , & fmt_text_a }
 ,{ "to" }
 ,{ "learn" }
 ,{ "more" }
 ,{ "about" }
 ,{ "this" }
 ,{ "target." }
} , & fmt_text , & align_text } ;

Page page = { "page_Installation" ,
{
 { & b0 , null , inner_h1 , outer_h1 , back_h1 }
 ,{ & b1 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_list , outer_list , back_list }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_list , outer_list , back_list }
 ,{ & b10 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_InstanceLock {

Text b0 = { {
 { "InstanceLock" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/InstanceLock.h" , & fmt_text_Files_b }
 ,{ "CCore/src/InstanceLock.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "a" }
 ,{ "creation" }
 ,{ "of" }
 ,{ "multiple" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "class." }
 ,{ "The" }
 ,{ "class" }
 ,{ "is" }
 ,{ "thread-safe." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "class" }
 ,{ "constructor" }
 ,{ "will" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "same" }
 ,{ "index" }
 ,{ "has" }
 ,{ "already" }
 ,{ "being" }
 ,{ "created." }
 ,{ "So" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Count" , & fmt_text_b }
 ,{ "objects" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "can" }
 ,{ "exist" }
 ,{ "simultaneously" }
 ,{ "each" }
 ,{ "with" }
 ,{ "a" }
 ,{ "unique" }
 ,{ "instance" }
 ,{ "index." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "message." }
 ,{ "It" }
 ,{ "should" }
 ,{ "name" }
 ,{ "the" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "getInstanceIndex()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "instance" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "typical" }
 ,{ "usage" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "will" }
 ,{ "prevent" }
 ,{ "the" }
 ,{ "creation" }
 ,{ "of" }
 ,{ "multiple" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "SomeClass" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_InstanceLock" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Integer {

Text b0 = { {
 { "Integer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/Integer.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/Integer.cpp" , & fmt_text_Files_b }
 ,{ "master" }
 ,{ "include" }
 ,{ "file" }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerAlgo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerAlgo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerBuilder.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerBuilder.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerDivider.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerDivider.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b5 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerPrint.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerPrint.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b6 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerFromString.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerFromString.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b7 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerGCD.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerGCD.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b8 = { {
 { "Integer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "which" }
 ,{ "simulates" }
 ,{ "integer" }
 ,{ "numbers." }
 ,{ "It" }
 ,{ "can" }
 ,{ "represent" }
 ,{ "numbers" }
 ,{ "from" }
 ,{ "a" }
 ,{ "huge" }
 ,{ "value" }
 ,{ "range." }
 ,{ "This" }
 ,{ "range" }
 ,{ "is" }
 ,{ "limited" }
 ,{ "only" }
 ,{ "by" }
 ,{ "the" }
 ,{ "available" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Internally" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "array" }
 ,{ "of" }
 ,{ "units." }
 ,{ "A" }
 ,{ "unit" }
 ,{ "has" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "type." }
 ,{ "The" }
 ,{ "range" }
 ,{ "of" }
 ,{ "units" }
 ,{ "is" }
 ,{ "called" }
 ,{ "the" }
 ,{ "body." }
 ,{ "Any" }
 ,{ "range" }
 ,{ "of" }
 ,{ "units" }
 ,{ "can" }
 ,{ "be" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "number." }
 ,{ "Let's" }
 ,{ "N" , & fmt_text_b }
 ,{ "be" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "type" }
 ,{ "and" }
 ,{ "B" , & fmt_text_b }
 ,{ "be" }
 ,{ "2" , & fmt_text_b }
 ,{ "N" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "units" }
 ,{ "(U" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ ",...,U" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ")" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integer" }
 ,{ "using" }
 ,{ "the" }
 ,{ "base-" }
 ,{ "B" , & fmt_text_b }
 ,{ "positional" }
 ,{ "integer" }
 ,{ "representation," }
 ,{ "i.e." }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "U" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "+U" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ "*B+...+U" , & fmt_text_b }
 ,{ "n-1" , & fmt_text_b }
 ,{ "*B" , & fmt_text_b }
 ,{ "n-1" , & fmt_text_b }
 ,{ "+U" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "*B" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "also" }
 ,{ "can" }
 ,{ "be" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "integer," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "unit" }
 ,{ "(" }
 ,{ "MSU" , & fmt_text_b }
 ,{ ")" }
 ,{ "is" }
 ,{ "treated" }
 ,{ "especially." }
 ,{ "It" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "number" }
 ,{ "with" }
 ,{ "the" }
 ,{ "value" }
 ,{ "from" }
 ,{ "the" }
 ,{ "interval" }
 ,{ "[-B/2,B/2)" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "then" }
 ,{ "equals" }
 ,{ "U" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "+U" , & fmt_text_b }
 ,{ "1" , & fmt_text_b }
 ,{ "*B+...+U" , & fmt_text_b }
 ,{ "n-1" , & fmt_text_b }
 ,{ "*B" , & fmt_text_b }
 ,{ "n-1" , & fmt_text_b }
 ,{ "+signed(U" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ ")*B" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
 ,{ "All" }
 ,{ "units" }
 ,{ "except" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "(which" }
 ,{ "is" }
 ,{ "the" }
 ,{ "last" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range)" }
 ,{ "have" }
 ,{ "values" }
 ,{ "from" }
 ,{ "the" }
 ,{ "interval" }
 ,{ "[0,B)" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "the" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "value" }
 ,{ "from" }
 ,{ "the" }
 ,{ "interval" }
 ,{ "[-B/2,B/2)" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "itself" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "signed" }
 ,{ "interpretation." }
 ,{ "But" }
 ,{ "some" }
 ,{ "low-level" }
 ,{ "algorithms" }
 ,{ "are" }
 ,{ "working" }
 ,{ "with" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "numbers." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "An" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "value" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "normalized" }
 ,{ "form," }
 ,{ "i.e." }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "represent" }
 ,{ "it" }
 ,{ "with" }
 ,{ "a" }
 ,{ "less" }
 ,{ "number" }
 ,{ "of" }
 ,{ "units." }
 ,{ "It" }
 ,{ "means" }
 ,{ "that" }
 ,{ "the" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "extension" }
 ,{ "of" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "unit." }
 ,{ "The" }
 ,{ "null" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "array." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Integer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "template." }
 ,{ "The" }
 ,{ "first" }
 ,{ "and" }
 ,{ "most" }
 ,{ "important" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "package" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "parameter" }
 ,{ "determines" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "low-level" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "integer" }
 ,{ "operations." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "efficiently" }
 ,{ "in" }
 ,{ "general," }
 ,{ "so" }
 ,{ "you" }
 ,{ "should" }
 ,{ "use" }
 ,{ "some" }
 ,{ "\"fast\"" }
 ,{ "implementation" }
 ,{ "for" }
 ,{ "your" }
 ,{ "particular" }
 ,{ "target" }
 ,{ "CPU." }
 ,{ "For" }
 ,{ "example," }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "GMP" , & fmt_text_a }
 ,{ "library" , & fmt_text_a }
 ,{ "for" }
 ,{ "that" }
 ,{ "purpose." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "second" }
 ,{ "and" }
 ,{ "third" }
 ,{ "template" }
 ,{ "parameters" }
 ,{ "define" }
 ,{ "the" }
 ,{ "array" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "store" }
 ,{ "an" }
 ,{ "integer" }
 ,{ "body." }
 ,{ "The" }
 ,{ "second" }
 ,{ "must" }
 ,{ "be" }
 ,{ "either" }
 ,{ "the" }
 ,{ "RefArray" , & fmt_text_b }
 ,{ "(default)" }
 ,{ "or" }
 ,{ "the" }
 ,{ "AtomicRefArray" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "third" }
 ,{ "should" }
 ,{ "almost" }
 ,{ "never" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "non-default" }
 ,{ "value." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "a" }
 ,{ "non-default" }
 ,{ "value" }
 ,{ "for" }
 ,{ "this" }
 ,{ "parameter" }
 ,{ "to" }
 ,{ "employ," }
 ,{ "for" }
 ,{ "example," }
 ,{ "custom" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions." }
 ,{ "See" }
 ,{ "the" }
 ,{ "Array" , & fmt_text_a }
 ,{ "page" , & fmt_text_a }
 ,{ "for" }
 ,{ "more" }
 ,{ "information" }
 ,{ "about" }
 ,{ "arrays" }
 ,{ "and" }
 ,{ "array" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "AlgoType" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type," }
 ,{ "an" }
 ,{ "alias" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "template" }
 ,{ "parameter." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Unit" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "UnitBits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "unit" }
 ,{ "bits." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "TempArrayType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Unit" , & fmt_text_b }
 ,{ "DynArray" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "array" }
 ,{ "algorithm" }
 ,{ "package." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "temporary" }
 ,{ "storage" }
 ,{ "type." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "some" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "similar" }
 ,{ "purposes." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "body" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "private" }
 ,{ "field" }
 ,{ "body" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "field" }
 ,{ "has" }
 ,{ "the" }
 ,{ "type" }
 ,{ "RefArray" , & fmt_text_b }
 ,{ "or" }
 ,{ "AtomicRefArray" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "means" }
 ,{ "it" }
 ,{ "is" }
 ,{ "efficiently" }
 ,{ "copyable" }
 ,{ "and" }
 ,{ "multiple" }
 ,{ "objects" }
 ,{ "can" }
 ,{ "share" }
 ,{ "the" }
 ,{ "same" }
 ,{ "body." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "You" }
 ,{ "can" }
 ,{ "create" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "using" }
 ,{ "the" }
 ,{ "generic" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "using" }
 ,{ "special" }
 ,{ "constructors." }
 ,{ "The" }
 ,{ "generic" }
 ,{ "constructor" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "builder" , & fmt_text_a }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "integer" }
 ,{ "body" }
 ,{ "and" }
 ,{ "then" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "normalization." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "create" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "units." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "null" }
 ,{ "value." }
 ,{ "It" }
 ,{ "doesn't" }
 ,{ "throw." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "You" }
 ,{ "can" }
 ,{ "create" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "string" }
 ,{ "(the" }
 ,{ "usual" }
 ,{ "decimal" }
 ,{ "representation" }
 ,{ "is" }
 ,{ "assumed)" }
 ,{ "or" }
 ,{ "from" }
 ,{ "any" }
 ,{ "\"short\"" }
 ,{ "integer," }
 ,{ "signed" }
 ,{ "or" }
 ,{ "unsigned." }
 ,{ "These" }
 ,{ "constructors" }
 ,{ "are" }
 ,{ "implicit," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "them" }
 ,{ "to" }
 ,{ "silently" }
 ,{ "cast" }
 ,{ "operation" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "sign()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "sign" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number" }
 ,{ "as" }
 ,{ "the" }
 ,{ "CmpResult" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "bitsOf()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "as" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields." }
 ,{ "The" }
 ,{ "fields" }
 ,{ "units" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "full" }
 ,{ "unit" }
 ,{ "bits." }
 ,{ "The" }
 ,{ "field" }
 ,{ "msbits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "total" }
 ,{ "bit" }
 ,{ "count" }
 ,{ "therefore" }
 ,{ "is" }
 ,{ "units*UnitBits" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "msbits" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "convert" }
 ,{ "this" }
 ,{ "result" }
 ,{ "into" }
 ,{ "a" }
 ,{ "usual" }
 ,{ "unsigned" }
 ,{ "value" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "total()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "total()" , & fmt_text_b }
 ,{ "without" }
 ,{ "arguments" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "value." }
 ,{ "The" }
 ,{ "total()" , & fmt_text_b }
 ,{ "with" }
 ,{ "argument" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "type" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "overflow." }
 ,{ "For" }
 ,{ "negative" }
 ,{ "numbers" }
 ,{ "the" }
 ,{ "leading" }
 ,{ "1" }
 ,{ "is" }
 ,{ "not" }
 ,{ "counted." }
 ,{ "I.e." }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "N" , & fmt_text_b }
 ,{ "is" }
 ,{ "non-negative," }
 ,{ "then" }
 ,{ "NBits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "such" }
 ,{ "that" }
 ,{ "N<2" , & fmt_text_b }
 ,{ "NBits" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "N" , & fmt_text_b }
 ,{ "is" }
 ,{ "negative," }
 ,{ "then" }
 ,{ "NBits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "such" }
 ,{ "that" }
 ,{ "N>=-2" , & fmt_text_b }
 ,{ "NBits" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "sq()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "square" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "pow()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "modify()" , & fmt_text_b }
 ,{ "\"unshares\"" }
 ,{ "the" }
 ,{ "body." }
 ,{ "After" }
 ,{ "this" }
 ,{ "method" }
 ,{ "the" }
 ,{ "number" }
 ,{ "will" }
 ,{ "have" }
 ,{ "the" }
 ,{ "separate" }
 ,{ "body." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "cloneTo()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "clone" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "will" }
 ,{ "have" }
 ,{ "the" }
 ,{ "separate" }
 ,{ "body." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "in" }
 ,{ "multi-task" }
 ,{ "situations." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "set_null()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "number" }
 ,{ "to" }
 ,{ "zero" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "getBody()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "over" }
 ,{ "the" }
 ,{ "number" }
 ,{ "body." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "getBodyReverse()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "over" }
 ,{ "the" }
 ,{ "number" }
 ,{ "body." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "isOdd()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "odd." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "isEven()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "even." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "cast()" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "The" }
 ,{ "reduction" }
 ,{ "by" }
 ,{ "module" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "to" }
 ,{ "get" }
 ,{ "the" }
 ,{ "value." }
 ,{ "On" }
 ,{ "bit" }
 ,{ "patterns:" }
 ,{ "extra" }
 ,{ "bits" }
 ,{ "are" }
 ,{ "skipped." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "objCmp()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" , & fmt_text_a }
 ,{ "3-way" , & fmt_text_a }
 ,{ "comparision" , & fmt_text_a }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "This" }
 ,{ "set" }
 ,{ "of" }
 ,{ "static" }
 ,{ "functions" }
 ,{ "makes" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "operation" }
 ,{ "on" }
 ,{ "numbers." }
 ,{ "The" }
 ,{ "argument(s)" }
 ,{ "is" }
 ,{ "given" }
 ,{ "not" }
 ,{ "as" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "value," }
 ,{ "but" }
 ,{ "as" }
 ,{ "the" }
 ,{ "range" }
 ,{ "over" }
 ,{ "a" }
 ,{ "number" }
 ,{ "body." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "Neg()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "-a" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "Add()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a+b" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Sub()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a-b" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "Mul()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a*b" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "Sq()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a" , & fmt_text_b }
 ,{ "2" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "Div()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a/b" , & fmt_text_b }
 ,{ "." }
 ,{ "More" }
 ,{ "precisely," }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "[a/b]" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Mod()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a%b" , & fmt_text_b }
 ,{ "." }
 ,{ "Both" }
 ,{ "division" }
 ,{ "operations" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "the" }
 ,{ "divisor" }
 ,{ "is" }
 ,{ "zero." }
 ,{ "The" }
 ,{ "following" }
 ,{ "is" }
 ,{ "true:" }
 ,{ "a" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "(a/b)*b" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "(a%b)" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "positive," }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "is" }
 ,{ "non-negative." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "non-positive." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "LShift()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "a<<shift" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "it" }
 ,{ "calculates" }
 ,{ "a*2" , & fmt_text_b }
 ,{ "shift" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "RShift()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "arithmetic" }
 ,{ "a>>shift" , & fmt_text_b }
 ,{ "," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "leading" }
 ,{ "bit" }
 ,{ "is" }
 ,{ "preserved." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "it" }
 ,{ "calculates" }
 ,{ "a/2" , & fmt_text_b }
 ,{ "shift" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "DivMod" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "quotient" }
 ,{ "(in" }
 ,{ "the" }
 ,{ "field" }
 ,{ "div" , & fmt_text_b }
 ,{ ")" }
 ,{ "and" }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "(in" }
 ,{ "the" }
 ,{ "field" }
 ,{ "mod" , & fmt_text_b }
 ,{ ")" }
 ,{ "simultaneously." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "This" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "and" }
 ,{ "operators" }
 ,{ "perform" }
 ,{ "self-modifying" }
 ,{ "operations." }
 ,{ "They" }
 ,{ "return" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "neg()" , & fmt_text_b }
 ,{ "negates" }
 ,{ "the" }
 ,{ "number:" }
 ,{ "obj" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "-" , & fmt_text_b }
 ,{ "obj" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "revsub()" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "\"reversed" }
 ,{ "subtraction\"," }
 ,{ "i.e." }
 ,{ "obj" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "-" , & fmt_text_b }
 ,{ "obj" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "operator" , & fmt_text_b }
 ,{ "X=" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "usual" }
 ,{ "obj" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "obj" , & fmt_text_b }
 ,{ "X" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "The" }
 ,{ "unary" }
 ,{ "operator" , & fmt_text_b }
 ,{ "-" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "negated" }
 ,{ "number:" }
 ,{ "-obj" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "The" }
 ,{ "family" }
 ,{ "of" }
 ,{ "binary" }
 ,{ "operators:" }
 ,{ "+," , & fmt_text_b }
 ,{ "-," , & fmt_text_b }
 ,{ "*," , & fmt_text_b }
 ,{ "/," , & fmt_text_b }
 ,{ "%" , & fmt_text_b }
 ,{ "," }
 ,{ "perform" }
 ,{ "the" }
 ,{ "usual" }
 ,{ "integer" }
 ,{ "arithmetic" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "The" }
 ,{ "family" }
 ,{ "of" }
 ,{ "binary" }
 ,{ "comparison" }
 ,{ "operators:" }
 ,{ "==," , & fmt_text_b }
 ,{ "!=," , & fmt_text_b }
 ,{ "<," , & fmt_text_b }
 ,{ ">," , & fmt_text_b }
 ,{ "<=," , & fmt_text_b }
 ,{ ">=" , & fmt_text_b }
 ,{ "," }
 ,{ "perform" }
 ,{ "the" }
 ,{ "usual" }
 ,{ "integer" }
 ,{ "comparison" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "operator" , & fmt_text_b }
 ,{ "<<" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "obj" , & fmt_text_b }
 ,{ "<<" , & fmt_text_b }
 ,{ "shift" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "operator" , & fmt_text_b }
 ,{ ">>" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "obj" , & fmt_text_b }
 ,{ ">>" , & fmt_text_b }
 ,{ "shift" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "divmod()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "the" }
 ,{ "quotient" }
 ,{ "and" }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "using" }
 ,{ "the" }
 ,{ "DivMod" , & fmt_text_b }
 ,{ "structure." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "This" }
 ,{ "set" }
 ,{ "of" }
 ,{ "operators" }
 ,{ "and" }
 ,{ "methods" }
 ,{ "handles" }
 ,{ "the" }
 ,{ "mixed-type" }
 ,{ "cases," }
 ,{ "when" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "signed" }
 ,{ "or" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "They" }
 ,{ "are" }
 ,{ "introduced" }
 ,{ "for" }
 ,{ "efficiency" }
 ,{ "reason." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "cmp()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "comparison" }
 ,{ "with" }
 ,{ "one" }
 ,{ "of" }
 ,{ "simple" }
 ,{ "signed" }
 ,{ "or" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "Integer" , & fmt_text_b }
 ,{ "is" }
 ,{ "printable," }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable" }
 ,{ "type." }
 ,{ "Integer" , & fmt_text_b }
 ,{ "print" }
 ,{ "options" }
 ,{ "are:" }
 ,{ "the" }
 ,{ "output" }
 ,{ "width" }
 ,{ "and" }
 ,{ "the" }
 ,{ "show-sign" }
 ,{ "flag." }
 ,{ "The" }
 ,{ "output" }
 ,{ "is" }
 ,{ "always" }
 ,{ "decimal." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "RandomInteger" }
} , & fmt_h3 , & align_h3 } ;

Text b60 = { {
 { "RandomInteger" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "random" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "two" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "body" }
 ,{ "length" }
 ,{ "in" }
 ,{ "units." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "some" }
 ,{ "Random" , & fmt_text_a }
 ,{ "object." }
 ,{ "An" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "is" }
 ,{ "created" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "body" }
 ,{ "length" }
 ,{ "and" }
 ,{ "randomly" }
 ,{ "filled" }
 ,{ "body" }
 ,{ "units." }
 ,{ "So" }
 ,{ "the" }
 ,{ "value" }
 ,{ "is" }
 ,{ "uniformly" }
 ,{ "distributed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[-B" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "/2,B" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "/2)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "GCDiv" }
 ,{ "and" }
 ,{ "QSym" }
} , & fmt_h3 , & align_h3 } ;

Text b63 = { {
 { "GCDiv()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "GCD" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "non-negative." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "QSym()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "quadratic" }
 ,{ "symbol" }
 ,{ "(aka" }
 ,{ "Jacobi" }
 ,{ "symbol)" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "coprime" }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "odd," }
 ,{ "otherwise" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Link link_Algo = { & page , { 65 } } ;

Text b65 = { {
 { "Algo" }
} , & fmt_h3 , & align_h3 } ;

Text b66 = { {
 { "The" }
 ,{ "algorithm" }
 ,{ "package" }
 ,{ "Algo" , & fmt_text_b }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern." }
 ,{ "Functions," }
 ,{ "operating" }
 ,{ "on" }
 ,{ "long" }
 ,{ "numbers" }
 ,{ "expects" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "in" }
 ,{ "the" }
 ,{ "form" }
 ,{ "(const" , & fmt_text_b }
 ,{ "Unit" , & fmt_text_b }
 ,{ "*a,ulen" , & fmt_text_b }
 ,{ "na)" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "a" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "body" }
 ,{ "and" }
 ,{ "na" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "body" }
 ,{ "length." }
 ,{ "An" }
 ,{ "argument" }
 ,{ "can" }
 ,{ "be" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "number" }
 ,{ "or" }
 ,{ "as" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "number." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case" }
 ,{ "the" }
 ,{ "function" }
 ,{ "name" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "U" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "Unit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "unit" }
 ,{ "type." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "UnitBits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "Unit" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "MaxUnit" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "unit," }
 ,{ "all" }
 ,{ "bits" }
 ,{ "are" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "MSBit" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "SignExt()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "sign" }
 ,{ "extension" }
 ,{ "unit" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "propagated" }
 ,{ "to" }
 ,{ "the" }
 ,{ "unit." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "CountZeroMSB()" , & fmt_text_b }
 ,{ "counts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "zero" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "unit." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "DoubleUDiv()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "long" }
 ,{ "unsigned" }
 ,{ "division." }
 ,{ "It" }
 ,{ "divides" }
 ,{ "the" }
 ,{ "double-size" }
 ,{ "number" }
 ,{ "with" }
 ,{ "the" }
 ,{ "high" }
 ,{ "part" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "low" }
 ,{ "part" }
 ,{ "lo" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "divisor" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "hi" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "is" }
 ,{ "representable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "unit)." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "USign()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "sign" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "It" }
 ,{ "always" }
 ,{ ">=0." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "Sign()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "sign" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "UCmp()" , & fmt_text_b }
 ,{ "compares" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "the" }
 ,{ "same" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "UCmp()" , & fmt_text_b }
 ,{ "compares" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "Cmp()" , & fmt_text_b }
 ,{ "compares" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "UNormalize()" , & fmt_text_b }
 ,{ "does" }
 ,{ "normalization" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "normalized" }
 ,{ "length." }
 ,{ "It" }
 ,{ "drop" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "units," }
 ,{ "equals" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "Normalize()" , & fmt_text_b }
 ,{ "does" }
 ,{ "normalization" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "normalized" }
 ,{ "length." }
 ,{ "It" }
 ,{ "drop" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "units," }
 ,{ "equals" }
 ,{ "propagated" }
 ,{ "MSB" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "unit." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "carry" }
 ,{ "from" }
 ,{ "or" }
 ,{ "a" }
 ,{ "borrow" }
 ,{ "to" }
 ,{ "the" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "when" }
 ,{ "doing" }
 ,{ "unsigned" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "UNeg()" , & fmt_text_b }
 ,{ "negates" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b83 = { {
 { "Neg()" , & fmt_text_b }
 ,{ "negates" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "result" }
 ,{ "length" }
 ,{ "is" }
 ,{ "na+1" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "original" }
 ,{ "body," }
 ,{ "but" }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "UAddUnit()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "b" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "na==0" , & fmt_text_b }
 ,{ "," }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b85 = { {
 { "USubUnit()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "b" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "na==0" , & fmt_text_b }
 ,{ "," }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "UAdd()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "b" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "length" }
 ,{ "nab" , & fmt_text_b }
 ,{ "and" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "Add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "b" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "b" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "a" , & fmt_text_b }
 ,{ "," }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "result" }
 ,{ "length" }
 ,{ "is" }
 ,{ "nb+1" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "b" , & fmt_text_b }
 ,{ "body," }
 ,{ "but" }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "USub()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "a" , & fmt_text_b }
 ,{ "from" }
 ,{ "b" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "length" }
 ,{ "nab" , & fmt_text_b }
 ,{ "and" }
 ,{ "does" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b89 = { {
 { "Sub()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "a" , & fmt_text_b }
 ,{ "from" }
 ,{ "b" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "b" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "a" , & fmt_text_b }
 ,{ "," }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "result" }
 ,{ "length" }
 ,{ "is" }
 ,{ "nb+1" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "b" , & fmt_text_b }
 ,{ "body," }
 ,{ "but" }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b90 = { {
 { "RevSub()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "b" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" , & fmt_text_b }
 ,{ "in-place" }
 ,{ "(reversed" }
 ,{ "subtraction)." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "b" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "a" , & fmt_text_b }
 ,{ "," }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "result" }
 ,{ "length" }
 ,{ "is" }
 ,{ "nb+1" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "b" , & fmt_text_b }
 ,{ "body," }
 ,{ "but" }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b91 = { {
 { "In" }
 ,{ "the" }
 ,{ "following" }
 ,{ "shift" }
 ,{ "operations" }
 ,{ "the" }
 ,{ "shift" }
 ,{ "length" }
 ,{ "shift" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "0" }
 ,{ "and" }
 ,{ "less" }
 ,{ "than" }
 ,{ "UnitBits" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b92 = { {
 { "ULShift()" , & fmt_text_b }
 ,{ "shifts" }
 ,{ "left" }
 ,{ "in-place" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "result" }
 ,{ "length" }
 ,{ "is" }
 ,{ "na+1" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "body," }
 ,{ "but" }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b93 = { {
 { "LShift()" , & fmt_text_b }
 ,{ "shifts" }
 ,{ "left" }
 ,{ "out-of-place" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "." }
 ,{ "a" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "result." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "result" }
 ,{ "length" }
 ,{ "is" }
 ,{ "nab+1" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "b" , & fmt_text_b }
 ,{ "body," }
 ,{ "but" }
 ,{ "returned" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b94 = { {
 { "ShiftUp()" , & fmt_text_b }
 ,{ "combines" }
 ,{ "the" }
 ,{ "left" }
 ,{ "shift" }
 ,{ "and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "up." }
 ,{ "It" }
 ,{ "shifts" }
 ,{ "the" }
 ,{ "na" , & fmt_text_b }
 ,{ "units" }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "result" }
 ,{ "up" }
 ,{ "by" }
 ,{ "the" }
 ,{ "delta" , & fmt_text_b }
 ,{ "units." }
 ,{ "The" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "but" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b95 = { {
 { "RShift()" , & fmt_text_b }
 ,{ "shifts" }
 ,{ "right" }
 ,{ "out-of-place." }
 ,{ "a" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "result." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b96 = { {
 { "ShiftDown()" , & fmt_text_b }
 ,{ "combines" }
 ,{ "the" }
 ,{ "right" }
 ,{ "shift" }
 ,{ "and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "down." }
 ,{ "It" }
 ,{ "shifts" }
 ,{ "the" }
 ,{ "na" , & fmt_text_b }
 ,{ "units" }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "a+delta" , & fmt_text_b }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "result" }
 ,{ "down" }
 ,{ "by" }
 ,{ "the" }
 ,{ "delta" , & fmt_text_b }
 ,{ "units." }
} , & fmt_text , & align_text } ;

Text b97 = { {
 { "UMul()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "product" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "places" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "na+nb" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "input" }
 ,{ "and" }
 ,{ "output" }
 ,{ "bodies" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b98 = { {
 { "UMulLo()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "product" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "places" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "na+nb" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "input" }
 ,{ "and" }
 ,{ "output" }
 ,{ "bodies" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b99 = { {
 { "Mul()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "product" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "places" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "na+nb" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "input" }
 ,{ "and" }
 ,{ "output" }
 ,{ "bodies" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b100 = { {
 { "Sq()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "square" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "places" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "2*na" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "input" }
 ,{ "and" }
 ,{ "output" }
 ,{ "bodies" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b101 = { {
 { "Null()" , & fmt_text_b }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b102 = { {
 { "Copy()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "data" }
 ,{ "from" }
 ,{ "one" }
 ,{ "range" }
 ,{ "to" }
 ,{ "another" }
 ,{ "disjoint" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b103 = { {
 { "MoveUp()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "up" }
 ,{ "the" }
 ,{ "body" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "larger" }
 ,{ "buffer" }
 ,{ "by" }
 ,{ "the" }
 ,{ "delta" , & fmt_text_b }
 ,{ "units." }
 ,{ "I.e." }
 ,{ "a[i+delta]" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "a[i]" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b104 = { {
 { "MoveDown()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "down" }
 ,{ "the" }
 ,{ "body" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "larger" }
 ,{ "buffer" }
 ,{ "by" }
 ,{ "the" }
 ,{ "delta" , & fmt_text_b }
 ,{ "units." }
 ,{ "I.e." }
 ,{ "a[i]" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "a[i+delta]" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b105 = { {
 { "The" }
 ,{ "following" }
 ,{ "content" }
 ,{ "is" }
 ,{ "not" }
 ,{ "required" }
 ,{ "by" }
 ,{ "the" }
 ,{ "Integer" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "should" }
 ,{ "also" }
 ,{ "be" }
 ,{ "included" }
 ,{ "in" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b106 = { {
 { "SignExt()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "sign" }
 ,{ "extension" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "unit." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "propagates" }
 ,{ "the" }
 ,{ "sign" }
 ,{ "bit" }
 ,{ "of" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b107 = { {
 { "SignCmp()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "signed" }
 ,{ "comparison" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "units." }
} , & fmt_text , & align_text } ;

Text b108 = { {
 { "CountZeroLSB()" , & fmt_text_b }
 ,{ "counts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "zero" }
 ,{ "least" }
 ,{ "significant" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "unit." }
} , & fmt_text , & align_text } ;

Text b109 = { {
 { "Cmp()" , & fmt_text_b }
 ,{ "compares" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "the" }
 ,{ "same" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b110 = { {
 { "AddUnit()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "b" , & fmt_text_b }
 ,{ "(regarded" }
 ,{ "as" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "number)" }
 ,{ "to" }
 ,{ "a" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "na==0" , & fmt_text_b }
 ,{ "," }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b111 = { {
 { "SubUnit()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "b" , & fmt_text_b }
 ,{ "(regarded" }
 ,{ "as" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "number)" }
 ,{ "from" }
 ,{ "a" , & fmt_text_b }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "na==0" , & fmt_text_b }
 ,{ "," }
 ,{ "-b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b112 = { {
 { "UNegAddUnit()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "a" , & fmt_text_b }
 ,{ "from" }
 ,{ "b" , & fmt_text_b }
 ,{ "(regarded" }
 ,{ "as" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "number)" }
 ,{ "in-place" }
 ,{ "(reversed" }
 ,{ "subtraction)." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "na==0" , & fmt_text_b }
 ,{ "," }
 ,{ "-b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b113 = { {
 { "NegAddUnit()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "a" , & fmt_text_b }
 ,{ "from" }
 ,{ "b" , & fmt_text_b }
 ,{ "(regarded" }
 ,{ "as" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "number)" }
 ,{ "in-place" }
 ,{ "(reversed" }
 ,{ "subtraction)." }
 ,{ "The" }
 ,{ "result" }
 ,{ "representation" }
 ,{ "requires" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "unit," }
 ,{ "this" }
 ,{ "unit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "na==0" , & fmt_text_b }
 ,{ "," }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b114 = { {
 { "URevSub()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "b" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" , & fmt_text_b }
 ,{ "in-place" }
 ,{ "(reversed" }
 ,{ "subtraction)." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "length" }
 ,{ "nab" , & fmt_text_b }
 ,{ "and" }
 ,{ "does" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b115 = { {
 { "UShiftUp()" , & fmt_text_b }
 ,{ "combines" }
 ,{ "the" }
 ,{ "left" }
 ,{ "shift" }
 ,{ "and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "up." }
 ,{ "It" }
 ,{ "shifts" }
 ,{ "the" }
 ,{ "na" , & fmt_text_b }
 ,{ "units" }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "result" }
 ,{ "up" }
 ,{ "by" }
 ,{ "the" }
 ,{ "delta" , & fmt_text_b }
 ,{ "units." }
 ,{ "The" }
 ,{ "MSU" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "but" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b116 = { {
 { "URShift()" , & fmt_text_b }
 ,{ "shifts" }
 ,{ "right" }
 ,{ "in-place." }
} , & fmt_text , & align_text } ;

Text b117 = { {
 { "UShiftDown()" , & fmt_text_b }
 ,{ "combines" }
 ,{ "the" }
 ,{ "right" }
 ,{ "shift" }
 ,{ "and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "down." }
 ,{ "It" }
 ,{ "shifts" }
 ,{ "the" }
 ,{ "na" , & fmt_text_b }
 ,{ "units" }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "a+delta" , & fmt_text_b }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "result" }
 ,{ "down" }
 ,{ "by" }
 ,{ "the" }
 ,{ "delta" , & fmt_text_b }
 ,{ "units." }
} , & fmt_text , & align_text } ;

Text b118 = { {
 { "UMac()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "\"multiplication" }
 ,{ "and" }
 ,{ "addition\"" }
 ,{ "operation." }
 ,{ "I.e." }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "are" }
 ,{ "multiplied" }
 ,{ "and" }
 ,{ "added" }
 ,{ "to" }
 ,{ "c" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "na+nb" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "input" }
 ,{ "and" }
 ,{ "output" }
 ,{ "bodies" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
 ,{ "The" }
 ,{ "bit" }
 ,{ "C" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b119 = { {
 { "USq()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "square" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "places" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "c" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "2*na" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "input" }
 ,{ "and" }
 ,{ "output" }
 ,{ "bodies" }
 ,{ "do" }
 ,{ "not" }
 ,{ "overlap." }
} , & fmt_text , & align_text } ;

Text b120 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" , & fmt_text_a }
 ,{ "slow" , & fmt_text_a }
 ,{ "implementaton" , & fmt_text_a }
 ,{ "of" }
 ,{ "this" }
 ,{ "algorithm" }
 ,{ "package" }
 ,{ "for" }
 ,{ "all" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "units." }
 ,{ "This" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "slow," }
 ,{ "for" }
 ,{ "example," }
 ,{ "it" }
 ,{ "has" }
 ,{ "quadratic" }
 ,{ "complexity" }
 ,{ "of" }
 ,{ "the" }
 ,{ "multiplication" }
 ,{ "operations." }
 ,{ "But" }
 ,{ "it" }
 ,{ "is" }
 ,{ "generic," }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "require" }
 ,{ "any" }
 ,{ "CPU-specific" }
 ,{ "assembler" }
 ,{ "code." }
 ,{ "This" }
 ,{ "package" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "an" }
 ,{ "algorithmic" }
 ,{ "reference" }
 ,{ "and" }
 ,{ "for" }
 ,{ "the" }
 ,{ "comparative" }
 ,{ "testing." }
} , & fmt_text , & align_text } ;

Text b121 = { {
 { "Any" }
 ,{ "target" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "fast" , & fmt_text_a }
 ,{ "implementation" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Integer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b5 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b6 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b7 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_text , outer_text , back_text }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_text , outer_text , back_text }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
 ,{ & b89 , null , inner_text , outer_text , back_text }
 ,{ & b90 , null , inner_text , outer_text , back_text }
 ,{ & b91 , null , inner_text , outer_text , back_text }
 ,{ & b92 , null , inner_text , outer_text , back_text }
 ,{ & b93 , null , inner_text , outer_text , back_text }
 ,{ & b94 , null , inner_text , outer_text , back_text }
 ,{ & b95 , null , inner_text , outer_text , back_text }
 ,{ & b96 , null , inner_text , outer_text , back_text }
 ,{ & b97 , null , inner_text , outer_text , back_text }
 ,{ & b98 , null , inner_text , outer_text , back_text }
 ,{ & b99 , null , inner_text , outer_text , back_text }
 ,{ & b100 , null , inner_text , outer_text , back_text }
 ,{ & b101 , null , inner_text , outer_text , back_text }
 ,{ & b102 , null , inner_text , outer_text , back_text }
 ,{ & b103 , null , inner_text , outer_text , back_text }
 ,{ & b104 , null , inner_text , outer_text , back_text }
 ,{ & b105 , null , inner_text , outer_text , back_text }
 ,{ & b106 , null , inner_text , outer_text , back_text }
 ,{ & b107 , null , inner_text , outer_text , back_text }
 ,{ & b108 , null , inner_text , outer_text , back_text }
 ,{ & b109 , null , inner_text , outer_text , back_text }
 ,{ & b110 , null , inner_text , outer_text , back_text }
 ,{ & b111 , null , inner_text , outer_text , back_text }
 ,{ & b112 , null , inner_text , outer_text , back_text }
 ,{ & b113 , null , inner_text , outer_text , back_text }
 ,{ & b114 , null , inner_text , outer_text , back_text }
 ,{ & b115 , null , inner_text , outer_text , back_text }
 ,{ & b116 , null , inner_text , outer_text , back_text }
 ,{ & b117 , null , inner_text , outer_text , back_text }
 ,{ & b118 , null , inner_text , outer_text , back_text }
 ,{ & b119 , null , inner_text , outer_text , back_text }
 ,{ & b120 , null , inner_text , outer_text , back_text }
 ,{ & b121 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_IntegerFastAlgo {

Text b0 = { {
 { "IntegerFastAlgo" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerFastAlgo.h" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "stub" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "integer" , & fmt_text_a }
 ,{ "fast" , & fmt_text_a }
 ,{ "algorithm" , & fmt_text_a }
 ,{ "package" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "But" }
 ,{ "any" }
 ,{ "target" }
 ,{ "should" }
 ,{ "supply" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "implementation," }
 ,{ "specific" }
 ,{ "to" }
 ,{ "the" }
 ,{ "target" }
 ,{ "CPU." }
 ,{ "You" }
 ,{ "may" }
 ,{ "implement" }
 ,{ "such" }
 ,{ "package" }
 ,{ "using" }
 ,{ "the" }
 ,{ "GMP" , & fmt_text_a }
 ,{ "library" , & fmt_text_a }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "find" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "it" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "WIN32" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_IntegerFastAlgo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_IntegerOctetBuilder {

Text b0 = { {
 { "IntegerOctetBuilder" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerOctetBuilder.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerOctetBuilder.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "A" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "integer" }
 ,{ "octet" }
 ,{ "representations." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "PrintIntegerOctets" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "PrintIntegerOctets<Integer>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "printable" }
 ,{ "object" }
 ,{ "to" }
 ,{ "print" }
 ,{ "an" }
 ,{ "octet" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Integer" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Below" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "the" }
 ,{ "print" }
 ,{ "output." }
 ,{ "It" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "\"\\n" , & fmt_text_b }
 ,{ "{\\n\"" , & fmt_text_b }
 ,{ "and" }
 ,{ "ends" }
 ,{ "with" }
 ,{ "\"\\n" , & fmt_text_b }
 ,{ "}\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "OctetInteger" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "Builds" }
 ,{ "an" }
 ,{ "Integer" }
 ,{ "from" }
 ,{ "the" }
 ,{ "octet" }
 ,{ "representation." }
 ,{ "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "octet" }
 ,{ "range," }
 ,{ "this" }
 ,{ "range" }
 ,{ "is" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "lendian" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "some" }
 ,{ "integer." }
} , & fmt_text , & align_text } ;

Page page = { "page_IntegerOctetBuilder" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_IntegerSlowAlgo {

Text b0 = { {
 { "IntegerSlowAlgo" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/IntegerSlowAlgo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/IntegerSlowAlgo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "IntegerSlowAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "integer" , & fmt_text_a }
 ,{ "algorithm" , & fmt_text_a }
 ,{ "package" , & fmt_text_a }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "package" }
 ,{ "for" }
 ,{ "algorithm" }
 ,{ "definitions" }
 ,{ "and" }
 ,{ "for" }
 ,{ "comparative" }
 ,{ "testing." }
 ,{ "IntegerSlowAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "template," }
 ,{ "its" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Page page = { "page_IntegerSlowAlgo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_InterfaceHost {

Text b0 = { {
 { "InterfaceHost" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/InterfaceHost.h" , & fmt_text_Files_b }
 ,{ "CCore/src/InterfaceHost.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "In" }
 ,{ "C++" }
 ,{ "by" }
 ,{ "tradition" }
 ,{ "we" }
 ,{ "implement" }
 ,{ "interfaces" }
 ,{ "using" }
 ,{ "abstract" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Then" }
 ,{ "we" }
 ,{ "implement" }
 ,{ "this" }
 ,{ "interface" }
 ,{ "in" }
 ,{ "some" }
 ,{ "derived" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Once" }
 ,{ "we" }
 ,{ "have" }
 ,{ "a" }
 ,{ "base" }
 ,{ "object" }
 ,{ "pointer" }
 ,{ "we" }
 ,{ "can" }
 ,{ "retrieve" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "using" }
 ,{ "the" }
 ,{ "dynamic_cast" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "This" }
 ,{ "approach" }
 ,{ "is" }
 ,{ "simple," }
 ,{ "but" }
 ,{ "have" }
 ,{ "one" }
 ,{ "big" }
 ,{ "disadvantage." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "interface" }
 ,{ "in" }
 ,{ "the" }
 ,{ "object." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "borrow" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "from" }
 ,{ "another" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "InterfaceHost" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "to" }
 ,{ "solve" }
 ,{ "this" }
 ,{ "problem." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "with" }
 ,{ "one" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "requestInterface()" , & fmt_text_b }
 ,{ "and" }
 ,{ "two" }
 ,{ "helper" }
 ,{ "methods" }
 ,{ "pickInterface()" , & fmt_text_b }
 ,{ "and" }
 ,{ "takeInterface()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "method" }
 ,{ "requestInterface()" , & fmt_text_b }
 ,{ "has" }
 ,{ "default" }
 ,{ "implementation," }
 ,{ "this" }
 ,{ "variant" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "required" }
 ,{ "interface" }
 ,{ "from" }
 ,{ "the" }
 ,{ "host" }
 ,{ "class." }
 ,{ "But" }
 ,{ "you" }
 ,{ "can" }
 ,{ "override" }
 ,{ "this" }
 ,{ "behavior" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "to" }
 ,{ "take" }
 ,{ "interfaces" }
 ,{ "from" }
 ,{ "another" }
 ,{ "sources:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "may" }
 ,{ "do" }
 ,{ "nothing" }
 ,{ "to" }
 ,{ "reject" }
 ,{ "some" }
 ,{ "interface" }
 ,{ "request." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "\"caster\"" }
 ,{ "interface" }
 ,{ "InterfaceCaster" , & fmt_text_b }
 ,{ "has" }
 ,{ "two" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "cast()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "dynamic_cast" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "requested" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "getTypeNumber()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "type" , & fmt_text_a }
 ,{ "number" , & fmt_text_a }
 ,{ "of" }
 ,{ "the" }
 ,{ "requested" }
 ,{ "interface." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "one" }
 ,{ "to" }
 ,{ "dispatch" }
 ,{ "the" }
 ,{ "cast" }
 ,{ "operation" }
 ,{ "between" }
 ,{ "multiple" }
 ,{ "sources." }
 ,{ "You" }
 ,{ "must" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "Unid" , & fmt_text_a }
 ,{ "to" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "T" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "pickInterface<T>()" , & fmt_text_b }
 ,{ "requests" }
 ,{ "the" }
 ,{ "specific" }
 ,{ "interface," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter." }
 ,{ "If" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "is" }
 ,{ "not" }
 ,{ "supported" }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "T" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "takeInterface<T>(StrLen" , & fmt_text_b }
 ,{ "from)" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "is" }
 ,{ "not" }
 ,{ "supported." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "from" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "report" }
 ,{ "the" }
 ,{ "requester." }
 ,{ "To" }
 ,{ "throw" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "the" }
 ,{ "function" }
 ,{ "GuardNoInterface()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "created" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "GetInterfaceName<T>" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "constant" }
 ,{ "T::InterfaceName" , & fmt_text_b }
 ,{ "or" }
 ,{ "the" }
 ,{ "name" }
 ,{ "\"<Unknown" , & fmt_text_b }
 ,{ "interface>\"" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "such" }
 ,{ "constant" }
 ,{ "does" }
 ,{ "not" }
 ,{ "exist." }
} , & fmt_text , & align_text } ;

Page page = { "page_InterfaceHost" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_IntervalTree {

Text b0 = { {
 { "IntervalTree" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/IntervalTree.h" , & fmt_text_Files_b }
 ,{ "CCore/src/IntervalTree.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "IntervalTree" , & fmt_text_b }
 ,{ "solves" }
 ,{ "the" }
 ,{ "following" }
 ,{ "problem:" }
 ,{ "assume" }
 ,{ "we" }
 ,{ "have" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "intervals." }
 ,{ "We" }
 ,{ "need" }
 ,{ "an" }
 ,{ "efficient" }
 ,{ "algorithm" }
 ,{ "to" }
 ,{ "pick" }
 ,{ "such" }
 ,{ "of" }
 ,{ "them," }
 ,{ "which" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "given" }
 ,{ "point." }
 ,{ "Intervals" }
 ,{ "are" }
 ,{ "given" }
 ,{ "as" }
 ,{ "couples" }
 ,{ "{a,b}" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "of" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "Such" }
 ,{ "couple" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "interval" }
 ,{ "[a,b)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "IntervalTree" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" , & fmt_text_b }
 ,{ "movable." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "main" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "two" }
 ,{ "arguments:" }
 ,{ "the" }
 ,{ "first" }
 ,{ "is" }
 ,{ "some" }
 ,{ "range" , & fmt_text_b }
 ,{ "(most" }
 ,{ "likely" }
 ,{ "of" }
 ,{ "some" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "type)." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor," }
 ,{ "this" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "extract" }
 ,{ "intervals" }
 ,{ "from" }
 ,{ "the" }
 ,{ "range" }
 ,{ "objects." }
 ,{ "For" }
 ,{ "each" }
 ,{ "such" }
 ,{ "interval" }
 ,{ "the" }
 ,{ "object" }
 ,{ "index" }
 ,{ "is" }
 ,{ "recorded." }
 ,{ "Constructor" }
 ,{ "builds" }
 ,{ "a" }
 ,{ "search" }
 ,{ "engine." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "method" }
 ,{ "find()" , & fmt_text_b }
 ,{ "performes" }
 ,{ "the" }
 ,{ "search" }
 ,{ "of" }
 ,{ "intervals," }
 ,{ "which" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "given" }
 ,{ "point" , & fmt_text_b }
 ,{ "." }
 ,{ "For" }
 ,{ "each" }
 ,{ "found" }
 ,{ "interval" }
 ,{ "its" }
 ,{ "index" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "func" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "find" , & fmt_text_b }
 ,{ "is" }
 ,{ "called," }
 ,{ "if" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "has" }
 ,{ "bool" , & fmt_text_b }
 ,{ "return" }
 ,{ "value." }
 ,{ "You" }
 ,{ "can" }
 ,{ "break" }
 ,{ "the" }
 ,{ "search" }
 ,{ "process" }
 ,{ "by" }
 ,{ "returning" }
 ,{ "false" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "functor." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "also." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "full" }
 ,{ "set" }
 ,{ "of" }
 ,{ "indexes" }
 ,{ "is" }
 ,{ "covered" }
 ,{ "and" }
 ,{ "true" , & fmt_text_b }
 ,{ "is" }
 ,{ "retruned." }
} , & fmt_text , & align_text } ;

Page page = { "page_IntervalTree" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Introduction {

Text b0 = { {
 { "Introduction" }
} , & fmt_h1 , & align_h1 } ;

Text b1 = { {
 { "Disclaimer" }
} , & fmt_h2 , & align_h2 } ;

Text b2 = { {
 { "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "released" }
 ,{ "without" }
 ,{ "known" }
 ,{ "bugs" }
 ,{ "or" }
 ,{ "defects" }
 ,{ "(but" }
 ,{ "an" }
 ,{ "intermediate" }
 ,{ "states" }
 ,{ "of" }
 ,{ "the" }
 ,{ "repository" }
 ,{ "between" }
 ,{ "release" }
 ,{ "tags" }
 ,{ "MAY" }
 ,{ "be" }
 ,{ "broken)." }
 ,{ "This" }
 ,{ "code" }
 ,{ "is" }
 ,{ "made" }
 ,{ "\"as" }
 ,{ "best" }
 ,{ "as" }
 ,{ "possible\"" }
 ,{ "and" }
 ,{ "has" }
 ,{ "a" }
 ,{ "top" }
 ,{ "quality" }
 ,{ "both" }
 ,{ "in" }
 ,{ "design" }
 ,{ "and" }
 ,{ "implementation." }
 ,{ "It's" }
 ,{ "a" }
 ,{ "reliable" }
 ,{ "piece" }
 ,{ "of" }
 ,{ "software." }
 ,{ "So" }
 ,{ "if" }
 ,{ "you" }
 ,{ "experience" }
 ,{ "troubles," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "code" }
 ,{ "is" }
 ,{ "the" }
 ,{ "last" }
 ,{ "place" }
 ,{ "to" }
 ,{ "look" }
 ,{ "for" }
 ,{ "bugs." }
 ,{ "This" }
 ,{ "does" }
 ,{ "not" }
 ,{ "mean," }
 ,{ "naturally," }
 ,{ "that" }
 ,{ "I" }
 ,{ "do" }
 ,{ "guarantee" }
 ,{ "the" }
 ,{ "code" }
 ,{ "is" }
 ,{ "completely" }
 ,{ "bug-free" }
 ,{ "and" }
 ,{ "absolutely" }
 ,{ "perfect." }
 ,{ "That" }
 ,{ "is" }
 ,{ "not" }
 ,{ "achievable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "mean" }
 ,{ "time." }
 ,{ "And," }
 ,{ "of" }
 ,{ "course," }
 ,{ "everybody" }
 ,{ "is" }
 ,{ "welcome" }
 ,{ "to" }
 ,{ "contribute" }
 ,{ "in" }
 ,{ "its" }
 ,{ "perfection:" }
 ,{ "report" }
 ,{ "a" }
 ,{ "real" }
 ,{ "problem" }
 ,{ "or" }
 ,{ "suggest" }
 ,{ "a" }
 ,{ "design" }
 ,{ "improvement." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Overview" }
} , & fmt_h2 , & align_h2 } ;

Text b4 = { {
 { "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "platform" , & fmt_text_i }
 ,{ "mainly" }
 ,{ "for" }
 ,{ "the" }
 ,{ "development" }
 ,{ "of" }
 ,{ "real-time" }
 ,{ "applications." }
 ,{ "It" }
 ,{ "is" }
 ,{ "distributed" }
 ,{ "under" }
 ,{ "the" }
 ,{ "Boost" , & fmt_text_a }
 ,{ "Software" , & fmt_text_a }
 ,{ "License" , & fmt_text_a }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "to" }
 ,{ "build" }
 ,{ "host" }
 ,{ "applications" }
 ,{ "also," }
 ,{ "but" }
 ,{ "without" }
 ,{ "any" }
 ,{ "real-time" }
 ,{ "properties." }
 ,{ "We" }
 ,{ "use" }
 ,{ "the" }
 ,{ "term" }
 ,{ "\"host" }
 ,{ "application\"" }
 ,{ "to" }
 ,{ "designate" }
 ,{ "an" }
 ,{ "application," }
 ,{ "running" }
 ,{ "on" }
 ,{ "a" }
 ,{ "host" }
 ,{ "machine." }
 ,{ "\"Stand-alone" }
 ,{ "application\"" }
 ,{ "means" }
 ,{ "an" }
 ,{ "application," }
 ,{ "running" }
 ,{ "on" }
 ,{ "a" }
 ,{ "stand-alone" }
 ,{ "device." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multi-target" }
 ,{ "platform," }
 ,{ "you" }
 ,{ "can" }
 ,{ "(and," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "must!)" }
 ,{ "develop" }
 ,{ "your" }
 ,{ "own" }
 ,{ "target" }
 ,{ "(host" }
 ,{ "or" }
 ,{ "stand-alone)" }
 ,{ "for" }
 ,{ "your" }
 ,{ "specific" }
 ,{ "target" }
 ,{ "device." }
 ,{ "The" }
 ,{ "installation" }
 ,{ "of" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "the" }
 ,{ "following" }
 ,{ "targets:" }
} , & fmt_text , & align_text } ;

Text b5_0 = { {
 { "WIN32" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "default" }
 ,{ "host" }
 ,{ "target," }
 ,{ "based" }
 ,{ "on" }
 ,{ "cygwin" , & fmt_list_b }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b5_1 = { {
 { "WIN64" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "host" }
 ,{ "target" }
 ,{ "for" }
 ,{ "cygwin64" , & fmt_list_b }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b5_2 = { {
 { "LIN64" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "host" }
 ,{ "target" }
 ,{ "for" }
 ,{ "64-bits" }
 ,{ "Linux," }
} , & fmt_list , & align_list } ;

Text b5_3 = { {
 { "BeagleBoneBlack" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "stand-alone" }
 ,{ "target" }
 ,{ "for" }
 ,{ "the" }
 ,{ "BeagleBone" , & fmt_list_a }
 ,{ "Black" , & fmt_list_a }
 ,{ "device," }
} , & fmt_list , & align_list } ;

Text b5_4 = { {
 { "Vanilla-H" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "host" }
 ,{ "target" }
 ,{ "template," }
} , & fmt_list , & align_list } ;

Text b5_5 = { {
 { "Vanilla-X" , & fmt_list_b }
 ,{ "â€”" }
 ,{ "stand-alone" }
 ,{ "target" }
 ,{ "template." }
} , & fmt_list , & align_list } ;

TextList b5 = { {
 { 'â€¢' , { { & b5_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b5_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b5_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b5_3 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b5_4 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b5_5 , null , ItemInner , ItemOuter } } }
} } ;

Text b6 = { {
 { "Target" , & fmt_text_b }
 ,{ "includes" }
 ,{ "compiler" }
 ,{ "and" }
 ,{ "tools," }
 ,{ "makefile" }
 ,{ "rules" }
 ,{ "and" }
 ,{ "parts" }
 ,{ "of" }
 ,{ "source" }
 ,{ "code," }
 ,{ "specific" }
 ,{ "for" }
 ,{ "the" }
 ,{ "target." }
 ,{ "In" }
 ,{ "most" }
 ,{ "cases" }
 ,{ "you" }
 ,{ "are" }
 ,{ "encouraged" }
 ,{ "to" }
 ,{ "develop" }
 ,{ "components" }
 ,{ "of" }
 ,{ "your" }
 ,{ "application" }
 ,{ "using" }
 ,{ "WIN32" , & fmt_text_b }
 ,{ "target" }
 ,{ "(or" }
 ,{ "another" }
 ,{ "host" }
 ,{ "target)" }
 ,{ "and" }
 ,{ "then" }
 ,{ "port" }
 ,{ "it" }
 ,{ "to" }
 ,{ "a" }
 ,{ "stand-alone" }
 ,{ "target" }
 ,{ "when" }
 ,{ "it's" }
 ,{ "ready." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "in" }
 ,{ "target-independent" }
 ,{ "and" }
 ,{ "platform-independent" }
 ,{ "manner" }
 ,{ "(despite" }
 ,{ "it's" }
 ,{ "a" }
 ,{ "platform" }
 ,{ "itself!)." }
 ,{ "So" }
 ,{ "it's" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "follow" }
 ,{ "this" }
 ,{ "practice." }
 ,{ "Developing" }
 ,{ "components" }
 ,{ "on" }
 ,{ "a" }
 ,{ "host" }
 ,{ "target" }
 ,{ "is" }
 ,{ "usually" }
 ,{ "simpler" }
 ,{ "and" }
 ,{ "more" }
 ,{ "productive." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "C++17+concepts" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "enables" }
 ,{ "the" }
 ,{ "full" }
 ,{ "advantage" }
 ,{ "of" }
 ,{ "this" }
 ,{ "renewed" }
 ,{ "language" }
 ,{ "for" }
 ,{ "the" }
 ,{ "embedded" }
 ,{ "and" }
 ,{ "real-time" }
 ,{ "software" }
 ,{ "development." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "use" }
 ,{ "it" }
 ,{ "to" }
 ,{ "build" }
 ,{ "usual" }
 ,{ "host" }
 ,{ "applications." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "well-suited" }
 ,{ "to" }
 ,{ "develop" }
 ,{ "a" }
 ,{ "wide" }
 ,{ "range" }
 ,{ "of" }
 ,{ "applications" }
 ,{ "like" }
 ,{ "servers," }
 ,{ "mathematical" }
 ,{ "calculations" }
 ,{ "or" }
 ,{ "file-processing" }
 ,{ "utilities." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "them" }
 ,{ "are" }
 ,{ "supplied" }
 ,{ "as" }
 ,{ "supplementary" }
 ,{ "tools." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "comprehensive," }
 ,{ "type-rich" }
 ,{ "library," }
 ,{ "well," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "That's" }
 ,{ "the" }
 ,{ "core" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "platform." }
 ,{ "The" }
 ,{ "next" }
 ,{ "part" }
 ,{ "is" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "for" }
 ,{ "host" }
 ,{ "targets" }
 ,{ "and" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "for" }
 ,{ "stand-alone" }
 ,{ "targets." }
 ,{ "On" }
 ,{ "host" }
 ,{ "targets" }
 ,{ "we" }
 ,{ "rely" }
 ,{ "on" }
 ,{ "an" }
 ,{ "operating" }
 ,{ "system" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "some" }
 ,{ "tasks" }
 ,{ "(like" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "management," }
 ,{ "task" }
 ,{ "synchronization" }
 ,{ "etc.)." }
 ,{ "So" }
 ,{ "a" }
 ,{ "host" }
 ,{ "target" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "tiny" }
 ,{ "layer" }
 ,{ "between" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "OS" }
 ,{ "system" }
 ,{ "calls." }
 ,{ "But" }
 ,{ "on" }
 ,{ "a" }
 ,{ "stand-alone" }
 ,{ "target" }
 ,{ "we" }
 ,{ "implements" }
 ,{ "these" }
 ,{ "fundamental" }
 ,{ "functions" }
 ,{ "ourself." }
 ,{ "XCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "this" }
 ,{ "part" }
 ,{ "for" }
 ,{ "single-core" , & fmt_text_Alert }
 ,{ "CPUs." }
 ,{ "A" }
 ,{ "target" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "very" }
 ,{ "low-level" }
 ,{ "CPU" }
 ,{ "specific" }
 ,{ "functions" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "based" }
 ,{ "on." }
 ,{ "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "following" }
 ,{ "3" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "required" }
 ,{ "for" }
 ,{ "interrupt" }
 ,{ "lock" }
 ,{ "support:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "as" }
 ,{ "a" }
 ,{ "compliant" , & fmt_text_Alert }
 ,{ "C++17+concepts" , & fmt_text_b }
 ,{ "library." }
 ,{ "There" }
 ,{ "are" }
 ,{ "a" }
 ,{ "few" }
 ,{ "places" }
 ,{ "where" }
 ,{ "we" }
 ,{ "are" }
 ,{ "using" }
 ,{ "non-standard" }
 ,{ "language" }
 ,{ "extensions." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "we" }
 ,{ "need" }
 ,{ "only" }
 ,{ "two" }
 ,{ "of" }
 ,{ "them:" }
 ,{ "restrict" , & fmt_text_b }
 ,{ "and" }
 ,{ "initialization" }
 ,{ "priority" }
 ,{ "attributes" }
 ,{ "for" }
 ,{ "static" }
 ,{ "objects," }
 ,{ "supported" }
 ,{ "in" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "family" }
 ,{ "of" }
 ,{ "compilers." }
 ,{ "As" }
 ,{ "the" }
 ,{ "result," }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "restriction" }
 ,{ "on" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "optimization" }
 ,{ "level," }
 ,{ "unlike" }
 ,{ "other" }
 ,{ "OS" }
 ,{ "cores." }
 ,{ "Another" }
 ,{ "advantage" }
 ,{ "is" }
 ,{ "the" }
 ,{ "platform-independence" }
 ,{ "of" }
 ,{ "the" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "CCore" }
} , & fmt_h2 , & align_h2 } ;

Text b10 = { {
 { "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "language" }
 ,{ "support" }
 ,{ "library." }
 ,{ "It's" }
 ,{ "created" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "an" }
 ,{ "improved" }
 ,{ "language" }
 ,{ "support" }
 ,{ "for" }
 ,{ "C++" }
 ,{ "and" }
 ,{ "to" }
 ,{ "replace" }
 ,{ "the" }
 ,{ "error-prone" }
 ,{ "and" }
 ,{ "obsolete" }
 ,{ "\"old" }
 ,{ "bad\"" }
 ,{ "C" }
 ,{ "RTL" }
 ,{ "and" }
 ,{ "STL." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "focused" }
 ,{ "on" }
 ,{ "the" }
 ,{ "\"everyday" }
 ,{ "programmer's" }
 ,{ "needs\"," }
 ,{ "it" }
 ,{ "tries" }
 ,{ "to" }
 ,{ "be" }
 ,{ "small," }
 ,{ "but" }
 ,{ "powerful." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "In" }
 ,{ "particular," }
 ,{ "it" }
 ,{ "contains:" }
} , & fmt_text , & align_text } ;

Text b12_0 = { {
 { "PtrLen" , & fmt_list_b }
 ,{ "and" }
 ,{ "Range" , & fmt_list_b }
 ,{ "for" }
 ,{ "convenient" }
 ,{ "and" }
 ,{ "efficient" }
 ,{ "ranges" }
 ,{ "and" }
 ,{ "loops," }
} , & fmt_list , & align_list } ;

Text b12_1 = { {
 { "Printf" , & fmt_list_b }
 ,{ "with" }
 ,{ "class" }
 ,{ "print" }
 ,{ "support," }
 ,{ "easily" }
 ,{ "customized" }
 ,{ "output" }
 ,{ "devices" }
 ,{ "and" }
 ,{ "options," }
} , & fmt_list , & align_list } ;

Text b12_2 = { {
 { "Function" , & fmt_list_b }
 ,{ "for" }
 ,{ "efficient" }
 ,{ "callback" }
 ,{ "support," }
} , & fmt_list , & align_list } ;

Text b12_3 = { {
 { "Mersenne" }
 ,{ "Twister" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generator," }
} , & fmt_list , & align_list } ;

Text b12_4 = { {
 { "Radix-tree" }
 ,{ "based" }
 ,{ "heap" , & fmt_list_b }
 ,{ "with" }
 ,{ "real-time" }
 ,{ "properties," }
} , & fmt_list , & align_list } ;

Text b12_5 = { {
 { "Swap-based" }
 ,{ "intro-sort," }
} , & fmt_list , & align_list } ;

Text b12_6 = { {
 { "Cmp/Move/Swap" , & fmt_list_b }
 ,{ "support," }
} , & fmt_list , & align_list } ;

Text b12_7 = { {
 { "Error-handling" }
 ,{ "infrastructure" }
 ,{ "to" }
 ,{ "support" }
 ,{ "multi-error" }
 ,{ "handling," }
} , & fmt_list , & align_list } ;

Text b12_8 = { {
 { "Any" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "lists" , & fmt_list_b }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b12_9 = { {
 { "Radix" }
 ,{ "and" }
 ,{ "Red-Black" }
 ,{ "trees" , & fmt_list_b }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b12_10 = { {
 { "Properly" }
 ,{ "implemented" }
 ,{ "dynamic" }
 ,{ "arrays" , & fmt_list_b }
 ,{ "(bye-bye" }
 ,{ "STL)," }
} , & fmt_list , & align_list } ;

Text b12_11 = { {
 { "Packet" , & fmt_list_b }
 ,{ "," }
 ,{ "an" }
 ,{ "async" }
 ,{ "processing" }
 ,{ "infrastructure," }
 ,{ "a" }
 ,{ "key" }
 ,{ "foundation" }
 ,{ "for" }
 ,{ "a" }
 ,{ "system" }
 ,{ "layer" }
 ,{ "and" }
 ,{ "server" }
 ,{ "applications," }
} , & fmt_list , & align_list } ;

Text b12_12 = { {
 { "Integer" , & fmt_list_b }
 ,{ "library," }
 ,{ "you" }
 ,{ "may" }
 ,{ "even" }
 ,{ "calculate" }
 ,{ "1000000" }
 ,{ "digits" }
 ,{ "of" }
 ,{ "$," }
} , & fmt_list , & align_list } ;

Text b12_13 = { {
 { "Crypton" , & fmt_list_b }
 ,{ "library," }
} , & fmt_list , & align_list } ;

Text b12_14 = { {
 { "Fast" }
 ,{ "log" }
 ,{ "and" }
 ,{ "event" }
 ,{ "recorder," }
} , & fmt_list , & align_list } ;

Text b12_15 = { {
 { "New" }
 ,{ "network" }
 ,{ "infrastructure," }
 ,{ "based" }
 ,{ "on" }
 ,{ "PTP" , & fmt_list_b }
 ,{ "protocol," }
} , & fmt_list , & align_list } ;

Text b12_16 = { {
 { "DDL(data-definition" , & fmt_list_b }
 ,{ "language)" , & fmt_list_b }
 ,{ "implementation," }
} , & fmt_list , & align_list } ;

Text b12_17 = { {
 { "and" }
 ,{ "many" }
 ,{ "other" }
 ,{ "helpful" }
 ,{ "tools." }
} , & fmt_list , & align_list } ;

TextList b12 = { {
 { '1.' , { { & b12_0 , null , ItemInner , ItemOuter } } }
 ,{ '2.' , { { & b12_1 , null , ItemInner , ItemOuter } } }
 ,{ '3.' , { { & b12_2 , null , ItemInner , ItemOuter } } }
 ,{ '4.' , { { & b12_3 , null , ItemInner , ItemOuter } } }
 ,{ '5.' , { { & b12_4 , null , ItemInner , ItemOuter } } }
 ,{ '6.' , { { & b12_5 , null , ItemInner , ItemOuter } } }
 ,{ '7.' , { { & b12_6 , null , ItemInner , ItemOuter } } }
 ,{ '8.' , { { & b12_7 , null , ItemInner , ItemOuter } } }
 ,{ '9.' , { { & b12_8 , null , ItemInner , ItemOuter } } }
 ,{ '10.' , { { & b12_9 , null , ItemInner , ItemOuter } } }
 ,{ '11.' , { { & b12_10 , null , ItemInner , ItemOuter } } }
 ,{ '12.' , { { & b12_11 , null , ItemInner , ItemOuter } } }
 ,{ '13.' , { { & b12_12 , null , ItemInner , ItemOuter } } }
 ,{ '14.' , { { & b12_13 , null , ItemInner , ItemOuter } } }
 ,{ '15.' , { { & b12_14 , null , ItemInner , ItemOuter } } }
 ,{ '16.' , { { & b12_15 , null , ItemInner , ItemOuter } } }
 ,{ '17.' , { { & b12_16 , null , ItemInner , ItemOuter } } }
 ,{ '18.' , { { & b12_17 , null , ItemInner , ItemOuter } } }
} } ;

Text b13 = { {
 { "Starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "version" }
 ,{ "3.5" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "made" }
 ,{ "compatible" }
 ,{ "with" }
 ,{ "the" }
 ,{ "UTF8" }
 ,{ "character" }
 ,{ "encoding." }
 ,{ "Previous" }
 ,{ "versions" }
 ,{ "silently" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" }
 ,{ "single" }
 ,{ "byte" }
 ,{ "encoding" }
 ,{ "is" }
 ,{ "used." }
 ,{ "New" }
 ,{ "versions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "UTF8-compatible" }
 ,{ "targets." }
 ,{ "Several" }
 ,{ "such" }
 ,{ "targets" }
 ,{ "are" }
 ,{ "included:" }
} , & fmt_text , & align_text } ;

Text b14_0 = { {
 { "WIN32utf8" , & fmt_list_b }
} , & fmt_list , & align_list } ;

Text b14_1 = { {
 { "WIN64utf8" , & fmt_list_b }
} , & fmt_list , & align_list } ;

Text b14_2 = { {
 { "LIN64utf8" , & fmt_list_b }
} , & fmt_list , & align_list } ;

Text b14_3 = { {
 { "BeagleBoneBlack" , & fmt_list_b }
 ,{ "is" }
 ,{ "made" }
 ,{ "UTF8-compatible" }
} , & fmt_list , & align_list } ;

TextList b14 = { {
 { 'â€¢' , { { & b14_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b14_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b14_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b14_3 , null , ItemInner , ItemOuter } } }
} } ;

Text b15 = { {
 { "XCore" }
} , & fmt_h2 , & align_h2 } ;

Text b16 = { {
 { "XCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multi-task" }
 ,{ "core" }
 ,{ "for" }
 ,{ "embedded" }
 ,{ "systems." }
 ,{ "It" }
 ,{ "is" }
 ,{ "combined" }
 ,{ "with" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "library." }
 ,{ "The" }
 ,{ "core" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "for" }
 ,{ "single-core" }
 ,{ "CPU" }
 ,{ "systems." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "XCore" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b18_0 = { {
 { "provides" }
 ,{ "a" }
 ,{ "rich" }
 ,{ "set" }
 ,{ "of" }
 ,{ "synchronization" }
 ,{ "objects" }
 ,{ "and" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "way" }
 ,{ "to" }
 ,{ "construct" }
 ,{ "additional" }
 ,{ "ones," }
} , & fmt_list , & align_list } ;

Text b18_1 = { {
 { "implements" }
 ,{ "priority" }
 ,{ "inheritance" }
 ,{ "and" }
 ,{ "deadlock" }
 ,{ "detection" }
 ,{ "for" }
 ,{ "mutexes," }
} , & fmt_list , & align_list } ;

Text b18_2 = { {
 { "task" }
 ,{ "scheduler" }
 ,{ "switches" }
 ,{ "on" }
 ,{ "high" }
 ,{ "frequency" }
 ,{ "(10" }
 ,{ "kHz" }
 ,{ "for" }
 ,{ "BeagleBoneBlack" , & fmt_list_b }
 ,{ "platform)," }
 ,{ "that" }
 ,{ "provides" }
 ,{ "fine-grained" }
 ,{ "task" }
 ,{ "execution," }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "system" }
 ,{ "is" }
 ,{ "highly" }
 ,{ "responsive," }
} , & fmt_list , & align_list } ;

Text b18_3 = { {
 { "scheduler" }
 ,{ "supports" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "relaxation," }
 ,{ "that" }
 ,{ "protects" }
 ,{ "low" }
 ,{ "priority" }
 ,{ "tasks" }
 ,{ "from" }
 ,{ "complete" }
 ,{ "execution" }
 ,{ "hold-on," }
} , & fmt_list , & align_list } ;

Text b18_4 = { {
 { "full" }
 ,{ "support" }
 ,{ "for" }
 ,{ "C++17," }
} , & fmt_list , & align_list } ;

Text b18_5 = { {
 { "no" }
 ,{ "limitation" }
 ,{ "for" }
 ,{ "compiler" }
 ,{ "optimization" }
 ,{ "level," }
} , & fmt_list , & align_list } ;

Text b18_6 = { {
 { "clear" }
 ,{ "target" }
 ,{ "requirements." }
} , & fmt_list , & align_list } ;

TextList b18 = { {
 { '1.' , { { & b18_0 , null , ItemInner , ItemOuter } } }
 ,{ '2.' , { { & b18_1 , null , ItemInner , ItemOuter } } }
 ,{ '3.' , { { & b18_2 , null , ItemInner , ItemOuter } } }
 ,{ '4.' , { { & b18_3 , null , ItemInner , ItemOuter } } }
 ,{ '5.' , { { & b18_4 , null , ItemInner , ItemOuter } } }
 ,{ '6.' , { { & b18_5 , null , ItemInner , ItemOuter } } }
 ,{ '7.' , { { & b18_6 , null , ItemInner , ItemOuter } } }
} } ;

Text b19 = { {
 { "Task" }
 ,{ "synchronization" }
} , & fmt_h2 , & align_h2 } ;

Text b20 = { {
 { "One" }
 ,{ "of" }
 ,{ "the" }
 ,{ "innovation" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "task" }
 ,{ "synchronization" }
 ,{ "objects." }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "," }
 ,{ "Event" , & fmt_text_b }
 ,{ "and" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "(aphore)" }
 ,{ "are" }
 ,{ "common." }
 ,{ "But" }
 ,{ "we" }
 ,{ "widely" }
 ,{ "use" }
 ,{ "also:" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "," }
 ,{ "ResSem" , & fmt_text_b }
 ,{ "," }
 ,{ "MultiSem" , & fmt_text_b }
 ,{ "," }
 ,{ "MultiEvent" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "useful" }
 ,{ "for" }
 ,{ "the" }
 ,{ "resource" }
 ,{ "control:" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "AntiSem" , & fmt_text_b }
 ,{ "waits" }
 ,{ "until" }
 ,{ "\"all" }
 ,{ "taken" }
 ,{ "is" }
 ,{ "released\"." }
 ,{ "I.e." }
 ,{ "until" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "counter" }
 ,{ "falls" }
 ,{ "below" }
 ,{ "a" }
 ,{ "given" }
 ,{ "level" }
 ,{ "(usually" }
 ,{ "0)." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "ResSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "a" }
 ,{ "resource" }
 ,{ "allocation." }
 ,{ "It" }
 ,{ "is" }
 ,{ "combined" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "and" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "ResSem" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "counter" }
 ,{ "between" }
 ,{ "0" }
 ,{ "and" }
 ,{ "the" }
 ,{ "given" }
 ,{ "max_count" , & fmt_text_b }
 ,{ "(initial" }
 ,{ "value)." }
 ,{ "You" }
 ,{ "can" }
 ,{ "take" , & fmt_text_b }
 ,{ "and" }
 ,{ "give" , & fmt_text_b }
 ,{ "it" }
 ,{ "back." }
 ,{ "take" , & fmt_text_b }
 ,{ "may" }
 ,{ "wait" }
 ,{ "if" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "zero." }
 ,{ "Finally," }
 ,{ "wait" , & fmt_text_b }
 ,{ "waits" }
 ,{ "until" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "reaches" }
 ,{ "max_count" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "MultiSem" , & fmt_text_b }
 ,{ "and" }
 ,{ "MultiEvent" , & fmt_text_b }
 ,{ "are" }
 ,{ "\"multi-channel\"" }
 ,{ "versions" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "and" }
 ,{ "Event" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "can" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "several" }
 ,{ "events." }
 ,{ "They" }
 ,{ "also" }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "\"fairness\"" }
 ,{ "in" }
 ,{ "the" }
 ,{ "event" }
 ,{ "reporting." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "All" }
 ,{ "synchronization" }
 ,{ "classes" }
 ,{ "\"publish\"" }
 ,{ "\"giving\"" }
 ,{ "functions" }
 ,{ "callbacks." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Packet" }
} , & fmt_h2 , & align_h2 } ;

Text b28 = { {
 { "Packet" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "micro-task." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "associated" }
 ,{ "small" }
 ,{ "stack" }
 ,{ "to" }
 ,{ "store" }
 ,{ "call" }
 ,{ "parameters" }
 ,{ "and" }
 ,{ "return" }
 ,{ "values." }
 ,{ "A" }
 ,{ "larger" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "also" }
 ,{ "attached." }
 ,{ "Packet" , & fmt_text_b }
 ,{ "s" }
 ,{ "allow" }
 ,{ "design" }
 ,{ "of" }
 ,{ "a" }
 ,{ "request" }
 ,{ "processing" }
 ,{ "systems" }
 ,{ "as" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "packet-processing" }
 ,{ "devices." }
 ,{ "Packet" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "initiated" }
 ,{ "by" }
 ,{ "some" }
 ,{ "initiator" }
 ,{ "and" }
 ,{ "passed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "device." }
 ,{ "It" }
 ,{ "may" }
 ,{ "pass" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "further" }
 ,{ "until" }
 ,{ "it's" }
 ,{ "completed" }
 ,{ "or" }
 ,{ "cancelled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "initiator." }
 ,{ "Initiator" }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "completion" }
 ,{ "function" }
 ,{ "for" }
 ,{ "a" }
 ,{ "packet." }
 ,{ "So" }
 ,{ "when" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "completed" }
 ,{ "it" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "this" }
 ,{ "function," }
 ,{ "where" }
 ,{ "result" }
 ,{ "can" }
 ,{ "be" }
 ,{ "extracted" }
 ,{ "and" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "disposed." }
 ,{ "Also" }
 ,{ "a" }
 ,{ "completion" }
 ,{ "signaling" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "there." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Lists," }
 ,{ "trees," }
 ,{ "arrays" }
} , & fmt_h2 , & align_h2 } ;

Text b30 = { {
 { "CCore" , & fmt_text_b }
 ,{ "includes" }
 ,{ "implementations" }
 ,{ "of" }
 ,{ "lists," }
 ,{ "trees," }
 ,{ "and" }
 ,{ "arrays." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "CCore" , & fmt_text_b }
 ,{ "lists" }
 ,{ "and" }
 ,{ "trees" }
 ,{ "are" }
 ,{ "intrusive" }
 ,{ "(non-intrusive" }
 ,{ "containers" }
 ,{ "are" }
 ,{ "also" }
 ,{ "provided)." }
 ,{ "Intrusive" }
 ,{ "linked" }
 ,{ "containers" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "advantages:" }
} , & fmt_text , & align_text } ;

Text b32_0 = { {
 { "they" }
 ,{ "are" }
 ,{ "more" }
 ,{ "suitable" }
 ,{ "for" }
 ,{ "applications," }
} , & fmt_list , & align_list } ;

Text b32_1 = { {
 { "they" }
 ,{ "efficient," }
 ,{ "no" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "and" }
 ,{ "error" }
 ,{ "conditions" }
 ,{ "for" }
 ,{ "container" }
 ,{ "operations," }
} , & fmt_list , & align_list } ;

Text b32_2 = { {
 { "you" }
 ,{ "may" }
 ,{ "include" }
 ,{ "one" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "several" }
 ,{ "containers," }
} , & fmt_list , & align_list } ;

Text b32_3 = { {
 { "you" }
 ,{ "may" }
 ,{ "build" }
 ,{ "a" }
 ,{ "non-intrusive" }
 ,{ "container" }
 ,{ "based" }
 ,{ "on" }
 ,{ "intrusive." }
} , & fmt_list , & align_list } ;

TextList b32 = { {
 { 'â€¢' , { { & b32_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b32_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b32_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b32_3 , null , ItemInner , ItemOuter } } }
} } ;

Text b33 = { {
 { "CCore" , & fmt_text_b }
 ,{ "implements" }
 ,{ "wide" }
 ,{ "range" }
 ,{ "of" }
 ,{ "lists," }
 ,{ "both" }
 ,{ "single" }
 ,{ "linked" }
 ,{ "and" }
 ,{ "double" }
 ,{ "linked," }
 ,{ "linear" }
 ,{ "and" }
 ,{ "circular." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "CCore" , & fmt_text_b }
 ,{ "implements" }
 ,{ "radix" }
 ,{ "and" }
 ,{ "red-black" }
 ,{ "trees." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "implementation" }
 ,{ "for" }
 ,{ "dynamic" }
 ,{ "arrays." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "PTP" }
} , & fmt_h2 , & align_h2 } ;

Text b37 = { {
 { "PTP" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "packet" }
 ,{ "transaction" }
 ,{ "protocol." }
 ,{ "It" }
 ,{ "supersedes" }
 ,{ "TCP" }
 ,{ "as" }
 ,{ "a" }
 ,{ "main" }
 ,{ "network" }
 ,{ "protocol" }
 ,{ "for" }
 ,{ "client-server" }
 ,{ "applications." }
 ,{ "PTP" }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet-based," }
 ,{ "parallel" }
 ,{ "and" }
 ,{ "transactional" }
 ,{ "protocol." }
 ,{ "It" }
 ,{ "is" }
 ,{ "simple" }
 ,{ "and" }
 ,{ "convenient" }
 ,{ "for" }
 ,{ "the" }
 ,{ "development" }
 ,{ "of" }
 ,{ "\"remote" }
 ,{ "call\"" }
 ,{ "type" }
 ,{ "interactions." }
 ,{ "Parallel" }
 ,{ "nature" }
 ,{ "of" }
 ,{ "PTP" }
 ,{ "makes" }
 ,{ "obsolete" }
 ,{ "such" }
 ,{ "tricks" }
 ,{ "as" }
 ,{ "multi-thread" }
 ,{ "FTP" }
 ,{ "download." }
 ,{ "PTP" }
 ,{ "is" }
 ,{ "working" }
 ,{ "atop" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "point-to-point" }
 ,{ "or" }
 ,{ "point-to-multipoint" }
 ,{ "service" }
 ,{ "like" }
 ,{ "UDP" }
 ,{ "(or" }
 ,{ "even" }
 ,{ "raw" }
 ,{ "Ethernet)." }
 ,{ "PTP" }
 ,{ "has" }
 ,{ "ability" }
 ,{ "to" }
 ,{ "adapt" }
 ,{ "for" }
 ,{ "smaller" }
 ,{ "MTU" }
 ,{ "lengths," }
 ,{ "that" }
 ,{ "is" }
 ,{ "important" }
 ,{ "to" }
 ,{ "combine" }
 ,{ "with" }
 ,{ "another" }
 ,{ "network" }
 ,{ "protocols," }
 ,{ "which" }
 ,{ "can" }
 ,{ "reduce" }
 ,{ "MTU" }
 ,{ "(for" }
 ,{ "example," }
 ,{ "to" }
 ,{ "implement" }
 ,{ "encapsulation" }
 ,{ "or" }
 ,{ "encryption)." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "typical" }
 ,{ "problems" }
 ,{ "when" }
 ,{ "network" }
 ,{ "interaction" }
 ,{ "is" }
 ,{ "developed" }
 ,{ "based" }
 ,{ "on" }
 ,{ "TCP:" }
} , & fmt_text , & align_text } ;

Text b39_0 = { {
 { "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "parse" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "byte" }
 ,{ "stream" }
 ,{ "on" }
 ,{ "packets," }
} , & fmt_list , & align_list } ;

Text b39_1 = { {
 { "you" }
 ,{ "cannot" }
 ,{ "perform" }
 ,{ "parallel" }
 ,{ "transactions," }
 ,{ "so" }
 ,{ "if" }
 ,{ "TCP" }
 ,{ "is" }
 ,{ "stalled" }
 ,{ "on" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "loss," }
 ,{ "then" }
 ,{ "everything" }
 ,{ "is" }
 ,{ "stalled," }
} , & fmt_list , & align_list } ;

Text b39_2 = { {
 { "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "match" }
 ,{ "calls" }
 ,{ "with" }
 ,{ "responses" }
 ,{ "yourself," }
 ,{ "using" }
 ,{ "sequence" }
 ,{ "numbers," }
 ,{ "for" }
 ,{ "example." }
} , & fmt_list , & align_list } ;

TextList b39 = { {
 { 'â€¢' , { { & b39_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b39_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b39_2 , null , ItemInner , ItemOuter } } }
} } ;

Text b40 = { {
 { "PTP" , & fmt_text_b }
 ,{ "resolves" }
 ,{ "all" }
 ,{ "these" }
 ,{ "issues." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "PTPServer" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "a" }
 ,{ "PTP" }
 ,{ "server" }
 ,{ "on" }
 ,{ "a" }
 ,{ "host" }
 ,{ "machine," }
 ,{ "it" }
 ,{ "provides" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host" }
 ,{ "file" }
 ,{ "system" }
 ,{ "via" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "over" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "protocols." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "DDL" }
} , & fmt_h2 , & align_h2 } ;

Text b43 = { {
 { "DDL" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "data" }
 ,{ "definition" }
 ,{ "language." }
 ,{ "It" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "linked" }
 ,{ "data" }
 ,{ "in" }
 ,{ "a" }
 ,{ "textual" }
 ,{ "form." }
 ,{ "DDL" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "C-style" }
 ,{ "syntax." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "short" }
 ,{ "example" }
 ,{ "of" }
 ,{ "a" }
 ,{ "parser" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "representation," }
 ,{ "expressed" }
 ,{ "in" }
 ,{ "DDL" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "DDL" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "a" }
 ,{ "manually" }
 ,{ "introduced" }
 ,{ "data," }
 ,{ "like" }
 ,{ "configuration" }
 ,{ "information." }
 ,{ "Or" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "store" }
 ,{ "a" }
 ,{ "program-generated" }
 ,{ "data" }
 ,{ "to" }
 ,{ "exchange" }
 ,{ "with" }
 ,{ "different" }
 ,{ "data-processing" }
 ,{ "programs." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "LR1" }
 ,{ "parser" }
 ,{ "generator" }
} , & fmt_h2 , & align_h2 } ;

Text b46 = { {
 { "CondLangLR1" , & fmt_text_a }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "for" }
 ,{ "generation" }
 ,{ "LR1" }
 ,{ "parser" }
 ,{ "state" }
 ,{ "machines." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "language" }
 ,{ "description" }
 ,{ "and" }
 ,{ "produces" }
 ,{ "a" }
 ,{ ".ddl" , & fmt_text_b }
 ,{ "file" }
 ,{ "with" }
 ,{ "a" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "description." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "description" }
 ,{ "further" }
 ,{ "to" }
 ,{ "generate" }
 ,{ "code" }
 ,{ "in" }
 ,{ "any" }
 ,{ "suitable" }
 ,{ "for" }
 ,{ "your" }
 ,{ "purpose" }
 ,{ "form." }
 ,{ "Conditional" , & fmt_text_a }
 ,{ "recursive" , & fmt_text_a }
 ,{ "grammars" , & fmt_text_a }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "describe" }
 ,{ "a" }
 ,{ "language." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "Regen" }
} , & fmt_h2 , & align_h2 } ;

Text b48 = { {
 { "Regen" , & fmt_text_a }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "for" }
 ,{ "generating" }
 ,{ "helper" }
 ,{ "classes" }
 ,{ "and" }
 ,{ "constants" }
 ,{ "from" }
 ,{ "a" }
 ,{ "register" }
 ,{ "description." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "simplify" }
 ,{ "and" }
 ,{ "beautify" }
 ,{ "the" }
 ,{ "low-level" }
 ,{ "register" }
 ,{ "device" }
 ,{ "programming." }
} , & fmt_text , & align_text } ;

Page page = { "page_Introduction" ,
{
 { & b0 , null , inner_h1 , outer_h1 , back_h1 }
 ,{ & b1 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_list , outer_list , back_list }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_list , outer_list , back_list }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_list , outer_list , back_list }
 ,{ & b15 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_list , outer_list , back_list }
 ,{ & b19 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_list , outer_list , back_list }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_list , outer_list , back_list }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b48 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Job {

Text b0 = { {
 { "Job" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Job.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Job.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/Starter.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Starter.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "default" }
 ,{ "working" }
 ,{ "thread" }
 ,{ "pool." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "it" }
 ,{ "on" }
 ,{ "a" }
 ,{ "multi-core" }
 ,{ "CPU" }
 ,{ "to" }
 ,{ "speed-up" }
 ,{ "some" }
 ,{ "time-consuming" }
 ,{ "calculations." }
 ,{ "To" }
 ,{ "get" }
 ,{ "a" }
 ,{ "benefit" }
 ,{ "from" }
 ,{ "extra" }
 ,{ "threads," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "commit" }
 ,{ "them" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pool," }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Job::Init" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "It's" }
 ,{ "a" }
 ,{ "Scope" , & fmt_text_b }
 ,{ "Lock" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "constructor" }
 ,{ "starts" }
 ,{ "and" }
 ,{ "commits" }
 ,{ "working" }
 ,{ "threads" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pool," }
 ,{ "destructor" }
 ,{ "stops" }
 ,{ "them" }
 ,{ "and" }
 ,{ "waits" }
 ,{ "until" }
 ,{ "completion." }
 ,{ "So" }
 ,{ "for" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "duration" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "has" }
 ,{ "committed" }
 ,{ "working" }
 ,{ "threads." }
 ,{ "These" }
 ,{ "threads" }
 ,{ "do" }
 ,{ "not" }
 ,{ "consume" }
 ,{ "CPU," }
 ,{ "unless" }
 ,{ "they" }
 ,{ "are" }
 ,{ "activated" }
 ,{ "to" }
 ,{ "do" }
 ,{ "some" }
 ,{ "job." }
 ,{ "Only" }
 ,{ "single" }
 ,{ "active" }
 ,{ "Init" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "allowed," }
 ,{ "an" }
 ,{ "attempt" }
 ,{ "to" }
 ,{ "create" }
 ,{ "another" }
 ,{ "one" }
 ,{ "will" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "To" }
 ,{ "get" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "service" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Job" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "First," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "some" }
 ,{ "job" }
 ,{ "to" }
 ,{ "run." }
 ,{ "A" }
 ,{ "job" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "JobType" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Function<void" , & fmt_text_b }
 ,{ "(void)>" , & fmt_text_b }
 ,{ "." }
 ,{ "Second," }
 ,{ "run" }
 ,{ "the" }
 ,{ "job," }
 ,{ "by" }
 ,{ "creating" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Job" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "In" }
 ,{ "its" }
 ,{ "constructor" }
 ,{ "the" }
 ,{ "Job" , & fmt_text_b }
 ,{ "object" }
 ,{ "activates" }
 ,{ "some" }
 ,{ "working" }
 ,{ "threads." }
 ,{ "The" }
 ,{ "given" }
 ,{ "job()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "context" }
 ,{ "of" }
 ,{ "each" }
 ,{ "activated" }
 ,{ "thread." }
 ,{ "It's" }
 ,{ "also" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread." }
 ,{ "Then" }
 ,{ "destructor" }
 ,{ "waits" }
 ,{ "until" }
 ,{ "all" }
 ,{ "activated" }
 ,{ "threads" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Sharing" }
 ,{ "the" }
 ,{ "job" }
 ,{ "among" }
 ,{ "several" }
 ,{ "threads" }
 ,{ "is" }
 ,{ "a" }
 ,{ "responsibility" }
 ,{ "of" }
 ,{ "the" }
 ,{ "function" }
 ,{ "job" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Only" }
 ,{ "one" }
 ,{ "JobType" , & fmt_text_b }
 ,{ "job" }
 ,{ "can" }
 ,{ "be" }
 ,{ "boosted" }
 ,{ "at" }
 ,{ "the" }
 ,{ "same" }
 ,{ "time." }
 ,{ "If" }
 ,{ "another" }
 ,{ "Job" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "created," }
 ,{ "while" }
 ,{ "there" }
 ,{ "is" }
 ,{ "an" }
 ,{ "active" }
 ,{ "one," }
 ,{ "then" }
 ,{ "the" }
 ,{ "second" }
 ,{ "will" }
 ,{ "not" }
 ,{ "take" }
 ,{ "additional" }
 ,{ "working" }
 ,{ "threads." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Starter" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "The" }
 ,{ "Job" , & fmt_text_b }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Starter" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "working" }
 ,{ "thread" }
 ,{ "pool." }
 ,{ "The" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "lightweight" }
 ,{ "functor" }
 ,{ "type." }
 ,{ "It" }
 ,{ "must" }
 ,{ "have" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "default" }
 ,{ "constructor," }
 ,{ "copy" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "assign" }
 ,{ "operator." }
 ,{ "Job" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "type" }
 ,{ "JobType" , & fmt_text_b }
 ,{ "as" }
 ,{ "the" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "control" }
 ,{ "classes" }
 ,{ "for" }
 ,{ "the" }
 ,{ "Starter" , & fmt_text_b }
 ,{ ":" }
 ,{ "Run" , & fmt_text_b }
 ,{ "to" }
 ,{ "commit" }
 ,{ "working" }
 ,{ "threads" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "and" }
 ,{ "Start" , & fmt_text_b }
 ,{ "to" }
 ,{ "use" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Run" , & fmt_text_b }
 ,{ "is" }
 ,{ "bound" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "Starter" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getTaskCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "committed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "starter" , & fmt_text_b }
 ,{ "threads." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "run()" , & fmt_text_b }
 ,{ "commits" }
 ,{ "additional" }
 ,{ "cnt" , & fmt_text_b }
 ,{ "threads." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "getTaskCount()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Only" }
 ,{ "single" }
 ,{ "Run" , & fmt_text_b }
 ,{ "per" }
 ,{ "Starter" , & fmt_text_b }
 ,{ "is" }
 ,{ "allowed." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Start" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "get" }
 ,{ "the" }
 ,{ "Starter" , & fmt_text_b }
 ,{ "service." }
 ,{ "If" }
 ,{ "the" }
 ,{ "starter" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "null" }
 ,{ "and" }
 ,{ "in" }
 ,{ "the" }
 ,{ "idle" }
 ,{ "state," }
 ,{ "then" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "commits" }
 ,{ "obj" , & fmt_text_b }
 ,{ "for" }
 ,{ "execution." }
 ,{ "Available" }
 ,{ "working" }
 ,{ "threads" }
 ,{ "from" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "will" }
 ,{ "call" }
 ,{ "obj()" , & fmt_text_b }
 ,{ "." }
 ,{ "There" }
 ,{ "may" }
 ,{ "be" }
 ,{ "zero" }
 ,{ "such" }
 ,{ "threads." }
 ,{ "Destructor" }
 ,{ "waits" }
 ,{ "until" }
 ,{ "all" }
 ,{ "activated" }
 ,{ "threads" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "the" }
 ,{ "job" }
 ,{ "was" }
 ,{ "successfully" }
 ,{ "started." }
} , & fmt_text , & align_text } ;

Page page = { "page_Job" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Keywords {

Text b0 = { {
 { "Keywords" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Keywords" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "utility," }
 ,{ "which" }
 ,{ "generate" }
 ,{ "a" }
 ,{ "text" }
 ,{ "string" }
 ,{ "recognizer" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "text" }
 ,{ "string" }
 ,{ "set." }
 ,{ "It" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "for" }
 ,{ "the" }
 ,{ "language" }
 ,{ "development." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Keywords" , & fmt_text_b }
 ,{ "takes" }
 ,{ "the" }
 ,{ "required" }
 ,{ "string" }
 ,{ "set" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "file" }
 ,{ "and" }
 ,{ "place" }
 ,{ "the" }
 ,{ "generated" }
 ,{ "code" }
 ,{ "to" }
 ,{ "the" }
 ,{ "output" }
 ,{ "file." }
 ,{ "The" }
 ,{ "input" }
 ,{ "file" }
 ,{ "is" }
 ,{ "a" }
 ,{ "DDL" , & fmt_text_b }
 ,{ "file." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "And" }
 ,{ "the" }
 ,{ "recognition" }
 ,{ "code" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "method" }
 ,{ "body," }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "AtomClass" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "must" }
 ,{ "be" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "your" }
 ,{ "code" }
 ,{ "as" }
 ,{ "an" }
 ,{ "enum" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "given" }
 ,{ "string" }
 ,{ "is" }
 ,{ "not" }
 ,{ "from" }
 ,{ "the" }
 ,{ "set," }
 ,{ "the" }
 ,{ "value" }
 ,{ "Atom_Name" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "some" }
 ,{ "Atom_<string>" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned," }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "equals" }
 ,{ "<string>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Keywords" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_LangDataMap {

Text b0 = { {
 { "LangDataMap" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/lang/LangDataMap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/lang/LangDataMap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/lang" , & fmt_text_Files_b }
 ,{ "CCore/src/lang" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Lang::DataMap" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "to" }
 ,{ "load" }
 ,{ "lang" }
 ,{ "data" }
 ,{ "from" }
 ,{ "a" }
 ,{ "ddl" }
 ,{ "file," }
 ,{ "produced" }
 ,{ "by" }
 ,{ "the" }
 ,{ "utility" }
 ,{ "CondLangLR1" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Constructor" }
 ,{ "loads" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "and" }
 ,{ "message" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "into" }
 ,{ "console" }
 ,{ "(or" }
 ,{ "another" }
 ,{ "printer" }
 ,{ "device" }
 ,{ "if" }
 ,{ "given)." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Once" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "you" }
 ,{ "may" }
 ,{ "acccess" }
 ,{ "the" }
 ,{ "lang" }
 ,{ "data." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getLang()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "data" }
 ,{ "node." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "sanity()" , & fmt_text_b }
 ,{ "performes" }
 ,{ "a" }
 ,{ "sanity" }
 ,{ "check" }
 ,{ "on" }
 ,{ "the" }
 ,{ "data." }
 ,{ "If" }
 ,{ "the" }
 ,{ "data" }
 ,{ "are" }
 ,{ "inconsistent" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "iterate" }
 ,{ "(in" }
 ,{ "ascending" }
 ,{ "order)" }
 ,{ "over" }
 ,{ "various" }
 ,{ "data" }
 ,{ "tables" }
 ,{ "and" }
 ,{ "feed" }
 ,{ "provided" }
 ,{ "functors" }
 ,{ "with" }
 ,{ "data." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "atoms()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "lang" }
 ,{ "atoms," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "atom" }
 ,{ "index," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "synts()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "lang" }
 ,{ "synts," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "name," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "synt" }
 ,{ "rule" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "RuleList::operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "name," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "argument" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "ArgList::operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "flag" }
 ,{ "(equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "atom)," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "atom/synt" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "rules()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "list," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "rule" }
 ,{ "index," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "synt" }
 ,{ "name," }
 ,{ "the" }
 ,{ "third" }
 ,{ "is" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "name," }
 ,{ "the" }
 ,{ "last" }
 ,{ "is" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "1-based" }
 ,{ "element" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "finals()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "final" }
 ,{ "list," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "0-based" }
 ,{ "final" }
 ,{ "index," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "action" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "ActionList::operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "atom" }
 ,{ "index" }
 ,{ "OR" }
 ,{ "0," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "rule" }
 ,{ "index" }
 ,{ "OR" }
 ,{ "0." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "getStatesCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "LR1" }
 ,{ "parser" }
 ,{ "states." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "states()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "LR1" }
 ,{ "parser" }
 ,{ "states," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "0-based" }
 ,{ "state" }
 ,{ "index," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "0-based" }
 ,{ "final" }
 ,{ "index," }
 ,{ "the" }
 ,{ "third" }
 ,{ "is" }
 ,{ "the" }
 ,{ "transition" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "TransList::operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "TransList::operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "TransList::operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "iterates" }
 ,{ "over" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "element" }
 ,{ "index," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "0-based" }
 ,{ "state" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Page page = { "page_LangDataMap" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_LaunchPath {

Text b0 = { {
 { "LaunchPath" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/LaunchPath.h" , & fmt_text_Files_b }
 ,{ "CCore/src/LaunchPath.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "class" }
 ,{ "obtains" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path" }
 ,{ "of" }
 ,{ "the" }
 ,{ "running" }
 ,{ "executable" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Constructor" }
 ,{ "obtains" }
 ,{ "the" }
 ,{ "path." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "getPath()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path" }
 ,{ "to" }
 ,{ "the" }
 ,{ "executable" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getDir()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path" }
 ,{ "to" }
 ,{ "the" }
 ,{ "executable" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "built" }
 ,{ "upon" }
 ,{ "the" }
 ,{ "target" }
 ,{ "class" }
 ,{ "Sys::LaunchPath" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysLaunchPath.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_LaunchPath" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Len {

Text b0 = { {
 { "Len" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Len.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Len.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Len.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "number" }
 ,{ "of" }
 ,{ "length" }
 ,{ "related" }
 ,{ "types," }
 ,{ "constants" }
 ,{ "and" }
 ,{ "functions." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "length." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "substitute" }
 ,{ "for" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "type" }
 ,{ "size_t" , & fmt_text_b }
 ,{ "." }
 ,{ "ulen" , & fmt_text_b }
 ,{ "is" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "header" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "introduced" }
 ,{ "by" }
 ,{ "several" }
 ,{ "reasons:" }
} , & fmt_text , & align_text } ;

Text b3_0 = { {
 { "it" }
 ,{ "has" }
 ,{ "a" }
 ,{ "better" }
 ,{ "name," }
 ,{ "more" }
 ,{ "simpler" }
 ,{ "to" }
 ,{ "type," }
} , & fmt_list , & align_list } ;

Text b3_1 = { {
 { "target" }
 ,{ "can" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "more" }
 ,{ "suitable" }
 ,{ "type" }
 ,{ "to" }
 ,{ "ulen" , & fmt_list_b }
 ,{ "," }
 ,{ "than" }
 ,{ "size_t" , & fmt_list_b }
 ,{ "," }
 ,{ "for" }
 ,{ "example," }
 ,{ "compiler" }
 ,{ "can" }
 ,{ "define" }
 ,{ "size_t" , & fmt_list_b }
 ,{ "as" }
 ,{ "unsigned" , & fmt_list_b }
 ,{ "long" , & fmt_list_b }
 ,{ "," }
 ,{ "but" }
 ,{ "if" }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "same" }
 ,{ "bit-size" }
 ,{ "as" }
 ,{ "the" }
 ,{ "unsigned" , & fmt_list_b }
 ,{ "," }
 ,{ "then" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "point" }
 ,{ "in" }
 ,{ "such" }
 ,{ "definition," }
 ,{ "so" }
 ,{ "the" }
 ,{ "target" }
 ,{ "can" }
 ,{ "define" }
 ,{ "ulen" , & fmt_list_b }
 ,{ "as" }
 ,{ "unsigned" , & fmt_list_b }
 ,{ "." }
} , & fmt_list , & align_list } ;

TextList b3 = { {
 { '1.' , { { & b3_0 , null , ItemInner , ItemOuter } } }
 ,{ '2.' , { { & b3_1 , null , ItemInner , ItemOuter } } }
} } ;

Text b4 = { {
 { "Constants" }
} , & fmt_h3 , & align_h3 } ;

Text b5 = { {
 { "TextBufLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "length," }
 ,{ "used" }
 ,{ "for" }
 ,{ "small" }
 ,{ "text" }
 ,{ "buffers." }
 ,{ "MaxULen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "To" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "length" }
 ,{ "value" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "user-defined" }
 ,{ "literals" }
 ,{ "with" }
 ,{ "suffixes" }
 ,{ "KByte" , & fmt_text_b }
 ,{ "and" }
 ,{ "MByte" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Calculate" }
 ,{ "lengths" }
 ,{ "and" }
 ,{ "guards" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "functions," }
 ,{ "used" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "lengths" }
 ,{ "with" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "control:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "overflow" }
 ,{ "they" }
 ,{ "call" }
 ,{ "the" }
 ,{ "following" }
 ,{ "guard" }
 ,{ "functions," }
 ,{ "these" }
 ,{ "functions" }
 ,{ "throw" }
 ,{ "exceptions:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "GuardLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "guard" }
 ,{ "function." }
 ,{ "It" }
 ,{ "ensures" }
 ,{ "the" }
 ,{ "condition" }
 ,{ "len<=maxlen" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "function" }
 ,{ "GuardLenFailed()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "GuardIndex()" }
} , & fmt_h3 , & align_h3 } ;

Text b12 = { {
 { "GuardIndex()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "guard" }
 ,{ "function," }
 ,{ "it" }
 ,{ "ensures" }
 ,{ "that" }
 ,{ "index<len" , & fmt_text_b }
 ,{ "." }
 ,{ "GuardIndexOutOfRange()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Alignment" }
} , & fmt_h3 , & align_h3 } ;

Text b14 = { {
 { "Next" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "alignment" }
 ,{ "functions." }
 ,{ "The" }
 ,{ "length" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "aligned" }
 ,{ "(on" }
 ,{ "some" }
 ,{ "alignment" }
 ,{ "value" }
 ,{ "A" , & fmt_text_b }
 ,{ ")," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "divisible" }
 ,{ "by" }
 ,{ "A" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "NotAligned()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "not" }
 ,{ "aligned." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Align()" , & fmt_text_b }
 ,{ "aligns" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "up." }
 ,{ "No" }
 ,{ "overflow" }
 ,{ "check" }
 ,{ "is" }
 ,{ "performed." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "AlignDown()" , & fmt_text_b }
 ,{ "aligns" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "down." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "TryAlign()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "align" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "up." }
 ,{ "If" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "happens," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "aligned" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "all" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "is" }
 ,{ "an" }
 ,{ "alignment" }
 ,{ "requirement," }
 ,{ "it" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "equal" }
 ,{ "0," }
 ,{ "and" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "MaxAlign" , & fmt_text_b }
 ,{ "value," }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "header" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b21 = { {
 { "The" }
 ,{ "last" }
 ,{ "two" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "DimOf()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Dist()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "DimOf()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "array:" }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Dist()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "between" }
 ,{ "two" }
 ,{ "objects" }
 ,{ "from" }
 ,{ "the" }
 ,{ "same" }
 ,{ "array," }
 ,{ "pointed" }
 ,{ "by" }
 ,{ "pointers:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Len" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_list , outer_list , back_list }
 ,{ & b4 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_LineInput {

Text b0 = { {
 { "LineInput" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/LineInput.h" , & fmt_text_Files_b }
 ,{ "CCore/src/LineInput.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "LineInput" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "console" }
 ,{ "input" }
 ,{ "class." }
 ,{ "It" }
 ,{ "reads" }
 ,{ "command" }
 ,{ "lines" }
 ,{ "from" }
 ,{ "a" }
 ,{ "console" }
 ,{ "and" }
 ,{ "implements" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "line" }
 ,{ "edition." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ReadCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "console" }
 ,{ "reader" }
 ,{ "class." }
 ,{ "LineInput" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "forwards" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "ReadCon" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "get()" , & fmt_text_b }
 ,{ "inputs" }
 ,{ "a" }
 ,{ "command" }
 ,{ "line." }
 ,{ "The" }
 ,{ "line" }
 ,{ "is" }
 ,{ "entered" }
 ,{ "by" }
 ,{ "pressing" }
 ,{ "the" }
 ,{ "key" }
 ,{ "Enter" , & fmt_text_b }
 ,{ "." }
 ,{ "Backslash" , & fmt_text_b }
 ,{ "key" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "edit" }
 ,{ "the" }
 ,{ "input." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "second" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "timed" }
 ,{ "variant." }
 ,{ "Both" }
 ,{ "methods" }
 ,{ "return" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "from" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Page page = { "page_LineInput" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Lists {

Text b0 = { {
 { "Lists" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/List.h" , & fmt_text_Files_b }
 ,{ "CCore/src/List.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Kinds" }
 ,{ "of" }
 ,{ "lists" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "kinds" }
 ,{ "of" }
 ,{ "lists" }
 ,{ "in" }
 ,{ "C++." }
 ,{ "List" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "container" }
 ,{ "(non-intrusive" }
 ,{ "list)." }
 ,{ "List" }
 ,{ "can" }
 ,{ "also" }
 ,{ "be" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "elements," }
 ,{ "where" }
 ,{ "each" }
 ,{ "element" }
 ,{ "contains" }
 ,{ "links" }
 ,{ "to" }
 ,{ "neighbor" }
 ,{ "elements." }
 ,{ "List" }
 ,{ "can" }
 ,{ "be" }
 ,{ "single" }
 ,{ "linked" }
 ,{ "or" }
 ,{ "double" }
 ,{ "linked," }
 ,{ "linear" }
 ,{ "or" }
 ,{ "circular." }
 ,{ "Linear" }
 ,{ "list" }
 ,{ "controller" }
 ,{ "can" }
 ,{ "contain" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "or" }
 ,{ "two" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "and" }
 ,{ "the" }
 ,{ "last" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "algorithms" }
 ,{ "of" }
 ,{ "intrusive" }
 ,{ "lists." }
 ,{ "Intrusive" }
 ,{ "lists" }
 ,{ "are" }
 ,{ "mandatory" }
 ,{ "for" }
 ,{ "many" }
 ,{ "tasks," }
 ,{ "including" }
 ,{ "system" }
 ,{ "core" }
 ,{ "tasks," }
 ,{ "because" }
 ,{ "they" }
 ,{ "don't" }
 ,{ "require" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "allocation," }
 ,{ "they" }
 ,{ "extremely" }
 ,{ "efficient" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "such" }
 ,{ "contexts" }
 ,{ "where" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "is" }
 ,{ "impossible" }
 ,{ "or" }
 ,{ "not" }
 ,{ "desirable." }
} , & fmt_text , & align_text } ;

Bitmap b5 = { "List2.zipmap" } ;

Text b6 = { {
 { "Non-intrusive" }
 ,{ "lists" }
 ,{ "can" }
 ,{ "be" }
 ,{ "built" }
 ,{ "atop" }
 ,{ "on" }
 ,{ "these" }
 ,{ "algorithms." }
 ,{ "Container" }
 ,{ "lists" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Bitmap b7 = { "List1.zipmap" } ;

Text b8 = { {
 { "CCore" }
 ,{ "list" }
 ,{ "algorithms" }
} , & fmt_h3 , & align_h3 } ;

Text b9 = { {
 { "Lists" }
 ,{ "are" }
 ,{ "built" }
 ,{ "using" }
 ,{ "links:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "It's" }
 ,{ "a" }
 ,{ "very" }
 ,{ "simple" }
 ,{ "classes," }
 ,{ "SLink" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "next" , & fmt_text_b }
 ,{ "pointer" }
 ,{ "for" }
 ,{ "a" }
 ,{ "single" }
 ,{ "linked" }
 ,{ "lists," }
 ,{ "DLink" , & fmt_text_b }
 ,{ "contains" }
 ,{ "two" }
 ,{ "pointers:" }
 ,{ "next" , & fmt_text_b }
 ,{ "and" }
 ,{ "prev" , & fmt_text_b }
 ,{ "," }
 ,{ "for" }
 ,{ "a" }
 ,{ "double" }
 ,{ "linked" }
 ,{ "lists." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "To" }
 ,{ "make" }
 ,{ "a" }
 ,{ "list" }
 ,{ "you" }
 ,{ "define" }
 ,{ "a" }
 ,{ "list" }
 ,{ "node" }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Then" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "list" }
 ,{ "algorithms:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "One" }
 ,{ "node" }
 ,{ "can" }
 ,{ "include" }
 ,{ "several" }
 ,{ "links" }
 ,{ "of" }
 ,{ "different" }
 ,{ "types." }
 ,{ "It" }
 ,{ "allows" }
 ,{ "include" }
 ,{ "such" }
 ,{ "node" }
 ,{ "in" }
 ,{ "several" }
 ,{ "lists" }
 ,{ "simultaneously." }
 ,{ "We" }
 ,{ "use" }
 ,{ "the" }
 ,{ "term" }
 ,{ "\"element\"" }
 ,{ "for" }
 ,{ "the" }
 ,{ "linked" }
 ,{ "list" }
 ,{ "node," }
 ,{ "and" }
 ,{ "\"object\"" }
 ,{ "for" }
 ,{ "unlinked" }
 ,{ "list" }
 ,{ "node." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "SLink" }
 ,{ "LinearAlgo" }
} , & fmt_h4 , & align_h4 } ;

Bitmap b15 = { "SList1.zipmap" } ;

Text b16 = { {
 { "Linear" }
 ,{ "list" }
 ,{ "has" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "and" }
 ,{ "terminated" }
 ,{ "with" }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Link()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "link" }
 ,{ "from" }
 ,{ "the" }
 ,{ "node" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Init()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "single" }
 ,{ "element" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "InsNext()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "DelNext()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "inner" }
 ,{ "types:" }
 ,{ "Cur" , & fmt_text_b }
 ,{ "," }
 ,{ "Top" , & fmt_text_b }
 ,{ "and" }
 ,{ "FirstLast" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Cur" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "any" }
 ,{ "element" }
 ,{ "or" }
 ,{ "null" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Top" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "start()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "ins()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "ins_after()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Bitmap b30 = { "SList2.zipmap" } ;

Text b31 = { {
 { "FirstLast" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "list" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "two" }
 ,{ "pointers:" }
 ,{ "one" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "and" }
 ,{ "the" }
 ,{ "second" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last." }
 ,{ "We" }
 ,{ "call" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "first" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "start()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "ins_first()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "ins_last()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "ins_after()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "del_first()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "SLink" }
 ,{ "CircularAlgo" }
} , & fmt_h4 , & align_h4 } ;

Bitmap b40 = { "SList3.zipmap" } ;

Text b41 = { {
 { "Circular" }
 ,{ "list" }
 ,{ "has" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element," }
 ,{ "the" }
 ,{ "bottom" }
 ,{ "element" }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top." }
 ,{ "We" }
 ,{ "call" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "bottom" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Link()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "link" }
 ,{ "from" }
 ,{ "the" }
 ,{ "node" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Init()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "single" }
 ,{ "element" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "InsNext()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "DelNext()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "will" }
 ,{ "be" }
 ,{ "null," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "has" }
 ,{ "only" }
 ,{ "one" }
 ,{ "element)." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "logically" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "for" }
 ,{ "linear" }
 ,{ "lists," }
 ,{ "except" }
 ,{ "they" }
 ,{ "operate" }
 ,{ "on" }
 ,{ "circular" }
 ,{ "ones." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "inner" }
 ,{ "types:" }
 ,{ "Cur" , & fmt_text_b }
 ,{ "and" }
 ,{ "Top" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Cur" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "bottom" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "Top" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "bottom" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "start()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "ins()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "ins_after()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
 ,{ "If" }
 ,{ "the" }
 ,{ "place" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "cursor," }
 ,{ "then" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "also" }
 ,{ "updated," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "continue" }
 ,{ "use" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "The" }
 ,{ "last" }
 ,{ "method" }
 ,{ "rotate()" , & fmt_text_b }
 ,{ "is" }
 ,{ "specific" }
 ,{ "for" }
 ,{ "circular" }
 ,{ "lists." }
 ,{ "It" }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "top" }
 ,{ "element" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "bottom." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "DLink" }
 ,{ "LinearAlgo" }
} , & fmt_h4 , & align_h4 } ;

Bitmap b58 = { "DList1.zipmap" } ;

Text b59 = { {
 { "Linear" }
 ,{ "list" }
 ,{ "has" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element" }
 ,{ "and" }
 ,{ "terminated" }
 ,{ "with" }
 ,{ "null" }
 ,{ "pointers." }
 ,{ "Double" }
 ,{ "link" }
 ,{ "allows" }
 ,{ "to" }
 ,{ "move" }
 ,{ "forward" }
 ,{ "and" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "Connect...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions," }
 ,{ "they" }
 ,{ "connect" }
 ,{ "its" }
 ,{ "arguments" }
 ,{ "in" }
 ,{ "a" }
 ,{ "row." }
 ,{ "Functions" }
 ,{ "with" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "null..." , & fmt_text_b }
 ,{ "accept" }
 ,{ "null" }
 ,{ "value" }
 ,{ "for" }
 ,{ "correspondent" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "Init()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "single" }
 ,{ "element" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "InsNext()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "InsPrev()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "Del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "DelNext()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "DelPrev()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "InsTop()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "as" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "new" }
 ,{ "top" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "DelTop()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "new" }
 ,{ "top" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "element" }
 ,{ "may" }
 ,{ "be" }
 ,{ "any" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "this" }
 ,{ "function" }
 ,{ "may" }
 ,{ "be" }
 ,{ "misleading," }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "ReplaceNode()" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "given" }
 ,{ "list" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "inner" }
 ,{ "types:" }
 ,{ "Cur" , & fmt_text_b }
 ,{ "," }
 ,{ "RevCur" , & fmt_text_b }
 ,{ "," }
 ,{ "Top" , & fmt_text_b }
 ,{ "and" }
 ,{ "FirstLast" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "Cur" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "forward" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "any" }
 ,{ "element" }
 ,{ "or" }
 ,{ "null" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "RevCur" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "backward" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "any" }
 ,{ "element" }
 ,{ "or" }
 ,{ "null" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "Top" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "start()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "forward" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "ins()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "ins_before()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "ins_after()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "replace()" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "given" }
 ,{ "list" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "replace(<cursor>)" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "list" }
 ,{ "element" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "position" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "properly" }
 ,{ "(it" }
 ,{ "will" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object)." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "del(T" , & fmt_text_b }
 ,{ "*obj)" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b83 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null)." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "del_and_move()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "position" }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b85 = { {
 { "FirstLast" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "list" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "two" }
 ,{ "pointers:" }
 ,{ "one" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "and" }
 ,{ "the" }
 ,{ "second" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last." }
 ,{ "We" }
 ,{ "call" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "first" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "start()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "forward" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b89 = { {
 { "start_rev()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "backward" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list" }
 ,{ "(i.e." }
 ,{ "it" }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element)." }
} , & fmt_text , & align_text } ;

Text b90 = { {
 { "ins_first()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b91 = { {
 { "ins_last()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b92 = { {
 { "ins_before()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b93 = { {
 { "ins_after()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b94 = { {
 { "replace()" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "given" }
 ,{ "list" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
} , & fmt_text , & align_text } ;

Text b95 = { {
 { "replace(<cursor>)" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "list" }
 ,{ "element" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "position" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "properly" }
 ,{ "(it" }
 ,{ "will" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object)." }
} , & fmt_text , & align_text } ;

Text b96 = { {
 { "del(T" , & fmt_text_b }
 ,{ "*obj)" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b97 = { {
 { "del_first()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b98 = { {
 { "del_last()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b99 = { {
 { "del_and_move()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "position" }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "cursor." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "forward," }
 ,{ "it" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element." }
 ,{ "If" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "backward," }
 ,{ "it" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "element." }
 ,{ "I.e." }
 ,{ "each" }
 ,{ "cursor" }
 ,{ "type" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "position" }
 ,{ "in" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "movement" }
 ,{ "direction." }
} , & fmt_text , & align_text } ;

Text b100 = { {
 { "DLink" }
 ,{ "CircularAlgo" }
} , & fmt_h4 , & align_h4 } ;

Bitmap b101 = { "DList2.zipmap" } ;

Text b102 = { {
 { "Circular" }
 ,{ "list" }
 ,{ "has" }
 ,{ "a" }
 ,{ "top" }
 ,{ "element," }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "is" }
 ,{ "linked" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top." }
 ,{ "Double" }
 ,{ "link" }
 ,{ "allows" }
 ,{ "to" }
 ,{ "move" }
 ,{ "forward" }
 ,{ "and" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b103 = { {
 { "Connect...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions," }
 ,{ "they" }
 ,{ "connect" }
 ,{ "its" }
 ,{ "arguments" }
 ,{ "in" }
 ,{ "a" }
 ,{ "row." }
} , & fmt_text , & align_text } ;

Text b104 = { {
 { "Init()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "single" }
 ,{ "element" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b105 = { {
 { "InsNext()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b106 = { {
 { "InsPrev()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b107 = { {
 { "Del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b108 = { {
 { "DelNext()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "will" }
 ,{ "be" }
 ,{ "null," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "has" }
 ,{ "only" }
 ,{ "one" }
 ,{ "element)." }
} , & fmt_text , & align_text } ;

Text b109 = { {
 { "DelPrev()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "place" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(it" }
 ,{ "will" }
 ,{ "be" }
 ,{ "null," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "has" }
 ,{ "only" }
 ,{ "one" }
 ,{ "element)." }
} , & fmt_text , & align_text } ;

Text b110 = { {
 { "InsTopFirst()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "as" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "new" }
 ,{ "top" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b111 = { {
 { "InsTopLast()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "new" }
 ,{ "top" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b112 = { {
 { "DelTop()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "new" }
 ,{ "top" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "element" }
 ,{ "may" }
 ,{ "be" }
 ,{ "any" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "this" }
 ,{ "function" }
 ,{ "may" }
 ,{ "be" }
 ,{ "misleading," }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b113 = { {
 { "ReplaceNode()" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "given" }
 ,{ "list" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
} , & fmt_text , & align_text } ;

Text b114 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "inner" }
 ,{ "types:" }
 ,{ "Cur" , & fmt_text_b }
 ,{ "," }
 ,{ "RevCur" , & fmt_text_b }
 ,{ "," }
 ,{ "Top" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b115 = { {
 { "Cur" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "forward" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b116 = { {
 { "There" }
 ,{ "is" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "method" }
 ,{ "ins_after()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "current" }
 ,{ "(non-null)" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b117 = { {
 { "RevCur" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "backward" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b118 = { {
 { "There" }
 ,{ "is" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "method" }
 ,{ "ins_after()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "(before" }
 ,{ "with" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "direction)" }
 ,{ "the" }
 ,{ "current" }
 ,{ "(non-null)" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b119 = { {
 { "Top" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "controller." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b120 = { {
 { "init()" , & fmt_text_b }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b121 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b122 = { {
 { "start()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "forward" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b123 = { {
 { "start_rev()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "backward" }
 ,{ "cursor" }
 ,{ "on" }
 ,{ "the" }
 ,{ "full" }
 ,{ "list" }
 ,{ "(i.e." }
 ,{ "it" }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element)." }
} , & fmt_text , & align_text } ;

Text b124 = { {
 { "ins_first()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b125 = { {
 { "ins_last()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list," }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element." }
} , & fmt_text , & align_text } ;

Text b126 = { {
 { "ins_before()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "before" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
 ,{ "ins_before(RevCur" , & fmt_text_b }
 ,{ "&cur,T" , & fmt_text_b }
 ,{ "*obj)" , & fmt_text_b }
 ,{ "modifies" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "to" }
 ,{ "keep" }
 ,{ "one" }
 ,{ "valid." }
} , & fmt_text , & align_text } ;

Text b127 = { {
 { "ins_after()" , & fmt_text_b }
 ,{ "inserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "list" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "position." }
 ,{ "ins_after(Cur" , & fmt_text_b }
 ,{ "&cur,T" , & fmt_text_b }
 ,{ "*obj)" , & fmt_text_b }
 ,{ "modifies" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "to" }
 ,{ "keep" }
 ,{ "one" }
 ,{ "valid." }
} , & fmt_text , & align_text } ;

Text b128 = { {
 { "replace()" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "given" }
 ,{ "list" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
} , & fmt_text , & align_text } ;

Text b129 = { {
 { "replace(<cursor>)" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "list" }
 ,{ "element" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "position" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "a" }
 ,{ "member" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "element" }
 ,{ "becomes" }
 ,{ "unlinked." }
 ,{ "Cursor" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "properly" }
 ,{ "(it" }
 ,{ "will" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object)." }
} , & fmt_text , & align_text } ;

Text b130 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b131 = { {
 { "del_first()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b132 = { {
 { "del_last()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b133 = { {
 { "del_and_move()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "position" }
 ,{ "and" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "cursor." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "forward," }
 ,{ "it" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "element." }
 ,{ "If" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "backward," }
 ,{ "it" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "element." }
 ,{ "I.g." }
 ,{ "each" }
 ,{ "cursor" }
 ,{ "type" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "position" }
 ,{ "in" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "movement" }
 ,{ "direction." }
} , & fmt_text , & align_text } ;

Text b134 = { {
 { "The" }
 ,{ "last" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "rotate...()" , & fmt_text_b }
 ,{ "are" }
 ,{ "specific" }
 ,{ "for" }
 ,{ "circular" }
 ,{ "lists." }
 ,{ "They" }
 ,{ "rotate" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b135 = { {
 { "rotate_forward()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "list" }
 ,{ "forward." }
 ,{ "The" }
 ,{ "top" }
 ,{ "element" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "bottom." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b136 = { {
 { "rotate_backward()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "the" }
 ,{ "list" }
 ,{ "backward." }
 ,{ "The" }
 ,{ "bottom" }
 ,{ "element" }
 ,{ "moves" }
 ,{ "to" }
 ,{ "top." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_Lists" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_img , outer_img , back_img }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_img , outer_img , back_img }
 ,{ & b8 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_img , outer_img , back_img }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_img , outer_img , back_img }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b40 , null , inner_img , outer_img , back_img }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b58 , null , inner_img , outer_img , back_img }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_text , outer_text , back_text }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_text , outer_text , back_text }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
 ,{ & b89 , null , inner_text , outer_text , back_text }
 ,{ & b90 , null , inner_text , outer_text , back_text }
 ,{ & b91 , null , inner_text , outer_text , back_text }
 ,{ & b92 , null , inner_text , outer_text , back_text }
 ,{ & b93 , null , inner_text , outer_text , back_text }
 ,{ & b94 , null , inner_text , outer_text , back_text }
 ,{ & b95 , null , inner_text , outer_text , back_text }
 ,{ & b96 , null , inner_text , outer_text , back_text }
 ,{ & b97 , null , inner_text , outer_text , back_text }
 ,{ & b98 , null , inner_text , outer_text , back_text }
 ,{ & b99 , null , inner_text , outer_text , back_text }
 ,{ & b100 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b101 , null , inner_img , outer_img , back_img }
 ,{ & b102 , null , inner_text , outer_text , back_text }
 ,{ & b103 , null , inner_text , outer_text , back_text }
 ,{ & b104 , null , inner_text , outer_text , back_text }
 ,{ & b105 , null , inner_text , outer_text , back_text }
 ,{ & b106 , null , inner_text , outer_text , back_text }
 ,{ & b107 , null , inner_text , outer_text , back_text }
 ,{ & b108 , null , inner_text , outer_text , back_text }
 ,{ & b109 , null , inner_text , outer_text , back_text }
 ,{ & b110 , null , inner_text , outer_text , back_text }
 ,{ & b111 , null , inner_text , outer_text , back_text }
 ,{ & b112 , null , inner_text , outer_text , back_text }
 ,{ & b113 , null , inner_text , outer_text , back_text }
 ,{ & b114 , null , inner_text , outer_text , back_text }
 ,{ & b115 , null , inner_text , outer_text , back_text }
 ,{ & b116 , null , inner_text , outer_text , back_text }
 ,{ & b117 , null , inner_text , outer_text , back_text }
 ,{ & b118 , null , inner_text , outer_text , back_text }
 ,{ & b119 , null , inner_text , outer_text , back_text }
 ,{ & b120 , null , inner_text , outer_text , back_text }
 ,{ & b121 , null , inner_text , outer_text , back_text }
 ,{ & b122 , null , inner_text , outer_text , back_text }
 ,{ & b123 , null , inner_text , outer_text , back_text }
 ,{ & b124 , null , inner_text , outer_text , back_text }
 ,{ & b125 , null , inner_text , outer_text , back_text }
 ,{ & b126 , null , inner_text , outer_text , back_text }
 ,{ & b127 , null , inner_text , outer_text , back_text }
 ,{ & b128 , null , inner_text , outer_text , back_text }
 ,{ & b129 , null , inner_text , outer_text , back_text }
 ,{ & b130 , null , inner_text , outer_text , back_text }
 ,{ & b131 , null , inner_text , outer_text , back_text }
 ,{ & b132 , null , inner_text , outer_text , back_text }
 ,{ & b133 , null , inner_text , outer_text , back_text }
 ,{ & b134 , null , inner_text , outer_text , back_text }
 ,{ & b135 , null , inner_text , outer_text , back_text }
 ,{ & b136 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Locked {

Text b0 = { {
 { "Locked" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Locked.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Locked.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "simple" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Class" , & fmt_text_b }
 ,{ "is" }
 ,{ "useful" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "a" }
 ,{ "locked" }
 ,{ "access" }
 ,{ "to" }
 ,{ "some" }
 ,{ "object." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "object" }
 ,{ "pointer." }
 ,{ "In" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "it" }
 ,{ "locks" }
 ,{ "the" }
 ,{ "given" }
 ,{ "mutex" }
 ,{ "and" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "it" }
 ,{ "unlocks" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "method" }
 ,{ "above" }
 ,{ "is" }
 ,{ "called" }
 ,{ "under" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "protection." }
} , & fmt_text , & align_text } ;

Page page = { "page_Locked" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_LockObject {

Text b0 = { {
 { "LockObject" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/LockObject.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/LockObject.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "LockObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "class," }
 ,{ "implementing" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "lock" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "If" }
 ,{ "you" }
 ,{ "have" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "C" , & fmt_text_b }
 ,{ "with" }
 ,{ "methods" }
 ,{ "lock()" , & fmt_text_b }
 ,{ "and" }
 ,{ "unlock()" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "LockObject" , & fmt_text_b }
 ,{ "to" }
 ,{ "\"lock\"" }
 ,{ "this" }
 ,{ "object" }
 ,{ "for" }
 ,{ "a" }
 ,{ "scope" }
 ,{ "duration:" }
} , & fmt_text , & align_text } ;

Page page = { "page_LockObject" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_LockUse {

Text b0 = { {
 { "LockUse" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/LockUse.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/LockUse.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "LockUse" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "limit" }
 ,{ "usage" }
 ,{ "of" }
 ,{ "some" }
 ,{ "resource." }
 ,{ "It" }
 ,{ "works" }
 ,{ "with" }
 ,{ "some" }
 ,{ "usage" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "If" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "zero" }
 ,{ "then" }
 ,{ "attempt" }
 ,{ "to" }
 ,{ "lock" }
 ,{ "it" }
 ,{ "cause" }
 ,{ "an" }
 ,{ "exception." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "decremented" }
 ,{ "and" }
 ,{ "incremented" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "to" }
 ,{ "guard" }
 ,{ "recursive" }
 ,{ "calls." }
} , & fmt_text , & align_text } ;

Page page = { "page_LockUse" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Logging {

Text b0 = { {
 { "Logging" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Log.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Log.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "log" }
 ,{ "implementation," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "system-wide" }
 ,{ "log" }
 ,{ "in" }
 ,{ "embedded" }
 ,{ "applications" }
 ,{ "or" }
 ,{ "as" }
 ,{ "a" }
 ,{ "local" }
 ,{ "log" }
 ,{ "of" }
 ,{ "an" }
 ,{ "application" }
 ,{ "or" }
 ,{ "a" }
 ,{ "system" }
 ,{ "component." }
 ,{ "The" }
 ,{ "log" }
 ,{ "is" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "," }
 ,{ "providing" }
 ,{ "you" }
 ,{ "use" }
 ,{ "efficient" }
 ,{ "types" }
 ,{ "for" }
 ,{ "log" }
 ,{ "message" }
 ,{ "arguments." }
 ,{ "To" }
 ,{ "store" }
 ,{ "log" }
 ,{ "messages" }
 ,{ "a" }
 ,{ "fixed" }
 ,{ "memory" }
 ,{ "space" }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "A" }
 ,{ "log" }
 ,{ "message" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "category" }
 ,{ "and" }
 ,{ "a" }
 ,{ "time-stamp." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "filters" }
 ,{ "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "message" }
 ,{ "logging" }
 ,{ "and" }
 ,{ "the" }
 ,{ "message" }
 ,{ "selection" }
 ,{ "from" }
 ,{ "a" }
 ,{ "log." }
 ,{ "Log" }
 ,{ "also" }
 ,{ "counts" }
 ,{ "messages." }
 ,{ "Log" }
 ,{ "stores" }
 ,{ "a" }
 ,{ "message" }
 ,{ "as" }
 ,{ "a" }
 ,{ "compact" }
 ,{ "data" }
 ,{ "structure," }
 ,{ "which" }
 ,{ "includes" }
 ,{ "message" }
 ,{ "category," }
 ,{ "time-stamp," }
 ,{ "format" }
 ,{ "string" }
 ,{ "and" }
 ,{ "format" }
 ,{ "arguments." }
 ,{ "Format" }
 ,{ "string" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "persistent" }
 ,{ "string." }
 ,{ "Format" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "copied," }
 ,{ "so" }
 ,{ "they" }
 ,{ "must" }
 ,{ "have" }
 ,{ "a" }
 ,{ "value" }
 ,{ "semantic." }
 ,{ "It" }
 ,{ "is" }
 ,{ "recommended," }
 ,{ "that" }
 ,{ "format" }
 ,{ "arguments" }
 ,{ "should" }
 ,{ "be" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "LogCategory_enum" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "The" }
 ,{ "class" }
 ,{ "LogCategory_enum" , & fmt_text_b }
 ,{ "implements" }
 ,{ "a" }
 ,{ "log" }
 ,{ "message" }
 ,{ "category" }
 ,{ "type," }
 ,{ "based" }
 ,{ "on" }
 ,{ "two" }
 ,{ "enums." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "It" }
 ,{ "stores" }
 ,{ "internally" }
 ,{ "two" }
 ,{ "enum" }
 ,{ "values:" }
 ,{ "Src" , & fmt_text_b }
 ,{ "and" }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "the" }
 ,{ "Src" , & fmt_text_b }
 ,{ "describes" }
 ,{ "the" }
 ,{ "message" }
 ,{ "source," }
 ,{ "and" }
 ,{ "the" }
 ,{ "Type" , & fmt_text_b }
 ,{ "describes" }
 ,{ "the" }
 ,{ "message" }
 ,{ "type." }
 ,{ "Src" , & fmt_text_b }
 ,{ "and" }
 ,{ "Type" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "\"uint5\"" , & fmt_text_b }
 ,{ "enums," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "usable" }
 ,{ "value" }
 ,{ "range" }
 ,{ "should" }
 ,{ "be" }
 ,{ "representable" }
 ,{ "by" }
 ,{ "a" }
 ,{ "5-bits" }
 ,{ "unsigned." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "LogFilter_enum" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "The" }
 ,{ "class" }
 ,{ "LogFilter_enum" , & fmt_text_b }
 ,{ "implements" }
 ,{ "a" }
 ,{ "log" }
 ,{ "message" }
 ,{ "filter" }
 ,{ "for" }
 ,{ "the" }
 ,{ "category" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "LogCategory_enum" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "filter," }
 ,{ "which" }
 ,{ "passes" }
 ,{ "all" }
 ,{ "categories." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "filter," }
 ,{ "which" }
 ,{ "passes" }
 ,{ "only" }
 ,{ "the" }
 ,{ "given" }
 ,{ "category." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "enable()" , & fmt_text_b }
 ,{ "enables" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "or" }
 ,{ "source." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "disable()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "or" }
 ,{ "source." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "filter" }
 ,{ "function." }
 ,{ "It" }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "filter" }
 ,{ "out" }
 ,{ "the" }
 ,{ "given" }
 ,{ "category." }
 ,{ "If" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "category" }
 ,{ "must" }
 ,{ "be" }
 ,{ "filtered" }
 ,{ "out." }
 ,{ "This" }
 ,{ "filter" }
 ,{ "filters" }
 ,{ "categories," }
 ,{ "whose" }
 ,{ "source" }
 ,{ "is" }
 ,{ "disabled" }
 ,{ "OR" }
 ,{ "whose" }
 ,{ "type" }
 ,{ "is" }
 ,{ "disabled." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "LogStamp" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "The" }
 ,{ "class" }
 ,{ "LogStamp" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "log" }
 ,{ "time-stamp" }
 ,{ "class" }
 ,{ "implementation." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "holds" }
 ,{ "3" }
 ,{ "values:" }
 ,{ "the" }
 ,{ "message" }
 ,{ "number," }
 ,{ "the" }
 ,{ "message" }
 ,{ "second" }
 ,{ "time-stamp" }
 ,{ "and" }
 ,{ "the" }
 ,{ "message" }
 ,{ "differential" }
 ,{ "clock" }
 ,{ "time-stamp" }
 ,{ "(i.e." }
 ,{ "the" }
 ,{ "clock" }
 ,{ "time" }
 ,{ "since" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "message)." }
 ,{ "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "Host" , & fmt_text_b }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "time-stamp" }
 ,{ "generation." }
 ,{ "An" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "created" }
 ,{ "as" }
 ,{ "the" }
 ,{ "part" }
 ,{ "of" }
 ,{ "a" }
 ,{ "log" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Any" }
 ,{ "other" }
 ,{ "log" }
 ,{ "time-stamp" }
 ,{ "classes" }
 ,{ "must" }
 ,{ "follow" }
 ,{ "this" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "LogCounter" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "The" }
 ,{ "class" }
 ,{ "LogCounter" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "count" }
 ,{ "log" }
 ,{ "messages." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "counters:" }
 ,{ "the" }
 ,{ "total" }
 ,{ "message" }
 ,{ "count" }
 ,{ "and" }
 ,{ "the" }
 ,{ "committed" }
 ,{ "message" }
 ,{ "count." }
 ,{ "A" }
 ,{ "message" }
 ,{ "can" }
 ,{ "be" }
 ,{ "skipped" }
 ,{ "by" }
 ,{ "different" }
 ,{ "reasons." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "LogMsgBase" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "This" }
 ,{ "class" }
 ,{ "serves" }
 ,{ "as" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class" }
 ,{ "for" }
 ,{ "log" }
 ,{ "message" }
 ,{ "object" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "LogMsg" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "log" }
 ,{ "message" }
 ,{ "object" }
 ,{ "type," }
 ,{ "as" }
 ,{ "it" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "a" }
 ,{ "log." }
 ,{ "It" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "LogMsgBase" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "LogMem" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "The" }
 ,{ "class" }
 ,{ "LogMem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "distributor" }
 ,{ "for" }
 ,{ "log" }
 ,{ "messages." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "LogStorage" , & fmt_text_b }
 ,{ "to" }
 ,{ "manage" }
 ,{ "the" }
 ,{ "log" }
 ,{ "message" }
 ,{ "memory" }
 ,{ "blocks." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "it" }
 ,{ "directly." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "LogStorage" }
} , & fmt_h4 , & align_h4 } ;

Text b26 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "storage" }
 ,{ "for" }
 ,{ "log" }
 ,{ "messages." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "core" }
 ,{ "class" }
 ,{ "for" }
 ,{ "the" }
 ,{ "log" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "allocates" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "dynamically." }
 ,{ "The" }
 ,{ "second" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "memory" }
 ,{ "space." }
 ,{ "The" }
 ,{ "base" }
 ,{ "address" }
 ,{ "of" }
 ,{ "this" }
 ,{ "space" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "messages" }
 ,{ "in" }
 ,{ "the" }
 ,{ "storage." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "getCounter()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "message" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "setOverrun()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "overrun" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set" }
 ,{ "and" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "a" }
 ,{ "new" }
 ,{ "message," }
 ,{ "the" }
 ,{ "oldest" }
 ,{ "messages" }
 ,{ "are" }
 ,{ "deleted" }
 ,{ "to" }
 ,{ "acquire" }
 ,{ "the" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "delAll()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "all" }
 ,{ "messages." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "To" }
 ,{ "add" }
 ,{ "a" }
 ,{ "new" }
 ,{ "message" }
 ,{ "to" }
 ,{ "the" }
 ,{ "storage," }
 ,{ "you" }
 ,{ "must" }
 ,{ "allocate" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "the" }
 ,{ "message" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "required" }
 ,{ "memory" }
 ,{ "length." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "memory," }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "null" }
 ,{ "(but" }
 ,{ "the" }
 ,{ "current" }
 ,{ "message" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "updated)." }
 ,{ "Otherwise," }
 ,{ "you" }
 ,{ "get" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "You" }
 ,{ "must" }
 ,{ "create" }
 ,{ "a" }
 ,{ "message" }
 ,{ "at" }
 ,{ "this" }
 ,{ "address," }
 ,{ "or" }
 ,{ "return" }
 ,{ "this" }
 ,{ "block," }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "free()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "you" }
 ,{ "are" }
 ,{ "succeeded" }
 ,{ "in" }
 ,{ "the" }
 ,{ "message" }
 ,{ "creation," }
 ,{ "you" }
 ,{ "must" }
 ,{ "commit" }
 ,{ "the" }
 ,{ "message" }
 ,{ "into" }
 ,{ "the" }
 ,{ "storage" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "commit()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "message" }
 ,{ "base" }
 ,{ "class" }
 ,{ "(the" }
 ,{ "message" }
 ,{ "type" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "LogMsgBase<Cat,Stamp>" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "A" }
 ,{ "storage" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "message" }
 ,{ "counting" }
 ,{ "and" }
 ,{ "the" }
 ,{ "message" }
 ,{ "stamping." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "You" }
 ,{ "can" }
 ,{ "iterate" }
 ,{ "over" }
 ,{ "the" }
 ,{ "storage" }
 ,{ "content" }
 ,{ "using" }
 ,{ "the" }
 ,{ "storage" }
 ,{ "cursor." }
 ,{ "There" }
 ,{ "can" }
 ,{ "be" }
 ,{ "only" }
 ,{ "one" }
 ,{ "active" }
 ,{ "storage" }
 ,{ "cursor" }
 ,{ "at" }
 ,{ "any" }
 ,{ "moment." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "startCursor()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "cursor." }
 ,{ "If" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "already" }
 ,{ "active," }
 ,{ "the" }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "message" }
 ,{ "is" }
 ,{ "returned," }
 ,{ "or" }
 ,{ "null" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "one," }
 ,{ "in" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "not" }
 ,{ "activated." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "nextCursor()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "message." }
 ,{ "If" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "not" }
 ,{ "active" }
 ,{ "anymore." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "stopCursor()" , & fmt_text_b }
 ,{ "deactivates" }
 ,{ "the" }
 ,{ "cursor." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "this" }
 ,{ "method" }
 ,{ "when" }
 ,{ "you" }
 ,{ "have" }
 ,{ "done" }
 ,{ "with" }
 ,{ "an" }
 ,{ "iteration," }
 ,{ "unless" }
 ,{ "the" }
 ,{ "last" }
 ,{ "call" }
 ,{ "of" }
 ,{ "the" }
 ,{ "nextCursor()" , & fmt_text_b }
 ,{ "has" }
 ,{ "returned" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Be" }
 ,{ "advised," }
 ,{ "while" }
 ,{ "the" }
 ,{ "storage" }
 ,{ "cursor" }
 ,{ "is" }
 ,{ "active," }
 ,{ "the" }
 ,{ "current" }
 ,{ "cursor" }
 ,{ "message" }
 ,{ "and" }
 ,{ "all" }
 ,{ "following" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "deleted." }
 ,{ "The" }
 ,{ "method" }
 ,{ "delAll()" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "leaves" }
 ,{ "these" }
 ,{ "messages" }
 ,{ "alive." }
 ,{ "It" }
 ,{ "means," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "finish" }
 ,{ "with" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "before" }
 ,{ "the" }
 ,{ "storage" }
 ,{ "object" }
 ,{ "destructor" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "UserLog" }
} , & fmt_h4 , & align_h4 } ;

Text b40 = { {
 { "The" }
 ,{ "class" }
 ,{ "UserLog" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"user\"" }
 ,{ "any-purpose" }
 ,{ "log." }
 ,{ "It" }
 ,{ "is" }
 ,{ "parameterized" }
 ,{ "by" }
 ,{ "four" }
 ,{ "template" }
 ,{ "parameter." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "The" }
 ,{ "first" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "Cat" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "log" }
 ,{ "message" }
 ,{ "category" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "Stamp" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "log" }
 ,{ "time-stamp" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "The" }
 ,{ "third" }
 ,{ "is" }
 ,{ "Filter" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "log" }
 ,{ "message" }
 ,{ "filter" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "The" }
 ,{ "last" }
 ,{ "is" }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "mutex" }
 ,{ "class." }
 ,{ "The" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "protect" }
 ,{ "log" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "NoMutex" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "thread-safe" }
 ,{ "log," }
 ,{ "use" }
 ,{ "a" }
 ,{ "real" }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "class" }
 ,{ "here." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "Two" }
 ,{ "constructors" }
 ,{ "are" }
 ,{ "differ" }
 ,{ "only" }
 ,{ "in" }
 ,{ "the" }
 ,{ "way" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "allocation:" }
 ,{ "the" }
 ,{ "first" }
 ,{ "takes" }
 ,{ "memory" }
 ,{ "from" }
 ,{ "the" }
 ,{ "heap." }
 ,{ "The" }
 ,{ "second" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "memory" }
 ,{ "space," }
 ,{ "the" }
 ,{ "space" }
 ,{ "base" }
 ,{ "address" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned." }
 ,{ "The" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "mutex" }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "log" }
 ,{ "itself." }
 ,{ "The" }
 ,{ "overrun" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "overrun" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "getName()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "log" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "getCounter()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "log" }
 ,{ "message" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "setOverrun()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "overrun" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "new" }
 ,{ "messages" }
 ,{ "will" }
 ,{ "overrun" }
 ,{ "oldest" }
 ,{ "messages" }
 ,{ "in" }
 ,{ "the" }
 ,{ "log." }
 ,{ "Otherwise," }
 ,{ "log" }
 ,{ "doesn't" }
 ,{ "delete" }
 ,{ "old" }
 ,{ "messages" }
 ,{ "and" }
 ,{ "therefor" }
 ,{ "has" }
 ,{ "a" }
 ,{ "limited" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "setFilter()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "given" }
 ,{ "message" }
 ,{ "filter" }
 ,{ "to" }
 ,{ "drop" }
 ,{ "incoming" }
 ,{ "messages." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "getFilter()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "log" }
 ,{ "filter." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "To" }
 ,{ "add" }
 ,{ "a" }
 ,{ "message" }
 ,{ "to" }
 ,{ "the" }
 ,{ "log" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "message" }
 ,{ "category." }
 ,{ "The" }
 ,{ "message" }
 ,{ "can" }
 ,{ "be" }
 ,{ "filtered" }
 ,{ "out" }
 ,{ "based" }
 ,{ "on" }
 ,{ "this" }
 ,{ "value." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "message" }
 ,{ "format" }
 ,{ "string." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "persistent" }
 ,{ "string" }
 ,{ "(at" }
 ,{ "least" }
 ,{ "for" }
 ,{ "the" }
 ,{ "log" }
 ,{ "life-time" }
 ,{ "duration)," }
 ,{ "not" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "life-time" }
 ,{ "value." }
 ,{ "Usually," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "string" }
 ,{ "literal." }
 ,{ "The" }
 ,{ "last" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "format" }
 ,{ "the" }
 ,{ "message" }
 ,{ "pretty" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "Printf()" , & fmt_text_b }
 ,{ "function" }
 ,{ "is" }
 ,{ "working." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "getPrint()" , & fmt_text_b }
 ,{ "builds" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "object" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "printing." }
 ,{ "It" }
 ,{ "prints" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "count" }
 ,{ "of" }
 ,{ "log" }
 ,{ "messages" }
 ,{ "from" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "log" }
 ,{ "using" }
 ,{ "the" }
 ,{ "given" }
 ,{ "filter" }
 ,{ "to" }
 ,{ "filter" }
 ,{ "out" }
 ,{ "messages" }
 ,{ "for" }
 ,{ "printing." }
 ,{ "Printing" }
 ,{ "doesn't" }
 ,{ "lock" }
 ,{ "the" }
 ,{ "log:" }
 ,{ "logging" }
 ,{ "may" }
 ,{ "continue" }
 ,{ "during" }
 ,{ "the" }
 ,{ "print" }
 ,{ "operation." }
 ,{ "That" }
 ,{ "is" }
 ,{ "why" }
 ,{ "we" }
 ,{ "need" }
 ,{ "some" }
 ,{ "message" }
 ,{ "count" }
 ,{ "limit." }
 ,{ "If" }
 ,{ "you" }
 ,{ "are" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "log" }
 ,{ "is" }
 ,{ "not" }
 ,{ "appending" }
 ,{ "anymore," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "MaxULen" , & fmt_text_b }
 ,{ "value" }
 ,{ "for" }
 ,{ "the" }
 ,{ "count" , & fmt_text_b }
 ,{ "." }
 ,{ "Be" , & fmt_text_Alert }
 ,{ "advised," , & fmt_text_Alert }
 ,{ "a" , & fmt_text_Alert }
 ,{ "log" , & fmt_text_Alert }
 ,{ "can" , & fmt_text_Alert }
 ,{ "be" , & fmt_text_Alert }
 ,{ "printed" , & fmt_text_Alert }
 ,{ "only" , & fmt_text_Alert }
 ,{ "to" , & fmt_text_Alert }
 ,{ "printer" , & fmt_text_Alert }
 ,{ "objects," , & fmt_text_Alert }
 ,{ "whose" , & fmt_text_Alert }
 ,{ "type" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "derived" , & fmt_text_Alert }
 ,{ "from" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "PrintBase" , & fmt_text_Alert }
 ,{ "class" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "The" }
 ,{ "global" }
 ,{ "function" }
 ,{ "PrintLog()" , & fmt_text_b }
 ,{ "can" }
 ,{ "also" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "print" }
 ,{ "object:" }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "iterate" }
 ,{ "over" }
 ,{ "the" }
 ,{ "log" }
 ,{ "messages." }
 ,{ "There" }
 ,{ "can" }
 ,{ "be" }
 ,{ "only" }
 ,{ "one" }
 ,{ "active" }
 ,{ "cursor" }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "time." }
} , & fmt_text , & align_text } ;

Page page = { "page_Logging" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MakeFileName {

Text b0 = { {
 { "MakeFileName" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/MakeFileName.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MakeFileName.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MakeFileName" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "MakeString<MaxPathLen>" , & fmt_text_a }
 ,{ "and" }
 ,{ "may" }
 ,{ "contain" }
 ,{ "some" }
 ,{ "file" }
 ,{ "path." }
 ,{ "It" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "such" }
 ,{ "path" }
 ,{ "from" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "path" }
 ,{ "and" }
 ,{ "a" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "MakeFileName(StrLen" , & fmt_text_b }
 ,{ "dir_name,StrLen" , & fmt_text_b }
 ,{ "file_name)" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "full" }
 ,{ "path," }
 ,{ "combined" }
 ,{ "from" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "path" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name." }
 ,{ "dir_name" , & fmt_text_b }
 ,{ "may" }
 ,{ "ends" }
 ,{ "with" }
 ,{ "a" }
 ,{ "slash." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "MakeFileName(StrLen" , & fmt_text_b }
 ,{ "dir_name,StrLen" , & fmt_text_b }
 ,{ "file_name,StrLen" , & fmt_text_b }
 ,{ "auto_ext)" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "given" }
 ,{ "auto-extension," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "has" }
 ,{ "no" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "does" }
 ,{ "the" }
 ,{ "same" }
 ,{ "job" }
 ,{ "as" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "constructor." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "as" }
 ,{ "the" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "overflow." }
} , & fmt_text , & align_text } ;

Page page = { "page_MakeFileName" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MakeList {

Text b0 = { {
 { "MakeList" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "MakeList" , & fmt_text_b }
 ,{ "prepares" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "makefile" }
 ,{ "from" }
 ,{ "file" }
 ,{ "lists." }
 ,{ "This" }
 ,{ "utility" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "build" }
 ,{ "system." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "The" }
 ,{ "first" }
 ,{ "command" }
 ,{ "line" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "the" }
 ,{ "obj" , & fmt_text_b }
 ,{ "path." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "a" }
 ,{ ".cpp" , & fmt_text_b }
 ,{ "file" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "third" }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "a" }
 ,{ ".s" , & fmt_text_b }
 ,{ "file" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "first" }
 ,{ "command" }
 ,{ "line" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "the" }
 ,{ "obj" , & fmt_text_b }
 ,{ "path." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "After" }
 ,{ "the" }
 ,{ "option" }
 ,{ "-s" , & fmt_text_b }
 ,{ "the" }
 ,{ "directory" }
 ,{ "list" }
 ,{ "of" }
 ,{ "source" }
 ,{ "files" }
 ,{ "follows." }
 ,{ "These" }
 ,{ "directories" }
 ,{ "are" }
 ,{ "searched" }
 ,{ "recursively" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "source" }
 ,{ "file" }
 ,{ "lists" }
 ,{ "(" }
 ,{ "*.cpp" , & fmt_text_b }
 ,{ "files" }
 ,{ "and" }
 ,{ "*.s" , & fmt_text_b }
 ,{ "files)." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "utility" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "output" }
 ,{ "file" }
 ,{ "Makefile.files" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Page page = { "page_MakeList" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MakeString {

Text b0 = { {
 { "MakeString" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/MakeString.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MakeString.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MakeString" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "string-building" }
 ,{ "tool." }
 ,{ "It" }
 ,{ "has" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "can" }
 ,{ "append" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "this" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "control." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "overflowed." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "overflowed." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "object" }
 ,{ "into" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state," }
 ,{ "i.e." }
 ,{ "without" }
 ,{ "overflow" }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "string" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "add()" , & fmt_text_b }
 ,{ "appends" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "itself," }
 ,{ "so" }
 ,{ "you" }
 ,{ "may" }
 ,{ "chain" }
 ,{ "operations." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "room," }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "implementation-defined" }
 ,{ "and" }
 ,{ "should" }
 ,{ "not" }
 ,{ "be" }
 ,{ "used." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "Null" , & fmt_text_a }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "zero()" , & fmt_text_b }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "To" }
 ,{ "add" }
 ,{ "a" }
 ,{ "single" }
 ,{ "argument" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "+=" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "zero()" , & fmt_text_b }
 ,{ "appends" }
 ,{ "the" }
 ,{ "null" }
 ,{ "character," }
 ,{ "but" }
 ,{ "not" }
 ,{ "advance" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "position." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "room," }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "implementation-defined" }
 ,{ "and" }
 ,{ "should" }
 ,{ "not" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "accumulated" }
 ,{ "string" }
 ,{ "as" }
 ,{ "the" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "getZStr()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "buffer." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "the" }
 ,{ "zero()" , & fmt_text_b }
 ,{ "operation" }
 ,{ "to" }
 ,{ "make" }
 ,{ "the" }
 ,{ "string" }
 ,{ "zero-terminated" }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Page page = { "page_MakeString" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Math {

Text b0 = { {
 { "Math" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Math" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "mathematical" }
 ,{ "tools." }
 ,{ "It" }
 ,{ "is" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Math" , & fmt_text_b }
 ,{ "and" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "subfolders" }
 ,{ "math" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Math" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MD5 {

Text b0 = { {
 { "MD5" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/MD5.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/MD5.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/PlatformMD5.h" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Software" }
 ,{ "MD5" }
 ,{ "implementation" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "The" }
 ,{ "following" }
 ,{ "HashFunction<....>" , & fmt_text_a }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "MD5" }
 ,{ "hash" }
 ,{ "algorithm:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "following" }
 ,{ "KeyedHashFunction<....>" , & fmt_text_a }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "HMAC" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "based" }
 ,{ "on" }
 ,{ "MD5" }
 ,{ "algorithm:" }
} , & fmt_text , & align_text } ;

Link link_PlatformMD5 = { & page , { 6 } } ;

Text b6 = { {
 { "Platform" }
 ,{ "MD5" }
} , & fmt_h3 , & align_h3 } ;

Text b7 = { {
 { "The" }
 ,{ "file" }
 ,{ "PlatformMD5.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "stub" }
 ,{ "definition" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PlatformMD5" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "A" }
 ,{ "target" }
 ,{ "may" }
 ,{ "override" }
 ,{ "this" }
 ,{ "header" }
 ,{ "file" }
 ,{ "and" }
 ,{ "provide" }
 ,{ "its" }
 ,{ "own" }
 ,{ "definitions" }
 ,{ "with" }
 ,{ "efficient" }
 ,{ "platform-dependent" }
 ,{ "MD5" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Page page = { "page_MD5" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MemAllocGuard {

Text b0 = { {
 { "MemAllocGuard" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/MemAllocGuard.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MemAllocGuard.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MemAllocGuard" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Scope" , & fmt_text_b }
 ,{ "Lock" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "allocation." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "keep" }
 ,{ "alive" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "for" }
 ,{ "the" }
 ,{ "duration" }
 ,{ "of" }
 ,{ "a" }
 ,{ "scope." }
 ,{ "MemAllocGuard" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "releases" }
 ,{ "the" }
 ,{ "block," }
 ,{ "unless" }
 ,{ "the" }
 ,{ "method" }
 ,{ "disarm()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "MemAllocGuardOf" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "variant." }
 ,{ "You" }
 ,{ "can" }
 ,{ "customize" }
 ,{ "the" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "allocating/deallocating" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "Algo" , & fmt_text_b }
 ,{ "must" }
 ,{ "provide" }
 ,{ "two" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "requirement" }
 ,{ "is" }
 ,{ "enforced" }
 ,{ "using" }
 ,{ "the" }
 ,{ "concept" }
 ,{ "MemAllocAlgo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_MemAllocGuard" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MemoryManagement {

Text b0 = { {
 { "Memory" }
 ,{ "Management" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Basic" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "management" }
 ,{ "in" }
 ,{ "CCore" , & fmt_h3_b }
} , & fmt_h3 , & align_h3 } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/MemBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MemBase_general.cpp" , & fmt_text_Files_b }
 ,{ "HCore/CCore/src/MemBase.cpp" , & fmt_text_Files_b }
 ,{ "XCore/CCore/src/MemBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Files" }
 ,{ "CCore/inc/RadixHeap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RadixHeap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "Files" }
 ,{ "CCore/inc/HeapEngine.h" , & fmt_text_Files_b }
 ,{ "CCore/src/HeapEngine.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b5 = { {
 { "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "its" }
 ,{ "own" }
 ,{ "memory" }
 ,{ "management" }
 ,{ "subsystem." }
 ,{ "We" }
 ,{ "don't" }
 ,{ "rely" }
 ,{ "on" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "malloc/free" , & fmt_text_b }
 ,{ "or" }
 ,{ "new/delete" , & fmt_text_b }
 ,{ "," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "compiler" }
 ,{ "support" }
 ,{ "libraries." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "in" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "it" }
 ,{ "is" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "build" }
 ,{ "these" }
 ,{ "libraries" }
 ,{ "based" }
 ,{ "on" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions." }
 ,{ "This" }
 ,{ "is" }
 ,{ "because" }
 ,{ "we" }
 ,{ "need" }
 ,{ "much" }
 ,{ "more" }
 ,{ "from" }
 ,{ "the" }
 ,{ "heap," }
 ,{ "namely:" }
} , & fmt_text , & align_text } ;

Text b6_0 = { {
 { "additional" }
 ,{ "memory" }
 ,{ "functions," }
 ,{ "like" }
 ,{ "MemExtend()" , & fmt_list_b }
 ,{ "or" }
 ,{ "MemShrink()" , & fmt_list_b }
 ,{ "," }
} , & fmt_list , & align_list } ;

Text b6_1 = { {
 { "accounting" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "watch" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "usage," }
} , & fmt_list , & align_list } ;

Text b6_2 = { {
 { "some" }
 ,{ "protection" }
 ,{ "from" }
 ,{ "invalid" }
 ,{ "arguments," }
} , & fmt_list , & align_list } ;

Text b6_3 = { {
 { "speed!," }
 ,{ "more" }
 ,{ "speed!," }
} , & fmt_list , & align_list } ;

Text b6_4 = { {
 { "for" }
 ,{ "XCore" , & fmt_list_b }
 ,{ "we" }
 ,{ "need" }
 ,{ "several" }
 ,{ "heaps" }
 ,{ "for" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "for" }
 ,{ "special" }
 ,{ "memory" }
 ,{ "regions." }
} , & fmt_list , & align_list } ;

TextList b6 = { {
 { 'â€¢' , { { & b6_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b6_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b6_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b6_3 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b6_4 , null , ItemInner , ItemOuter } } }
} } ;

Text b7 = { {
 { "The" }
 ,{ "heart" }
 ,{ "of" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heaps" }
 ,{ "is" }
 ,{ "the" }
 ,{ "class" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "implements" }
 ,{ "a" }
 ,{ "radix-tree" }
 ,{ "based" }
 ,{ "heap" }
 ,{ "atop" }
 ,{ "on" }
 ,{ "a" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "management" }
 ,{ "facility." }
 ,{ "The" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "maintained" }
 ,{ "in" }
 ,{ "the" }
 ,{ "one" }
 ,{ "or" }
 ,{ "several" }
 ,{ "large" }
 ,{ "blocks" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "obtained" }
 ,{ "dynamically" }
 ,{ "from" }
 ,{ "the" }
 ,{ "OS," }
 ,{ "or" }
 ,{ "fixed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "memory." }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "real-time" }
 ,{ "heap." }
 ,{ "Its" }
 ,{ "operations" }
 ,{ "has" }
 ,{ "a" }
 ,{ "time" }
 ,{ "execution" }
 ,{ "limit," }
 ,{ "assuming" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "management" }
 ,{ "functions" }
 ,{ "calls." }
 ,{ "In" }
 ,{ "practice," }
 ,{ "the" }
 ,{ "cost" }
 ,{ "of" }
 ,{ "allocation" }
 ,{ "and" }
 ,{ "deallocation" }
 ,{ "memory" }
 ,{ "functions" }
 ,{ "is" }
 ,{ "a" }
 ,{ "100s" }
 ,{ "CPU" }
 ,{ "clocks." }
 ,{ "This" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "also" }
 ,{ "best-fit" }
 ,{ "and" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "protection" }
 ,{ "from" }
 ,{ "wrong" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "address" }
 ,{ "arguments." }
 ,{ "If" }
 ,{ "you" }
 ,{ "try" }
 ,{ "to" }
 ,{ "free" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "at" }
 ,{ "an" }
 ,{ "arbitrary" }
 ,{ "address," }
 ,{ "then" }
 ,{ "it's" }
 ,{ "very" }
 ,{ "likely" }
 ,{ "the" }
 ,{ "abort" }
 ,{ "will" }
 ,{ "be" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "CCore" , & fmt_text_b }
 ,{ "heap" }
 ,{ "is" }
 ,{ "a" }
 ,{ "global" }
 ,{ "object," }
 ,{ "maintained" }
 ,{ "by" }
 ,{ "the" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "and" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "HeapEngine" , & fmt_text_b }
 ,{ "class," }
 ,{ "which" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "top-level" }
 ,{ "logic" }
 ,{ "over" }
 ,{ "the" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "functionality." }
 ,{ "Been" }
 ,{ "a" }
 ,{ "general" }
 ,{ "purpose" }
 ,{ "global" }
 ,{ "object," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heap" }
 ,{ "is" }
 ,{ "a" }
 ,{ "mutex" , & fmt_text_b }
 ,{ "-protected." }
 ,{ "In" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "primary" }
 ,{ "large" }
 ,{ "blocks" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "are" }
 ,{ "obtained" }
 ,{ "from" }
 ,{ "the" }
 ,{ "OS." }
 ,{ "In" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "single" }
 ,{ "fixed" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "During" }
 ,{ "uninitialization," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heap" }
 ,{ "calls" }
 ,{ "abort" }
 ,{ "if" }
 ,{ "not" }
 ,{ "all" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "were" }
 ,{ "released." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "MemBase" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "memory" }
 ,{ "function" }
 ,{ "list" }
 ,{ "from" }
 ,{ "MemBase.h" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "MemAlloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "of" }
 ,{ "required" }
 ,{ "length" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "its" }
 ,{ "address." }
 ,{ "The" }
 ,{ "block" }
 ,{ "is" }
 ,{ "always" }
 ,{ "MaxAlign" , & fmt_text_b }
 ,{ "ed," }
 ,{ "the" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "slightly" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "required" }
 ,{ "and" }
 ,{ "always" }
 ,{ "non-null." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "then" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "The" }
 ,{ "exception" }
 ,{ "class" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "std::bad_alloc" , & fmt_text_b }
 ,{ "as" }
 ,{ "required" }
 ,{ "by" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "standard," }
 ,{ "but" }
 ,{ "it" }
 ,{ "is" }
 ,{ "also" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "CatchType" , & fmt_text_b }
 ,{ "," }
 ,{ "according" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "rules." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "TryMemAlloc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar," }
 ,{ "but" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "failure" }
 ,{ "it" }
 ,{ "just" }
 ,{ "returns" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "MemLim()" , & fmt_text_b }
 ,{ "setup" }
 ,{ "the" }
 ,{ "global" }
 ,{ "allocation" }
 ,{ "limit." }
 ,{ "If" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "zero," }
 ,{ "then" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "limit." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "zero," }
 ,{ "heap" }
 ,{ "will" }
 ,{ "keep" }
 ,{ "the" }
 ,{ "total" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "length" }
 ,{ "below" }
 ,{ "this" }
 ,{ "limit" }
 ,{ "(approximately)." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "for" }
 ,{ "testing" }
 ,{ "purpose," }
 ,{ "it" }
 ,{ "helps" }
 ,{ "reproduce" }
 ,{ "the" }
 ,{ "situation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "shortage." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "In" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "four" }
 ,{ "functions" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "mem" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "either" }
 ,{ "an" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "or" }
 ,{ "null." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "heap" }
 ,{ "protection" }
 ,{ "abort" }
 ,{ "is" }
 ,{ "called" }
 ,{ "(with" }
 ,{ "high" }
 ,{ "probability," }
 ,{ "the" }
 ,{ "detection" }
 ,{ "is" }
 ,{ "not" }
 ,{ "100%)." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "MemFree()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "MemExtend()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "If" }
 ,{ "successful," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "new" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "block" }
 ,{ "is" }
 ,{ "at" }
 ,{ "least" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "MemExtend()" , & fmt_text_b }
 ,{ "is" }
 ,{ "always" }
 ,{ "successful," }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "it" }
 ,{ "does" }
 ,{ "nothing." }
 ,{ "If" }
 ,{ "additional" }
 ,{ "space" }
 ,{ "is" }
 ,{ "required," }
 ,{ "then" }
 ,{ "MemExtend()" , & fmt_text_b }
 ,{ "is" }
 ,{ "looking" }
 ,{ "for" }
 ,{ "the" }
 ,{ "space" }
 ,{ "behind" }
 ,{ "the" }
 ,{ "block." }
 ,{ "If" }
 ,{ "enough" }
 ,{ "such" }
 ,{ "space" }
 ,{ "is" }
 ,{ "free," }
 ,{ "it" }
 ,{ "resizes" }
 ,{ "both" }
 ,{ "memory" }
 ,{ "blocks." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "fails." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "MemShrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "If" }
 ,{ "successful," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "new" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "block" }
 ,{ "is" }
 ,{ "at" }
 ,{ "least" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "MemShrink()" , & fmt_text_b }
 ,{ "fails" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "MemLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "or" }
 ,{ "0" }
 ,{ "for" }
 ,{ "the" }
 ,{ "null" }
 ,{ "mem" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "GuardNoMem()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "when" }
 ,{ "no" }
 ,{ "memory" }
 ,{ "error" }
 ,{ "happens." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "JustTry" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "word" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "distinguish" }
 ,{ "between" }
 ,{ "throwing" }
 ,{ "and" }
 ,{ "non-throwing" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "some" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "MemStatData" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "statistics." }
 ,{ "It" }
 ,{ "has" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "block_count" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "allocated" }
 ,{ "blocks," }
 ,{ "and" }
 ,{ "len_count" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "total" }
 ,{ "length" }
 ,{ "of" }
 ,{ "blocks." }
 ,{ "It" }
 ,{ "has" }
 ,{ "number" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "with" }
 ,{ "obvious" }
 ,{ "meaning." }
 ,{ "The" }
 ,{ "method" }
 ,{ "setMax()" , & fmt_text_b }
 ,{ "replaces" }
 ,{ "the" }
 ,{ "current" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument," }
 ,{ "if" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "has" }
 ,{ "a" }
 ,{ "greater" }
 ,{ "len_count" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "accumulate" }
 ,{ "the" }
 ,{ "\"peak\"" }
 ,{ "stat" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "To" }
 ,{ "get" }
 ,{ "a" }
 ,{ "heap" }
 ,{ "statistic" }
 ,{ "information" }
 ,{ "there" }
 ,{ "are" }
 ,{ "two" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "s:" }
} , & fmt_text , & align_text } ;

Link link_MemStat = { & page , { 24 } } ;

Text b24 = { {
 { "MemStat" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "heap" }
 ,{ "usage," }
 ,{ "while" }
 ,{ "MemPeak" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "peak" }
 ,{ "usage." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "MemBase" }
 ,{ "utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b26 = { {
 { "MemScope" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Scope" , & fmt_text_b }
 ,{ "Lock" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "controls" }
 ,{ "memory" }
 ,{ "release" }
 ,{ "during" }
 ,{ "some" }
 ,{ "scope" }
 ,{ "of" }
 ,{ "execution." }
 ,{ "In" }
 ,{ "constructor" }
 ,{ "it" }
 ,{ "records" }
 ,{ "the" }
 ,{ "current" }
 ,{ "heap" }
 ,{ "statistic," }
 ,{ "in" }
 ,{ "destructor" }
 ,{ "it" }
 ,{ "retrieves" }
 ,{ "it" }
 ,{ "again" }
 ,{ "and" }
 ,{ "compares." }
 ,{ "If" }
 ,{ "they" }
 ,{ "doesn't" }
 ,{ "match," }
 ,{ "a" }
 ,{ "error" }
 ,{ "message" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "using" }
 ,{ "Printf(NoException,...)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "for" }
 ,{ "the" }
 ,{ "catching" }
 ,{ "memory" }
 ,{ "leaks." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Another" }
 ,{ "helpful" }
 ,{ "Property" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "the" }
 ,{ "MemBase" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Link link_MemBase = { & page , { 29 } } ;

Text b29 = { {
 { "This" }
 ,{ "class" }
 ,{ "redefines" }
 ,{ "the" }
 ,{ "new/delete" , & fmt_text_b }
 ,{ "operators" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heap." }
 ,{ "Specify" }
 ,{ "this" }
 ,{ "class" }
 ,{ "as" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class" }
 ,{ "to" }
 ,{ "make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "object" }
 ,{ "been" }
 ,{ "created" }
 ,{ "by" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "new" , & fmt_text_b }
 ,{ "will" }
 ,{ "be" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heap." }
 ,{ "It" }
 ,{ "also" }
 ,{ "defines" }
 ,{ "a" }
 ,{ "non-throwing" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "new" , & fmt_text_b }
 ,{ "with" }
 ,{ "JustTry" , & fmt_text_b }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "take" }
 ,{ "some" }
 ,{ "additional" }
 ,{ "space" }
 ,{ "after" }
 ,{ "the" }
 ,{ "object," }
 ,{ "using" }
 ,{ "the" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "new" , & fmt_text_b }
 ,{ "." }
 ,{ "extra" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "parts" }
 ,{ "of" }
 ,{ "size_of" , & fmt_text_b }
 ,{ "length." }
 ,{ "To" }
 ,{ "retrieve" }
 ,{ "this" }
 ,{ "space" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "ExtraSpace" , & fmt_text_b }
 ,{ "." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "MemBase_nocopy" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "non-copyable" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MemBase" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "MemSpaceHeap" }
} , & fmt_h3 , & align_h3 } ;

Text b33 = { {
 { "Files" }
 ,{ "CCore/inc/MemSpaceHeap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MemSpaceHeap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b34 = { {
 { "SpaceHeap" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "heap" }
 ,{ "class" }
 ,{ "for" }
 ,{ "a" }
 ,{ "stand-alone" }
 ,{ "usage." }
 ,{ "It" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "heap" }
 ,{ "functionality," }
 ,{ "the" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "comes" }
 ,{ "from" }
 ,{ "a" }
 ,{ "single" }
 ,{ "fixed" }
 ,{ "memory" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "memory" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "from" }
 ,{ "the" }
 ,{ "main" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "null" }
 ,{ "on" }
 ,{ "failure." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "The" }
 ,{ "argument" }
 ,{ "mem" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Destructor" }
 ,{ "calls" }
 ,{ "abort" }
 ,{ "on" }
 ,{ "memory" }
 ,{ "leak." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "extend()" , & fmt_text_b }
 ,{ "and" }
 ,{ "shrink()" , & fmt_text_b }
 ,{ "work" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "MemExtend()" , & fmt_text_b }
 ,{ "and" }
 ,{ "MemShrink()" , & fmt_text_b }
 ,{ "," }
 ,{ "except" }
 ,{ "they" }
 ,{ "don't" }
 ,{ "accept" }
 ,{ "the" }
 ,{ "null" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "a" }
 ,{ "mutex" , & fmt_text_b }
 ,{ "protection" }
 ,{ "for" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SpaceHeap" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "MemSpace" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "primary" , & fmt_text_a }
 ,{ "memory" , & fmt_text_a }
 ,{ "provider" , & fmt_text_a }
 ,{ "class" , & fmt_text_a }
 ,{ "for" }
 ,{ "the" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "SpaceHeap" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "space" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned," }
 ,{ "both" }
 ,{ "the" }
 ,{ "base" }
 ,{ "address" }
 ,{ "and" }
 ,{ "the" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "HCore" , & fmt_h3_b }
 ,{ "MemPageHeap" }
} , & fmt_h3 , & align_h3 } ;

Text b44 = { {
 { "Files" }
 ,{ "HCore/CCore/inc/MemPageHeap.h" , & fmt_text_Files_b }
 ,{ "HCore/CCore/src/MemPageHeap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b45 = { {
 { "PageHeap" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "heap" }
 ,{ "class" }
 ,{ "for" }
 ,{ "a" }
 ,{ "stand-alone" }
 ,{ "usage." }
 ,{ "It" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "heap" }
 ,{ "functionality," }
 ,{ "the" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "comes" }
 ,{ "from" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "large" }
 ,{ "memory" }
 ,{ "buffers." }
 ,{ "These" }
 ,{ "buffers" }
 ,{ "are" }
 ,{ "allocated" }
 ,{ "using" }
 ,{ "memory" }
 ,{ "page" }
 ,{ "functions," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "OS." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "The" }
 ,{ "interface" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PageHeap" , & fmt_text_b }
 ,{ "is" }
 ,{ "identical" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SpaceHeap" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "PageHeap" , & fmt_text_b }
 ,{ "has" }
 ,{ "two" }
 ,{ "constructors." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "min_page_alloc_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "large" }
 ,{ "buffer" }
 ,{ "length." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "uses" }
 ,{ "some" }
 ,{ "default" }
 ,{ "value" }
 ,{ "for" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "The" }
 ,{ "amount" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "PageHeap" , & fmt_text_b }
 ,{ "," }
 ,{ "is" }
 ,{ "limited" }
 ,{ "only" }
 ,{ "by" }
 ,{ "the" }
 ,{ "address" }
 ,{ "space" }
 ,{ "and" }
 ,{ "available" }
 ,{ "physical" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "MemPage" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "provider" }
 ,{ "class" }
 ,{ "for" }
 ,{ "the" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "PageHeap" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "min_alloc_len" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "same" }
 ,{ "meaning," }
 ,{ "as" }
 ,{ "the" }
 ,{ "min_page_alloc_len" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "PageHeap" , & fmt_text_b }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "XCore" , & fmt_h3_b }
 ,{ "SpecialMemBase" }
} , & fmt_h3 , & align_h3 } ;

Text b52 = { {
 { "Files" }
 ,{ "XCore/CCore/inc/SpecialMemBase.h" , & fmt_text_Files_b }
 ,{ "XCore/CCore/src/SpecialMemBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b53 = { {
 { "XCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "additional" }
 ,{ "memory" }
 ,{ "functions." }
 ,{ "There" }
 ,{ "are" }
 ,{ "2" }
 ,{ "additional" }
 ,{ "memory" }
 ,{ "heaps," }
 ,{ "one" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context," }
 ,{ "another" }
 ,{ "to" }
 ,{ "distribute" }
 ,{ "shared" }
 ,{ "memory." }
 ,{ "The" }
 ,{ "main" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "protected" }
 ,{ "by" }
 ,{ "a" }
 ,{ "mutex" , & fmt_text_b }
 ,{ "," }
 ,{ "so" }
 ,{ "it" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "The" }
 ,{ "interrupt" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "protected" }
 ,{ "by" }
 ,{ "the" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "exception" }
 ,{ "implementation," }
 ,{ "so" }
 ,{ "exceptions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "without" }
 ,{ "limitation." }
 ,{ "Shared" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "class" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "which" }
 ,{ "is" }
 ,{ "not" }
 ,{ "cached" }
 ,{ "by" }
 ,{ "the" }
 ,{ "CPU." }
 ,{ "This" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "exchange" }
 ,{ "data" }
 ,{ "with" }
 ,{ "peripheral" }
 ,{ "devices." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "Init_SpecialMem()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Exit_SpecialMem()" , & fmt_text_b }
 ,{ "are" }
 ,{ "initialization" }
 ,{ "functions," }
 ,{ "they" }
 ,{ "are" }
 ,{ "called" }
 ,{ "by" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "board" , & fmt_text_Alert }
 ,{ "initialization" , & fmt_text_Alert }
 ,{ "code" , & fmt_text_Alert }
 ,{ "and" , & fmt_text_Alert }
 ,{ "must" , & fmt_text_Alert }
 ,{ "not" , & fmt_text_Alert }
 ,{ "be" , & fmt_text_Alert }
 ,{ "used" , & fmt_text_Alert }
 ,{ "anywhere" , & fmt_text_Alert }
 ,{ "else" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "TryMemAlloc_int()" , & fmt_text_b }
 ,{ "and" }
 ,{ "MemFree_int()" , & fmt_text_b }
 ,{ "are" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "functions" }
 ,{ "of" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "TryMemAlloc_shared()" , & fmt_text_b }
 ,{ "and" }
 ,{ "MemFree_shared()" , & fmt_text_b }
 ,{ "are" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "functions" }
 ,{ "of" }
 ,{ "the" }
 ,{ "shared" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "MemStat_int" , & fmt_text_b }
 ,{ "and" }
 ,{ "MemPeak_int" , & fmt_text_b }
 ,{ "are" }
 ,{ "the" }
 ,{ "statistic" }
 ,{ "heap" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "s" }
 ,{ "of" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Page page = { "page_MemoryManagement" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_list , outer_list , back_list }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b33 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b44 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b52 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Meta {

Text b0 = { {
 { "Meta" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Meta.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Meta.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "namespace" }
 ,{ "Meta" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "meta-tools" }
 ,{ "widely-used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Meta" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Const" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "general" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "and" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Empty" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "Empty" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "Meta-class" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "result" }
 ,{ "from" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "EmptyBox" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "EmptyBox" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "utility" }
 ,{ "for" }
 ,{ "meta-calculations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "TypeBox" }
} , & fmt_h3 , & align_h3 } ;

Text b10 = { {
 { "TypeBox" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"box\"" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
 ,{ "It" }
 ,{ "also" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "meta-calculations" }
 ,{ "to" }
 ,{ "get" }
 ,{ "a" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "DefType" }
} , & fmt_h3 , & align_h3 } ;

Text b12 = { {
 { "DefType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "as" }
 ,{ "the" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "DefConst" }
} , & fmt_h3 , & align_h3 } ;

Text b14 = { {
 { "DefConst" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "given" }
 ,{ "constant" }
 ,{ "as" }
 ,{ "the" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "ToConst" }
} , & fmt_h3 , & align_h3 } ;

Text b16 = { {
 { "ToConst" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "makes" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "with" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "references." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Select" }
} , & fmt_h3 , & align_h3 } ;

Text b18 = { {
 { "Select" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "select" }
 ,{ "a" }
 ,{ "type" }
 ,{ "from" }
 ,{ "two" }
 ,{ "types." }
 ,{ "If" }
 ,{ "Cond" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "first" }
 ,{ "type" }
 ,{ "is" }
 ,{ "selected," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "second." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "IsSame" }
} , & fmt_h3 , & align_h3 } ;

Text b20 = { {
 { "IsSame" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "both" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "OneOf" }
} , & fmt_h3 , & align_h3 } ;

Text b22 = { {
 { "OneOf" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "T" , & fmt_text_b }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "the" }
 ,{ "following" }
 ,{ "type" }
 ,{ "list" }
 ,{ "TT" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "IsUInt" }
} , & fmt_h3 , & align_h3 } ;

Text b24 = { {
 { "IsUInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "The" }
 ,{ "following" }
 ,{ "types" }
 ,{ "are" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types:" }
 ,{ "unsignd" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "short" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "int" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "," }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "type" }
 ,{ "char" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "iff" }
 ,{ "it" }
 ,{ "is" }
 ,{ "unsigned." }
 ,{ "Some" }
 ,{ "other" }
 ,{ "types" }
 ,{ "can" }
 ,{ "be" }
 ,{ "also" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "it" }
 ,{ "is" }
 ,{ "controlled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target" }
 ,{ "through" }
 ,{ "the" }
 ,{ "target" }
 ,{ "header" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "(" }
 ,{ "see" , & fmt_text_a , & link_Target }
 ,{ "below" , & fmt_text_a , & link_Target }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "UIntBits" }
} , & fmt_h3 , & align_h3 } ;

Text b26 = { {
 { "UIntBits" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It's" }
 ,{ "defined" }
 ,{ "for" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "(i.e." }
 ,{ "for" }
 ,{ "types" }
 ,{ "T" , & fmt_text_b }
 ,{ "with" }
 ,{ "IsUInt<T>" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ ")" }
 ,{ "and" }
 ,{ "equals" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "HexWidth" }
} , & fmt_h3 , & align_h3 } ;

Text b28 = { {
 { "HexWidth" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It's" }
 ,{ "defined" }
 ,{ "for" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "(i.e." }
 ,{ "for" }
 ,{ "types" }
 ,{ "T" , & fmt_text_b }
 ,{ "with" }
 ,{ "IsUInt<T>" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ ")" }
 ,{ "and" }
 ,{ "equals" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "hex" }
 ,{ "digits" }
 ,{ "required" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "type" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "IsSInt" }
} , & fmt_h3 , & align_h3 } ;

Text b30 = { {
 { "IsSInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "The" }
 ,{ "following" }
 ,{ "types" }
 ,{ "are" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "types:" }
 ,{ "signd" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "signed" , & fmt_text_b }
 ,{ "short" , & fmt_text_b }
 ,{ "," }
 ,{ "signed" , & fmt_text_b }
 ,{ "int" , & fmt_text_b }
 ,{ "," }
 ,{ "signed" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "," }
 ,{ "signed" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "type" }
 ,{ "char" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "iff" }
 ,{ "it" }
 ,{ "is" }
 ,{ "signed." }
 ,{ "Some" }
 ,{ "other" }
 ,{ "types" }
 ,{ "can" }
 ,{ "be" }
 ,{ "also" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "it" }
 ,{ "is" }
 ,{ "controlled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target" }
 ,{ "through" }
 ,{ "the" }
 ,{ "target" }
 ,{ "header" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "(" }
 ,{ "see" , & fmt_text_a , & link_Target }
 ,{ "below" , & fmt_text_a , & link_Target }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "IsSUInt" }
} , & fmt_h3 , & align_h3 } ;

Text b32 = { {
 { "IsSUInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "or" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "UnRef" }
} , & fmt_h3 , & align_h3 } ;

Text b34 = { {
 { "UnRef" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "removes" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "qualifier" }
 ,{ "from" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "UnConst" }
} , & fmt_h3 , & align_h3 } ;

Text b36 = { {
 { "UnConst" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "removes" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "qualifier" }
 ,{ "from" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "PtrObjType" }
} , & fmt_h3 , & align_h3 } ;

Text b38 = { {
 { "PtrObjType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "should" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "pointer" }
 ,{ "kind" }
 ,{ "types" }
 ,{ "to" }
 ,{ "retrieve" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "pointee" }
 ,{ "objects." }
 ,{ "For" }
 ,{ "example," }
 ,{ "if" }
 ,{ "R" , & fmt_text_b }
 ,{ "is" }
 ,{ "PtrLen<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "PtrObjType<R>" , & fmt_text_b }
 ,{ "is" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "CommonType" }
} , & fmt_h3 , & align_h3 } ;

Text b40 = { {
 { "CommonType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "iff" }
 ,{ "T" , & fmt_text_b }
 ,{ "equals" }
 ,{ "S" , & fmt_text_b }
 ,{ "and" }
 ,{ "is" }
 ,{ "T" , & fmt_text_b }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "AlignedStorage" }
} , & fmt_h3 , & align_h3 } ;

Text b42 = { {
 { "AlignedStorage" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type." }
 ,{ "An" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "an" }
 ,{ "aligned" }
 ,{ "storage" }
 ,{ "of" }
 ,{ "required" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "SIntToUInt" }
} , & fmt_h3 , & align_h3 } ;

Text b44 = { {
 { "SIntToUInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "as" }
 ,{ "the" }
 ,{ "result" }
 ,{ "two" }
 ,{ "types:" }
 ,{ "SType" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "original" }
 ,{ "type" }
 ,{ "(or" }
 ,{ "equivalent)" }
 ,{ "and" }
 ,{ "UType" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "unsigned" }
 ,{ "type." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "supported" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target" }
 ,{ "(" }
 ,{ "see" , & fmt_text_a , & link_Target }
 ,{ "below" , & fmt_text_a , & link_Target }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "PromoteUInt" }
} , & fmt_h3 , & align_h3 } ;

Text b46 = { {
 { "PromoteUInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "as" }
 ,{ "the" }
 ,{ "result" }
 ,{ "a" }
 ,{ "type:" }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"promoted\"" }
 ,{ "type" }
 ,{ "for" }
 ,{ "the" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "or" }
 ,{ "greater" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "promoted" }
 ,{ "type" }
 ,{ "is" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equals" }
 ,{ "than" }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "supported" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target" }
 ,{ "(" }
 ,{ "see" , & fmt_text_a , & link_Target }
 ,{ "below" , & fmt_text_a , & link_Target }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "PromoteSInt" }
} , & fmt_h3 , & align_h3 } ;

Text b48 = { {
 { "PromoteSInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "as" }
 ,{ "the" }
 ,{ "result" }
 ,{ "two" }
 ,{ "types:" }
 ,{ "SType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"promoted\"" }
 ,{ "type" }
 ,{ "for" }
 ,{ "the" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "or" }
 ,{ "greater" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "promoted" }
 ,{ "type" }
 ,{ "is" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equals" }
 ,{ "than" }
 ,{ "int" , & fmt_text_b }
 ,{ "." }
 ,{ "UType" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "unsigned" }
 ,{ "SType" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "supported" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target" }
 ,{ "(" }
 ,{ "see" , & fmt_text_a , & link_Target }
 ,{ "below" , & fmt_text_a , & link_Target }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "Type" }
 ,{ "properties" }
} , & fmt_h3 , & align_h3 } ;

Text b50 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "whole" }
 ,{ "list" }
 ,{ "of" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "s." }
 ,{ "They" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "different" }
 ,{ "type" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "IsEnum" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "IsClass" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "IsPOD" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "HasNothrowDtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "nothrow" }
 ,{ "destructible." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "HasTrivDtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "trivially" }
 ,{ "destructible." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "HasDefaultCtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "default" }
 ,{ "constructible." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "HasNothrowDefaultCtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "nothrow" }
 ,{ "default" }
 ,{ "constructible." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "HasCopyCtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "copy" }
 ,{ "constructible." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "HasNothrowCopyCtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "nothrow" }
 ,{ "copy" }
 ,{ "constructible." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "HasMoveCtor" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "move" }
 ,{ "constructible." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "IsCopyable" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "copy" }
 ,{ "constructible" }
 ,{ "and" }
 ,{ "copy" }
 ,{ "assignable." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "IsNothrowCopyable" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "nothrow" }
 ,{ "copy" }
 ,{ "constructible" }
 ,{ "and" }
 ,{ "nothrow" }
 ,{ "copy" }
 ,{ "assignable." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "IsMovable" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "move" }
 ,{ "constructible" }
 ,{ "and" }
 ,{ "move" }
 ,{ "assignable." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "IsBaseOf" , & fmt_text_b }
 ,{ "equals" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "type" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "D" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Link link_Target = { & page , { 65 } } ;

Text b65 = { {
 { "Target" }
 ,{ "support" }
 ,{ "for" }
 ,{ "Meta" }
} , & fmt_h2 , & align_h2 } ;

Text b66 = { {
 { "Target" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "entities" }
 ,{ "in" }
 ,{ "the" }
 ,{ "its" }
 ,{ "header" }
 ,{ "file" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "The" }
 ,{ "following" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "types," }
 ,{ "recognized" }
 ,{ "as" }
 ,{ "integral" }
 ,{ "types:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Meta" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MetaList {

Text b0 = { {
 { "MetaList" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/MetaList.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/MetaList.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "namespace" }
 ,{ "Meta" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "meta-tools" }
 ,{ "widely-used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Meta" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "particular" }
 ,{ "file" }
 ,{ "provides" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "type" }
 ,{ "lists." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "EraseType" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "EraseType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "maps" }
 ,{ "any" }
 ,{ "type" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "int" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "IndexListBox" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "IndexListBox" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"box\"" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "integer" }
 ,{ "indexes." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "IndexListBox" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "IndexListBox" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "box" }
 ,{ "of" }
 ,{ "indexes" }
 ,{ "IndexListBox<i,i+1,...,i+n-1>" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "index" }
 ,{ "is" }
 ,{ "Base" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "list" }
 ,{ "TT" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "TypeListBox" }
} , & fmt_h3 , & align_h3 } ;

Text b10 = { {
 { "TypeListBox" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "\"box\"" }
 ,{ "type" }
 ,{ "for" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "types." }
 ,{ "This" }
 ,{ "box" }
 ,{ "has" }
 ,{ "three" }
 ,{ "inner" }
 ,{ "values:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "self" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "FirstType" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "defined." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Extend" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "function" }
 ,{ "extends" }
 ,{ "the" }
 ,{ "box" }
 ,{ "by" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "list" }
 ,{ "of" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "JoinTypeList" }
} , & fmt_h3 , & align_h3 } ;

Text b15 = { {
 { "JoinTypeList" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "joins" }
 ,{ "two" }
 ,{ "type" }
 ,{ "list" }
 ,{ "boxes." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "SplitTypeList" }
} , & fmt_h3 , & align_h3 } ;

Text b17 = { {
 { "SplitTypeList" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "list" }
 ,{ "on" }
 ,{ "two" }
 ,{ "parts." }
 ,{ "SplitTypeListBox" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "type" }
 ,{ "list" }
 ,{ "box" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "PrefixTypeList" }
} , & fmt_h3 , & align_h3 } ;

Text b19 = { {
 { "PrefixTypeList" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "prefix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "list" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "PartTypeList" }
} , & fmt_h3 , & align_h3 } ;

Text b21 = { {
 { "PartTypeList" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "suffix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "offset." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "TypeSubList" }
} , & fmt_h3 , & align_h3 } ;

Text b23 = { {
 { "TypeSubList" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "offset" }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "SelectList" }
} , & fmt_h3 , & align_h3 } ;

Text b25 = { {
 { "SelectList" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-type" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "selects" }
 ,{ "a" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "from" }
 ,{ "the" }
 ,{ "type" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "IndexOf" }
} , & fmt_h3 , & align_h3 } ;

Text b27 = { {
 { "IndexOf" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "equals" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "following" }
 ,{ "type" }
 ,{ "list" }
 ,{ "TT" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "PopTypeList" }
} , & fmt_h3 , & align_h3 } ;

Text b29 = { {
 { "PopTypeList" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "." }
 ,{ "Being" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "a" }
 ,{ "non-empty" }
 ,{ "type" }
 ,{ "list" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "two" }
 ,{ "values:" }
 ,{ "Start" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "minus" }
 ,{ "one" }
 ,{ "prefix," }
 ,{ "and" }
 ,{ "Last" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "last" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Page page = { "page_MetaList" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Metaphysics {

Text b0 = { {
 { "Metaphysics" }
 ,{ "of" }
 ,{ "the" }
 ,{ "programming" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "\"Truce" , & fmt_text_i }
 ,{ "is" , & fmt_text_i }
 ,{ "concrete," , & fmt_text_i }
 ,{ "philosophy" , & fmt_text_i }
 ,{ "is" , & fmt_text_i }
 ,{ "fruitless\"" , & fmt_text_i }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "So" }
 ,{ "this" }
 ,{ "page" }
 ,{ "is" }
 ,{ "about" }
 ,{ "fruitlessness." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Programming" }
 ,{ "is" }
 ,{ "a" }
 ,{ "mathematical" }
 ,{ "engineering" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "Majority" }
 ,{ "of" }
 ,{ "people" }
 ,{ "don't" }
 ,{ "understand" }
 ,{ "what" }
 ,{ "the" }
 ,{ "mathematics" }
 ,{ "is" }
 ,{ "all" }
 ,{ "about" }
 ,{ "and" }
 ,{ "what" }
 ,{ "is" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "this" }
 ,{ "science." }
 ,{ "I" }
 ,{ "will" }
 ,{ "try" }
 ,{ "to" }
 ,{ "explain" }
 ,{ "this." }
 ,{ "Let's" }
 ,{ "consider" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "example." }
 ,{ "You" }
 ,{ "known," }
 ,{ "that" }
 ,{ "for" }
 ,{ "any" }
 ,{ "natural" }
 ,{ "numbers" }
 ,{ "a,b,c" }
 ,{ "the" }
 ,{ "following" }
 ,{ "is" }
 ,{ "true:" }
 ,{ "(a+b)+c" }
 ,{ "==" }
 ,{ "a+(b+c)." }
 ,{ "But" }
 ,{ "how" }
 ,{ "do" }
 ,{ "we" }
 ,{ "known" }
 ,{ "this" }
 ,{ "is" }
 ,{ "true?" }
 ,{ "This" }
 ,{ "is," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "an" }
 ,{ "infinite" }
 ,{ "set" }
 ,{ "of" }
 ,{ "propositions," }
 ,{ "one" }
 ,{ "for" }
 ,{ "each" }
 ,{ "triple" }
 ,{ "(a,b,c)!" }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "possible" }
 ,{ "to" }
 ,{ "verify" }
 ,{ "all" }
 ,{ "of" }
 ,{ "these" }
 ,{ "identities" }
 ,{ "by" }
 ,{ "checking" }
 ,{ "them" }
 ,{ "per" }
 ,{ "each" }
 ,{ "triple!" }
 ,{ "In" }
 ,{ "the" }
 ,{ "arithmetic" }
 ,{ "foundations" }
 ,{ "this" }
 ,{ "property" }
 ,{ "is" }
 ,{ "proved" }
 ,{ "using" }
 ,{ "the" }
 ,{ "induction" }
 ,{ "principle." }
 ,{ "Using" }
 ,{ "the" }
 ,{ "logical" }
 ,{ "deduction" }
 ,{ "we" }
 ,{ "are" }
 ,{ "able" }
 ,{ "to" }
 ,{ "prove" }
 ,{ "this" }
 ,{ "infinite" }
 ,{ "set" }
 ,{ "of" }
 ,{ "propositions." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "we" }
 ,{ "are" }
 ,{ "able" }
 ,{ "to" }
 ,{ "comprehend" }
 ,{ "the" }
 ,{ "infinity." }
 ,{ "Even" }
 ,{ "if" }
 ,{ "you" }
 ,{ "are" }
 ,{ "dealing" }
 ,{ "with" }
 ,{ "not" }
 ,{ "infinity," }
 ,{ "but" }
 ,{ "with" }
 ,{ "a" }
 ,{ "finite," }
 ,{ "but" }
 ,{ "a" }
 ,{ "large" }
 ,{ "set," }
 ,{ "the" }
 ,{ "logical" }
 ,{ "deduction" }
 ,{ "is" }
 ,{ "the" }
 ,{ "only" }
 ,{ "way" }
 ,{ "to" }
 ,{ "state" }
 ,{ "some" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "this" }
 ,{ "set." }
 ,{ "Mathematics" }
 ,{ "has" }
 ,{ "the" }
 ,{ "power" }
 ,{ "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "infinity" }
 ,{ "and" }
 ,{ "to" }
 ,{ "bring" }
 ,{ "an" }
 ,{ "ultimate" }
 ,{ "truce" }
 ,{ "in" }
 ,{ "many" }
 ,{ "real" }
 ,{ "cases." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Programming" }
 ,{ "is" }
 ,{ "about" }
 ,{ "building" }
 ,{ "some" }
 ,{ "logical" }
 ,{ "machines." }
 ,{ "It" }
 ,{ "is," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "the" }
 ,{ "engineering" }
 ,{ "of" }
 ,{ "some" }
 ,{ "virtual" }
 ,{ "entities." }
 ,{ "Historically," }
 ,{ "the" }
 ,{ "computing" }
 ,{ "arose" }
 ,{ "from" }
 ,{ "the" }
 ,{ "mathematical" }
 ,{ "logic" }
 ,{ "and" }
 ,{ "the" }
 ,{ "algorithm" }
 ,{ "theory." }
 ,{ "The" }
 ,{ "Turing" }
 ,{ "machine" }
 ,{ "is" }
 ,{ "a" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "prototype" }
 ,{ "for" }
 ,{ "all" }
 ,{ "real" }
 ,{ "computers." }
 ,{ "The" }
 ,{ "developing" }
 ,{ "of" }
 ,{ "a" }
 ,{ "good" }
 ,{ "software" }
 ,{ "is" }
 ,{ "impossible" }
 ,{ "without" }
 ,{ "a" }
 ,{ "good" }
 ,{ "mathematical" }
 ,{ "thinking." }
 ,{ "It" }
 ,{ "is" }
 ,{ "especially" }
 ,{ "important" }
 ,{ "in" }
 ,{ "the" }
 ,{ "modern" }
 ,{ "multi-threaded" }
 ,{ "or" }
 ,{ "event-driven" }
 ,{ "software," }
 ,{ "where" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "feasible" }
 ,{ "to" }
 ,{ "trace" }
 ,{ "all" }
 ,{ "execution" }
 ,{ "scenarios." }
 ,{ "In" }
 ,{ "a" }
 ,{ "single-threaded" }
 ,{ "program" }
 ,{ "you" }
 ,{ "can" }
 ,{ "follow" }
 ,{ "a" }
 ,{ "program" }
 ,{ "execution" }
 ,{ "step-by-step," }
 ,{ "but" }
 ,{ "once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "several" }
 ,{ "threads" }
 ,{ "of" }
 ,{ "execution," }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "possible" }
 ,{ "execution" }
 ,{ "states" }
 ,{ "becomes" }
 ,{ "incomprehensible" }
 ,{ "(combinatorial" }
 ,{ "explosion)." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "logical" }
 ,{ "statements" }
 ,{ "and" }
 ,{ "the" }
 ,{ "logical" }
 ,{ "deduction" }
 ,{ "to" }
 ,{ "understand" }
 ,{ "how" }
 ,{ "such" }
 ,{ "programs" }
 ,{ "are" }
 ,{ "working." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Programming" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "quality," }
 ,{ "not" }
 ,{ "a" }
 ,{ "quantity" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "Yes," }
 ,{ "that" }
 ,{ "is" }
 ,{ "the" }
 ,{ "major" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "programming" }
 ,{ "and" }
 ,{ "manufacture." }
 ,{ "The" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "manufacture" }
 ,{ "is" }
 ,{ "the" }
 ,{ "reproduction" }
 ,{ "of" }
 ,{ "the" }
 ,{ "same" }
 ,{ "thing" }
 ,{ "again" }
 ,{ "and" }
 ,{ "again." }
 ,{ "Reproduction" }
 ,{ "of" }
 ,{ "a" }
 ,{ "program" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "instantly" }
 ,{ "by" }
 ,{ "the" }
 ,{ "command" }
 ,{ "copy" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "the" }
 ,{ "programming" }
 ,{ "is" }
 ,{ "to" }
 ,{ "create" }
 ,{ "something" }
 ,{ "new," }
 ,{ "unique." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "So" }
 ,{ "developing" }
 ,{ "a" }
 ,{ "program" }
 ,{ "we" }
 ,{ "create" }
 ,{ "a" }
 ,{ "new" }
 ,{ "quality" }
 ,{ "to" }
 ,{ "make" }
 ,{ "the" }
 ,{ "word" }
 ,{ "better," }
 ,{ "safer," }
 ,{ "friendly" }
 ,{ "etc." }
 ,{ "Or" }
 ,{ "non-quality" }
 ,{ "to" }
 ,{ "make" }
 ,{ "the" }
 ,{ "work" }
 ,{ "worse," }
 ,{ "risky," }
 ,{ "hostile" }
 ,{ "etc." }
 ,{ "You" }
 ,{ "think" }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "concern" }
 ,{ "you," }
 ,{ "because" }
 ,{ "you" }
 ,{ "get" }
 ,{ "your" }
 ,{ "money" }
 ,{ "and" }
 ,{ "leave?" }
 ,{ "To" }
 ,{ "where," }
 ,{ "to" }
 ,{ "another" }
 ,{ "globe," }
 ,{ "perhaps?" }
 ,{ "To" }
 ,{ "ruin" }
 ,{ "it" }
 ,{ "too?" }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "escape." }
 ,{ "Humanity" }
 ,{ "will" }
 ,{ "learn" }
 ,{ "how" }
 ,{ "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "software" }
 ,{ "of" }
 ,{ "will" }
 ,{ "be" }
 ,{ "crashed" }
 ,{ "by" }
 ,{ "it." }
 ,{ "The" }
 ,{ "power" }
 ,{ "which" }
 ,{ "comes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "command" }
 ,{ "copy" , & fmt_text_b }
 ,{ "." }
 ,{ "When" }
 ,{ "you" }
 ,{ "program" }
 ,{ "a" }
 ,{ "quantity," }
 ,{ "you" }
 ,{ "program" }
 ,{ "a" }
 ,{ "bug" }
 ,{ "quantity." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "What" }
 ,{ "is" }
 ,{ "the" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "a" }
 ,{ "good" }
 ,{ "programmer" }
 ,{ "and" }
 ,{ "a" }
 ,{ "bad" }
 ,{ "one?" }
 ,{ "Good" }
 ,{ "writes" }
 ,{ "a" }
 ,{ "small," }
 ,{ "bugless" }
 ,{ "code," }
 ,{ "bad" }
 ,{ "writes" }
 ,{ "a" }
 ,{ "large," }
 ,{ "fat" }
 ,{ "and" }
 ,{ "bugful." }
 ,{ "Good" }
 ,{ "spends" }
 ,{ "most" }
 ,{ "time" }
 ,{ "to" }
 ,{ "learn," }
 ,{ "understand" }
 ,{ "and" }
 ,{ "design" }
 ,{ "a" }
 ,{ "good," }
 ,{ "structured," }
 ,{ "mathematically" }
 ,{ "correct" }
 ,{ "code" }
 ,{ "and" }
 ,{ "a" }
 ,{ "short" }
 ,{ "time" }
 ,{ "to" }
 ,{ "make" }
 ,{ "it" }
 ,{ "running." }
 ,{ "Bad" }
 ,{ "is" }
 ,{ "not" }
 ,{ "capable" }
 ,{ "to" }
 ,{ "learn" }
 ,{ "much," }
 ,{ "deeply" }
 ,{ "understand" }
 ,{ "a" }
 ,{ "subject" }
 ,{ "and" }
 ,{ "tools," }
 ,{ "he" }
 ,{ "writes" }
 ,{ "whole" }
 ,{ "novels" }
 ,{ "of" }
 ,{ "poor" }
 ,{ "literature" }
 ,{ "code" }
 ,{ "and" }
 ,{ "then" }
 ,{ "spends" }
 ,{ "most" }
 ,{ "of" }
 ,{ "the" }
 ,{ "working" }
 ,{ "time" }
 ,{ "to" }
 ,{ "make" }
 ,{ "it" }
 ,{ "running." }
 ,{ "Somehow." }
 ,{ "Good" }
 ,{ "automates" }
 ,{ "its" }
 ,{ "work." }
 ,{ "It" }
 ,{ "creates" }
 ,{ "software" }
 ,{ "components" }
 ,{ "and" }
 ,{ "tools" }
 ,{ "for" }
 ,{ "repeated" }
 ,{ "tasks." }
 ,{ "Bad" }
 ,{ "is" }
 ,{ "destined" }
 ,{ "to" }
 ,{ "do" }
 ,{ "and" }
 ,{ "hate" }
 ,{ "a" }
 ,{ "manual" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "In" }
 ,{ "the" }
 ,{ "software" }
 ,{ "development" }
 ,{ "quality" }
 ,{ "becomes" }
 ,{ "quantity." }
 ,{ "That" }
 ,{ "is" }
 ,{ "the" }
 ,{ "key" }
 ,{ "point." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "thing" }
 ,{ "as" }
 ,{ "a" }
 ,{ "deadline." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "goodline." }
 ,{ "Deadline" }
 ,{ "is" }
 ,{ "a" }
 ,{ "badline." }
 ,{ "Don't" }
 ,{ "go" }
 ,{ "towards" }
 ,{ "it." }
 ,{ "Well" }
 ,{ "developed" }
 ,{ "code" }
 ,{ "grows" }
 ,{ "faster," }
 ,{ "it" }
 ,{ "incorporates" }
 ,{ "new" }
 ,{ "features" }
 ,{ "smoothly," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "well" }
 ,{ "tested," }
 ,{ "defect" }
 ,{ "fixes" }
 ,{ "are" }
 ,{ "much" }
 ,{ "simpler." }
 ,{ "The" }
 ,{ "proper" }
 ,{ "strategy" }
 ,{ "in" }
 ,{ "a" }
 ,{ "large-scale" }
 ,{ "development" }
 ,{ "is" }
 ,{ "to" }
 ,{ "maintain" }
 ,{ "a" }
 ,{ "high" }
 ,{ "code" }
 ,{ "quality" }
 ,{ "from" }
 ,{ "the" }
 ,{ "start" }
 ,{ "to" }
 ,{ "the" }
 ,{ "finish." }
 ,{ "Prototype" }
 ,{ "and" }
 ,{ "redesign!" }
 ,{ "Test" }
 ,{ "comprehensively!" }
 ,{ "Make" }
 ,{ "a" }
 ,{ "reliable" }
 ,{ "software" }
 ,{ "from" }
 ,{ "a" }
 ,{ "reliable" }
 ,{ "software" }
 ,{ "components!" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Premature" }
 ,{ "generalization" }
 ,{ "is" }
 ,{ "a" }
 ,{ "root" }
 ,{ "of" }
 ,{ "all" }
 ,{ "evil" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "In" }
 ,{ "the" }
 ,{ "soft" }
 ,{ "history" }
 ,{ "there" }
 ,{ "were" }
 ,{ "several" }
 ,{ "examples," }
 ,{ "how" }
 ,{ "a" }
 ,{ "premature" }
 ,{ "generalization" }
 ,{ "led" }
 ,{ "to" }
 ,{ "a" }
 ,{ "bad" }
 ,{ "software." }
 ,{ "The" }
 ,{ "first" }
 ,{ "example" }
 ,{ "is" }
 ,{ "the" }
 ,{ "UNIX" }
 ,{ "paradigm:" }
 ,{ "everything" }
 ,{ "is" }
 ,{ "a" }
 ,{ "file." }
 ,{ "And" }
 ,{ "that" }
 ,{ "is" }
 ,{ "totally" }
 ,{ "wrongful." }
 ,{ "Socket" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "file." }
 ,{ "Keyboard" }
 ,{ "and" }
 ,{ "mouse" }
 ,{ "are" }
 ,{ "not" }
 ,{ "a" }
 ,{ "file." }
 ,{ "UNIX" }
 ,{ "paradigm" }
 ,{ "simplifies" }
 ,{ "the" }
 ,{ "system" }
 ,{ "interface," }
 ,{ "but" }
 ,{ "makes" }
 ,{ "hard" }
 ,{ "or" }
 ,{ "impossible" }
 ,{ "to" }
 ,{ "work" }
 ,{ "correctly" }
 ,{ "with" }
 ,{ "non-files" }
 ,{ "in" }
 ,{ "nature" }
 ,{ "objects." }
 ,{ "Recall" }
 ,{ "socket" }
 ,{ "option" }
 ,{ "functions," }
 ,{ "for" }
 ,{ "example." }
 ,{ "This" }
 ,{ "is" }
 ,{ "an" }
 ,{ "excellent" }
 ,{ "illustration" }
 ,{ "how" }
 ,{ "an" }
 ,{ "inadequate" }
 ,{ "control" }
 ,{ "interface" }
 ,{ "forces" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "handmade" }
 ,{ "serialization/deserialization" }
 ,{ "through" }
 ,{ "opaque" }
 ,{ "control" }
 ,{ "bottleneck." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Another" }
 ,{ "good" }
 ,{ "example" }
 ,{ "is" }
 ,{ "the" }
 ,{ "STL" }
 ,{ "approach" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "containers" }
 ,{ "and" }
 ,{ "algorithms." }
 ,{ "The" }
 ,{ "natural" }
 ,{ "way" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "data" }
 ,{ "in" }
 ,{ "a" }
 ,{ "tree" }
 ,{ "is" }
 ,{ "the" }
 ,{ "usage" }
 ,{ "of" }
 ,{ "recursive" }
 ,{ "algorithms" }
 ,{ "and" }
 ,{ "that" }
 ,{ "does" }
 ,{ "not" }
 ,{ "fit" }
 ,{ "to" }
 ,{ "the" }
 ,{ "concept" }
 ,{ "of" }
 ,{ "iterators." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Ugly" }
 ,{ "airplane" }
 ,{ "does" }
 ,{ "not" }
 ,{ "flight" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "Simply" }
 ,{ "like" }
 ,{ "that." }
 ,{ "Ugly" }
 ,{ "code" }
 ,{ "is" }
 ,{ "a" }
 ,{ "bad" }
 ,{ "code." }
 ,{ "The" }
 ,{ "sense" }
 ,{ "of" }
 ,{ "beauty" }
 ,{ "may" }
 ,{ "seem" }
 ,{ "irrelevant," }
 ,{ "but," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "is" }
 ,{ "important" }
 ,{ "both" }
 ,{ "in" }
 ,{ "science" }
 ,{ "and" }
 ,{ "engineering." }
 ,{ "Good" }
 ,{ "product" }
 ,{ "is" }
 ,{ "not" }
 ,{ "just" }
 ,{ "useful," }
 ,{ "it" }
 ,{ "is" }
 ,{ "also" }
 ,{ "aesthetic." }
 ,{ "So" }
 ,{ "use" }
 ,{ "the" }
 ,{ "sense" }
 ,{ "of" }
 ,{ "beauty" }
 ,{ "as" }
 ,{ "a" }
 ,{ "guide." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Everybody" }
 ,{ "means" }
 ,{ "nobody" }
} , & fmt_h4 , & align_h4 } ;

Text b17 = { {
 { "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "thing" }
 ,{ "as" }
 ,{ "\"good" }
 ,{ "for" }
 ,{ "everybody\"." }
 ,{ "\"Good" }
 ,{ "for" }
 ,{ "everybody\"" }
 ,{ "means" }
 ,{ "\"good" }
 ,{ "for" }
 ,{ "nobody\"." }
 ,{ "Design" }
 ,{ "you" }
 ,{ "software" }
 ,{ "components" }
 ,{ "like" }
 ,{ "a" }
 ,{ "good" }
 ,{ "tailor." }
 ,{ "To" }
 ,{ "make" }
 ,{ "a" }
 ,{ "good" }
 ,{ "suit" }
 ,{ "make" }
 ,{ "it" }
 ,{ "suit." }
 ,{ "It" }
 ,{ "means" }
 ,{ "don't" }
 ,{ "develop" }
 ,{ "a" }
 ,{ "universal" }
 ,{ "components," }
 ,{ "good" }
 ,{ "for" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "everybody." }
 ,{ "Know" }
 ,{ "how" }
 ,{ "do" }
 ,{ "you" }
 ,{ "suppose" }
 ,{ "to" }
 ,{ "use" }
 ,{ "it" }
 ,{ "and" }
 ,{ "make" }
 ,{ "it" }
 ,{ "good" }
 ,{ "for" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "purpose." }
 ,{ "And" }
 ,{ "a" }
 ,{ "thing" }
 ,{ "good" }
 ,{ "for" }
 ,{ "somebody" }
 ,{ "has" }
 ,{ "a" }
 ,{ "chance" }
 ,{ "to" }
 ,{ "be" }
 ,{ "good" }
 ,{ "for" }
 ,{ "manybody" }
 ,{ "(but" }
 ,{ "not" }
 ,{ "for" }
 ,{ "everybody)." }
 ,{ "You" }
 ,{ "will" }
 ,{ "find" }
 ,{ "many" }
 ,{ "such" }
 ,{ "things" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "," }
 ,{ "so" }
 ,{ "don't" }
 ,{ "be" }
 ,{ "surprised." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Efficiency" }
 ,{ "is" }
 ,{ "NOT" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "or" }
 ,{ "CPU" }
 ,{ "clocks," }
 ,{ "it" }
 ,{ "is" }
 ,{ "an" }
 ,{ "absence" }
 ,{ "of" }
 ,{ "excessive" }
 ,{ "and" }
 ,{ "pointless" }
 ,{ "actions" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "Efficiency" }
 ,{ "is" }
 ,{ "the" }
 ,{ "most" }
 ,{ "important" }
 ,{ "guide" }
 ,{ "in" }
 ,{ "the" }
 ,{ "programming." }
 ,{ "Programming" }
 ,{ "itself" }
 ,{ "can" }
 ,{ "be" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "the" }
 ,{ "efficient" }
 ,{ "mathematics." }
 ,{ "It" }
 ,{ "not" }
 ,{ "only" }
 ,{ "leads" }
 ,{ "to" }
 ,{ "fast" }
 ,{ "code," }
 ,{ "but" }
 ,{ "also" }
 ,{ "to" }
 ,{ "well-developed" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "The" }
 ,{ "first" }
 ,{ "step" }
 ,{ "to" }
 ,{ "the" }
 ,{ "code" }
 ,{ "efficiency" }
 ,{ "is" }
 ,{ "to" }
 ,{ "make" }
 ,{ "it" }
 ,{ "well-structured." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "optimize" }
 ,{ "a" }
 ,{ "spaghetti" }
 ,{ "code." }
 ,{ "If" }
 ,{ "the" }
 ,{ "code" }
 ,{ "is" }
 ,{ "well-organized," }
 ,{ "then" }
 ,{ "you" }
 ,{ "can" }
 ,{ "identify" }
 ,{ "parts," }
 ,{ "critical" }
 ,{ "to" }
 ,{ "improve" }
 ,{ "performance," }
 ,{ "and" }
 ,{ "work" }
 ,{ "on" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "The" }
 ,{ "second" }
 ,{ "â€”" }
 ,{ "no" }
 ,{ "fat." }
 ,{ "Use" }
 ,{ "efficient" }
 ,{ "algorithms," }
 ,{ "use" }
 ,{ "appropriate" }
 ,{ "data" }
 ,{ "structures," }
 ,{ "use" }
 ,{ "simple" }
 ,{ "means" }
 ,{ "to" }
 ,{ "solve" }
 ,{ "simple" }
 ,{ "tasks." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Third" }
 ,{ "â€”" }
 ,{ "leave" }
 ,{ "to" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "the" }
 ,{ "most" }
 ,{ "of" }
 ,{ "optimization" }
 ,{ "job." }
 ,{ "Compilers" }
 ,{ "can" }
 ,{ "solve" }
 ,{ "many" }
 ,{ "(but" }
 ,{ "not" }
 ,{ "all)" }
 ,{ "optimization" }
 ,{ "tasks" }
 ,{ "much" }
 ,{ "better," }
 ,{ "than" }
 ,{ "humans." }
 ,{ "Modern" }
 ,{ "compilers" }
 ,{ "are" }
 ,{ "good" }
 ,{ "in" }
 ,{ "the" }
 ,{ "\"local\"" }
 ,{ "optimization." }
 ,{ "So" }
 ,{ "focus" }
 ,{ "on" }
 ,{ "making" }
 ,{ "the" }
 ,{ "code" }
 ,{ "\"optimizable\"" }
 ,{ "and" }
 ,{ "leave" }
 ,{ "the" }
 ,{ "routine" }
 ,{ "optimization" }
 ,{ "work" }
 ,{ "to" }
 ,{ "the" }
 ,{ "compiler." }
 ,{ "You" }
 ,{ "should" }
 ,{ "learn," }
 ,{ "what" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "can" }
 ,{ "do" }
 ,{ "and" }
 ,{ "what" }
 ,{ "cannot" }
 ,{ "and" }
 ,{ "why." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Complexity" }
 ,{ "and" }
 ,{ "metaphors" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "I" }
 ,{ "like" }
 ,{ "the" }
 ,{ "metaphor" }
 ,{ "of" }
 ,{ "the" }
 ,{ "basket" }
 ,{ "with" }
 ,{ "apples." }
 ,{ "Peoples" }
 ,{ "can" }
 ,{ "put" }
 ,{ "an" }
 ,{ "apple" }
 ,{ "to" }
 ,{ "the" }
 ,{ "basket" }
 ,{ "or" }
 ,{ "can" }
 ,{ "get" }
 ,{ "an" }
 ,{ "apple" }
 ,{ "from" }
 ,{ "it." }
 ,{ "If" }
 ,{ "the" }
 ,{ "basket" }
 ,{ "is" }
 ,{ "empty" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "somebody" }
 ,{ "else" }
 ,{ "put" }
 ,{ "an" }
 ,{ "apple." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "metaphor" }
 ,{ "of" }
 ,{ "semaphore." }
 ,{ "Why" }
 ,{ "metaphors" }
 ,{ "are" }
 ,{ "important?" }
 ,{ "Because" }
 ,{ "if" }
 ,{ "you" }
 ,{ "know" }
 ,{ "a" }
 ,{ "metaphor" }
 ,{ "you" }
 ,{ "can" }
 ,{ "easily" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "precise" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "software" }
 ,{ "entity" }
 ,{ "from" }
 ,{ "it." }
 ,{ "You" }
 ,{ "can" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "and" }
 ,{ "its" }
 ,{ "meaning," }
 ,{ "you" }
 ,{ "can" }
 ,{ "understand" }
 ,{ "how" }
 ,{ "to" }
 ,{ "use" }
 ,{ "an" }
 ,{ "object" }
 ,{ "without" }
 ,{ "the" }
 ,{ "reading" }
 ,{ "tons" }
 ,{ "of" }
 ,{ "manuals." }
 ,{ "Metaphor" }
 ,{ "is" }
 ,{ "a" }
 ,{ "seed." }
 ,{ "It" }
 ,{ "can" }
 ,{ "grow" }
 ,{ "to" }
 ,{ "a" }
 ,{ "mature" }
 ,{ "software" }
 ,{ "component." }
 ,{ "Good" }
 ,{ "software" }
 ,{ "is" }
 ,{ "metaphoric." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Metaphor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "most" }
 ,{ "powerful" }
 ,{ "weapon" }
 ,{ "of" }
 ,{ "the" }
 ,{ "human" }
 ,{ "mind" }
 ,{ "to" }
 ,{ "struggle" }
 ,{ "with" }
 ,{ "complexity." }
 ,{ "Using" }
 ,{ "them" }
 ,{ "you" }
 ,{ "turn" }
 ,{ "on" }
 ,{ "the" }
 ,{ "most" }
 ,{ "deep" }
 ,{ "and" }
 ,{ "powerful" }
 ,{ "human" }
 ,{ "mind" }
 ,{ "ability." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "A" }
 ,{ "black" }
 ,{ "cat" }
 ,{ "in" }
 ,{ "a" }
 ,{ "dark" }
 ,{ "room" }
} , & fmt_h4 , & align_h4 } ;

Text b27 = { {
 { "Filthy" }
 ,{ "programmers" }
 ,{ "make" }
 ,{ "a" }
 ,{ "lot" }
 ,{ "of" }
 ,{ "errors." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "problem" }
 ,{ "to" }
 ,{ "find" }
 ,{ "them," }
 ,{ "usually" }
 ,{ "you" }
 ,{ "can" }
 ,{ "read" }
 ,{ "the" }
 ,{ "code" }
 ,{ "and" }
 ,{ "find" }
 ,{ "a" }
 ,{ "lot." }
 ,{ "But" }
 ,{ "what's" }
 ,{ "about" }
 ,{ "a" }
 ,{ "good" }
 ,{ "one?" }
 ,{ "When" }
 ,{ "you" }
 ,{ "write" }
 ,{ "a" }
 ,{ "good" }
 ,{ "code," }
 ,{ "how" }
 ,{ "about" }
 ,{ "errors?" }
 ,{ "How" }
 ,{ "to" }
 ,{ "catch" }
 ,{ "a" }
 ,{ "black" }
 ,{ "cat" }
 ,{ "in" }
 ,{ "a" }
 ,{ "dark" }
 ,{ "room?" }
 ,{ "Despite" }
 ,{ "the" }
 ,{ "common" }
 ,{ "misunderstanding," }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "too" }
 ,{ "much" }
 ,{ "difficult" }
 ,{ "actually." }
 ,{ "The" }
 ,{ "REAL" }
 ,{ "problem" }
 ,{ "is:" }
 ,{ "how" }
 ,{ "to" }
 ,{ "prove" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "cat?" }
 ,{ "It" }
 ,{ "is" }
 ,{ "possible" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "defectless" }
 ,{ "software," }
 ,{ "even" }
 ,{ "a" }
 ,{ "complex" }
 ,{ "one," }
 ,{ "both" }
 ,{ "theoretically" }
 ,{ "and" }
 ,{ "practically." }
 ,{ "But" }
 ,{ "if" }
 ,{ "you" }
 ,{ "have" }
 ,{ "one," }
 ,{ "how" }
 ,{ "to" }
 ,{ "prove" }
 ,{ "it?" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "There" }
 ,{ "is" }
 ,{ "only" }
 ,{ "one" }
 ,{ "reliable" }
 ,{ "way." }
 ,{ "Prove" }
 ,{ "to" }
 ,{ "prove." }
 ,{ "The" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "we" }
 ,{ "prove" }
 ,{ "mathematical" }
 ,{ "theorems." }
 ,{ "In" }
 ,{ "the" }
 ,{ "pure" }
 ,{ "mathematics" }
 ,{ "we" }
 ,{ "are" }
 ,{ "able" }
 ,{ "to" }
 ,{ "build" }
 ,{ "very" }
 ,{ "complicated" }
 ,{ "mathematical" }
 ,{ "constructions" }
 ,{ "and" }
 ,{ "prove" }
 ,{ "their" }
 ,{ "properties" }
 ,{ "by" }
 ,{ "the" }
 ,{ "logical" }
 ,{ "deduction." }
 ,{ "The" }
 ,{ "same" }
 ,{ "way" }
 ,{ "is" }
 ,{ "good" }
 ,{ "for" }
 ,{ "the" }
 ,{ "software" }
 ,{ "development." }
 ,{ "Good" }
 ,{ "programmer" }
 ,{ "does" }
 ,{ "not" }
 ,{ "just" }
 ,{ "write" }
 ,{ "code." }
 ,{ "He" }
 ,{ "formulates" }
 ,{ "and" }
 ,{ "proves" }
 ,{ "different" }
 ,{ "code" }
 ,{ "properties." }
 ,{ "Therefore," }
 ,{ "good" }
 ,{ "programmer" }
 ,{ "must" }
 ,{ "have" }
 ,{ "a" }
 ,{ "well" }
 ,{ "developed" }
 ,{ "mathematical" }
 ,{ "mind." }
 ,{ "Unfortunately," }
 ,{ "modern" }
 ,{ "development" }
 ,{ "tools" }
 ,{ "does" }
 ,{ "not" }
 ,{ "record" }
 ,{ "this" }
 ,{ "part" }
 ,{ "of" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "the" }
 ,{ "pure" }
 ,{ "mathematics" }
 ,{ "and" }
 ,{ "the" }
 ,{ "software" }
 ,{ "development" }
 ,{ "though." }
 ,{ "In" }
 ,{ "the" }
 ,{ "software" }
 ,{ "development" }
 ,{ "to" }
 ,{ "cover" }
 ,{ "all" }
 ,{ "significant" }
 ,{ "code" }
 ,{ "properties" }
 ,{ "you" }
 ,{ "must" }
 ,{ "prove" }
 ,{ "a" }
 ,{ "huge" }
 ,{ "number" }
 ,{ "of" }
 ,{ "simple" }
 ,{ "statements." }
 ,{ "So" }
 ,{ "to" }
 ,{ "make" }
 ,{ "it" }
 ,{ "feasible" }
 ,{ "it" }
 ,{ "is" }
 ,{ "necessary" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "code" }
 ,{ "in" }
 ,{ "such" }
 ,{ "a" }
 ,{ "way," }
 ,{ "that" }
 ,{ "this" }
 ,{ "number" }
 ,{ "will" }
 ,{ "not" }
 ,{ "be" }
 ,{ "insane." }
 ,{ "And" }
 ,{ "here" }
 ,{ "we" }
 ,{ "come" }
 ,{ "to" }
 ,{ "different" }
 ,{ "software" }
 ,{ "development" }
 ,{ "techniques," }
 ,{ "like" }
 ,{ "functional," }
 ,{ "object" }
 ,{ "and" }
 ,{ "abstract" }
 ,{ "decompositions." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Functional" }
 ,{ "decomposition" }
 ,{ "arose" }
 ,{ "from" }
 ,{ "an" }
 ,{ "observation," }
 ,{ "that" }
 ,{ "some" }
 ,{ "action" }
 ,{ "sequences" }
 ,{ "are" }
 ,{ "repeated" }
 ,{ "again" }
 ,{ "and" }
 ,{ "again." }
 ,{ "Object" }
 ,{ "decomposition" }
 ,{ "arose" }
 ,{ "from" }
 ,{ "an" }
 ,{ "observation," }
 ,{ "that" }
 ,{ "some" }
 ,{ "data" }
 ,{ "combinations" }
 ,{ "and" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "manipulations" }
 ,{ "on" }
 ,{ "them" }
 ,{ "are" }
 ,{ "repeated" }
 ,{ "again" }
 ,{ "and" }
 ,{ "again." }
 ,{ "Abstract" }
 ,{ "decomposition" }
 ,{ "arose" }
 ,{ "from" }
 ,{ "an" }
 ,{ "observation," }
 ,{ "that" }
 ,{ "software" }
 ,{ "entities" }
 ,{ "can" }
 ,{ "be" }
 ,{ "\"parametrized\"" }
 ,{ "by" }
 ,{ "another" }
 ,{ "software" }
 ,{ "entities." }
 ,{ "Each" }
 ,{ "time" }
 ,{ "we" }
 ,{ "repeat" }
 ,{ "some" }
 ,{ "build" }
 ,{ "again" }
 ,{ "and" }
 ,{ "again," }
 ,{ "we" }
 ,{ "can" }
 ,{ "repeat" }
 ,{ "its" }
 ,{ "property" }
 ,{ "proofs" }
 ,{ "too." }
 ,{ "So" }
 ,{ "a" }
 ,{ "good" }
 ,{ "software" }
 ,{ "decomposition" }
 ,{ "not" }
 ,{ "only" }
 ,{ "allows" }
 ,{ "us" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "complex" }
 ,{ "software," }
 ,{ "but" }
 ,{ "it" }
 ,{ "allows" }
 ,{ "to" }
 ,{ "make" }
 ,{ "it" }
 ,{ "correct" }
 ,{ "too." }
} , & fmt_text , & align_text } ;

Page page = { "page_Metaphysics" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ModEngine {

Text b0 = { {
 { "ModEngine" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/ModEngine.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/ModEngine.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ModEngine" , & fmt_text_b }
 ,{ "and" }
 ,{ "related" }
 ,{ "classes" }
 ,{ "support" }
 ,{ "modular" }
 ,{ "arithmetic." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "IntegerBitScanner" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "IntegerBitScanner" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "scanning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Integer" }
 ,{ "from" }
 ,{ "MSB" }
 ,{ "to" }
 ,{ "LSB." }
 ,{ "It" }
 ,{ "works" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "BitScanner" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Integer" , & fmt_text_a }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "an" }
 ,{ "Integer" }
 ,{ "to" }
 ,{ "be" }
 ,{ "scanned" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "value" }
 ,{ "must" }
 ,{ "be" }
 ,{ ">=" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "." }
 ,{ "Other" }
 ,{ "methods" }
 ,{ "works" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "corespondent" }
 ,{ "BitScanner" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "UnitsPowInteger" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "This" }
 ,{ "class" }
 ,{ "builds" }
 ,{ "an" }
 ,{ "Integer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "unit" }
 ,{ "representation" }
 ,{ "{0,0,...,0,1}" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "with" }
 ,{ "the" }
 ,{ "value" }
 ,{ "B" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "B" , & fmt_text_b }
 ,{ "is" }
 ,{ "2" , & fmt_text_b }
 ,{ "UnitBits" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ModEngine" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "ModEngine" , & fmt_text_b }
 ,{ "performs" }
 ,{ "modular" }
 ,{ "operations" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "module." }
 ,{ "Operation" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "results" }
 ,{ "lay" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,M)" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "M" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "module." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "only" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "module," }
 ,{ "which" }
 ,{ "must" }
 ,{ "be" }
 ,{ "positive." }
 ,{ "The" }
 ,{ "module" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getModule()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "prepare()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "division" }
 ,{ "by" }
 ,{ "the" }
 ,{ "module." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "be" }
 ,{ ">=" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "mod()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "division" }
 ,{ "by" }
 ,{ "the" }
 ,{ "module." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "be" }
 ,{ ">=" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "<M" , & fmt_text_b }
 ,{ "2" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "more" }
 ,{ "efficient," }
 ,{ "than" }
 ,{ "prepare()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "other" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "mul()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "modular" }
 ,{ "multiplication" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "sq()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "modular" }
 ,{ "square" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "(" }
 ,{ "sq(a)" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "mul(a,a)" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "mac()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "MAC," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "expression" }
 ,{ "s+a*b" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "module." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "squac()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "\"square" }
 ,{ "and" }
 ,{ "accumulate\"," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "expression" }
 ,{ "s+a*a" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "module." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "pow()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "modular" }
 ,{ "power." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "the" }
 ,{ "module" }
 ,{ "is" }
 ,{ ">1" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_ModEngine" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Move {

Text b0 = { {
 { "The" }
 ,{ "Move" }
 ,{ "idiom" }
 ,{ "(related" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Swap" , & fmt_h2_a }
 ,{ "idiom" , & fmt_h2_a }
 ,{ ")" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Move.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Move.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/ToMoveCtor.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ToMoveCtor.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "First" }
 ,{ "of" }
 ,{ "all," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "Move" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "C++" }
 ,{ "move." }
 ,{ "Don't" }
 ,{ "mess" }
 ,{ "it" }
 ,{ "up." }
 ,{ "Move" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "solve" }
 ,{ "the" }
 ,{ "following" }
 ,{ "task:" }
 ,{ "assume" }
 ,{ "you" }
 ,{ "have" }
 ,{ "an" }
 ,{ "object" }
 ,{ "and" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "move" }
 ,{ "it" }
 ,{ "to" }
 ,{ "another" }
 ,{ "memory" }
 ,{ "location." }
 ,{ "Once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "an" }
 ,{ "appropriate" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "create" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "there" }
 ,{ "and" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "original" }
 ,{ "object" }
 ,{ "as" }
 ,{ "the" }
 ,{ "one" }
 ,{ "operation." }
 ,{ "Unlike" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "operation," }
 ,{ "Move" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "as" }
 ,{ "an" }
 ,{ "efficient" }
 ,{ "operation" }
 ,{ "for" }
 ,{ "a" }
 ,{ "wide" }
 ,{ "range" }
 ,{ "of" }
 ,{ "types." }
 ,{ "This" }
 ,{ "is" }
 ,{ "because" }
 ,{ "we" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "create" }
 ,{ "an" }
 ,{ "additional" }
 ,{ "state," }
 ,{ "we" }
 ,{ "just" }
 ,{ "have" }
 ,{ "to" }
 ,{ "replace" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "one" }
 ,{ "into" }
 ,{ "another" }
 ,{ "memory" }
 ,{ "location." }
 ,{ "So" }
 ,{ "before" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "we" }
 ,{ "have" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "raw" }
 ,{ "memory," }
 ,{ "after" }
 ,{ "we" }
 ,{ "have" }
 ,{ "the" }
 ,{ "raw" }
 ,{ "memory" }
 ,{ "and" }
 ,{ "the" }
 ,{ "moved" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "technical" }
 ,{ "difficulty" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Move" , & fmt_text_b }
 ,{ "implementation:" }
 ,{ "C++" }
 ,{ "requires" }
 ,{ "a" }
 ,{ "some" }
 ,{ "constructor" }
 ,{ "call" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "creation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "call" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "life-time" }
 ,{ "termination" }
 ,{ "(with" }
 ,{ "some" }
 ,{ "minor" }
 ,{ "exceptions)." }
 ,{ "To" }
 ,{ "make" }
 ,{ "the" }
 ,{ "moving" }
 ,{ "derivable" }
 ,{ "we" }
 ,{ "have" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "as" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "point" }
 ,{ "for" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "How" }
 ,{ "to" }
 ,{ "use" }
} , & fmt_h2 , & align_h2 } ;

Text b6 = { {
 { "Normally" }
 ,{ "you" }
 ,{ "should" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Move()" , & fmt_text_b }
 ,{ "for" }
 ,{ "Move" , & fmt_text_b }
 ,{ "operation." }
 ,{ "If" }
 ,{ "the" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "method" }
 ,{ "objMove()" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
 ,{ "Otherwise," }
 ,{ "if" }
 ,{ "the" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "has" }
 ,{ "a" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "," }
 ,{ "CtorMove()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "Otherwise," }
 ,{ "if" }
 ,{ "the" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable," }
 ,{ "MoveMove()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "Otherwise," }
 ,{ "if" }
 ,{ "the" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "type" }
 ,{ "with" }
 ,{ "the" }
 ,{ "method" }
 ,{ "objSwap()" , & fmt_text_b }
 ,{ "and" }
 ,{ "has" }
 ,{ "efficient" }
 ,{ "default" }
 ,{ "constructor," }
 ,{ "the" }
 ,{ "SwapMove()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "Finally," }
 ,{ "CopyMove()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "for" }
 ,{ "copyable" }
 ,{ "types." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "such" }
 ,{ "types" }
 ,{ "are" }
 ,{ "efficiently" }
 ,{ "copyable," }
 ,{ "otherwise" }
 ,{ "a" }
 ,{ "warning" }
 ,{ "is" }
 ,{ "emitted." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "most" }
 ,{ "convenient" }
 ,{ "way" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "class" }
 ,{ "movable" }
 ,{ "is" }
 ,{ "to" }
 ,{ "define" }
 ,{ "the" }
 ,{ "method" }
 ,{ "objSwap()" , & fmt_text_b }
 ,{ "and" }
 ,{ "make" }
 ,{ "it" }
 ,{ "both" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
 ,{ "But" }
 ,{ "for" }
 ,{ "the" }
 ,{ "sake" }
 ,{ "of" }
 ,{ "efficiency," }
 ,{ "you" }
 ,{ "may" }
 ,{ "define" }
 ,{ "the" }
 ,{ "method" }
 ,{ "objMove()" , & fmt_text_b }
 ,{ "or" }
 ,{ "the" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "." }
 ,{ "Consider" }
 ,{ "the" }
 ,{ "following" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "reason" }
 ,{ "to" }
 ,{ "define" }
 ,{ "the" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "support" }
 ,{ "the" }
 ,{ "further" }
 ,{ "derivation" }
 ,{ "of" }
 ,{ "it." }
 ,{ "The" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "following" }
 ,{ "context:" }
 ,{ "an" , & fmt_text_Hint }
 ,{ "object" , & fmt_text_Hint }
 ,{ "is" , & fmt_text_Hint }
 ,{ "being" , & fmt_text_Hint }
 ,{ "moving," , & fmt_text_Hint }
 ,{ "the" , & fmt_text_Hint }
 ,{ "original" , & fmt_text_Hint }
 ,{ "object" , & fmt_text_Hint }
 ,{ "will" , & fmt_text_Hint }
 ,{ "be" , & fmt_text_Hint }
 ,{ "destroyed" , & fmt_text_Hint }
 ,{ "by" , & fmt_text_Hint }
 ,{ "the" , & fmt_text_Hint }
 ,{ "call" , & fmt_text_Hint }
 ,{ "of" , & fmt_text_Hint }
 ,{ "destructor" , & fmt_text_Hint }
 ,{ "right" , & fmt_text_Hint }
 ,{ "after" , & fmt_text_Hint }
 ,{ "Move" , & fmt_text_Hint }
 ,{ "constructor" , & fmt_text_Hint }
 ,{ "is" , & fmt_text_Hint }
 ,{ "finished" , & fmt_text_Hint }
 ,{ "." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "template" }
 ,{ "for" }
 ,{ "the" }
 ,{ "moving" }
 ,{ "of" }
 ,{ "Resource" , & fmt_text_b }
 ,{ "Host" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "class" }
 ,{ "ToMoveCtor<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "It" }
 ,{ "is" }
 ,{ "solely" }
 ,{ "introduced" }
 ,{ "to" }
 ,{ "designate" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "s." }
 ,{ "The" }
 ,{ "method" }
 ,{ "cast()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"touch\"" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "subobject" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "'s" }
 ,{ "body." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "method" }
 ,{ "objMove()" , & fmt_text_b }
 ,{ "must" }
 ,{ "follow" }
 ,{ "this" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "It" }
 ,{ "is" }
 ,{ "rarely" }
 ,{ "needed." }
 ,{ "It" }
 ,{ "must" }
 ,{ "replace" }
 ,{ "the" }
 ,{ "object" }
 ,{ "into" }
 ,{ "another" }
 ,{ "memory" }
 ,{ "location," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "new" }
 ,{ "object." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed" }
 ,{ "after" }
 ,{ "this" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Move" }
 ,{ "constructor" }
} , & fmt_h2 , & align_h2 } ;

Text b14 = { {
 { "The" }
 ,{ "Move" , & fmt_text_b }
 ,{ "constructor" , & fmt_text_b }
 ,{ "of" }
 ,{ "some" }
 ,{ "class" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "class" }
 ,{ "member" }
 ,{ "and" }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "CtorMove()" , & fmt_text_b }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "This" }
 ,{ "constructor" }
 ,{ "must" }
 ,{ "move" }
 ,{ "the" }
 ,{ "object," }
 ,{ "and" }
 ,{ "it" }
 ,{ "may" , & fmt_text_b }
 ,{ "assume," }
 ,{ "that" }
 ,{ "the" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed" }
 ,{ "right" }
 ,{ "after" }
 ,{ "the" }
 ,{ "move" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "is" }
 ,{ "different" }
 ,{ "than" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "move" }
 ,{ "constructor" }
 ,{ "(more" }
 ,{ "relaxed)." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Moving" }
 ,{ "with" }
 ,{ "C++" }
 ,{ "move" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way:" }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Swap" }
 ,{ "move" }
} , & fmt_h2 , & align_h2 } ;

Text b19 = { {
 { "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "SwapMove()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "It" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "creating" }
 ,{ "the" }
 ,{ "default" }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "new" }
 ,{ "memory" }
 ,{ "location," }
 ,{ "then" }
 ,{ "swapping" }
 ,{ "the" }
 ,{ "states" }
 ,{ "with" }
 ,{ "the" }
 ,{ "original" }
 ,{ "object" }
 ,{ "and," }
 ,{ "finally," }
 ,{ "by" }
 ,{ "the" }
 ,{ "destroying" }
 ,{ "the" }
 ,{ "original" }
 ,{ "object." }
 ,{ "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "model" }
 ,{ "way" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "moving." }
 ,{ "Other" }
 ,{ "ways" }
 ,{ "must" }
 ,{ "achieve" }
 ,{ "the" }
 ,{ "same" }
 ,{ "result," }
 ,{ "by" }
 ,{ "more" }
 ,{ "efficiently." }
} , & fmt_text , & align_text } ;

Page page = { "page_Move" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MSec {

Text b0 = { {
 { "MSec" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/MSec.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/MSec.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MSec" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "time" }
 ,{ "in" }
 ,{ "the" }
 ,{ "millisecond" }
 ,{ "units." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "timeouts" }
 ,{ "or" }
 ,{ "short" }
 ,{ "time" }
 ,{ "intervals." }
 ,{ "To" }
 ,{ "create" }
 ,{ "a" }
 ,{ "MSec" , & fmt_text_b }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "user-defined" }
 ,{ "literals:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "sum" }
 ,{ "MSec" , & fmt_text_b }
 ,{ "s" }
 ,{ "or" }
 ,{ "multiply" }
 ,{ "by" }
 ,{ "unsigned:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "are" }
 ,{ "few" }
 ,{ "helper" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "MSec" , & fmt_text_b }
 ,{ "methods" }
 ,{ "and" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "constexpr" , & fmt_text_b }
 ,{ "(except" }
 ,{ "cap" , & fmt_text_b }
 ,{ ")," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "it" }
 ,{ "to" }
 ,{ "create" }
 ,{ "constants." }
} , & fmt_text , & align_text } ;

Page page = { "page_MSec" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MultiEvent {

Text b0 = { {
 { "MultiEvent" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/MultiEvent.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/MultiEvent.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MultiEvent" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "MultiSem" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "combines" }
 ,{ "events," }
 ,{ "not" }
 ,{ "semaphores." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "trigger()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "event" }
 ,{ "flag" }
 ,{ "with" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "1-base" }
 ,{ "index" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[1,Len]" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "already" }
 ,{ "set," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "try_wait()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "consume" }
 ,{ "an" }
 ,{ "event" }
 ,{ "flag." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "1-based" }
 ,{ "index," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "wait()" , & fmt_text_b }
 ,{ "consumes" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "event" }
 ,{ "flags." }
 ,{ "It" }
 ,{ "may" }
 ,{ "block" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "indefinitely," }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "becomes" }
 ,{ "possible." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "wait(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "wait(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "the" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "zero" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "HCore" }
 ,{ "MultiEvent" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "HCore" , & fmt_text_b }
 ,{ "MultiEvent" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "common" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "XCore" }
 ,{ "MultiEvent" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "XCore" , & fmt_text_b }
 ,{ "MultiEvent" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "has" }
 ,{ "trigger()" , & fmt_text_b }
 ,{ "method" }
 ,{ "variants" }
 ,{ "for" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts." }
} , & fmt_text , & align_text } ;

Page page = { "page_MultiEvent" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MultiSem {

Text b0 = { {
 { "MultiSem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/MultiSem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/MultiSem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MultiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "small" }
 ,{ "set" }
 ,{ "of" }
 ,{ "semaphores." }
 ,{ "Each" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given." }
 ,{ "But" }
 ,{ "the" }
 ,{ "take" }
 ,{ "operation" }
 ,{ "takes" }
 ,{ "from" }
 ,{ "any" }
 ,{ "of" }
 ,{ "them," }
 ,{ "if" }
 ,{ "some" }
 ,{ "of" }
 ,{ "them" }
 ,{ "is" }
 ,{ "available." }
 ,{ "The" }
 ,{ "take" }
 ,{ "operation" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "round-robin" }
 ,{ "priority" }
 ,{ "algorithm" }
 ,{ "to" }
 ,{ "equalize" }
 ,{ "semaphores." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Consider" }
 ,{ "the" }
 ,{ "example" }
 ,{ "with" }
 ,{ "apples." }
 ,{ "In" }
 ,{ "the" }
 ,{ "multi-semaphore" }
 ,{ "case," }
 ,{ "there" }
 ,{ "are" }
 ,{ "several" }
 ,{ "baskets" }
 ,{ "for" }
 ,{ "different" }
 ,{ "sorts" }
 ,{ "of" }
 ,{ "apples." }
 ,{ "Somebody" }
 ,{ "can" }
 ,{ "put" }
 ,{ "an" }
 ,{ "apple" }
 ,{ "to" }
 ,{ "the" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "basket." }
 ,{ "And" }
 ,{ "somebody" }
 ,{ "can" }
 ,{ "take" }
 ,{ "an" }
 ,{ "apple" }
 ,{ "from" }
 ,{ "a" }
 ,{ "non-empty" }
 ,{ "basket." }
 ,{ "To" }
 ,{ "do" }
 ,{ "this," }
 ,{ "he" }
 ,{ "is" }
 ,{ "looking" }
 ,{ "for" }
 ,{ "a" }
 ,{ "non-empty" }
 ,{ "basket" }
 ,{ "in" }
 ,{ "the" }
 ,{ "cyclic" }
 ,{ "order," }
 ,{ "starting" }
 ,{ "from" }
 ,{ "some" }
 ,{ "basket." }
 ,{ "Next" }
 ,{ "time" }
 ,{ "the" }
 ,{ "starting" }
 ,{ "basket" }
 ,{ "is" }
 ,{ "changed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "following." }
 ,{ "If" }
 ,{ "all" }
 ,{ "baskets" }
 ,{ "are" }
 ,{ "empty," }
 ,{ "he" }
 ,{ "waits." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "give()" , & fmt_text_b }
 ,{ "increments" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "semaphore" }
 ,{ "counter." }
 ,{ "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "1-based" }
 ,{ "index," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[1,Len]" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "try_take()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "decrement" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counters." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "1-based" }
 ,{ "index," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "take()" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counters." }
 ,{ "It" }
 ,{ "may" }
 ,{ "block" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "indefinitely," }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "becomes" }
 ,{ "possible." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "take(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "take(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "take()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "zero" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "HCore" }
 ,{ "MultiSem" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "HCore" , & fmt_text_b }
 ,{ "MultiSem" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "common" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "XCore" }
 ,{ "MultiSem" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "XCore" , & fmt_text_b }
 ,{ "MultiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "has" }
 ,{ "give()" , & fmt_text_b }
 ,{ "method" }
 ,{ "variants" }
 ,{ "for" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts." }
} , & fmt_text , & align_text } ;

Page page = { "page_MultiSem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_MultiSignal {

Text b0 = { {
 { "MultiSignals" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/MultiSignal.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MultiSignal.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "MultiSignal" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "signals." }
 ,{ "They" }
 ,{ "are" }
 ,{ "combined" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Optional" , & fmt_text_a }
 ,{ "." }
 ,{ "This" }
 ,{ "construction" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "if" }
 ,{ "you" }
 ,{ "have" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "number" }
 ,{ "of" }
 ,{ "signals," }
 ,{ "but" }
 ,{ "only" }
 ,{ "a" }
 ,{ "small" }
 ,{ "subset" }
 ,{ "of" }
 ,{ "them" }
 ,{ "are" }
 ,{ "practically" }
 ,{ "used." }
 ,{ "Only" }
 ,{ "a" }
 ,{ "signal" }
 ,{ "being" }
 ,{ "subscribed" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "as" }
 ,{ "an" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "MultiSignal" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "Particular" }
 ,{ "signals" }
 ,{ "are" }
 ,{ "identified" }
 ,{ "by" }
 ,{ "slot" }
 ,{ "numbers." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "max_slot" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "slot" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "assert()" , & fmt_text_b }
 ,{ "asserts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "signal." }
 ,{ "You" }
 ,{ "must" }
 ,{ "always" }
 ,{ "use" }
 ,{ "the" }
 ,{ "same" }
 ,{ "combination" }
 ,{ "of" }
 ,{ "the" }
 ,{ "slot" }
 ,{ "and" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "type" }
 ,{ "list" }
 ,{ "in" }
 ,{ "all" }
 ,{ "methods." }
 ,{ "If" }
 ,{ "the" }
 ,{ "signal" }
 ,{ "has" }
 ,{ "not" }
 ,{ "been" }
 ,{ "constructed" }
 ,{ "the" }
 ,{ "method" }
 ,{ "has" }
 ,{ "no" }
 ,{ "effect." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "take()" , & fmt_text_b }
 ,{ "takes" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "signal." }
 ,{ "If" }
 ,{ "the" }
 ,{ "signal" }
 ,{ "has" }
 ,{ "not" }
 ,{ "been" }
 ,{ "constructed," }
 ,{ "it" }
 ,{ "is" }
 ,{ "constructed." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "It" }
 ,{ "is" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "hide" }
 ,{ "the" }
 ,{ "class" }
 ,{ "MultiSignal" , & fmt_text_b }
 ,{ "behind" }
 ,{ "some" }
 ,{ "facade" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "DeferMultiSignal" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "DeferMultiSignal" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "MultiSignal" , & fmt_text_b }
 ,{ "by" }
 ,{ "two" }
 ,{ "methods." }
 ,{ "They" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "post" }
 ,{ "a" }
 ,{ "signal" }
 ,{ "assertion" }
 ,{ "into" }
 ,{ "a" }
 ,{ "DeferCall" , & fmt_text_a }
 ,{ "processing" }
 ,{ "loop." }
 ,{ "Remember," }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "and" }
 ,{ "used" }
 ,{ "later." }
} , & fmt_text , & align_text } ;

Page page = { "page_MultiSignal" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Mutex {

Text b0 = { {
 { "Mutex" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/Mutex.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/Mutex.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Mutex" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "mutex," }
 ,{ "i.e." }
 ,{ "a" }
 ,{ "class," }
 ,{ "used" }
 ,{ "to" }
 ,{ "serialize" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "code" }
 ,{ "blocks," }
 ,{ "executed" }
 ,{ "by" }
 ,{ "multiple" }
 ,{ "threads." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "lock()" , & fmt_text_b }
 ,{ "establishes" }
 ,{ "an" }
 ,{ "exclusive" }
 ,{ "ownership" }
 ,{ "on" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "from" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread." }
 ,{ "A" }
 ,{ "thread" }
 ,{ "can" }
 ,{ "lock" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "multiple" }
 ,{ "times," }
 ,{ "any" }
 ,{ "extra" }
 ,{ "locks" }
 ,{ "just" }
 ,{ "increases" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "lock" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "If" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "is" }
 ,{ "locked" }
 ,{ "and" }
 ,{ "a" }
 ,{ "different" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "trying" }
 ,{ "to" }
 ,{ "lock" }
 ,{ "it," }
 ,{ "then" }
 ,{ "this" }
 ,{ "thread" }
 ,{ "will" }
 ,{ "be" }
 ,{ "blocked," }
 ,{ "until" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "is" }
 ,{ "released." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "unlock()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"memory" }
 ,{ "fence\"" }
 ,{ "operation," }
 ,{ "i.e." }
 ,{ "all" }
 ,{ "variable" }
 ,{ "changes," }
 ,{ "made" }
 ,{ "before" }
 ,{ "unlock," }
 ,{ "will" }
 ,{ "be" }
 ,{ "visible" }
 ,{ "to" }
 ,{ "other" }
 ,{ "threads," }
 ,{ "locking" }
 ,{ "the" }
 ,{ "mutex." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "unlock()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "release" }
 ,{ "a" }
 ,{ "lock." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "was" }
 ,{ "locked" }
 ,{ "several" }
 ,{ "times," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "unlocked" }
 ,{ "the" }
 ,{ "same" }
 ,{ "number" }
 ,{ "of" }
 ,{ "times" }
 ,{ "to" }
 ,{ "be" }
 ,{ "completely" }
 ,{ "released." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "It" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "highly" , & fmt_text_Alert }
 ,{ "recommended" , & fmt_text_Alert }
 ,{ "to" , & fmt_text_Alert }
 ,{ "lock" , & fmt_text_Alert }
 ,{ "a" , & fmt_text_Alert }
 ,{ "mutex" , & fmt_text_Alert }
 ,{ "using" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "inner" , & fmt_text_Alert }
 ,{ "class" , & fmt_text_Alert }
 ,{ "Lock" , & fmt_text_Alert }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "A" }
 ,{ "manual" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "lock()/unlock()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "excluded." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Mutex" , & fmt_text_b }
 ,{ "operations" }
 ,{ "are" }
 ,{ "efficient," }
 ,{ "if" }
 ,{ "they" }
 ,{ "don't" }
 ,{ "cause" }
 ,{ "a" }
 ,{ "task" }
 ,{ "block/release." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "most" }
 ,{ "common" }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "usage" }
 ,{ "is" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "class" }
 ,{ "thread-safe:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Building" }
 ,{ "a" }
 ,{ "large-scale" }
 ,{ "application," }
 ,{ "comprised" }
 ,{ "by" }
 ,{ "multiple" }
 ,{ "components," }
 ,{ "it" }
 ,{ "is" }
 ,{ "easy" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "sadden" }
 ,{ "deadlock" }
 ,{ "using" }
 ,{ "mutexing" }
 ,{ "in" }
 ,{ "a" }
 ,{ "non-systematic" }
 ,{ "way." }
 ,{ "So" }
 ,{ "to" }
 ,{ "avoid" }
 ,{ "it" }
 ,{ "I" }
 ,{ "recommend" }
 ,{ "to" }
 ,{ "follow" }
 ,{ "these" }
 ,{ "simple" }
 ,{ "rules:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Lock-free" }
 ,{ "context" }
 ,{ "is" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "code" }
 ,{ "which" }
 ,{ "does" }
 ,{ "not" }
 ,{ "hold" }
 ,{ "any" }
 ,{ "mutex." }
 ,{ "Most" }
 ,{ "of" }
 ,{ "application" }
 ,{ "code" }
 ,{ "must" }
 ,{ "run" }
 ,{ "in" }
 ,{ "a" }
 ,{ "lock-free" }
 ,{ "context." }
 ,{ "If" }
 ,{ "you" }
 ,{ "locked" }
 ,{ "a" }
 ,{ "mutex," }
 ,{ "don't" }
 ,{ "use" }
 ,{ "any" }
 ,{ "other" }
 ,{ "synchronization" }
 ,{ "methods," }
 ,{ "both" }
 ,{ "blocking" }
 ,{ "and" }
 ,{ "releasing." }
 ,{ "Make" }
 ,{ "locked" }
 ,{ "sections" }
 ,{ "of" }
 ,{ "code" }
 ,{ "\"quick\"." }
 ,{ "Avoid" }
 ,{ "nested" }
 ,{ "mutex" }
 ,{ "locks." }
 ,{ "Sometimes" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "nest" }
 ,{ "mutexes," }
 ,{ "for" }
 ,{ "example," }
 ,{ "you" }
 ,{ "may" }
 ,{ "call" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "function," }
 ,{ "which" }
 ,{ "holds" }
 ,{ "a" }
 ,{ "heap" }
 ,{ "mutex." }
 ,{ "But" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "risk" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "deadlock." }
 ,{ "\"Leaf\"" }
 ,{ "mutexes," }
 ,{ "i.e." }
 ,{ "mutexes" }
 ,{ "whose" }
 ,{ "locked" }
 ,{ "code" }
 ,{ "regions" }
 ,{ "do" }
 ,{ "not" }
 ,{ "make" }
 ,{ "another" }
 ,{ "locks," }
 ,{ "are" }
 ,{ "deadlock" }
 ,{ "safe." }
 ,{ "So" }
 ,{ "keep" }
 ,{ "mutexes" }
 ,{ "\"leaf\"," }
 ,{ "restrict" }
 ,{ "particular" }
 ,{ "mutex" }
 ,{ "usage" }
 ,{ "by" }
 ,{ "defined" }
 ,{ "code" }
 ,{ "regions," }
 ,{ "for" }
 ,{ "example," }
 ,{ "methods" }
 ,{ "of" }
 ,{ "a" }
 ,{ "single" }
 ,{ "class." }
 ,{ "If" }
 ,{ "you" }
 ,{ "still" }
 ,{ "have" }
 ,{ "to" }
 ,{ "nest" }
 ,{ "mutex" }
 ,{ "usage," }
 ,{ "decide" }
 ,{ "an" }
 ,{ "order" }
 ,{ "of" }
 ,{ "locks:" }
 ,{ "one" }
 ,{ "mutex" }
 ,{ "always" }
 ,{ "must" }
 ,{ "be" }
 ,{ "locked" }
 ,{ "before" }
 ,{ "another." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "HCore" }
 ,{ "Mutex" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "HCore" , & fmt_text_b }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "argument:" }
 ,{ "spin_count" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "some" }
 ,{ "target-dependent" }
 ,{ "value." }
 ,{ "Spinning" }
 ,{ "is" }
 ,{ "used" }
 ,{ "on" }
 ,{ "multi-core" }
 ,{ "systems." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "is" }
 ,{ "locked," }
 ,{ "then" }
 ,{ "it" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "not" }
 ,{ "to" }
 ,{ "block" }
 ,{ "the" }
 ,{ "thread" }
 ,{ "immediately," }
 ,{ "but" }
 ,{ "to" }
 ,{ "\"spin\"" }
 ,{ "some" }
 ,{ "times," }
 ,{ "waiting" }
 ,{ "for" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "release." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getSemCount()" , & fmt_text_b }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "a" }
 ,{ "performance" }
 ,{ "investigations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "times," }
 ,{ "when" }
 ,{ "the" }
 ,{ "mutex" }
 ,{ "called" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "system" }
 ,{ "semaphore." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "XCore" }
 ,{ "mutex" }
} , & fmt_h4 , & align_h4 } ;

Text b17 = { {
 { "XCore" , & fmt_text_b }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "has" }
 ,{ "two" }
 ,{ "important" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "First," }
 ,{ "it" }
 ,{ "has" }
 ,{ "a" }
 ,{ "mutex" }
 ,{ "deadlock" }
 ,{ "detection." }
 ,{ "If" }
 ,{ "such" }
 ,{ "situation" }
 ,{ "has" }
 ,{ "happened," }
 ,{ "then" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "diagnostic" }
 ,{ "message" }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Second," }
 ,{ "the" }
 ,{ "priority" }
 ,{ "inheritance" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "boost" }
 ,{ "task" }
 ,{ "priorities." }
 ,{ "Normally," }
 ,{ "each" }
 ,{ "task" }
 ,{ "runs" }
 ,{ "on" }
 ,{ "the" }
 ,{ "given" }
 ,{ "priority." }
 ,{ "But" }
 ,{ "in" }
 ,{ "some" }
 ,{ "situations" }
 ,{ "the" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "is" }
 ,{ "temporary" }
 ,{ "boosted." }
 ,{ "Consider" }
 ,{ "the" }
 ,{ "following" }
 ,{ "case." }
 ,{ "Task" }
 ,{ "A" }
 ,{ "has" }
 ,{ "locked" }
 ,{ "a" }
 ,{ "mutex." }
 ,{ "Task" }
 ,{ "B" }
 ,{ "with" }
 ,{ "higher" }
 ,{ "priority" }
 ,{ "is" }
 ,{ "trying" }
 ,{ "to" }
 ,{ "lock" }
 ,{ "the" }
 ,{ "same" }
 ,{ "mutex." }
 ,{ "But" }
 ,{ "because" }
 ,{ "it" }
 ,{ "is" }
 ,{ "locked," }
 ,{ "task" }
 ,{ "B" }
 ,{ "becomes" }
 ,{ "blocked," }
 ,{ "until" }
 ,{ "task" }
 ,{ "A" }
 ,{ "release" }
 ,{ "the" }
 ,{ "mutex." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "priority" }
 ,{ "of" }
 ,{ "task" }
 ,{ "A" }
 ,{ "is" }
 ,{ "boosted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "priority" }
 ,{ "of" }
 ,{ "task" }
 ,{ "B." }
} , & fmt_text , & align_text } ;

Page page = { "page_Mutex" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NanoIPDevice {

Text b0 = { {
 { "NanoIPDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/NanoIPDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/NanoIPDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NanoIPDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "classes" }
 ,{ "implementing" }
 ,{ "a" }
 ,{ "\"reduced" }
 ,{ "IP\"" }
 ,{ "protocol" }
 ,{ "support." }
 ,{ "This" }
 ,{ "implementation" }
 ,{ "does" }
 ,{ "not" }
 ,{ "support" }
 ,{ "IP" }
 ,{ "options," }
 ,{ "IP" }
 ,{ "fragmentation" }
 ,{ "and" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "routing" }
 ,{ "facility." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "is" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "devices," }
 ,{ "connected" }
 ,{ "by" }
 ,{ "a" }
 ,{ "local" }
 ,{ "Ethernet" }
 ,{ "network," }
 ,{ "to" }
 ,{ "support" }
 ,{ "distributed" }
 ,{ "system" }
 ,{ "implementation." }
 ,{ "Another" }
 ,{ "use" }
 ,{ "is" }
 ,{ "an" }
 ,{ "interaction" }
 ,{ "between" }
 ,{ "a" }
 ,{ "device" }
 ,{ "and" }
 ,{ "a" }
 ,{ "host" }
 ,{ "computer" }
 ,{ "to" }
 ,{ "support" }
 ,{ "boot," }
 ,{ "configuring" }
 ,{ "or" }
 ,{ "data" }
 ,{ "exchange." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "NanoIPDevice" , & fmt_text_b }
 ,{ "implements" }
 ,{ "IP," }
 ,{ "ICMP" }
 ,{ "ping," }
 ,{ "ARP" }
 ,{ "and" }
 ,{ "UDP" }
 ,{ "protocols" }
 ,{ "to" }
 ,{ "some" }
 ,{ "extent." }
 ,{ "PTP" , & fmt_text_a }
 ,{ "protocol" , & fmt_text_a }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "atop" }
 ,{ "UDP" }
 ,{ "packet" }
 ,{ "devices." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "NanoIPDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "The" }
 ,{ "class" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "class" }
 ,{ "of" }
 ,{ "the" }
 ,{ "set." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "ObjBased" , & fmt_text_a }
 ,{ "class" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "working" }
 ,{ "been" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "some" }
 ,{ "EthDevice" , & fmt_text_a }
 ,{ "device" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "eth_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "device" }
 ,{ "to" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "to." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "are:" }
 ,{ "address" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "and" }
 ,{ "net_mask" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "network" }
 ,{ "mask." }
 ,{ "Network" }
 ,{ "mask" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "filter" }
 ,{ "out" }
 ,{ "incoming" }
 ,{ "packets." }
 ,{ "An" }
 ,{ "incoming" }
 ,{ "IP" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "passed" }
 ,{ "only" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "destined" }
 ,{ "to" }
 ,{ "the" }
 ,{ "local" }
 ,{ "address" }
 ,{ "and" }
 ,{ "comes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "local" }
 ,{ "network." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "dropped." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "NanoIPDevice" , & fmt_text_b }
 ,{ "has" }
 ,{ "various" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getEthDevice()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "EthDevice" , & fmt_text_b }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "to." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "getAddress()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "local" }
 ,{ "IP" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "getNetMask()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "local" }
 ,{ "network" }
 ,{ "mask." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "sameNet()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "test" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "the" }
 ,{ "local" }
 ,{ "network." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "getTxFormat()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "for" }
 ,{ "IP" }
 ,{ "Tx" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "getUDPTxFormat()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "for" }
 ,{ "UDP" }
 ,{ "Tx" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "getRxFormat()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "of" }
 ,{ "incoming" }
 ,{ "IP" }
 ,{ "packets." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "getUDPRxFormat()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "of" }
 ,{ "incoming" }
 ,{ "UDP" }
 ,{ "packets." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "NanoIPDevice" , & fmt_text_b }
 ,{ "counts" }
 ,{ "statistics" }
 ,{ "and" }
 ,{ "generates" }
 ,{ "network" , & fmt_text_a }
 ,{ "events" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "statistic" }
 ,{ "counters" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "StatInfo" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "info" }
 ,{ "block" }
 ,{ "counts" }
 ,{ "network" , & fmt_text_a }
 ,{ "events" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "following" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "send" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "the" }
 ,{ "network." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "send_prepare()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "put" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "prepare" }
 ,{ "list." }
 ,{ "The" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"prepare\"" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "before" }
 ,{ "sending" }
 ,{ "out." }
 ,{ "If" }
 ,{ "the" }
 ,{ "method" }
 ,{ "is" }
 ,{ "successful" }
 ,{ "it" }
 ,{ "consumes" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "leaves" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "alone" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "called" }
 ,{ "must" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "in" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "send_prepare_or_complete()" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "send_prepare()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "failure" }
 ,{ "this" }
 ,{ "method" }
 ,{ "just" }
 ,{ "completes" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "send()" , & fmt_text_b }
 ,{ "sends" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "has" }
 ,{ "an" }
 ,{ "IPTxExt" , & fmt_text_b }
 ,{ "extension" }
 ,{ "and" }
 ,{ "must" }
 ,{ "have" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "data" }
 ,{ "payload" }
 ,{ "fitting" }
 ,{ "getTxFormat()" , & fmt_text_b }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "send_udp()" , & fmt_text_b }
 ,{ "sends" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "has" }
 ,{ "an" }
 ,{ "UDPTxExt" , & fmt_text_b }
 ,{ "extension" }
 ,{ "and" }
 ,{ "must" }
 ,{ "have" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "data" }
 ,{ "payload" }
 ,{ "fitting" }
 ,{ "getUDPTxFormat()" , & fmt_text_b }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "send_icmp_echo()" , & fmt_text_b }
 ,{ "sends" }
 ,{ "an" }
 ,{ "ICMP" }
 ,{ "echo" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "IP" }
 ,{ "address." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "specify" }
 ,{ "an" }
 ,{ "ICMP" }
 ,{ "header" }
 ,{ "and" }
 ,{ "ICMP" }
 ,{ "data" }
 ,{ "payload." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "types" }
 ,{ "of" }
 ,{ "endpoints:" }
 ,{ "ICMPEchoEndpoint" , & fmt_text_b }
 ,{ "," }
 ,{ "IPTickEndpoint" , & fmt_text_b }
 ,{ "and" }
 ,{ "UDPEndpoint" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "endpoints" }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "process" }
 ,{ "the" }
 ,{ "incoming" }
 ,{ "traffic." }
 ,{ "Multiple" }
 ,{ "endpoints" }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "the" }
 ,{ "same" }
 ,{ "times" }
 ,{ "(with" }
 ,{ "natural" }
 ,{ "limitations)." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "IPTxExt" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "IPTxExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "send" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "packet." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "and" }
 ,{ "the" }
 ,{ "IP" }
 ,{ "protocol" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "UDPTxExt" }
} , & fmt_h4 , & align_h4 } ;

Text b27 = { {
 { "UDPTxExt" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "send" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "packet." }
 ,{ "This" }
 ,{ "structure" }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "IP" }
 ,{ "address," }
 ,{ "the" }
 ,{ "source" }
 ,{ "and" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "port" }
 ,{ "numbers" }
 ,{ "and" }
 ,{ "the" }
 ,{ "checksum" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "the" }
 ,{ "checksum" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "sent" }
 ,{ "with" }
 ,{ "checksum," }
 ,{ "otherwise" }
 ,{ "without" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "ICMPEchoEndpoint" }
} , & fmt_h4 , & align_h4 } ;

Text b29 = { {
 { "ICMPEchoEndpoint" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "ping" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "IP" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "ICMPEchoEndpoint" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "ip_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "," }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "dst" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "IP" }
 ,{ "address," }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "reply_function" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "replay" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "\"unknown" }
 ,{ "task" }
 ,{ "context\"" }
 ,{ "to" }
 ,{ "process" }
 ,{ "an" }
 ,{ "ICMP" }
 ,{ "ping" }
 ,{ "reply." }
 ,{ "This" }
 ,{ "function" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "num" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "ICMP" }
 ,{ "ping" }
 ,{ "reply" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "send()" , & fmt_text_b }
 ,{ "prepares" }
 ,{ "ans" }
 ,{ "sends" }
 ,{ "an" }
 ,{ "ICMP" }
 ,{ "ping" }
 ,{ "request" }
 ,{ "to" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "IP" }
 ,{ "address." }
 ,{ "The" }
 ,{ "request" }
 ,{ "number" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "uint16" , & fmt_text_b }
 ,{ "number," }
 ,{ "incremented" }
 ,{ "with" }
 ,{ "each" }
 ,{ "request" }
 ,{ "(the" }
 ,{ "first" }
 ,{ "value" }
 ,{ "is" }
 ,{ "1" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "IPTickEndpoint" }
} , & fmt_h4 , & align_h4 } ;

Text b37 = { {
 { "IPTickEndpoint" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"tick\"" }
 ,{ "endpoint." }
 ,{ "It" }
 ,{ "receives" }
 ,{ "the" }
 ,{ "network" }
 ,{ "tick." }
 ,{ "This" }
 ,{ "event" }
 ,{ "happens" }
 ,{ "10" }
 ,{ "times" }
 ,{ "per" }
 ,{ "second" }
 ,{ "and" }
 ,{ "is" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "protocol" }
 ,{ "timeout" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "IPTickEndpoint" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "ip_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "," }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "tick_function" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "tick" }
 ,{ "processing" }
 ,{ "function" }
 ,{ "without" }
 ,{ "arguments." }
 ,{ "It" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "\"unknown" }
 ,{ "task" }
 ,{ "context\"." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "UDPEndpoint" }
} , & fmt_h4 , & align_h4 } ;

Text b42 = { {
 { "UDPEndpoint" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "to" }
 ,{ "process" }
 ,{ "incoming" }
 ,{ "UDP" }
 ,{ "traffic" }
 ,{ "on" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "port." }
 ,{ "Multiple" }
 ,{ "objects" }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached," }
 ,{ "but" }
 ,{ "only" }
 ,{ "one" }
 ,{ "on" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "UDPEndpoint" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "ip_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "," }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "udport" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" }
 ,{ "port," }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "do_checksum" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "checksum" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "checksum" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "enabled" }
 ,{ "on" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "rx_function" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "process" }
 ,{ "incoming" }
 ,{ "UDP" }
 ,{ "packets" }
 ,{ "in" }
 ,{ "the" }
 ,{ "\"unknown" }
 ,{ "task" }
 ,{ "context\"." }
 ,{ "The" }
 ,{ "function" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "packet" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "with" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "data" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "payload" }
 ,{ "data" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "udpoint" , & fmt_text_b }
 ,{ "designates" }
 ,{ "the" }
 ,{ "source" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "getMaxInboundLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "inbound" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "getUDPTxFormat()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "Tx" }
 ,{ "packet" }
 ,{ "format." }
 ,{ "Use" }
 ,{ "this" }
 ,{ "format" }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "be" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "communication" }
 ,{ "peer." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "send()" , & fmt_text_b }
 ,{ "sends" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "UDP" }
 ,{ "endpoint." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "carries" }
 ,{ "UDP" }
 ,{ "data" }
 ,{ "payload" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "prepared" }
 ,{ "according" }
 ,{ "the" }
 ,{ "getUDPTxFormat()" , & fmt_text_b }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "NanoUDPEndpointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b55 = { {
 { "NanoUDPEndpointDevice" , & fmt_text_b }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_a }
 ,{ "interface" }
 ,{ "over" }
 ,{ "a" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "NanoUDPEndpointDevice" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "ip_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "," }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "udport" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port," }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "do_checksum" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "checksum" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "checksum" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "enabled" }
 ,{ "on" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "dst" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "communication" }
 ,{ "peer" }
 ,{ "UDP" , & fmt_text_a }
 ,{ "address" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "assigned" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "getDst()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "assigned" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "peer" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "implement" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "NanoUDPMultipointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b65 = { {
 { "NanoUDPMultipointDevice" , & fmt_text_b }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_a }
 ,{ "interface" }
 ,{ "over" }
 ,{ "a" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "NanoUDPMultipointDevice" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "ip_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "NanoIPDevice" , & fmt_text_b }
 ,{ "," }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "udport" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port," }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "do_checksum" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "checksum" }
 ,{ "flag." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "checksum" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "enabled" }
 ,{ "on" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "assigned" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "implement" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Page page = { "page_NanoIPDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NanoIPDeviceEvents {

Text b0 = { {
 { "NanoIPDevice" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "NanoIPDevice" , & fmt_text_b }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "NetEvent" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "ip_event" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "enum," }
 ,{ "describing" }
 ,{ "the" }
 ,{ "event." }
} , & fmt_text , & align_text } ;

Page page = { "page_NanoIPDeviceEvents" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NanoPackets {

Text b0 = { {
 { "NanoPackets" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/NanoPacket.h" , & fmt_text_Files_b }
 ,{ "CCore/src/NanoPacket.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NanoPacket" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "packet" }
 ,{ "technology." }
 ,{ "It" }
 ,{ "has" }
 ,{ "three" }
 ,{ "components:" }
 ,{ "NanoPacket" , & fmt_text_b }
 ,{ "," }
 ,{ "NanoPacketList" , & fmt_text_b }
 ,{ "and" }
 ,{ "NanoPacketPool" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "NanoPacket" , & fmt_text_b }
 ,{ "consists" }
 ,{ "of" }
 ,{ "a" }
 ,{ "header," }
 ,{ "followed" }
 ,{ "by" }
 ,{ "a" }
 ,{ "body." }
 ,{ "The" }
 ,{ "body" }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "some" }
 ,{ "POD" }
 ,{ "values." }
 ,{ "The" }
 ,{ "initial" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "body" }
 ,{ "carries" }
 ,{ "data." }
} , & fmt_text , & align_text } ;

Bitmap b4 = { "NanoPacket.zipmap" } ;

Text b5 = { {
 { "NanoPacket" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "The" }
 ,{ "NanoPacket" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "header." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "copyable," }
 ,{ "so" }
 ,{ "you" }
 ,{ "must" }
 ,{ "use" }
 ,{ "it" }
 ,{ "with" }
 ,{ "the" }
 ,{ "same" }
 ,{ "caution" }
 ,{ "as" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "pointer." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "AllocLen()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "required" }
 ,{ "memory" }
 ,{ "size" }
 ,{ "to" }
 ,{ "store" }
 ,{ "a" }
 ,{ "NanoPacket" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "capacity." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "overflow" }
 ,{ "check" }
 ,{ "in" }
 ,{ "this" }
 ,{ "function," }
 ,{ "so" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "\"huge\"." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "Nothing-constructor" }
 ,{ "create" }
 ,{ "a" }
 ,{ "null" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "third" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "non-null" }
 ,{ "packet." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "as" }
 ,{ "arguments" }
 ,{ "the" }
 ,{ "place" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "packet" }
 ,{ "will" }
 ,{ "be" }
 ,{ "constructed," }
 ,{ "the" }
 ,{ "capacity" }
 ,{ "max_data_len" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "free_function" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "place" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "size" }
 ,{ "must" }
 ,{ "be" }
 ,{ "at" }
 ,{ "least" }
 ,{ "AllocLen(max_data_len)" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "free_function" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "free" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "a" }
 ,{ "null" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "All" }
 ,{ "remaining" }
 ,{ "methods" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "a" }
 ,{ "null" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "free()" , & fmt_text_b }
 ,{ "frees" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "and" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "getData()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "data" }
 ,{ "area." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "getDataLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "data" }
 ,{ "length." }
 ,{ "Initial" }
 ,{ "data" }
 ,{ "length" }
 ,{ "is" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getMaxDataLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "capacity" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "getData()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "data" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "getMaxData()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "setDataLen()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "data" }
 ,{ "length." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "getMaxDataLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "new" }
 ,{ "data" }
 ,{ "range" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "NanoPacketList" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "NanoPacket" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "put" }
 ,{ "into" }
 ,{ "a" }
 ,{ "NanoPacketList" , & fmt_text_b }
 ,{ "." }
 ,{ "A" }
 ,{ "particular" }
 ,{ "packet" }
 ,{ "can" }
 ,{ "be" }
 ,{ "inserted" }
 ,{ "into" }
 ,{ "only" }
 ,{ "one" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Destructor" }
 ,{ "calls" }
 ,{ "abort," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "NanoPacketList" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "put()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list" }
 ,{ "tail." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "put_first()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list" }
 ,{ "head." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "get()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "first" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "If" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "null" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "freeAll()" , & fmt_text_b }
 ,{ "frees" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "List" }
 ,{ "becomes" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "cleanAll()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "list" }
 ,{ "empty," }
 ,{ "but" }
 ,{ "does" }
 ,{ "not" }
 ,{ "free" }
 ,{ "packets." }
 ,{ "Use" }
 ,{ "this" }
 ,{ "method" }
 ,{ "with" }
 ,{ "caution." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "NanoPacketList" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "NanoPacketPool" }
} , & fmt_h4 , & align_h4 } ;

Text b32 = { {
 { "NanoPacketPool" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "pool" }
 ,{ "of" }
 ,{ "NanoPacket" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "NanoPacketPool" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "pool" }
 ,{ "in" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "memory" }
 ,{ "region," }
 ,{ "max_data_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "capacity" }
 ,{ "of" }
 ,{ "each" }
 ,{ "packet," }
 ,{ "count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "packets." }
 ,{ "Memory" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "of" }
 ,{ "size" }
 ,{ "at" }
 ,{ "least" }
 ,{ "NanoPacket<POD>::AllocLen(max_data_len)*count" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "pool" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "memory," }
 ,{ "but" }
 ,{ "is" }
 ,{ "not" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "control" }
 ,{ "of" }
 ,{ "it." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "a" }
 ,{ "static" }
 ,{ "memory" }
 ,{ "region," }
 ,{ "or" }
 ,{ "allocate" }
 ,{ "it" }
 ,{ "dynamically." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case," }
 ,{ "you" }
 ,{ "must" }
 ,{ "do" }
 ,{ "it" }
 ,{ "prior" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "construction" }
 ,{ "and" }
 ,{ "release" }
 ,{ "it" }
 ,{ "after" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "destruction." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Destructor" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "pool." }
 ,{ "All" }
 ,{ "packets" }
 ,{ "must" }
 ,{ "be" }
 ,{ "freed," }
 ,{ "otherwise" }
 ,{ "abort" }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "try_get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "or" }
 ,{ "the" }
 ,{ "null" }
 ,{ "packet." }
 ,{ "When" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "freed," }
 ,{ "the" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "post_free()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "You" }
 ,{ "can" }
 ,{ "overload" }
 ,{ "this" }
 ,{ "method" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "a" }
 ,{ "top" }
 ,{ "level" }
 ,{ "logic" }
 ,{ "of" }
 ,{ "packet" }
 ,{ "control." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "NanoPacketPool" , & fmt_text_b }
 ,{ "uses" }
 ,{ "FastMutex" , & fmt_text_b }
 ,{ "to" }
 ,{ "protect" }
 ,{ "operations." }
 ,{ "So" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "safely" }
 ,{ "by" }
 ,{ "multiple" }
 ,{ "threads" }
 ,{ "and" }
 ,{ "even" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "on" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets." }
 ,{ "post_free()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "after" }
 ,{ "the" }
 ,{ "lock" }
 ,{ "is" }
 ,{ "released." }
 ,{ "On" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "any" }
 ,{ "execution" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Page page = { "page_NanoPackets" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_img , outer_img , back_img }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NegBool {

Text b0 = { {
 { "NegBool" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/NegBool.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/NegBool.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NegBool" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "proxy" }
 ,{ "class," }
 ,{ "designed" }
 ,{ "to" }
 ,{ "return" }
 ,{ "a" }
 ,{ "logically" }
 ,{ "negative" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Assume" }
 ,{ "you" }
 ,{ "have" }
 ,{ "a" }
 ,{ "function" }
 ,{ "with" }
 ,{ "a" }
 ,{ "logically" }
 ,{ "negative" }
 ,{ "return" }
 ,{ "value:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "When" }
 ,{ "you" }
 ,{ "check" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "function" }
 ,{ "you" }
 ,{ "will" }
 ,{ "have" }
 ,{ "a" }
 ,{ "code" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "NegBool" , & fmt_text_b }
 ,{ "to" }
 ,{ "warp" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Then" }
 ,{ "you" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "code," }
 ,{ "logically" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "above:" }
} , & fmt_text , & align_text } ;

Page page = { "page_NegBool" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NetBase {

Text b0 = { {
 { "NetBase" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/NetBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/NetBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "header" }
 ,{ "net/NetBase.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "lot" }
 ,{ "of" }
 ,{ "definitions," }
 ,{ "related" }
 ,{ "with" }
 ,{ "Ethernet" }
 ,{ "and" }
 ,{ "IP" }
 ,{ "protocols." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Types" }
 ,{ "and" }
 ,{ "constants" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "UDPort" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "port" }
 ,{ "type," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "16-bit" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "IPLen" , & fmt_text_b }
 ,{ "represents" }
 ,{ "IP" }
 ,{ "payload" }
 ,{ "length," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "16-bit" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "constants" }
 ,{ "represent" }
 ,{ "different" }
 ,{ "protocol" }
 ,{ "lengths." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "struct" }
 ,{ "EthType" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "EthType" , & fmt_text_b }
 ,{ "represents" }
 ,{ "an" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "value" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "second" }
 ,{ "implicit" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "\"known\"" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "enumeration." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "an" }
 ,{ "uint16" , & fmt_text_b }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "verbose" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "struct" }
 ,{ "IProto" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "IProto" , & fmt_text_b }
 ,{ "represents" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "protocol" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "value" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "second" }
 ,{ "implicit" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "\"known\"" }
 ,{ "number" }
 ,{ "from" }
 ,{ "the" }
 ,{ "enumeration." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "an" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "verbose" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "struct" }
 ,{ "ARPType" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "ARPType" , & fmt_text_b }
 ,{ "represents" }
 ,{ "an" }
 ,{ "ARP" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "value" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "The" }
 ,{ "second" }
 ,{ "implicit" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "\"known\"" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "enumeration." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "an" }
 ,{ "uint16" , & fmt_text_b }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "verbose" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "struct" }
 ,{ "ICMPEchoType" }
} , & fmt_h4 , & align_h4 } ;

Text b26 = { {
 { "ICMPEchoType" , & fmt_text_b }
 ,{ "represents" }
 ,{ "an" }
 ,{ "ICMP" }
 ,{ "Echo" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "value" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "The" }
 ,{ "second" }
 ,{ "implicit" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "\"known\"" }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "enumeration." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "an" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "verbose" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "struct" }
 ,{ "MACAddress" }
} , & fmt_h4 , & align_h4 } ;

Text b32 = { {
 { "MACAddress" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "MAC" }
 ,{ "address" }
 ,{ "(48" }
 ,{ "bit)." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "address" }
 ,{ "from" }
 ,{ "six" }
 ,{ "byte" }
 ,{ "components." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Broadcast()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "broadcast" }
 ,{ "MAC" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "an" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "address." }
 ,{ "You" }
 ,{ "may" }
 ,{ "convert" }
 ,{ "it" }
 ,{ "back" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "MAC" }
 ,{ "address" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "struct" }
 ,{ "IPAddress" }
} , & fmt_h4 , & align_h4 } ;

Text b39 = { {
 { "IPAddress" , & fmt_text_b }
 ,{ "represents" }
 ,{ "an" }
 ,{ "IPv4" }
 ,{ "address" }
 ,{ "(32" }
 ,{ "bit)." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "address" }
 ,{ "from" }
 ,{ "four" }
 ,{ "byte" }
 ,{ "components." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "an" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "address." }
 ,{ "You" }
 ,{ "may" }
 ,{ "convert" }
 ,{ "it" }
 ,{ "back" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "operator" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "to" }
 ,{ "compare" }
 ,{ "IP" }
 ,{ "addresses." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "getNet()" , & fmt_text_b }
 ,{ "masks" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "to" }
 ,{ "extract" }
 ,{ "the" }
 ,{ "net" }
 ,{ "address" }
 ,{ "part." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "sameNet()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "compare" }
 ,{ "net" }
 ,{ "address" }
 ,{ "parts." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable" }
 ,{ "and" }
 ,{ "scannable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "dot" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "The" }
 ,{ "function" }
 ,{ "ParseIPAddress()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "parse" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "from" }
 ,{ "a" }
 ,{ "character" , & fmt_text_a }
 ,{ "stream" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "expected" }
 ,{ "string" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "192.168.1.1" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "struct" }
 ,{ "EthHeader" }
} , & fmt_h4 , & align_h4 } ;

Text b49 = { {
 { "EthHeader" , & fmt_text_b }
 ,{ "represents" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "header." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "all" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "header" }
 ,{ "with" }
 ,{ "given" }
 ,{ "source" }
 ,{ "and" }
 ,{ "destination" }
 ,{ "MAC" }
 ,{ "addresses" }
 ,{ "and" }
 ,{ "the" }
 ,{ "Ethernet" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable." }
 ,{ "It" }
 ,{ "accepts" }
 ,{ "printing" }
 ,{ "options:" }
 ,{ "\"i\"" }
 ,{ "or" }
 ,{ "\"I\"" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "format," }
 ,{ "\"o\"" }
 ,{ "or" }
 ,{ "\"O\"" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "outbound" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "struct" }
 ,{ "CheckSum" }
} , & fmt_h4 , & align_h4 } ;

Text b54 = { {
 { "CheckSum" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "IP" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "accumulator." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "null" }
 ,{ "state." }
 ,{ "To" }
 ,{ "calculate" }
 ,{ "a" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "fed" }
 ,{ "with" }
 ,{ "data" }
 ,{ "elements." }
 ,{ "Data" }
 ,{ "elements" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "couple" }
 ,{ "of" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "an" }
 ,{ "uint16" , & fmt_text_b }
 ,{ "or" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "value." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "add()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "of" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "methods." }
 ,{ "To" }
 ,{ "accumulate" }
 ,{ "a" }
 ,{ "tail" }
 ,{ "use" }
 ,{ "the" }
 ,{ "add()" , & fmt_text_b }
 ,{ "method." }
 ,{ "The" }
 ,{ "tail" }
 ,{ "range" }
 ,{ "may" }
 ,{ "have" }
 ,{ "odd" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "complete()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "accumulate" }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "test()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum." }
 ,{ "For" }
 ,{ "this" }
 ,{ "method" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "field" }
 ,{ "must" }
 ,{ "be" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "accumulation" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "struct" }
 ,{ "IPHeader" }
} , & fmt_h4 , & align_h4 } ;

Text b59 = { {
 { "IPHeader" , & fmt_text_b }
 ,{ "represents" }
 ,{ "base" }
 ,{ "IPv4" }
 ,{ "header" }
 ,{ "(20" }
 ,{ "bytes)." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "design" }
 ,{ "to" }
 ,{ "support" }
 ,{ "a" }
 ,{ "simplified" }
 ,{ "IP" }
 ,{ "implementation," }
 ,{ "so" }
 ,{ "some" }
 ,{ "fields" }
 ,{ "are" }
 ,{ "expected" }
 ,{ "to" }
 ,{ "have" }
 ,{ "some" }
 ,{ "default" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "default" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "its" }
 ,{ "default" }
 ,{ "values" }
 ,{ "and" }
 ,{ "other" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "default" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "its" }
 ,{ "default" }
 ,{ "values," }
 ,{ "but" }
 ,{ "other" }
 ,{ "fields" }
 ,{ "sets" }
 ,{ "to" }
 ,{ "its" }
 ,{ "proper" }
 ,{ "values," }
 ,{ "i.e." }
 ,{ "this" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "IP" }
 ,{ "header" }
 ,{ "with" }
 ,{ "given" }
 ,{ "fields" }
 ,{ "src" , & fmt_text_b }
 ,{ "," }
 ,{ "dst" , & fmt_text_b }
 ,{ "," }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "proto" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "setDefault()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "default" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "its" }
 ,{ "default" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "GetId()" , & fmt_text_b }
 ,{ "generates" }
 ,{ "a" }
 ,{ "\"unique\"" }
 ,{ "packet" }
 ,{ "header" }
 ,{ "id." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "setId()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "header" }
 ,{ "id." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "setCheckSum()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "of" }
 ,{ "the" }
 ,{ "header." }
 ,{ "The" }
 ,{ "header" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "length" }
 ,{ "20" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "testCheckSum()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "of" }
 ,{ "the" }
 ,{ "header." }
 ,{ "The" }
 ,{ "header" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "length" }
 ,{ "20" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "isFragment()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "a" }
 ,{ "fragment." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable." }
 ,{ "The" }
 ,{ "two" }
 ,{ "printing" }
 ,{ "options" }
 ,{ "are" }
 ,{ "supported:" }
 ,{ "\"i\",\"I\"" }
 ,{ "or" }
 ,{ "\"o\",\"O\"" }
 ,{ "controls" }
 ,{ "inbound" }
 ,{ "or" }
 ,{ "outbound" }
 ,{ "formatting" }
 ,{ "of" }
 ,{ "the" }
 ,{ "text." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "specify" }
 ,{ "\"x\",\"X\"" }
 ,{ "options" }
 ,{ "to" }
 ,{ "print" }
 ,{ "extra" }
 ,{ "information." }
 ,{ "In" }
 ,{ "the" }
 ,{ "short" }
 ,{ "form" }
 ,{ "only" }
 ,{ "four" }
 ,{ "fields" }
 ,{ "are" }
 ,{ "printed:" }
 ,{ "src" , & fmt_text_b }
 ,{ "," }
 ,{ "dst" , & fmt_text_b }
 ,{ "," }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "proto" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "struct" }
 ,{ "ARPacket" }
} , & fmt_h4 , & align_h4 } ;

Text b70 = { {
 { "ARPacket" , & fmt_text_b }
 ,{ "represents" }
 ,{ "ARP" }
 ,{ "packet." }
 ,{ "We" }
 ,{ "implement" }
 ,{ "only" }
 ,{ "IP/MAC" }
 ,{ "ARP." }
 ,{ "It" }
 ,{ "means" }
 ,{ "that" }
 ,{ "some" }
 ,{ "ARP" }
 ,{ "packet" }
 ,{ "fields" }
 ,{ "have" }
 ,{ "its" }
 ,{ "defined" }
 ,{ "value" }
 ,{ "for" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "Both" }
 ,{ "constructors" }
 ,{ "set" }
 ,{ "\"default" }
 ,{ "fields\"" }
 ,{ "to" }
 ,{ "default" }
 ,{ "values." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "all" }
 ,{ "other" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "setDefault()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "\"default" }
 ,{ "fields\"" }
 ,{ "to" }
 ,{ "default" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "testDefault()" , & fmt_text_b }
 ,{ "checks," }
 ,{ "if" }
 ,{ "\"default" }
 ,{ "fields\"" }
 ,{ "have" }
 ,{ "default" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "struct" }
 ,{ "ICMPEcho" }
} , & fmt_h4 , & align_h4 } ;

Text b76 = { {
 { "ICMPEcho" , & fmt_text_b }
 ,{ "represents" }
 ,{ "ICMP" }
 ,{ "Echo" }
 ,{ "packet" }
 ,{ "header." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "all" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "code" , & fmt_text_b }
 ,{ "and" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "setCheckSum()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum," }
 ,{ "data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "ICMP" }
 ,{ "data" }
 ,{ "payload." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "testCheckSum()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum," }
 ,{ "data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "ICMP" }
 ,{ "data" }
 ,{ "payload." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printable." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "struct" }
 ,{ "UDPHeader" }
} , & fmt_h4 , & align_h4 } ;

Text b83 = { {
 { "UDPHeader" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "UDP" }
 ,{ "packet" }
 ,{ "header." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "all" }
 ,{ "fields" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b85 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "header" }
 ,{ "with" }
 ,{ "given" }
 ,{ "ports" }
 ,{ "and" }
 ,{ "the" }
 ,{ "IP" }
 ,{ "payload" }
 ,{ "length" }
 ,{ "(which" }
 ,{ "includes" }
 ,{ "UDP" }
 ,{ "header)." }
 ,{ "It" }
 ,{ "sets" }
 ,{ "check" }
 ,{ "sum" }
 ,{ "to" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "setCheckSum()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum." }
 ,{ "The" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "IP" }
 ,{ "payload" }
 ,{ "length," }
 ,{ "data" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "payload." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "testCheckSum()" , & fmt_text_b }
 ,{ "test" }
 ,{ "the" }
 ,{ "check" }
 ,{ "sum." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "The" }
 ,{ "class" }
 ,{ "may" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "save/load" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Page page = { "page_NetBase" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_text , outer_text , back_text }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NetFork {

Text b0 = { {
 { "NetFork" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/NetFork.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/NetFork.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NetFork" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "device." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "process" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "traffic" }
 ,{ "using" }
 ,{ "several" }
 ,{ "tasks." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "there" }
 ,{ "are" }
 ,{ "two" }
 ,{ "such" }
 ,{ "classes:" }
 ,{ "EndpointNetFork" , & fmt_text_b }
 ,{ "and" }
 ,{ "MultipointNetFork" , & fmt_text_b }
 ,{ "." }
 ,{ "First" }
 ,{ "is" }
 ,{ "working" }
 ,{ "with" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_a }
 ,{ "and" }
 ,{ "the" }
 ,{ "second" }
 ,{ "with" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_a }
 ,{ "." }
 ,{ "Each" }
 ,{ "of" }
 ,{ "them" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "same" }
 ,{ "packet" }
 ,{ "endpoint" }
 ,{ "interface." }
 ,{ "So" }
 ,{ "NetFork" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "transparent" }
 ,{ "middle" }
 ,{ "device," }
 ,{ "it" }
 ,{ "enables" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "using" }
 ,{ "multiple" }
 ,{ "tasks." }
 ,{ "Outbound" }
 ,{ "packets" }
 ,{ "go" }
 ,{ "directly" }
 ,{ "to" }
 ,{ "the" }
 ,{ "endpoint" }
 ,{ "device." }
 ,{ "But" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "traffic" }
 ,{ "splits" }
 ,{ "between" }
 ,{ "several" }
 ,{ "tasks" }
 ,{ "to" }
 ,{ "be" }
 ,{ "processed." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "EndpointNetFork" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ep_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "task_count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "working" }
 ,{ "tasks" }
 ,{ "to" }
 ,{ "spawn." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "queue_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "queue" }
 ,{ "length." }
 ,{ "A" }
 ,{ "typical" }
 ,{ "value" }
 ,{ "should" }
 ,{ "be" }
 ,{ "100" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "rest" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "spawn" }
 ,{ "tasks." }
 ,{ "For" }
 ,{ "the" }
 ,{ "possible" }
 ,{ "values" }
 ,{ "see" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_a }
 ,{ "object" , & fmt_text_a }
 ,{ "constructor" , & fmt_text_a }
 ,{ "arguments" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "MultipointNetFork" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "mp_dev_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "some" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "task_count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "working" }
 ,{ "tasks" }
 ,{ "to" }
 ,{ "spawn." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "queue_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "queue" }
 ,{ "length." }
 ,{ "A" }
 ,{ "typical" }
 ,{ "value" }
 ,{ "should" }
 ,{ "be" }
 ,{ "100" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "rest" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "spawn" }
 ,{ "tasks." }
 ,{ "For" }
 ,{ "the" }
 ,{ "possible" }
 ,{ "values" }
 ,{ "see" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_a }
 ,{ "object" , & fmt_text_a }
 ,{ "constructor" , & fmt_text_a }
 ,{ "arguments" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Page page = { "page_NetFork" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NewDelete {

Text b0 = { {
 { "NewDelete" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/NewDelete.h" , & fmt_text_Files_b }
 ,{ "CCore/src/NewDelete.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "set" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "assists" }
 ,{ "in" }
 ,{ "the" }
 ,{ "custom" }
 ,{ "memory" }
 ,{ "allocation/deallocation" }
 ,{ "during" }
 ,{ "an" }
 ,{ "object" }
 ,{ "creation." }
 ,{ "It" }
 ,{ "is" }
 ,{ "working" }
 ,{ "with" }
 ,{ "a" }
 ,{ "custom" }
 ,{ "memory" }
 ,{ "allocator" }
 ,{ "initialization" }
 ,{ "class." }
 ,{ "Such" }
 ,{ "class" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "use" }
 ,{ "a" }
 ,{ "simpler" }
 ,{ "way:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "I.e." }
 ,{ "the" }
 ,{ "class" }
 ,{ "CustomAllocInit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "lightweight" }
 ,{ "copyable" }
 ,{ "class." }
 ,{ "It" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "AllocType" , & fmt_text_b }
 ,{ "," }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "memory" }
 ,{ "allocation/deallocation." }
 ,{ "The" }
 ,{ "method" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "failure." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "not" }
 ,{ "restricted." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "must" }
 ,{ "return" }
 ,{ "an" }
 ,{ "aligned" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "required" }
 ,{ "length." }
 ,{ "The" }
 ,{ "method" }
 ,{ "free()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "release" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "pointer," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "length." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "always" }
 ,{ "non-null," }
 ,{ "the" }
 ,{ "second" }
 ,{ "equals" }
 ,{ "the" }
 ,{ "argument," }
 ,{ "which" }
 ,{ "was" }
 ,{ "passed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "during" }
 ,{ "the" }
 ,{ "original" }
 ,{ "memory" }
 ,{ "allocation." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "To" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "using" }
 ,{ "this" }
 ,{ "custom" }
 ,{ "memory" }
 ,{ "allocator" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "New()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "allocator" }
 ,{ "initialization" }
 ,{ "object." }
 ,{ "The" }
 ,{ "rest" }
 ,{ "are" }
 ,{ "used" }
 ,{ "in" }
 ,{ "an" }
 ,{ "object" }
 ,{ "constructor." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "freed." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "To" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object," }
 ,{ "the" }
 ,{ "function" }
 ,{ "Delete()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "For" }
 ,{ "this" }
 ,{ "function" }
 ,{ "you" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "original" }
 ,{ "object" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "polymorphic" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "Delete" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "This" }
 ,{ "function" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "some" }
 ,{ "base" }
 ,{ "class" }
 ,{ "of" }
 ,{ "the" }
 ,{ "original" }
 ,{ "object." }
 ,{ "You" }
 ,{ "must" }
 ,{ "declare" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "to" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class" }
 ,{ "virtual" }
 ,{ "and" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "objSpace()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Then" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "Delete_dynamic" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "class" }
 ,{ "CustomAllocGuard" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "New()" , & fmt_text_b }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "AllocType" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "uses" }
 ,{ "it" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Destructor" }
 ,{ "frees" }
 ,{ "the" }
 ,{ "memory," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "\"disarmed\"." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "disarm()" , & fmt_text_b }
 ,{ "disarms" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "getPlace()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "place" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "class" }
 ,{ "to" }
 ,{ "get" }
 ,{ "memory" }
 ,{ "from" }
 ,{ "the" }
 ,{ "default" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Page page = { "page_NewDelete" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NoCopy {

Text b0 = { {
 { "NoCopy" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/NoCopy.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/NoCopy.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Property" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "NoCopy" , & fmt_text_b }
 ,{ "classes" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "disable" }
 ,{ "the" }
 ,{ "implicit" }
 ,{ "copy" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "implicit" }
 ,{ "assign" }
 ,{ "operator" }
 ,{ "(and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "also)." }
 ,{ "Unlucky," }
 ,{ "in" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "a" }
 ,{ "compiler" }
 ,{ "generates" }
 ,{ "these" }
 ,{ "two" }
 ,{ "class" }
 ,{ "members" }
 ,{ "by" }
 ,{ "default," }
 ,{ "despite" }
 ,{ "they" }
 ,{ "are" }
 ,{ "goodless" }
 ,{ "in" }
 ,{ "most" }
 ,{ "cases." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "first" }
 ,{ "of" }
 ,{ "them" }
 ,{ "is" }
 ,{ "the" }
 ,{ "typedef" }
 ,{ "NoCopy" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Use" }
 ,{ "it" }
 ,{ "as" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "in" }
 ,{ "a" }
 ,{ "class" }
 ,{ "definition" }
 ,{ "to" }
 ,{ "make" }
 ,{ "the" }
 ,{ "class" }
 ,{ "non-copyable:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "template" }
 ,{ "typedef" }
 ,{ "NoCopyBase" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Use" }
 ,{ "it" }
 ,{ "as" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "in" }
 ,{ "a" }
 ,{ "class" }
 ,{ "definition" }
 ,{ "to" }
 ,{ "inherit" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "classes" }
 ,{ "and" }
 ,{ "make" }
 ,{ "the" }
 ,{ "class" }
 ,{ "non-copyable:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Why" }
 ,{ "do" }
 ,{ "we" }
 ,{ "need" }
 ,{ "typedefs" }
 ,{ "here?" }
 ,{ "To" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "case:" }
} , & fmt_text , & align_text } ;

Page page = { "page_NoCopy" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NodeAllocators {

Text b0 = { {
 { "Node" }
 ,{ "allocators" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/NodeAllocator.h" , & fmt_text_Files_b }
 ,{ "CCore/src/NodeAllocator.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Node" }
 ,{ "allocator" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "destroy" }
 ,{ "list" }
 ,{ "and" }
 ,{ "tree" }
 ,{ "nodes." }
 ,{ "Node" }
 ,{ "allocator" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "for" }
 ,{ "list" }
 ,{ "and" }
 ,{ "tree" }
 ,{ "map" }
 ,{ "containers." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "NodeAllocator" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "node" }
 ,{ "allocator." }
 ,{ "Its" }
 ,{ "only" }
 ,{ "function" }
 ,{ "is" }
 ,{ "the" }
 ,{ "counting" }
 ,{ "allocated" }
 ,{ "nodes." }
 ,{ "Node" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "using" }
 ,{ "the" }
 ,{ "operator" }
 ,{ "new" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "also" }
 ,{ "a" }
 ,{ "model" }
 ,{ "for" }
 ,{ "other" }
 ,{ "node" }
 ,{ "allocators." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Constructor" }
 ,{ "has" }
 ,{ "no" }
 ,{ "arguments." }
 ,{ "Destructor" }
 ,{ "is" }
 ,{ "trivial." }
 ,{ "Allocator" }
 ,{ "has" }
 ,{ "a" }
 ,{ "counter" }
 ,{ "for" }
 ,{ "allocated" }
 ,{ "nodes." }
 ,{ "So" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "all" }
 ,{ "allocated" }
 ,{ "nodes" }
 ,{ "before" }
 ,{ "the" }
 ,{ "object" }
 ,{ "destruction." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "NodeAllocator" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "there" }
 ,{ "are" }
 ,{ "allocated" }
 ,{ "nodes." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "allocated" }
 ,{ "nodes." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "node." }
 ,{ "Arguments" }
 ,{ "are" }
 ,{ "forwarder" }
 ,{ "to" }
 ,{ "the" }
 ,{ "node" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "free_nonnull()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "node," }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "free()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "node," }
 ,{ "if" }
 ,{ "the" }
 ,{ "node" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "null." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "the" }
 ,{ "node" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "NodeAllocator" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "NodePoolAllocator" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "This" }
 ,{ "allocator" }
 ,{ "uses" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "pool" }
 ,{ "to" }
 ,{ "store" }
 ,{ "nodes." }
 ,{ "This" }
 ,{ "approach" }
 ,{ "greatly" }
 ,{ "amortizes" }
 ,{ "the" }
 ,{ "cost" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "allocation," }
 ,{ "but" }
 ,{ "it" }
 ,{ "wastes" }
 ,{ "memory" }
 ,{ "if" }
 ,{ "there" }
 ,{ "are" }
 ,{ "many" }
 ,{ "destroyed" }
 ,{ "nodes." }
 ,{ "To" }
 ,{ "avoid" }
 ,{ "this" }
 ,{ "problem" }
 ,{ "use" }
 ,{ "compact" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "lists" }
 ,{ "and" }
 ,{ "maps." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "nodes" }
 ,{ "in" }
 ,{ "the" }
 ,{ "single" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "as" }
 ,{ "an" }
 ,{ "argument," }
 ,{ "it" }
 ,{ "is" }
 ,{ "100" , & fmt_text_b }
 ,{ "by" }
 ,{ "default." }
 ,{ "Destructor" }
 ,{ "calls" }
 ,{ "abort," }
 ,{ "if" }
 ,{ "not" }
 ,{ "all" }
 ,{ "nodes" }
 ,{ "are" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "NodePoolAllocator" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
 ,{ "The" }
 ,{ "target" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "empty" }
 ,{ "or" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "is" }
 ,{ "aborted." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "All" }
 ,{ "other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "for" }
 ,{ "NodeAllocator" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "MemBlockPool" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "MemBlockPool" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length" }
 ,{ "and" }
 ,{ "alignment." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "length," }
 ,{ "align_of" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "alignment," }
 ,{ "alloc_count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "in" }
 ,{ "the" }
 ,{ "single" }
 ,{ "larger" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "Destructor" }
 ,{ "frees" }
 ,{ "all" }
 ,{ "allocated" }
 ,{ "memory," }
 ,{ "so" }
 ,{ "make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "all" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "are" }
 ,{ "freed" }
 ,{ "before" }
 ,{ "the" }
 ,{ "object" }
 ,{ "destruction." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "MemBlockPool" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "free()" , & fmt_text_b }
 ,{ "frees" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "mem" , & fmt_text_b }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "AllocGuard" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "and" }
 ,{ "hold" }
 ,{ "temporary" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "Destructor" }
 ,{ "frees" }
 ,{ "the" }
 ,{ "block," }
 ,{ "unless" }
 ,{ "you" }
 ,{ "\"disarm\"" }
 ,{ "the" }
 ,{ "guard." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "MemBlockPool" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Page page = { "page_NodeAllocators" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NoMutex {

Text b0 = { {
 { "NoMutex" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/NoMutex.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/NoMutex.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NoMutex" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Mutex" , & fmt_text_b }
 ,{ "interface," }
 ,{ "but" }
 ,{ "with" }
 ,{ "empty" }
 ,{ "methods." }
 ,{ "It" }
 ,{ "is" }
 ,{ "required" }
 ,{ "sometimes" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "class," }
 ,{ "which" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "either" }
 ,{ "in" }
 ,{ "a" }
 ,{ "single-threaded" }
 ,{ "context" }
 ,{ "or" }
 ,{ "in" }
 ,{ "a" }
 ,{ "multi-threaded." }
 ,{ "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "as" }
 ,{ "a" }
 ,{ "template," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "mutex" }
 ,{ "type" }
 ,{ "to" }
 ,{ "avoid" }
 ,{ "using" }
 ,{ "a" }
 ,{ "real" }
 ,{ "mutex" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Page page = { "page_NoMutex" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NoPrimeTest {

Text b0 = { {
 { "NoPrimeTest" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/NoPrimeTest.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/NoPrimeTest.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NoPrimeTest" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "fast" }
 ,{ "test" }
 ,{ "for" }
 ,{ "non-primality." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "an" }
 ,{ "Integer" , & fmt_text_a }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "RandomTest()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "the" }
 ,{ "given" }
 ,{ "integer" }
 ,{ "P" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "P" , & fmt_text_b }
 ,{ "is" }
 ,{ "probably" }
 ,{ "prime." }
 ,{ "If" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "P" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "prime." }
 ,{ "RandomTest()" , & fmt_text_b }
 ,{ "does" }
 ,{ "count" , & fmt_text_b }
 ,{ "of" }
 ,{ "randomly" }
 ,{ "chosen" }
 ,{ "subtests" }
 ,{ "to" }
 ,{ "find" }
 ,{ "out," }
 ,{ "that" }
 ,{ "P" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "prime." }
 ,{ "Each" }
 ,{ "subtest" }
 ,{ "has" }
 ,{ "a" }
 ,{ "chance" }
 ,{ "above" }
 ,{ "50%" }
 ,{ "to" }
 ,{ "fail," }
 ,{ "if" }
 ,{ "P" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "prime." }
 ,{ "The" }
 ,{ "more" }
 ,{ "count" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "more" }
 ,{ "chances" }
 ,{ "to" }
 ,{ "break" }
 ,{ "a" }
 ,{ "non-prime" }
 ,{ "number." }
 ,{ "The" }
 ,{ "practical" }
 ,{ "range" }
 ,{ "for" }
 ,{ "count" , & fmt_text_b }
 ,{ "is" }
 ,{ "30-100." }
 ,{ "random" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Random" , & fmt_text_a }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Page page = { "page_NoPrimeTest" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Nothing {

Text b0 = { {
 { "Nothing," }
 ,{ "Null," }
 ,{ "Empty," }
 ,{ "Default" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Nothing.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Nothing.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Nothing" , & fmt_text_b }
 ,{ "," }
 ,{ "Null" , & fmt_text_b }
 ,{ "," }
 ,{ "Empty" , & fmt_text_b }
 ,{ "," }
 ,{ "Default" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "are" }
 ,{ "Word" , & fmt_text_b }
 ,{ "s" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "NothingType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "They" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "define" }
 ,{ "an" }
 ,{ "implicit" }
 ,{ "constructor" }
 ,{ "of" }
 ,{ "a" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Objects" }
 ,{ "of" }
 ,{ "such" }
 ,{ "classes" }
 ,{ "can" }
 ,{ "be" }
 ,{ "constructed" }
 ,{ "using" }
 ,{ "one" }
 ,{ "of" }
 ,{ "these" }
 ,{ "Word" , & fmt_text_b }
 ,{ "s:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Nothing" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NoThrowFlags {

Text b0 = { {
 { "NoThrowFlags" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/NoThrowFlags.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/NoThrowFlags.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "need" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "two" }
 ,{ "type" }
 ,{ "properties:" }
 ,{ "if" }
 ,{ "a" }
 ,{ "type" }
 ,{ "has" }
 ,{ "a" }
 ,{ "nothrow" , & fmt_text_b }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "(or" }
 ,{ "has" }
 ,{ "no" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "at" }
 ,{ "all)" }
 ,{ "and" }
 ,{ "if" }
 ,{ "a" }
 ,{ "type" }
 ,{ "has" }
 ,{ "a" }
 ,{ "nothrow" , & fmt_text_b }
 ,{ "copy" }
 ,{ "constructor" }
 ,{ "(or" }
 ,{ "has" }
 ,{ "no" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "constructor" }
 ,{ "at" }
 ,{ "all)." }
 ,{ "NoThrowFlags" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "which" }
 ,{ "declare" }
 ,{ "these" }
 ,{ "type" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "a" }
 ,{ "class." }
 ,{ "You" }
 ,{ "are" }
 ,{ "responsible" }
 ,{ "that" }
 ,{ "the" }
 ,{ "declaration" }
 ,{ "is" }
 ,{ "correct!" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "declare" }
 ,{ "class" }
 ,{ "properties" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class" }
 ,{ "SetNoThrowFlags" , & fmt_text_b }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "OR" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "If" }
 ,{ "a" }
 ,{ "class" }
 ,{ "has" }
 ,{ "no" }
 ,{ "such" }
 ,{ "base" }
 ,{ "class," }
 ,{ "the" }
 ,{ "default" }
 ,{ "way" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "these" }
 ,{ "class" }
 ,{ "properties" }
 ,{ "is" }
 ,{ "used." }
 ,{ "To" }
 ,{ "do" }
 ,{ "it" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "s" }
 ,{ "std::is_default_constructible" , & fmt_text_b }
 ,{ "and" }
 ,{ "other" }
 ,{ "are" }
 ,{ "used." }
 ,{ "If" }
 ,{ "a" }
 ,{ "\"bad\"" }
 ,{ "result" }
 ,{ "is" }
 ,{ "encountered" }
 ,{ "(" }
 ,{ "false" , & fmt_text_b }
 ,{ ")" }
 ,{ "a" }
 ,{ "warning" }
 ,{ "is" }
 ,{ "emitted." }
 ,{ "You" }
 ,{ "can" }
 ,{ "set" }
 ,{ "these" }
 ,{ "properties" }
 ,{ "true" , & fmt_text_b }
 ,{ "by" }
 ,{ "adding" }
 ,{ "the" }
 ,{ "noexcept" , & fmt_text_b }
 ,{ "qualifier" }
 ,{ "to" }
 ,{ "the" }
 ,{ "declaration" }
 ,{ "of" }
 ,{ "the" }
 ,{ "default" }
 ,{ "or" }
 ,{ "copy" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "To" }
 ,{ "retrieve" }
 ,{ "NoThrowFlags" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "Meta-class" , & fmt_text_b }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Page page = { "page_NoThrowFlags" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_NullMovePtr {

Text b0 = { {
 { "NullMovePtr" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/NullMovePtr.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/NullMovePtr.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "NullMovePtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "wrapped" }
 ,{ "over" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_a }
 ,{ "Pointer" , & fmt_text_a }
 ,{ "Interface" , & fmt_text_a }
 ,{ "." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer." }
 ,{ "This" }
 ,{ "wrapper" }
 ,{ "supports" }
 ,{ "std" , & fmt_text_b }
 ,{ "move" }
 ,{ "semantic." }
 ,{ "The" }
 ,{ "source" }
 ,{ "operand" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "a" }
 ,{ "move" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Page page = { "page_NullMovePtr" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ObjectDomain {

Text b0 = { {
 { "Object" }
 ,{ "Domain" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ObjectDomain.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ObjectDomain.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ObjectDomain" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "arbitrary" }
 ,{ "object" }
 ,{ "collection" }
 ,{ "with" }
 ,{ "Garbage" }
 ,{ "Collection" }
 ,{ "capabilities." }
 ,{ "It" }
 ,{ "means" }
 ,{ "the" }
 ,{ "domain" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "garbage" }
 ,{ "collection" }
 ,{ "algorithm," }
 ,{ "during" }
 ,{ "the" }
 ,{ "garbage" }
 ,{ "collection" }
 ,{ "all" }
 ,{ "unreferenced" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "destroyed." }
 ,{ "Objects," }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "domain," }
 ,{ "must" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "GC" }
 ,{ "operations." }
 ,{ "It" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "throw" }
 ,{ "two" }
 ,{ "special" }
 ,{ "object" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "special" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "support" }
 ,{ "object" }
 ,{ "referencing." }
 ,{ "When" }
 ,{ "a" }
 ,{ "class" }
 ,{ "member" }
 ,{ "reference" }
 ,{ "another" }
 ,{ "object" }
 ,{ "being" }
 ,{ "governed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "domain," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "one" }
 ,{ "of" }
 ,{ "these" }
 ,{ "four" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "IntObjPtr<Type>" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "another" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "by" }
 ,{ "class" }
 ,{ "members." }
 ,{ "If" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "then" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "object" }
 ,{ "is" }
 ,{ "kept" }
 ,{ "alive" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "referencing" }
 ,{ "object" }
 ,{ "is" }
 ,{ "alive." }
 ,{ "So" }
 ,{ "you" }
 ,{ "may" }
 ,{ "safely" }
 ,{ "assume" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "valid." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "in" }
 ,{ "the" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "method" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "keeper" , & fmt_text_b }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "IntAnyObjPtr<Type1,Type2>" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "another" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "by" }
 ,{ "class" }
 ,{ "members." }
 ,{ "If" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "then" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "object" }
 ,{ "is" }
 ,{ "kept" }
 ,{ "alive" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "referencing" }
 ,{ "object" }
 ,{ "is" }
 ,{ "alive." }
 ,{ "So" }
 ,{ "you" }
 ,{ "may" }
 ,{ "safely" }
 ,{ "assume" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "valid." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "in" }
 ,{ "the" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "method" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "keeper" , & fmt_text_b }
 ,{ "call." }
 ,{ "This" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "AnyPtr" , & fmt_text_a }
 ,{ "," }
 ,{ "i.e." }
 ,{ "it" }
 ,{ "may" }
 ,{ "point" }
 ,{ "to" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "different" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "IntDelObjPtr<Type>" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "IntObjPtr<Type>" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "is" }
 ,{ "has" }
 ,{ "the" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced," }
 ,{ "so" }
 ,{ "other" }
 ,{ "such" }
 ,{ "pointers" }
 ,{ "referencing" }
 ,{ "the" }
 ,{ "same" }
 ,{ "object" }
 ,{ "are" }
 ,{ "nullified." }
 ,{ "Using" }
 ,{ "this" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "pointer" }
 ,{ "you" }
 ,{ "must" }
 ,{ "always" }
 ,{ "check" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "before" }
 ,{ "using" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "WeakObjPtr<Type>" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "weak" }
 ,{ "pointer." }
 ,{ "It" }
 ,{ "does" }
 ,{ "not" }
 ,{ "keep" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "If" }
 ,{ "this" }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed," }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "nullified." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "in" }
 ,{ "the" }
 ,{ "breakWeak()" , & fmt_text_b }
 ,{ "method" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "breaker" , & fmt_text_b }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "If" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "or" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "method" }
 ,{ "has" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "body," }
 ,{ "you" }
 ,{ "may" }
 ,{ "skip" }
 ,{ "its" }
 ,{ "definition" }
 ,{ "entirely." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "If" }
 ,{ "you" }
 ,{ "reference" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "not" }
 ,{ "from" }
 ,{ "a" }
 ,{ "member," }
 ,{ "but" }
 ,{ "from" }
 ,{ "a" }
 ,{ "local" }
 ,{ "or" }
 ,{ "global" }
 ,{ "variable," }
 ,{ "you" }
 ,{ "must" }
 ,{ "use" }
 ,{ "another" }
 ,{ "smart" }
 ,{ "pointers:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "You" }
 ,{ "may" }
 ,{ "freely" }
 ,{ "cast" }
 ,{ "between" }
 ,{ "IntObjPtr<Type>" , & fmt_text_b }
 ,{ "," }
 ,{ "WeakObjPtr<Type>" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtObjPtr<Type>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "You" }
 ,{ "may" }
 ,{ "freely" }
 ,{ "cast" }
 ,{ "any" }
 ,{ "of" }
 ,{ "IntObjPtr<Type>" , & fmt_text_b }
 ,{ "," }
 ,{ "WeakObjPtr<Type>" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtObjPtr<Type>" , & fmt_text_b }
 ,{ "to" }
 ,{ "IntAnyObjPtr<...,Type,...>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "freely" }
 ,{ "cast" }
 ,{ "between" }
 ,{ "IntDelObjPtr<Type>" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtDelObjPtr<Type>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "ObjectDomain" }
} , & fmt_h3 , & align_h3 } ;

Text b14 = { {
 { "The" , & fmt_text_Alert }
 ,{ "class" , & fmt_text_Alert }
 ,{ "ObjectDomain" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "essentially" , & fmt_text_Alert }
 ,{ "single-threaded." , & fmt_text_Alert }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "it" }
 ,{ "as" }
 ,{ "is," }
 ,{ "but" }
 ,{ "it's" }
 ,{ "likely," }
 ,{ "you" }
 ,{ "would" }
 ,{ "derive" }
 ,{ "another" }
 ,{ "class" }
 ,{ "from" }
 ,{ "it" }
 ,{ "to" }
 ,{ "serve" }
 ,{ "as" }
 ,{ "an" }
 ,{ "object" }
 ,{ "domain." }
 ,{ "It" }
 ,{ "is" }
 ,{ "convenient" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "and" }
 ,{ "store" }
 ,{ "a" }
 ,{ "global" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "it" }
 ,{ "for" }
 ,{ "a" }
 ,{ "further" }
 ,{ "use." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "try_alloc()" , & fmt_text_b }
 ,{ "and" }
 ,{ "free()" , & fmt_text_b }
 ,{ "may" }
 ,{ "be" }
 ,{ "overloaded" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "heap" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "cleanup()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "of" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "max_total_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "total" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "domain" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "collect()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "garbage" }
 ,{ "collection." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "getObjectCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "domain" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "getTotalLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "total" }
 ,{ "memory," }
 ,{ "occupied" }
 ,{ "by" }
 ,{ "domain" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "getMaxTotalLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "total" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "domain" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "getAvail()" , & fmt_text_b }
 ,{ "is" }
 ,{ "remaining" }
 ,{ "available" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Below" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjectDomain" , & fmt_text_b }
 ,{ "usage." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Object" }
 ,{ "pointers" }
} , & fmt_h3 , & align_h3 } ;

Text b25 = { {
 { "You" }
 ,{ "create" }
 ,{ "and" }
 ,{ "manipulate" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "via" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "smart" }
 ,{ "pointers." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Each" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "has" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "NothingType" , & fmt_text_b }
 ,{ "constructor," }
 ,{ "both" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Each" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "has" }
 ,{ "also" }
 ,{ "the" }
 ,{ "method" }
 ,{ "nullify()" , & fmt_text_b }
 ,{ "to" }
 ,{ "set" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Each" }
 ,{ "smart" }
 ,{ "pointer," }
 ,{ "except" }
 ,{ "IntAnyObjPtr" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtAnyObjPtr" , & fmt_text_b }
 ,{ "," }
 ,{ "has" }
 ,{ "generic" }
 ,{ "constructors" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "will" }
 ,{ "reference" }
 ,{ "the" }
 ,{ "created" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "ObjectDomain" , & fmt_text_b }
 ,{ "pointer" }
 ,{ "or" }
 ,{ "reference." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Each" }
 ,{ "smart" }
 ,{ "pointer," }
 ,{ "except" }
 ,{ "IntAnyObjPtr" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtAnyObjPtr" , & fmt_text_b }
 ,{ "," }
 ,{ "implements" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "." }
 ,{ "IntAnyObjPtr" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtAnyObjPtr" , & fmt_text_b }
 ,{ "implement" }
 ,{ "the" }
 ,{ "\"anypointer\"" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ ":" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getPtr()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "AnyPtr<....>" , & fmt_text_b }
 ,{ "instead" }
 ,{ "of" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Each" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "efficiently" }
 ,{ "copyable." }
 ,{ "For" }
 ,{ "some" }
 ,{ "the" }
 ,{ "swap/move" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "for" }
 ,{ "the" }
 ,{ "sake" }
 ,{ "of" }
 ,{ "efficiency." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "ExtObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b33 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "local" }
 ,{ "or" }
 ,{ "global" }
 ,{ "variables." }
 ,{ "It" }
 ,{ "keeps" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "So" }
 ,{ "you" }
 ,{ "must" }
 ,{ "destroy" }
 ,{ "or" }
 ,{ "nullify" }
 ,{ "all" }
 ,{ "such" }
 ,{ "objects" }
 ,{ "before" }
 ,{ "the" }
 ,{ "ObjectDomain" , & fmt_text_b }
 ,{ "is" }
 ,{ "destroyed." }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "the" }
 ,{ "alias" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjectDomain::ExtPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "and" }
 ,{ "WeakObjPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "create()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "ExtPtr" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "getExtRefs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "external" }
 ,{ "reference" }
 ,{ "counter." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "copyable," }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "IntObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b39 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "members" }
 ,{ "of" }
 ,{ "another" }
 ,{ "domain" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "keeps" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "If" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "members" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type," }
 ,{ "it" }
 ,{ "must" }
 ,{ "define" }
 ,{ "the" }
 ,{ "method" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "and" }
 ,{ "use" }
 ,{ "these" }
 ,{ "pointers" }
 ,{ "as" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "keeper" , & fmt_text_b }
 ,{ "calls" }
 ,{ "inside" }
 ,{ "this" }
 ,{ "method." }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "the" }
 ,{ "alias" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjectDomain::IntPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "IntObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "and" }
 ,{ "WeakObjPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "create()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "IntPtr" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "getExtRefs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "external" }
 ,{ "reference" }
 ,{ "counter." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "WeakObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b44 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "members" }
 ,{ "of" }
 ,{ "another" }
 ,{ "domain" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "does" , & fmt_text_b }
 ,{ "not" , & fmt_text_b }
 ,{ "keep" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "So" }
 ,{ "the" }
 ,{ "object" }
 ,{ "may" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "and" }
 ,{ "if" }
 ,{ "this" }
 ,{ "happens" }
 ,{ "the" }
 ,{ "weak" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "null." }
 ,{ "If" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "members" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type," }
 ,{ "it" }
 ,{ "must" }
 ,{ "define" }
 ,{ "the" }
 ,{ "method" }
 ,{ "breakWeak()" , & fmt_text_b }
 ,{ "and" }
 ,{ "use" }
 ,{ "these" }
 ,{ "pointers" }
 ,{ "as" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "breaker" , & fmt_text_b }
 ,{ "calls" }
 ,{ "inside" }
 ,{ "this" }
 ,{ "method." }
 ,{ "WeakObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "the" }
 ,{ "alias" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjectDomain::WeakPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "WeakObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "and" }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "create()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "WeakPtr" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "getExtRefs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "external" }
 ,{ "reference" }
 ,{ "counter." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "IntAnyObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b49 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "members" }
 ,{ "of" }
 ,{ "another" }
 ,{ "domain" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "keeps" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "If" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "members" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type," }
 ,{ "it" }
 ,{ "must" }
 ,{ "define" }
 ,{ "the" }
 ,{ "method" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "and" }
 ,{ "use" }
 ,{ "these" }
 ,{ "pointers" }
 ,{ "as" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "keeper" , & fmt_text_b }
 ,{ "calls" }
 ,{ "inside" }
 ,{ "this" }
 ,{ "method." }
 ,{ "IntAnyObjPtr<T,...>" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "the" }
 ,{ "alias" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjectDomain::IntAnyPtr<T,...>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "IntAnyObjPtr<...,T,...>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "WeakObjPtr<T>" , & fmt_text_b }
 ,{ "and" }
 ,{ "ExtAnyObjPtr<...,T,...>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "create<T>()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "IntPtr<T>" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "apply()" , & fmt_text_b }
 ,{ "works" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way," }
 ,{ "as" }
 ,{ "the" }
 ,{ "apply()" , & fmt_text_b }
 ,{ "method" }
 ,{ "for" }
 ,{ "AnyPtr" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "transforms" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "into" }
 ,{ "the" }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "getExtRefs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "external" }
 ,{ "reference" }
 ,{ "counter." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "ExtAnyObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b55 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "local" }
 ,{ "or" }
 ,{ "global" }
 ,{ "variables." }
 ,{ "It" }
 ,{ "keeps" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "So" }
 ,{ "you" }
 ,{ "must" }
 ,{ "destroy" }
 ,{ "or" }
 ,{ "nullify" }
 ,{ "all" }
 ,{ "such" }
 ,{ "objects" }
 ,{ "before" }
 ,{ "the" }
 ,{ "ObjectDomain" , & fmt_text_b }
 ,{ "is" }
 ,{ "destroyed." }
 ,{ "ExtAnyObjPtr<TT>" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "the" }
 ,{ "alias" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjectDomain::ExtAnyPtr<TT>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "ExtAnyObjPtr<...,T,...>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "," }
 ,{ "WeakObjPtr<T>" , & fmt_text_b }
 ,{ "and" }
 ,{ "IntAnyObjPtr<...,T,...>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "create<T>()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "ExtPtr<T>" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "apply()" , & fmt_text_b }
 ,{ "works" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way," }
 ,{ "as" }
 ,{ "the" }
 ,{ "apply()" , & fmt_text_b }
 ,{ "method" }
 ,{ "for" }
 ,{ "AnyPtr" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "transforms" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "into" }
 ,{ "the" }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "getExtRefs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "external" }
 ,{ "reference" }
 ,{ "counter." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "ExtAnyObjPtr<...,T,...>" , & fmt_text_b }
 ,{ "is" }
 ,{ "copyable," }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "ExtDelObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b62 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "local" }
 ,{ "or" }
 ,{ "global" }
 ,{ "variables." }
 ,{ "It" }
 ,{ "keeps" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive." }
 ,{ "So" }
 ,{ "you" }
 ,{ "must" }
 ,{ "destroy" }
 ,{ "or" }
 ,{ "nullify" }
 ,{ "all" }
 ,{ "such" }
 ,{ "objects" }
 ,{ "before" }
 ,{ "the" }
 ,{ "ObjectDomain" , & fmt_text_b }
 ,{ "is" }
 ,{ "destroyed." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ExtObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "supports" }
 ,{ "the" }
 ,{ "manual" }
 ,{ "object" }
 ,{ "destruction" }
 ,{ "via" }
 ,{ "the" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "ExtDelObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "IntDelObjPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "create()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "ExtDelObjPtr" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "destroy()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "pointer." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "possible," }
 ,{ "if" }
 ,{ "there" }
 ,{ "are" }
 ,{ "other" }
 ,{ "external" }
 ,{ "references" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "method" }
 ,{ "simply" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "Internal" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object," }
 ,{ "if" }
 ,{ "any," }
 ,{ "are" }
 ,{ "nullified." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "ExtDelObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "copyable," }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "IntDelObjPtr" }
} , & fmt_h4 , & align_h4 } ;

Text b68 = { {
 { "This" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reference" }
 ,{ "domain" }
 ,{ "objects" }
 ,{ "by" }
 ,{ "members" }
 ,{ "of" }
 ,{ "another" }
 ,{ "domain" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "keeps" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "referenced" }
 ,{ "alive," }
 ,{ "unless" }
 ,{ "somebody" }
 ,{ "destroys" }
 ,{ "it" }
 ,{ "manually." }
 ,{ "If" }
 ,{ "a" }
 ,{ "domain" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "members" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type," }
 ,{ "it" }
 ,{ "must" }
 ,{ "define" }
 ,{ "the" }
 ,{ "method" }
 ,{ "keepAlive()" , & fmt_text_b }
 ,{ "and" }
 ,{ "use" }
 ,{ "these" }
 ,{ "pointers" }
 ,{ "as" }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "keeper" , & fmt_text_b }
 ,{ "calls" }
 ,{ "inside" }
 ,{ "this" }
 ,{ "method." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "from" }
 ,{ "the" }
 ,{ "IntObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "this" }
 ,{ "pointer" }
 ,{ "supports" }
 ,{ "the" }
 ,{ "manual" }
 ,{ "object" }
 ,{ "destruction" }
 ,{ "via" }
 ,{ "the" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "IntDelObjPtr<T>" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "convertible" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ExtDelObjPtr<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "create()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "IntDelObjPtr" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "assigned" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "self." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "destroy()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "pointer." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "possible," }
 ,{ "if" }
 ,{ "there" }
 ,{ "are" }
 ,{ "some" }
 ,{ "external" }
 ,{ "references" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object," }
 ,{ "in" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "method" }
 ,{ "simply" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "Internal" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object," }
 ,{ "if" }
 ,{ "any," }
 ,{ "are" }
 ,{ "nullified." }
} , & fmt_text , & align_text } ;

Page page = { "page_ObjectDomain" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ObjectHost {

Text b0 = { {
 { "ObjectHost" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ObjHost.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ObjHost.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ObjHost" , & fmt_text_b }
 ,{ "can" }
 ,{ "host" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "Each" }
 ,{ "object" }
 ,{ "is" }
 ,{ "identified" }
 ,{ "by" }
 ,{ "its" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ObjBase" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "ObjBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "to" }
 ,{ "be" }
 ,{ "hosted." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "polymorphic." }
 ,{ "It" }
 ,{ "has" }
 ,{ "a" }
 ,{ "virtual" }
 ,{ "destructor," }
 ,{ "so" }
 ,{ "you" }
 ,{ "can" }
 ,{ "destroy" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "derived" }
 ,{ "type" }
 ,{ "using" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "MemBase_nocopy" , & fmt_text_b }
 ,{ "," }
 ,{ "so" }
 ,{ "it" }
 ,{ "is" }
 ,{ "non-copyable" }
 ,{ "and" }
 ,{ "inherits" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "operators," }
 ,{ "based" }
 ,{ "on" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heap." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "also" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "InterfaceHost" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "You" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "anti-semaphore." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "wait_release()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "object" }
 ,{ "gets" }
 ,{ "out" }
 ,{ "of" }
 ,{ "use." }
 ,{ "You" }
 ,{ "should" }
 ,{ "use" }
 ,{ "these" }
 ,{ "methods" }
 ,{ "after" }
 ,{ "you" }
 ,{ "detach" }
 ,{ "the" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "host," }
 ,{ "in" }
 ,{ "case" }
 ,{ "if" }
 ,{ "you" }
 ,{ "manage" }
 ,{ "an" }
 ,{ "object" }
 ,{ "not" }
 ,{ "using" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ObjMaster" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ObjHost" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "ObjHost" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "hosting" }
 ,{ "class." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "global" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Constructor" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "mutex." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "add()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "When" }
 ,{ "it" }
 ,{ "is" }
 ,{ "done," }
 ,{ "the" }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "\"hooked\"" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "ObjHook" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "del()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "object." }
 ,{ "After" }
 ,{ "it" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "no" }
 ,{ "more" }
 ,{ "visible," }
 ,{ "but" }
 ,{ "may" }
 ,{ "still" }
 ,{ "be" }
 ,{ "in" }
 ,{ "use." }
 ,{ "Use" }
 ,{ "the" }
 ,{ "wait_release()" , & fmt_text_b }
 ,{ "method" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "block" }
 ,{ "execution" }
 ,{ "while" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "used" }
 ,{ "and" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "safely" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Default()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "default" }
 ,{ "host" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "ObjHook" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "ObjHook" , & fmt_text_b }
 ,{ "\"hooks\"" }
 ,{ "an" }
 ,{ "object," }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Constructor" }
 ,{ "hooks" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "host," }
 ,{ "or" }
 ,{ "default" }
 ,{ "host." }
 ,{ "Try-variants" }
 ,{ "do" }
 ,{ "not" }
 ,{ "throw" }
 ,{ "exceptions" }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "found," }
 ,{ "they" }
 ,{ "create" }
 ,{ "a" }
 ,{ "null" }
 ,{ "hook." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Destructor" }
 ,{ "releases" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "the" }
 ,{ "hook" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "requestInterface()" , & fmt_text_b }
 ,{ "forwards" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "request" }
 ,{ "to" }
 ,{ "the" }
 ,{ "hooked" }
 ,{ "object," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "cast()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "the" }
 ,{ "pickInterface()" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "acquire" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "cast_guarder()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "guarded" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "cast()" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "result" }
 ,{ "if" }
 ,{ "null," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Copy" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "hook," }
 ,{ "it" }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "same" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "ObjMaster" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "ObjMaster" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "attach" }
 ,{ "and" }
 ,{ "detach" }
 ,{ "an" }
 ,{ "object" }
 ,{ "to" }
 ,{ "a" }
 ,{ "host." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Constructor" }
 ,{ "does" }
 ,{ "attach." }
 ,{ "If" }
 ,{ "the" }
 ,{ "host" }
 ,{ "is" }
 ,{ "not" }
 ,{ "specified," }
 ,{ "the" }
 ,{ "default" }
 ,{ "host" }
 ,{ "is" }
 ,{ "used." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Destructor" }
 ,{ "does" }
 ,{ "detach" }
 ,{ "and" }
 ,{ "waits" }
 ,{ "until" }
 ,{ "the" }
 ,{ "object" }
 ,{ "gets" }
 ,{ "out" }
 ,{ "of" }
 ,{ "use." }
 ,{ "After" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "it" }
 ,{ "is" }
 ,{ "safe" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "ObjMaster_delete" }
} , & fmt_h4 , & align_h4 } ;

Text b28 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ObjMaster" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "is:" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "a" }
 ,{ "pointer," }
 ,{ "not" }
 ,{ "by" }
 ,{ "a" }
 ,{ "reference," }
 ,{ "and" }
 ,{ "destructor" }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "object." }
 ,{ "So" }
 ,{ "the" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "constructed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "new" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "ObjHost::List" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "records" }
 ,{ "with" }
 ,{ "information" }
 ,{ "about" }
 ,{ "objects," }
 ,{ "attached" }
 ,{ "to" }
 ,{ "a" }
 ,{ "host." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "build()" , & fmt_text_b }
 ,{ "appends" }
 ,{ "the" }
 ,{ "list" }
 ,{ "with" }
 ,{ "Info" , & fmt_text_b }
 ,{ "records" }
 ,{ "about" }
 ,{ "objects," }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "host." }
 ,{ "If" }
 ,{ "the" }
 ,{ "record" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "hooked" }
 ,{ "and" }
 ,{ "released" }
 ,{ "later" }
 ,{ "by" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "of" }
 ,{ "the" }
 ,{ "list." }
 ,{ "Objects" }
 ,{ "may" }
 ,{ "be" }
 ,{ "selected" }
 ,{ "based" }
 ,{ "on" }
 ,{ "they" }
 ,{ "properties" }
 ,{ "to" }
 ,{ "be" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "The" }
 ,{ "range" }
 ,{ "access" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "to" }
 ,{ "the" }
 ,{ "record" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "type" }
 ,{ "of" }
 ,{ "Info" , & fmt_text_b }
 ,{ "records." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "ObjInfo" }
} , & fmt_h4 , & align_h4 } ;

Text b36 = { {
 { "This" }
 ,{ "info" }
 ,{ "record" }
 ,{ "contains" }
 ,{ "only" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "ObjInfo_obj" }
} , & fmt_h4 , & align_h4 } ;

Text b39 = { {
 { "This" }
 ,{ "info" }
 ,{ "record" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "ObjInfo_if" }
} , & fmt_h4 , & align_h4 } ;

Text b42 = { {
 { "This" }
 ,{ "info" }
 ,{ "record" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "selects" }
 ,{ "only" }
 ,{ "objects," }
 ,{ "implementing" }
 ,{ "the" }
 ,{ "given" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "ObjInfo_obj_if" }
} , & fmt_h4 , & align_h4 } ;

Text b45 = { {
 { "This" }
 ,{ "info" }
 ,{ "record" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "selects" }
 ,{ "only" }
 ,{ "objects," }
 ,{ "implementing" }
 ,{ "the" }
 ,{ "given" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Page page = { "page_ObjectHost" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ObjectHosting {

Text b0 = { {
 { "Object" }
 ,{ "Hosting" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Object" }
 ,{ "hosting" }
 ,{ "is" }
 ,{ "a" }
 ,{ "process" }
 ,{ "of" }
 ,{ "registering" }
 ,{ "an" }
 ,{ "object" }
 ,{ "into" }
 ,{ "some" }
 ,{ "register" }
 ,{ "(object" }
 ,{ "host)." }
 ,{ "Once" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host," }
 ,{ "it" }
 ,{ "becomes" }
 ,{ "visible" }
 ,{ "as" }
 ,{ "a" }
 ,{ "global" }
 ,{ "entity." }
 ,{ "Any" }
 ,{ "client" }
 ,{ "(thread" }
 ,{ "of" }
 ,{ "execution)" }
 ,{ "may" }
 ,{ "find" }
 ,{ "and" }
 ,{ "hook" }
 ,{ "the" }
 ,{ "object" }
 ,{ "and" }
 ,{ "use" }
 ,{ "its" }
 ,{ "functionality." }
 ,{ "After" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "detached" }
 ,{ "from" }
 ,{ "the" }
 ,{ "host" }
 ,{ "it" }
 ,{ "still" }
 ,{ "may" }
 ,{ "be" }
 ,{ "in" }
 ,{ "use," }
 ,{ "so" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "control" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "free" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "safely" }
 ,{ "disposed." }
 ,{ "The" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "reference" }
 ,{ "counting" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "this" }
 ,{ "purpose." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Two" }
 ,{ "object" }
 ,{ "hosts" }
 ,{ "are" }
 ,{ "provides" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "ObjHost" , & fmt_text_b }
 ,{ "can" }
 ,{ "host" }
 ,{ "multiple" }
 ,{ "polymorphic" }
 ,{ "objects," }
 ,{ "identified" }
 ,{ "by" }
 ,{ "names." }
 ,{ "SingleHost" , & fmt_text_b }
 ,{ "can" }
 ,{ "host" }
 ,{ "a" }
 ,{ "single" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Page page = { "page_ObjectHosting" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_OpAddHelper {

Text b0 = { {
 { "OpAddHelper" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/OpAddHelper.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/OpAddHelper.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "OppAddHelper" , & fmt_text_b }
 ,{ "converts" }
 ,{ "a" }
 ,{ "function" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "expression" }
 ,{ "folding" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "multi-argument" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Page page = { "page_OpAddHelper" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Optional {

Text b0 = { {
 { "Optional" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Optional.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Optional.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "Optional" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "polymorphic" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "has" }
 ,{ "number" }
 ,{ "of" }
 ,{ "object" }
 ,{ "slots." }
 ,{ "Each" }
 ,{ "slot" }
 ,{ "can" }
 ,{ "be" }
 ,{ "occupied" }
 ,{ "by" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "any" }
 ,{ "type." }
 ,{ "Once" }
 ,{ "created," }
 ,{ "the" }
 ,{ "object" }
 ,{ "occupies" }
 ,{ "the" }
 ,{ "slot" }
 ,{ "until" }
 ,{ "the" }
 ,{ "Optional" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "slot" }
 ,{ "number." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "valid" }
 ,{ "slot" }
 ,{ "numbers" }
 ,{ "are" }
 ,{ "[0,max_slot]" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "try_take()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "slot," }
 ,{ "if" }
 ,{ "any." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "object," }
 ,{ "the" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "take()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "slot." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "object," }
 ,{ "it" }
 ,{ "is" }
 ,{ "created" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "may" }
 ,{ "be" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Make" }
 ,{ "sure," }
 ,{ "you" }
 ,{ "always" }
 ,{ "use" }
 ,{ "the" }
 ,{ "same" }
 ,{ "type" }
 ,{ "for" }
 ,{ "the" }
 ,{ "same" }
 ,{ "slot." }
 ,{ "It" }
 ,{ "is" }
 ,{ "better" }
 ,{ "to" }
 ,{ "hide" }
 ,{ "the" }
 ,{ "Optional" , & fmt_text_b }
 ,{ "object" }
 ,{ "behind" }
 ,{ "some" }
 ,{ "facade" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Internally," }
 ,{ "Optional" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "radix" }
 ,{ "tree." }
 ,{ "So" }
 ,{ "its" }
 ,{ "access" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "fast," }
 ,{ "but" }
 ,{ "not" }
 ,{ "extremely" }
 ,{ "fast." }
} , & fmt_text , & align_text } ;

Page page = { "page_Optional" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_OwnPtr {

Text b0 = { {
 { "OwnPtr" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/OwnPtr.h" , & fmt_text_Files_b }
 ,{ "CCore/src/OwnPtr.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "OwnPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "smart" }
 ,{ "pointer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "exclusive" }
 ,{ "ownership" }
 ,{ "semantic." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "OwnPtr" , & fmt_text_b }
 ,{ "has" }
 ,{ "only" }
 ,{ "one" }
 ,{ "data" }
 ,{ "member" }
 ,{ "â€”" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "pointer" }
 ,{ "may" }
 ,{ "be" }
 ,{ "null." }
 ,{ "OwnPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable" }
 ,{ "(but" }
 ,{ "has" }
 ,{ "the" }
 ,{ "move" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "assign" }
 ,{ "operator)" }
 ,{ "and" }
 ,{ "its" }
 ,{ "destructor" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "pointed" }
 ,{ "object" }
 ,{ "using" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "algorithm" }
 ,{ "Algo::Destroy()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "comes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "argument." }
 ,{ "Using" }
 ,{ "OwnPtr" , & fmt_text_b }
 ,{ "make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "\"destroyable\"." }
 ,{ "By" }
 ,{ "default," }
 ,{ "Algo::Destroy(ptr)" , & fmt_text_b }
 ,{ "is" }
 ,{ "just" }
 ,{ "delete" , & fmt_text_b }
 ,{ "ptr;" , & fmt_text_b }
 ,{ "," }
 ,{ "so" }
 ,{ "the" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "created" }
 ,{ "by" }
 ,{ "the" }
 ,{ "new" , & fmt_text_b }
 ,{ "expression" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "OwnPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "OwnPtr" , & fmt_text_b }
 ,{ "implements" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "also" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Two" }
 ,{ "additional" }
 ,{ "\"unsafe\"" }
 ,{ "methods" }
 ,{ "set()" , & fmt_text_b }
 ,{ "and" }
 ,{ "detach()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "manipulate" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "set()" , & fmt_text_b }
 ,{ "setup" }
 ,{ "a" }
 ,{ "new" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "one." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "plus" }
 ,{ "the" }
 ,{ "following" }
 ,{ "constructor" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "detach()" , & fmt_text_b }
 ,{ "setup" }
 ,{ "a" }
 ,{ "new" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Using" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "Algo" , & fmt_text_b }
 ,{ "you" }
 ,{ "may" }
 ,{ "customize" }
 ,{ "the" }
 ,{ "destruction" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "typical" }
 ,{ "usage" }
 ,{ "of" }
 ,{ "the" }
 ,{ "OwnPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "life-time" }
 ,{ "duration." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "object" }
 ,{ "will" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "when" }
 ,{ "the" }
 ,{ "scope" }
 ,{ "is" }
 ,{ "exited" }
 ,{ "by" }
 ,{ "any" }
 ,{ "way." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "creation" }
 ,{ "a" }
 ,{ "local" }
 ,{ "variable" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "C" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "sizeof" , & fmt_text_b }
 ,{ "(C)" , & fmt_text_b }
 ,{ "is" }
 ,{ "too" }
 ,{ "large." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "return" }
 ,{ "an" }
 ,{ "OwnPtr" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "function" }
 ,{ "(this" }
 ,{ "is" }
 ,{ "impossible" }
 ,{ "with" }
 ,{ "a" }
 ,{ "local" }
 ,{ "variable):" }
} , & fmt_text , & align_text } ;

Page page = { "page_OwnPtr" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Packet {

Text b0 = { {
 { "Packet" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Packet.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Packet.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Packets" }
 ,{ "is" }
 ,{ "an" }
 ,{ "infra-structure" }
 ,{ "for" }
 ,{ "efficient," }
 ,{ "flexible," }
 ,{ "parallel" }
 ,{ "mass" }
 ,{ "request" }
 ,{ "processing." }
 ,{ "In" }
 ,{ "this" }
 ,{ "infra-structure" }
 ,{ "processing" }
 ,{ "nodes," }
 ,{ "also" }
 ,{ "called" }
 ,{ "devices," }
 ,{ "are" }
 ,{ "exchanging" }
 ,{ "packets." }
 ,{ "Packet" }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "request." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "small" }
 ,{ "stack" }
 ,{ "for" }
 ,{ "request" }
 ,{ "parameters" }
 ,{ "and" }
 ,{ "return" }
 ,{ "value" }
 ,{ "and" }
 ,{ "typically" }
 ,{ "has" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "transfer" }
 ,{ "a" }
 ,{ "bulk" }
 ,{ "of" }
 ,{ "data." }
 ,{ "Packet" }
 ,{ "may" }
 ,{ "be" }
 ,{ "canceled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "originator." }
 ,{ "Each" }
 ,{ "packet" }
 ,{ "device" }
 ,{ "has" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "entry" }
 ,{ "gate," }
 ,{ "through" }
 ,{ "which" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "coming" }
 ,{ "for" }
 ,{ "a" }
 ,{ "processing." }
 ,{ "During" }
 ,{ "processing" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "can" }
 ,{ "be" }
 ,{ "stored," }
 ,{ "transferred" }
 ,{ "to" }
 ,{ "another" }
 ,{ "packet" }
 ,{ "device" }
 ,{ "or" }
 ,{ "completed." }
 ,{ "Eventually" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "and" }
 ,{ "during" }
 ,{ "completion" }
 ,{ "returned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "pool," }
 ,{ "from" }
 ,{ "which" }
 ,{ "it" }
 ,{ "was" }
 ,{ "borrowed." }
 ,{ "Packet" }
 ,{ "cancellation" }
 ,{ "is" }
 ,{ "a" }
 ,{ "mean" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "originator" }
 ,{ "can" }
 ,{ "use" }
 ,{ "to" }
 ,{ "ask" }
 ,{ "a" }
 ,{ "current" }
 ,{ "packet" }
 ,{ "device" }
 ,{ "to" }
 ,{ "cancel" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processing." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "packet" }
 ,{ "should" }
 ,{ "be" }
 ,{ "quickly" }
 ,{ "disengaged" }
 ,{ "from" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "and" }
 ,{ "completed." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Packet" , & fmt_text_Alert }
 ,{ "functions," , & fmt_text_Alert }
 ,{ "complete" , & fmt_text_Alert }
 ,{ "or" , & fmt_text_Alert }
 ,{ "cancel," , & fmt_text_Alert }
 ,{ "must" , & fmt_text_Alert }
 ,{ "be" , & fmt_text_Alert }
 ,{ "called" , & fmt_text_Alert }
 ,{ "in" , & fmt_text_Alert }
 ,{ "a" , & fmt_text_Alert }
 ,{ "lock-free" , & fmt_text_Alert }
 ,{ "context" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "software" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "required" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "packets." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Types," }
 ,{ "constants" }
 ,{ "and" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "TimeStamp" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "type" }
 ,{ "of" }
 ,{ "time-stamp" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "PacketFunction" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "function" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "MaxPacketExtLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "space" }
 ,{ "for" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "stack." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "MaxPacketCompleteFunctions" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "complete" }
 ,{ "function" }
 ,{ "stack" }
 ,{ "depth." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "DefaultPacketMaxDataLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "PacketCancelState" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "cancel" }
 ,{ "state" }
 ,{ "constants." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "LenStatus" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "length" }
 ,{ "status." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "LenSub()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "length" }
 ,{ "subtraction." }
 ,{ "It" }
 ,{ "is" }
 ,{ "expected," }
 ,{ "that" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "positive." }
 ,{ "Otherwise," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "GuardLenSubTooShort()" , & fmt_text_b }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception." }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "function" }
 ,{ "name" }
 ,{ "in" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "message." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "GetPacketHeader()" , & fmt_text_b }
 ,{ "casts" }
 ,{ "a" }
 ,{ "\"packet\"" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "DropPacketExt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "packet" }
 ,{ "completion" }
 ,{ "function." }
 ,{ "Use" }
 ,{ "it" }
 ,{ "when" }
 ,{ "you" }
 ,{ "need" }
 ,{ "only" }
 ,{ "to" }
 ,{ "pop" }
 ,{ "some" }
 ,{ "packet" }
 ,{ "extension." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Concept" }
 ,{ "PacketType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "all" }
 ,{ "advanced" }
 ,{ "packet" }
 ,{ "header" }
 ,{ "pointers." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "PacketBuf" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "The" }
 ,{ "class" }
 ,{ "PacketBuf" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "buffer." }
 ,{ "This" }
 ,{ "class" }
 ,{ "keeps" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "alone" }
 ,{ "with" }
 ,{ "its" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "data" }
 ,{ "length," }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer." }
 ,{ "From" }
 ,{ "the" }
 ,{ "PacketBuf" , & fmt_text_b }
 ,{ "perspective" }
 ,{ "data" }
 ,{ "is" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "data," }
 ,{ "i.e." }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "data" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Another" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "capacity." }
 ,{ "The" }
 ,{ "data_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "zero." }
 ,{ "Exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Destructor" }
 ,{ "releases" }
 ,{ "the" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "PacketBuf" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "provide()" , & fmt_text_b }
 ,{ "ensures" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "has" }
 ,{ "the" }
 ,{ "given" }
 ,{ "capacity." }
 ,{ "It" }
 ,{ "also" }
 ,{ "clears" }
 ,{ "data_len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "a" }
 ,{ "greater" }
 ,{ "capacity" }
 ,{ "was" }
 ,{ "already" }
 ,{ "allocated," }
 ,{ "the" }
 ,{ "extra" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "heap." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "detach()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "noSpace()" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "getMaxRawLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "capacity" }
 ,{ "in" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "getRawLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "data" }
 ,{ "length" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "setRawLen()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "data" }
 ,{ "length," }
 ,{ "the" }
 ,{ "value" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "capacity," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "getRaw()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "\"place\"" }
 ,{ "of" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "value" }
 ,{ "to" }
 ,{ "put" }
 ,{ "data" }
 ,{ "to" }
 ,{ "the" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "PacketHeader" }
} , & fmt_h4 , & align_h4 } ;

Text b31 = { {
 { "Packet" }
 ,{ "itself" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "header," }
 ,{ "which" }
 ,{ "is" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "behind" }
 ,{ "the" }
 ,{ "header." }
 ,{ "All" }
 ,{ "of" }
 ,{ "this" }
 ,{ "is" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "of" }
 ,{ "some" }
 ,{ "predefined" }
 ,{ "length." }
 ,{ "Packet" }
 ,{ "extension" }
 ,{ "is" }
 ,{ "organized" }
 ,{ "as" }
 ,{ "a" }
 ,{ "stack" }
 ,{ "of" }
 ,{ "any" }
 ,{ "type" }
 ,{ "objects." }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "contains" }
 ,{ "another" }
 ,{ "stack" }
 ,{ "of" }
 ,{ "completion" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "PacketHeader" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "inner" }
 ,{ "data" }
 ,{ "fields." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "an" }
 ,{ "extension." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Normally" }
 ,{ "you" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "the" }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "constructor," }
 ,{ "because" }
 ,{ "you" }
 ,{ "get" }
 ,{ "a" }
 ,{ "ready-to-use" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "pool." }
 ,{ "This" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "clean" }
 ,{ "packet" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "completion" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "destructor" }
 ,{ "is" }
 ,{ "not" }
 ,{ "trivial:" }
 ,{ "it" }
 ,{ "calls" }
 ,{ "a" }
 ,{ "destructor" }
 ,{ "of" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "PacketBuf" , & fmt_text_b }
 ,{ "." }
 ,{ "And" }
 ,{ "again," }
 ,{ "you" }
 ,{ "don't" }
 ,{ "use" }
 ,{ "it" }
 ,{ "directly," }
 ,{ "because" }
 ,{ "once" }
 ,{ "you" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "a" }
 ,{ "packet," }
 ,{ "you" }
 ,{ "call" }
 ,{ "its" }
 ,{ "complete" }
 ,{ "method" }
 ,{ "and" }
 ,{ "packet" }
 ,{ "returns" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "pool," }
 ,{ "where" }
 ,{ "it" }
 ,{ "was" }
 ,{ "originally" }
 ,{ "taken." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "recycle()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "for" }
 ,{ "reuse." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "have" }
 ,{ "empty" }
 ,{ "extension," }
 ,{ "complete" }
 ,{ "stack" }
 ,{ "and" }
 ,{ "no" }
 ,{ "cancel" }
 ,{ "function," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "AllocLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "Packet" }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "complete" }
 ,{ "function" }
 ,{ "stack." }
 ,{ "Once" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "the" }
 ,{ "method" }
 ,{ "complete()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "to" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "packet." }
 ,{ "A" }
 ,{ "packet" }
 ,{ "originator" }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "complete" }
 ,{ "function," }
 ,{ "when" }
 ,{ "preparing" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "for" }
 ,{ "a" }
 ,{ "processing." }
 ,{ "When" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "taken" }
 ,{ "from" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "pool," }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "one" }
 ,{ "complete" }
 ,{ "function" }
 ,{ "in" }
 ,{ "the" }
 ,{ "stack," }
 ,{ "which" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pool." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "pushCompleteFunction()" , & fmt_text_b }
 ,{ "pushes" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "function" }
 ,{ "to" }
 ,{ "the" }
 ,{ "complete" }
 ,{ "function" }
 ,{ "stack." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "popCompleteFunction()" , & fmt_text_b }
 ,{ "pops" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "function" }
 ,{ "from" }
 ,{ "the" }
 ,{ "complete" }
 ,{ "function" }
 ,{ "stack." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "complete()" , & fmt_text_b }
 ,{ "pops" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "function" }
 ,{ "from" }
 ,{ "the" }
 ,{ "complete" }
 ,{ "function" }
 ,{ "stack" }
 ,{ "and" }
 ,{ "applies" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "stack" }
 ,{ "overflow" }
 ,{ "or" }
 ,{ "underflow" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Packet" }
 ,{ "has" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "state." }
 ,{ "The" }
 ,{ "state" }
 ,{ "has" }
 ,{ "one" }
 ,{ "of" }
 ,{ "three" }
 ,{ "values:" }
 ,{ "Packet_NoCancelFunction" , & fmt_text_b }
 ,{ "," }
 ,{ "Packet_HasCancelFunction" , & fmt_text_b }
 ,{ "," }
 ,{ "Packet_Cancelled" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "setCancelFunction()" , & fmt_text_b }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "with" }
 ,{ "an" }
 ,{ "optional" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "not" }
 ,{ "have" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "assigned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "already" }
 ,{ "canceled," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "and" }
 ,{ "changes" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "state" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Packet_HasCancelFunction" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "state" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "clearCancelFunction()" , & fmt_text_b }
 ,{ "clears" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "Packet_HasCancelFunction" , & fmt_text_b }
 ,{ "or" }
 ,{ "Packet_Cancelled" , & fmt_text_b }
 ,{ "state." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "already" }
 ,{ "canceled," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "clears" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "and" }
 ,{ "changes" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "state" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Packet_NoCancelFunction" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "state" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "These" }
 ,{ "two" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "called" }
 ,{ "by" }
 ,{ "packet" }
 ,{ "processors." }
 ,{ "Once" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "received" }
 ,{ "for" }
 ,{ "processing," }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processor" }
 ,{ "may" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "to" }
 ,{ "it," }
 ,{ "if" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "not" }
 ,{ "immediate." }
 ,{ "Before" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "disengaged," }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "must" }
 ,{ "be" }
 ,{ "cleared." }
 ,{ "To" }
 ,{ "learn" }
 ,{ "how" }
 ,{ "to" }
 ,{ "properly" }
 ,{ "use" }
 ,{ "this" }
 ,{ "feature," }
 ,{ "see" }
 ,{ "the" }
 ,{ "CancelPacketList" , & fmt_text_a }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "getCancelFunction()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "the" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "state" }
 ,{ "is" }
 ,{ "changed" }
 ,{ "to" }
 ,{ "Packet_Cancelled" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "previous" }
 ,{ "state" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "and" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "if" }
 ,{ "has" }
 ,{ "been" }
 ,{ "set." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "originator" }
 ,{ "to" }
 ,{ "cancel" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "processing." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "has" }
 ,{ "an" }
 ,{ "assigned" }
 ,{ "cancel" }
 ,{ "function," }
 ,{ "then" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "to" }
 ,{ "request" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "cancellation." }
 ,{ "The" }
 ,{ "cancel" }
 ,{ "function," }
 ,{ "if" }
 ,{ "exists," }
 ,{ "completes" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "getCancelArg()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "PacketHeader" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "time-stamp" }
 ,{ "field." }
 ,{ "The" }
 ,{ "seconds" }
 ,{ "timer" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "time-stamping." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "getStamp()" , & fmt_text_b }
 ,{ "return" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "time-stamp." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "isOld()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "old" }
 ,{ "enough." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "current" }
 ,{ "time" }
 ,{ "and" }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "life-time." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "stamp()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "current" }
 ,{ "time" }
 ,{ "as" }
 ,{ "a" }
 ,{ "time-stamp." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "The" }
 ,{ "next" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "to" }
 ,{ "\"extend\"" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "pushExt()" , & fmt_text_b }
 ,{ "pushs" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "extension" }
 ,{ "stack." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "arguments." }
 ,{ "Pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "constructed" }
 ,{ "object" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "enough" }
 ,{ "room" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object," }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "getExt()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "of" }
 ,{ "the" }
 ,{ "extension" }
 ,{ "stack." }
 ,{ "You" }
 ,{ "must" }
 ,{ "known" }
 ,{ "exactly," }
 ,{ "that" }
 ,{ "the" }
 ,{ "object" }
 ,{ "exists" }
 ,{ "and" }
 ,{ "has" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "getDeepExt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used," }
 ,{ "if" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "look" }
 ,{ "deeper" }
 ,{ "into" }
 ,{ "the" }
 ,{ "extension" }
 ,{ "stack." }
 ,{ "If" }
 ,{ "the" }
 ,{ "stack" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "types" }
 ,{ "T," , & fmt_text_b }
 ,{ "T1," , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "Ttop" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "get" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "deep" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "popExt()" , & fmt_text_b }
 ,{ "pops" }
 ,{ "and" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "top" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "extension" }
 ,{ "stack." }
 ,{ "You" }
 ,{ "must" }
 ,{ "known" }
 ,{ "exactly," }
 ,{ "that" }
 ,{ "the" }
 ,{ "object" }
 ,{ "exists" }
 ,{ "and" }
 ,{ "has" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "PacketHeader" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "PacketBuf" , & fmt_text_b }
 ,{ "field" }
 ,{ "and" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "it." }
 ,{ "This" }
 ,{ "buffer" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "store" }
 ,{ "a" }
 ,{ "bulk" }
 ,{ "of" }
 ,{ "data" }
 ,{ "with" }
 ,{ "a" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "PacketBuf" , & fmt_text_b }
 ,{ "methods." }
 ,{ "Last" }
 ,{ "three" }
 ,{ "methods" }
 ,{ "move" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer." }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "allowed" }
 ,{ "if" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "list." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "The" }
 ,{ "last" }
 ,{ "method" }
 ,{ "moves" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "another" }
 ,{ "packet." }
 ,{ "This" }
 ,{ "packet" }
 ,{ "also" }
 ,{ "must" }
 ,{ "not" }
 ,{ "belong" }
 ,{ "to" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "Raw" }
 ,{ "data" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "PacketBuf" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "PacketList" }
} , & fmt_h4 , & align_h4 } ;

Text b61 = { {
 { "PacketHeader" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "list" }
 ,{ "link" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "inserted" }
 ,{ "into" }
 ,{ "a" }
 ,{ "PacketList" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "possible" }
 ,{ "to" }
 ,{ "have" }
 ,{ "a" }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "in" }
 ,{ "two" }
 ,{ "lists." }
 ,{ "If" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "a" }
 ,{ "list," }
 ,{ "it" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "also." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "PacketList" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "empty" }
 ,{ "before" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "is" }
 ,{ "called," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "PacketList" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "packets" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "getTotalLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "total" }
 ,{ "buffer" }
 ,{ "space" }
 ,{ "of" }
 ,{ "packets" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "put()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list." }
 ,{ "Packet" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "in" }
 ,{ "a" }
 ,{ "list," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "put_first()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "the" }
 ,{ "list" }
 ,{ "as" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element." }
 ,{ "Packet" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "in" }
 ,{ "a" }
 ,{ "list," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "get()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "first" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "If" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "get_last()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "the" }
 ,{ "last" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "If" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "del()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "form" }
 ,{ "the" }
 ,{ "list." }
 ,{ "Packet" }
 ,{ "must" }
 ,{ "belong" }
 ,{ "to" }
 ,{ "this" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "complete()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "list." }
 ,{ "List" }
 ,{ "becomes" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "moveOld()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "all" }
 ,{ "packets," }
 ,{ "older" }
 ,{ "than" }
 ,{ "how_old" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "destination" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "PacketList" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "Packet" }
} , & fmt_h4 , & align_h4 } ;

Text b75 = { {
 { "The" }
 ,{ "class" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "pointer" }
 ,{ "wrapper." }
 ,{ "It" }
 ,{ "behaves" }
 ,{ "like" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "pointer," }
 ,{ "so" }
 ,{ "use" }
 ,{ "it" }
 ,{ "with" }
 ,{ "caution." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "Packet" , & fmt_text_b }
 ,{ "template" }
 ,{ "parameters" }
 ,{ "are:" }
 ,{ "the" }
 ,{ "assumed" }
 ,{ "type" }
 ,{ "of" }
 ,{ "data" }
 ,{ "in" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type." }
 ,{ "Usually," }
 ,{ "it" }
 ,{ "is" }
 ,{ "char" , & fmt_text_b }
 ,{ "or" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "." }
 ,{ "Other" }
 ,{ "parameters" }
 ,{ "are" }
 ,{ "types" }
 ,{ "of" }
 ,{ "top" }
 ,{ "extension" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "Packet" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "implicitly" }
 ,{ "constructed" }
 ,{ "from" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "pointer." }
 ,{ "Make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "either" }
 ,{ "null," }
 ,{ "or" }
 ,{ "points" }
 ,{ "to" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "with" }
 ,{ "required" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "Usual" }
 ,{ "\"is" }
 ,{ "null\"," }
 ,{ "\"not" }
 ,{ "null\"" }
 ,{ "and" }
 ,{ "object" }
 ,{ "access" }
 ,{ "operations." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "GetPacketHeader()" , & fmt_text_b }
 ,{ "function" }
 ,{ "to" }
 ,{ "convert" }
 ,{ "a" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "PacketHeader" , & fmt_text_b }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "Complete" }
 ,{ "function" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "The" }
 ,{ "method" }
 ,{ "complete()" , & fmt_text_b }
 ,{ "not" }
 ,{ "only" }
 ,{ "completes" }
 ,{ "the" }
 ,{ "packet," }
 ,{ "but" }
 ,{ "also" }
 ,{ "nullifies" }
 ,{ "it." }
 ,{ "After" }
 ,{ "this" }
 ,{ "method" }
 ,{ "call" }
 ,{ "the" }
 ,{ "object" }
 ,{ "becomes" }
 ,{ "null." }
 ,{ "Remember," }
 ,{ "once" }
 ,{ "you" }
 ,{ "called" }
 ,{ "the" }
 ,{ "method" }
 ,{ "complete," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "no" }
 ,{ "longer" }
 ,{ "available" }
 ,{ "for" }
 ,{ "you." }
 ,{ "That" }
 ,{ "is" }
 ,{ "why" }
 ,{ "we" }
 ,{ "nullify" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "in" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "cancellation" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "time-stamp" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b83 = { {
 { "Packet" }
 ,{ "extension" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "pushExt()" , & fmt_text_b }
 ,{ "pushs" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "stack." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "changes," }
 ,{ "so" }
 ,{ "this" }
 ,{ "method" }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "current" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "new" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b85 = { {
 { "getExt()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "top" }
 ,{ "extension" }
 ,{ "object." }
 ,{ "The" }
 ,{ "type" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "popExt()" , & fmt_text_b }
 ,{ "pops" }
 ,{ "an" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "stack." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "changes," }
 ,{ "so" }
 ,{ "this" }
 ,{ "method" }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "current" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "new" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "getDeepExt()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "a" }
 ,{ "deep" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension." }
 ,{ "The" }
 ,{ "type" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "forgetExt()" , & fmt_text_b }
 ,{ "\"forgets\"" }
 ,{ "some" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "object" }
 ,{ "types." }
 ,{ "This" }
 ,{ "method" }
 ,{ "nullifies" }
 ,{ "the" }
 ,{ "current" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "new" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b89 = { {
 { "Packet" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "methods." }
 ,{ "The" }
 ,{ "method" }
 ,{ "provide()" , & fmt_text_b }
 ,{ "takes" }
 ,{ "the" }
 ,{ "data" }
 ,{ "length" }
 ,{ "in" }
 ,{ "POD" }
 ,{ "units," }
 ,{ "not" }
 ,{ "in" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b90 = { {
 { "Packet" }
 ,{ "data" }
 ,{ "methods." }
 ,{ "All" }
 ,{ "length" }
 ,{ "here" }
 ,{ "are" }
 ,{ "in" }
 ,{ "POD" }
 ,{ "units." }
} , & fmt_text , & align_text } ;

Text b91 = { {
 { "checkDataLen()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "the" }
 ,{ "data_len" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "ULenSat" , & fmt_text_a }
 ,{ "type" }
 ,{ "to" }
 ,{ "fit" }
 ,{ "into" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b92 = { {
 { "setDataLen()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "data" }
 ,{ "length" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "data" }
 ,{ "range." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "the" }
 ,{ "data_len" , & fmt_text_b }
 ,{ "fits" }
 ,{ "into" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "capacity." }
} , & fmt_text , & align_text } ;

Text b93 = { {
 { "The" }
 ,{ "set" }
 ,{ "of" }
 ,{ "data" }
 ,{ "methods" }
 ,{ "with" }
 ,{ "PacketFormat" , & fmt_text_b }
 ,{ "." }
 ,{ "See" }
 ,{ "below" }
 ,{ "more" }
 ,{ "explanations" }
 ,{ "about" }
 ,{ "packet" }
 ,{ "formats." }
} , & fmt_text , & align_text } ;

Text b94 = { {
 { "getMaxDataLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b95 = { {
 { "getDataLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b96 = { {
 { "getMaxRange()" , & fmt_text_b }
 ,{ "return" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "working" }
 ,{ "data" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b97 = { {
 { "checkRange()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "data" }
 ,{ "length" }
 ,{ "fits" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b98 = { {
 { "getRange()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "working" }
 ,{ "data" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b99 = { {
 { "getPrefix()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "data" }
 ,{ "prefix" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b100 = { {
 { "getSuffix()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "data" }
 ,{ "suffix" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b101 = { {
 { "checkDataLen()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b102 = { {
 { "setDataLen()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "working" }
 ,{ "data" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b103 = { {
} , & fmt_text , & align_text } ;

Text b104 = { {
 { "PacketCanceller" }
} , & fmt_h4 , & align_h4 } ;

Text b105 = { {
 { "PacketCanceller" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class." }
 ,{ "It" }
 ,{ "simplifies" }
 ,{ "the" }
 ,{ "process" }
 ,{ "of" }
 ,{ "packet" }
 ,{ "cancellation." }
} , & fmt_text , & align_text } ;

Text b106 = { {
 { "Constructor" }
 ,{ "records" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b107 = { {
 { "getCancelFunction()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "the" }
 ,{ "recorded" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "true," }
 ,{ "if" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "has" }
 ,{ "been" }
 ,{ "retrieved." }
} , & fmt_text , & align_text } ;

Text b108 = { {
 { "cancel()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "the" }
 ,{ "cancel" }
 ,{ "function." }
 ,{ "Use" }
 ,{ "must" }
 ,{ "call" }
 ,{ "it," }
 ,{ "if" }
 ,{ "the" }
 ,{ "getCancelFunction()" , & fmt_text_b }
 ,{ "returned" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b109 = { {
 { "The" }
 ,{ "process" }
 ,{ "has" }
 ,{ "two" }
 ,{ "phases," }
 ,{ "because" }
 ,{ "the" }
 ,{ "first" }
 ,{ "call" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context," }
 ,{ "but" }
 ,{ "a" }
 ,{ "cancel" }
 ,{ "function" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "a" }
 ,{ "lock-free" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Link link_PacketFormat = { & page , { 110 } } ;

Text b110 = { {
 { "PacketFormat" }
} , & fmt_h4 , & align_h4 } ;

Text b111 = { {
 { "Packet" }
 ,{ "format" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "three" }
 ,{ "values:" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "length," }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length." }
 ,{ "It" }
 ,{ "is" }
 ,{ "often" }
 ,{ "required" }
 ,{ "to" }
 ,{ "reserve" }
 ,{ "some" }
 ,{ "prefix" }
 ,{ "and" }
 ,{ "suffix" }
 ,{ "in" }
 ,{ "the" }
 ,{ "data" }
 ,{ "range" }
 ,{ "for" }
 ,{ "a" }
 ,{ "further" }
 ,{ "processing." }
 ,{ "Fox" }
 ,{ "example," }
 ,{ "when" }
 ,{ "you" }
 ,{ "prepare" }
 ,{ "UDP" }
 ,{ "packet," }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "for" }
 ,{ "UDP" }
 ,{ "header," }
 ,{ "IP" }
 ,{ "header" }
 ,{ "and" }
 ,{ "Ethernet" }
 ,{ "header" }
 ,{ "is" }
 ,{ "reserved." }
 ,{ "These" }
 ,{ "parts" }
 ,{ "are" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "next-layer" }
 ,{ "packet" }
 ,{ "devices." }
 ,{ "You" }
 ,{ "put" }
 ,{ "data" }
 ,{ "into" }
 ,{ "the" }
 ,{ "working" }
 ,{ "subrange" }
 ,{ "after" }
 ,{ "this" }
 ,{ "prefix." }
} , & fmt_text , & align_text } ;

Text b112 = { {
 { "PacketFormat" , & fmt_text_b }
 ,{ "represents" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "and" }
 ,{ "has" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "manipulate" }
 ,{ "with" }
 ,{ "lengths" }
 ,{ "and" }
 ,{ "data" }
 ,{ "ranges." }
} , & fmt_text , & align_text } ;

Text b113 = { {
 { "getMaxTotalLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "total" }
 ,{ "data" }
 ,{ "length." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "sum" }
 ,{ "of" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "length," }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b114 = { {
 { "addPrefix()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "new" }
 ,{ "PacketFormat" , & fmt_text_b }
 ,{ "with" }
 ,{ "increased" }
 ,{ "prefix," }
 ,{ "max_data" , & fmt_text_b }
 ,{ "is" }
 ,{ "decreased." }
 ,{ "Exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "space." }
} , & fmt_text , & align_text } ;

Text b115 = { {
 { "addSuffix()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "new" }
 ,{ "PacketFormat" , & fmt_text_b }
 ,{ "with" }
 ,{ "increased" }
 ,{ "suffix," }
 ,{ "max_data" , & fmt_text_b }
 ,{ "is" }
 ,{ "decreased." }
 ,{ "Exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "space." }
} , & fmt_text , & align_text } ;

Text b116 = { {
 { "addPrefixSuffix()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "new" }
 ,{ "PacketFormat" , & fmt_text_b }
 ,{ "with" }
 ,{ "increased" }
 ,{ "prefix" }
 ,{ "and" }
 ,{ "suffix," }
 ,{ "max_data" , & fmt_text_b }
 ,{ "is" }
 ,{ "decreased." }
 ,{ "Exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "space." }
} , & fmt_text , & align_text } ;

Text b117 = { {
 { "add()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "range" }
 ,{ "length" }
 ,{ "from" }
 ,{ "the" }
 ,{ "working" }
 ,{ "range" }
 ,{ "length." }
 ,{ "No" }
 ,{ "checks" }
 ,{ "are" }
 ,{ "performed." }
} , & fmt_text , & align_text } ;

Text b118 = { {
 { "sub()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "inverse" }
 ,{ "operation:" }
 ,{ "it" }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "working" }
 ,{ "range" }
 ,{ "length" }
 ,{ "from" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "range" }
 ,{ "length." }
 ,{ "But" }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "checked" }
 ,{ "operation," }
 ,{ "so" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "data" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "len" , & fmt_text_b }
 ,{ "and" }
 ,{ "status" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "total_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "too" }
 ,{ "short," }
 ,{ "the" }
 ,{ "status" , & fmt_text_b }
 ,{ "is" }
 ,{ "Len_too_short" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "zero." }
 ,{ "If" }
 ,{ "the" }
 ,{ "total_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "too" }
 ,{ "large," }
 ,{ "the" }
 ,{ "status" , & fmt_text_b }
 ,{ "is" }
 ,{ "Len_too_long" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "max_data" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise" }
 ,{ "status" , & fmt_text_b }
 ,{ "is" }
 ,{ "Len_ok" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "working" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b119 = { {
 { "checkLen()" , & fmt_text_b }
 ,{ "checks," }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "working" }
 ,{ "data" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "length" }
 ,{ "is" }
 ,{ "limited" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "limit." }
} , & fmt_text , & align_text } ;

Text b120 = { {
 { "check()" , & fmt_text_b }
 ,{ "checks," }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "total" }
 ,{ "data" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b121 = { {
 { "cut()" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "working" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b122 = { {
 { "cutPrefix()" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "from" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b123 = { {
 { "cutSuffix()" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "from" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b124 = { {
 { "cutMax()" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "working" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "total" }
 ,{ "data" }
 ,{ "range." }
 ,{ "This" }
 ,{ "method" }
 ,{ "doesn't" }
 ,{ "assume" }
 ,{ "the" }
 ,{ "total" }
 ,{ "range" }
 ,{ "has" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "length." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "range" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "range" }
 ,{ "and" }
 ,{ "status" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "length" }
 ,{ "status." }
 ,{ "If" }
 ,{ "the" }
 ,{ "input" }
 ,{ "range" }
 ,{ "is" }
 ,{ "too" }
 ,{ "short," }
 ,{ "the" }
 ,{ "status" }
 ,{ "is" }
 ,{ "Len_too_short" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "range" , & fmt_text_b }
 ,{ "is" }
 ,{ "empty." }
 ,{ "If" }
 ,{ "the" }
 ,{ "input" }
 ,{ "range" }
 ,{ "has" }
 ,{ "a" }
 ,{ "good" }
 ,{ "length," }
 ,{ "the" }
 ,{ "status" }
 ,{ "is" }
 ,{ "Len_ok" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "range" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "working" }
 ,{ "range." }
 ,{ "Finally," }
 ,{ "if" }
 ,{ "the" }
 ,{ "input" }
 ,{ "range" }
 ,{ "is" }
 ,{ "too" }
 ,{ "long," }
 ,{ "the" }
 ,{ "status" }
 ,{ "is" }
 ,{ "Len_too_long" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "range" , & fmt_text_b }
 ,{ "has" }
 ,{ "max_data" , & fmt_text_b }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b125 = { {
 { "Working" }
 ,{ "with" }
 ,{ "packets" }
} , & fmt_h3 , & align_h3 } ;

Text b126 = { {
 { "Assume," }
 ,{ "we" }
 ,{ "have" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "device," }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b127 = { {
 { "To" }
 ,{ "use" }
 ,{ "this" }
 ,{ "device" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "must" }
 ,{ "be" }
 ,{ "acquired." }
 ,{ "You" }
 ,{ "may" }
 ,{ "simply" }
 ,{ "borrow" }
 ,{ "it" }
 ,{ "from" }
 ,{ "the" }
 ,{ "default" }
 ,{ "packet" }
 ,{ "pool:" }
} , & fmt_text , & align_text } ;

Text b128 = { {
 { "If" }
 ,{ "the" }
 ,{ "pool" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "the" }
 ,{ "call" }
 ,{ "is" }
 ,{ "blocked" }
 ,{ "until" }
 ,{ "some" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "This" }
 ,{ "is" }
 ,{ "different," }
 ,{ "than" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "behavior." }
 ,{ "We" }
 ,{ "assume," }
 ,{ "that" }
 ,{ "packets" }
 ,{ "will" }
 ,{ "be" }
 ,{ "eventually" }
 ,{ "completed" }
 ,{ "and" }
 ,{ "return" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pool." }
 ,{ "So" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "available" }
 ,{ "packets," }
 ,{ "processing" }
 ,{ "will" }
 ,{ "be" }
 ,{ "delayed." }
} , & fmt_text , & align_text } ;

Text b129 = { {
 { "Or" }
 ,{ "(preferred)," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b130 = { {
 { "Packet" }
 ,{ "set" }
 ,{ "takes" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "same" }
 ,{ "pool," }
 ,{ "but" }
 ,{ "it" }
 ,{ "limits" }
 ,{ "the" }
 ,{ "number." }
 ,{ "It" }
 ,{ "also" }
 ,{ "tracks" }
 ,{ "packets," }
 ,{ "so" }
 ,{ "you" }
 ,{ "may" }
 ,{ "also" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "all" }
 ,{ "packets," }
 ,{ "taken" }
 ,{ "from" }
 ,{ "this" }
 ,{ "set," }
 ,{ "are" }
 ,{ "completed," }
 ,{ "or" }
 ,{ "cancel" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b131 = { {
 { "Then" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "the" }
 ,{ "packet:" }
} , & fmt_text , & align_text } ;

Text b132 = { {
 { "You" }
 ,{ "should" }
 ,{ "push" }
 ,{ "the" }
 ,{ "required" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "and" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "data" }
 ,{ "buffer." }
 ,{ "You" }
 ,{ "also" }
 ,{ "have" }
 ,{ "to" }
 ,{ "push" }
 ,{ "a" }
 ,{ "complete" }
 ,{ "function." }
 ,{ "In" }
 ,{ "our" }
 ,{ "case" }
 ,{ "we" }
 ,{ "push" }
 ,{ "the" }
 ,{ "function" }
 ,{ "to" }
 ,{ "drop" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "packet" }
 ,{ "extension" }
 ,{ "we" }
 ,{ "have" }
 ,{ "pushed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b133 = { {
 { "When" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "ready," }
 ,{ "submit" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b134 = { {
 { "Now" }
 ,{ "the" }
 ,{ "device" }
 ,{ "owns" }
 ,{ "the" }
 ,{ "packet." }
 ,{ "When" }
 ,{ "it" }
 ,{ "finish" }
 ,{ "to" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "one," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "will" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "and" }
 ,{ "returned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "pool" }
 ,{ "(or" }
 ,{ "packet" }
 ,{ "set)." }
 ,{ "You" }
 ,{ "may" }
 ,{ "prepare" }
 ,{ "and" }
 ,{ "submit" }
 ,{ "several" }
 ,{ "packets." }
 ,{ "If" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "result," }
 ,{ "you" }
 ,{ "may" }
 ,{ "push" }
 ,{ "such" }
 ,{ "a" }
 ,{ "complete" }
 ,{ "function," }
 ,{ "which" }
 ,{ "examines" }
 ,{ "the" }
 ,{ "result." }
 ,{ "Let's" }
 ,{ "assume," }
 ,{ "the" }
 ,{ "device" }
 ,{ "above" }
 ,{ "returns" }
 ,{ "some" }
 ,{ "integer" }
 ,{ "code" }
 ,{ "in" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "extension." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "may" }
 ,{ "proceed" }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b135 = { {
 { "It" }
 ,{ "is" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "PacketSet" , & fmt_text_b }
 ,{ "class" }
 ,{ "as" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "source." }
 ,{ "To" }
 ,{ "learn" }
 ,{ "more" }
 ,{ "about" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "see" }
 ,{ "the" }
 ,{ "test3009.PacketSet.cpp" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Packet" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_text , outer_text , back_text }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_text , outer_text , back_text }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
 ,{ & b89 , null , inner_text , outer_text , back_text }
 ,{ & b90 , null , inner_text , outer_text , back_text }
 ,{ & b91 , null , inner_text , outer_text , back_text }
 ,{ & b92 , null , inner_text , outer_text , back_text }
 ,{ & b93 , null , inner_text , outer_text , back_text }
 ,{ & b94 , null , inner_text , outer_text , back_text }
 ,{ & b95 , null , inner_text , outer_text , back_text }
 ,{ & b96 , null , inner_text , outer_text , back_text }
 ,{ & b97 , null , inner_text , outer_text , back_text }
 ,{ & b98 , null , inner_text , outer_text , back_text }
 ,{ & b99 , null , inner_text , outer_text , back_text }
 ,{ & b100 , null , inner_text , outer_text , back_text }
 ,{ & b101 , null , inner_text , outer_text , back_text }
 ,{ & b102 , null , inner_text , outer_text , back_text }
 ,{ & b103 , null , inner_text , outer_text , back_text }
 ,{ & b104 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b105 , null , inner_text , outer_text , back_text }
 ,{ & b106 , null , inner_text , outer_text , back_text }
 ,{ & b107 , null , inner_text , outer_text , back_text }
 ,{ & b108 , null , inner_text , outer_text , back_text }
 ,{ & b109 , null , inner_text , outer_text , back_text }
 ,{ & b110 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b111 , null , inner_text , outer_text , back_text }
 ,{ & b112 , null , inner_text , outer_text , back_text }
 ,{ & b113 , null , inner_text , outer_text , back_text }
 ,{ & b114 , null , inner_text , outer_text , back_text }
 ,{ & b115 , null , inner_text , outer_text , back_text }
 ,{ & b116 , null , inner_text , outer_text , back_text }
 ,{ & b117 , null , inner_text , outer_text , back_text }
 ,{ & b118 , null , inner_text , outer_text , back_text }
 ,{ & b119 , null , inner_text , outer_text , back_text }
 ,{ & b120 , null , inner_text , outer_text , back_text }
 ,{ & b121 , null , inner_text , outer_text , back_text }
 ,{ & b122 , null , inner_text , outer_text , back_text }
 ,{ & b123 , null , inner_text , outer_text , back_text }
 ,{ & b124 , null , inner_text , outer_text , back_text }
 ,{ & b125 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b126 , null , inner_text , outer_text , back_text }
 ,{ & b127 , null , inner_text , outer_text , back_text }
 ,{ & b128 , null , inner_text , outer_text , back_text }
 ,{ & b129 , null , inner_text , outer_text , back_text }
 ,{ & b130 , null , inner_text , outer_text , back_text }
 ,{ & b131 , null , inner_text , outer_text , back_text }
 ,{ & b132 , null , inner_text , outer_text , back_text }
 ,{ & b133 , null , inner_text , outer_text , back_text }
 ,{ & b134 , null , inner_text , outer_text , back_text }
 ,{ & b135 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PacketEndpoint {

Text b0 = { {
 { "Packet" }
 ,{ "endpoint" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PacketEndpointDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PacketEndpointDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/XPoint.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/XPoint.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Packet" }
 ,{ "endpoints" }
 ,{ "are" }
 ,{ "a" }
 ,{ "base" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "networking." }
 ,{ "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "abstract" }
 ,{ "packet" }
 ,{ "endpoint" }
 ,{ "interface:" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "and" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "." }
 ,{ "All" }
 ,{ "network" }
 ,{ "code" }
 ,{ "is" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Net" , & fmt_text_b }
 ,{ "namespace." }
} , & fmt_text , & align_text } ;

Link link_PacketEndpointDevice = { & page , { 4 } } ;

Text b4 = { {
 { "PacketEndpointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "PacketEndpointDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"client-side\"" }
 ,{ "interface." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "logical" }
 ,{ "packet" }
 ,{ "communication" }
 ,{ "endpoint." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "point-to-point" }
 ,{ "communication" }
 ,{ "scenarios." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getOutboundFormat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "outbound" }
 ,{ "packet" }
 ,{ "format." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "outbound()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "outbound." }
 ,{ "When" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "complete," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "completed." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "error" }
 ,{ "signaling," }
 ,{ "because" }
 ,{ "the" }
 ,{ "communication" }
 ,{ "is" }
 ,{ "not" }
 ,{ "assumed" }
 ,{ "reliable." }
 ,{ "The" }
 ,{ "fact" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "processed" }
 ,{ "does" }
 ,{ "not" }
 ,{ "mean" }
 ,{ "the" }
 ,{ "data" }
 ,{ "are" }
 ,{ "received" }
 ,{ "or" }
 ,{ "will" }
 ,{ "be" }
 ,{ "received" }
 ,{ "by" }
 ,{ "the" }
 ,{ "communication" }
 ,{ "peer." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "getMaxInboundLen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "inbound" }
 ,{ "data" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Data" }
 ,{ "income" }
 ,{ "is" }
 ,{ "an" }
 ,{ "asynchronous" }
 ,{ "process." }
 ,{ "So" }
 ,{ "to" }
 ,{ "receive" }
 ,{ "incoming" }
 ,{ "packets" }
 ,{ "some" }
 ,{ "inbound" }
 ,{ "processor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "to" }
 ,{ "the" }
 ,{ "endpoint." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "attach()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "given" }
 ,{ "processor" }
 ,{ "to" }
 ,{ "the" }
 ,{ "endpoint." }
 ,{ "Only" }
 ,{ "one" }
 ,{ "processor" }
 ,{ "can" }
 ,{ "be" }
 ,{ "attached" }
 ,{ "at" }
 ,{ "any" }
 ,{ "time." }
 ,{ "Processor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "detached" }
 ,{ "before" }
 ,{ "endpoint" }
 ,{ "is" }
 ,{ "destroyed." }
 ,{ "Processor" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "in" }
 ,{ "an" }
 ,{ "unknown" }
 ,{ "task" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "detach()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "inbound" }
 ,{ "processor" }
 ,{ "from" }
 ,{ "the" }
 ,{ "endpoint." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "inbound()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "an" }
 ,{ "inbound" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "an" }
 ,{ "inbound" }
 ,{ "data," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "tick()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"network" }
 ,{ "tick\"." }
 ,{ "It" }
 ,{ "happens" }
 ,{ "10" }
 ,{ "times" }
 ,{ "per" }
 ,{ "second." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "a" }
 ,{ "protocol" }
 ,{ "timeout" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "InboundProc" , & fmt_text_b }
 ,{ "interface" }
 ,{ "may" }
 ,{ "have" }
 ,{ "the" }
 ,{ "optional" }
 ,{ "co-interface" }
 ,{ "ConnectionProc" , & fmt_text_b }
 ,{ "to" }
 ,{ "handle" }
 ,{ "disconnection" }
 ,{ "events." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "connection_lost()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "case" }
 ,{ "of" }
 ,{ "a" }
 ,{ "connection" }
 ,{ "lost" }
 ,{ "situation." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "connection_close()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "has" }
 ,{ "requested" }
 ,{ "to" }
 ,{ "close" }
 ,{ "the" }
 ,{ "connection." }
} , & fmt_text , & align_text } ;

Link link_PacketMultipointDevice = { & page , { 17 } } ;

Text b17 = { {
 { "PacketMultipointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "PacketMultipointDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"server-side\"" }
 ,{ "interface." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "logical" }
 ,{ "packet" }
 ,{ "communication" }
 ,{ "endpoint." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "point-to-many" }
 ,{ "points" }
 ,{ "communication" }
 ,{ "scenarios." }
 ,{ "The" }
 ,{ "type" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "identify" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "target." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "PacketMultipointDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "argument" }
 ,{ "in" }
 ,{ "inbound()" , & fmt_text_b }
 ,{ "and" }
 ,{ "outbound()" , & fmt_text_b }
 ,{ "methods." }
 ,{ "This" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "should" }
 ,{ "be" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "or" }
 ,{ "is" }
 ,{ "received" }
 ,{ "from." }
 ,{ "ConnectionProc" , & fmt_text_b }
 ,{ "methods" }
 ,{ "also" }
 ,{ "have" }
 ,{ "the" }
 ,{ "address" }
 ,{ "argument." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "one" }
 ,{ "additional" }
 ,{ "method:" }
 ,{ "connection_open()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "signal" }
 ,{ "about" }
 ,{ "connection" }
 ,{ "opening" }
 ,{ "with" }
 ,{ "a" }
 ,{ "peer." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "toText()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "text" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "target" }
 ,{ "address." }
 ,{ "A" }
 ,{ "buffer" }
 ,{ "for" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "must" }
 ,{ "be" }
 ,{ "given." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "text" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Multipoint" }
 ,{ "device" }
 ,{ "can" }
 ,{ "store" }
 ,{ "a" }
 ,{ "native" }
 ,{ "address" }
 ,{ "in" }
 ,{ "the" }
 ,{ "type" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "short" }
 ,{ "enough." }
 ,{ "It" }
 ,{ "also" }
 ,{ "can" }
 ,{ "perform" }
 ,{ "an" }
 ,{ "address" }
 ,{ "mapping" }
 ,{ "from" }
 ,{ "the" }
 ,{ "native" }
 ,{ "address" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "connection_open()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "inform" }
 ,{ "that" }
 ,{ "a" }
 ,{ "connection" }
 ,{ "with" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "endpoint" }
 ,{ "is" }
 ,{ "established." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "PortManager" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "This" }
 ,{ "optional" }
 ,{ "co-interface" }
 ,{ "for" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "and" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "interfaces" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "\"port\"" }
 ,{ "abstraction." }
 ,{ "Some" }
 ,{ "address" }
 ,{ "schemes" }
 ,{ "(like" }
 ,{ "UDP" , & fmt_text_b }
 ,{ ")" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "concept" }
 ,{ "of" }
 ,{ "port." }
 ,{ "Port" }
 ,{ "is" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "getDevicePort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "port" }
 ,{ "of" }
 ,{ "the" }
 ,{ "device" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "form" }
 ,{ "of" }
 ,{ "the" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "port" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "address." }
 ,{ "Both" }
 ,{ "port" }
 ,{ "and" }
 ,{ "address" }
 ,{ "are" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "changePort()" , & fmt_text_b }
 ,{ "changes" }
 ,{ "the" }
 ,{ "port" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "address" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Utilities" }
} , & fmt_h4 , & align_h4 } ;

Text b29 = { {
 { "This" }
 ,{ "constant" }
 ,{ "is" }
 ,{ "the" }
 ,{ "net" }
 ,{ "tick" }
 ,{ "frequency." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "This" }
 ,{ "function" }
 ,{ "converts" }
 ,{ "the" }
 ,{ "time," }
 ,{ "given" }
 ,{ "as" }
 ,{ "MSec" , & fmt_text_b }
 ,{ "," }
 ,{ "to" }
 ,{ "the" }
 ,{ "net" }
 ,{ "tick" }
 ,{ "count." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "This" }
 ,{ "class" }
 ,{ "helps" }
 ,{ "to" }
 ,{ "convert" }
 ,{ "an" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "text" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Page page = { "page_PacketEndpoint" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PacketPool {

Text b0 = { {
 { "PacketPool" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PacketPool.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PacketPool.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "PacketPool" , & fmt_text_b }
 ,{ "implements" }
 ,{ "a" }
 ,{ "pool" }
 ,{ "of" }
 ,{ "packets." }
 ,{ "There" }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "global" }
 ,{ "packet" }
 ,{ "pool" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "Two" }
 ,{ "global" }
 ,{ "constants" }
 ,{ "PacketPool_PacketCount" , & fmt_text_b }
 ,{ "and" }
 ,{ "PacketPool_PacketMaxDataLen" , & fmt_text_b }
 ,{ "determine" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "this" }
 ,{ "pool." }
 ,{ "You" }
 ,{ "may" }
 ,{ "override" }
 ,{ "these" }
 ,{ "constants" }
 ,{ "by" }
 ,{ "defining" }
 ,{ "them" }
 ,{ "in" }
 ,{ "you" }
 ,{ "project." }
 ,{ "Default" }
 ,{ "values" }
 ,{ "are" }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target" }
 ,{ "as" }
 ,{ "DefaultPacketCount" , & fmt_text_b }
 ,{ "and" }
 ,{ "DefaultPacketMaxDataLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "following" }
 ,{ "global" }
 ,{ "pool" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "raw" }
 ,{ "packets." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "TryAllocPacket_raw()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "non-blocking" }
 ,{ "allocation" }
 ,{ "function." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "has" }
 ,{ "failed," }
 ,{ "the" }
 ,{ "return" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "null." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"long\"" }
 ,{ "packet," }
 ,{ "i.e." }
 ,{ "has" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "PacketPool_PacketMaxDataLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "AllocPacket_raw()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "blocking" }
 ,{ "allocation" }
 ,{ "function." }
 ,{ "It" }
 ,{ "blocks" }
 ,{ "while" }
 ,{ "packet" }
 ,{ "pool" }
 ,{ "is" }
 ,{ "empty." }
 ,{ "Once" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "becomes" }
 ,{ "available" }
 ,{ "it" }
 ,{ "tries" }
 ,{ "to" }
 ,{ "attach" }
 ,{ "a" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "return" }
 ,{ "this" }
 ,{ "packet." }
 ,{ "If" }
 ,{ "this" }
 ,{ "failed," }
 ,{ "the" }
 ,{ "return" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "null." }
 ,{ "So," }
 ,{ "despite" }
 ,{ "the" }
 ,{ "function" }
 ,{ "is" }
 ,{ "blocking," }
 ,{ "it" }
 ,{ "still" }
 ,{ "may" }
 ,{ "return" }
 ,{ "a" }
 ,{ "null" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "AllocPacket_raw(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "AllocPacket_raw(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AllocPacket_raw()" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "timeout" }
 ,{ "the" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "There" }
 ,{ "are" }
 ,{ "\"short\"" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "four" }
 ,{ "functions," }
 ,{ "mentioned" }
 ,{ "above." }
 ,{ "They" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "\"short\"" }
 ,{ "packet," }
 ,{ "i.e." }
 ,{ "this" }
 ,{ "packet" }
 ,{ "does" }
 ,{ "not" }
 ,{ "necessary" }
 ,{ "has" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "(but" }
 ,{ "may" }
 ,{ "have)." }
 ,{ "AllocPacket_raw_short()" , & fmt_text_b }
 ,{ "never" }
 ,{ "returns" }
 ,{ "null," }
 ,{ "because" }
 ,{ "of" }
 ,{ "this." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "DetachPacketBufs()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "data" }
 ,{ "buffers" }
 ,{ "from" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pool." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "\"free\"" }
 ,{ "function," }
 ,{ "because" }
 ,{ "you" }
 ,{ "return" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "back" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pool," }
 ,{ "when" }
 ,{ "you" }
 ,{ "complete" }
 ,{ "it." }
 ,{ "Initially" }
 ,{ "pool" }
 ,{ "has" }
 ,{ "a" }
 ,{ "PacketPool_PacketCount" , & fmt_text_b }
 ,{ "packets" }
 ,{ "without" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffers." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "And" }
 ,{ "there" }
 ,{ "are" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "specialized" }
 ,{ "packets." }
 ,{ "They" }
 ,{ "are" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "raw" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "PacketPool" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "PacketPoll" , & fmt_text_b }
 ,{ "class" }
 ,{ "itself." }
 ,{ "On" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "only" }
 ,{ "in" }
 ,{ "a" }
 ,{ "task" }
 ,{ "context." }
 ,{ "So" }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "complete" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "allocation" }
 ,{ "method" }
 ,{ "semantic" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "of" }
 ,{ "global" }
 ,{ "functions" }
 ,{ "above." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "internal" }
 ,{ "synchronization" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Internally" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "stores" }
 ,{ "in" }
 ,{ "a" }
 ,{ "list." }
 ,{ "Packets" }
 ,{ "with" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "goes" }
 ,{ "first." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Destructor" }
 ,{ "calls" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "not" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "released" }
 ,{ "at" }
 ,{ "the" }
 ,{ "moment." }
} , & fmt_text , & align_text } ;

Page page = { "page_PacketPool" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PacketSet {

Text b0 = { {
 { "PacketSet" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PacketSet.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PacketSet.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PacketSet" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "key" }
 ,{ "class" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "infra-structure." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "logical" }
 ,{ "small" }
 ,{ "pool" }
 ,{ "of" }
 ,{ "packets" }
 ,{ "with" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "control" }
 ,{ "and" }
 ,{ "packet" }
 ,{ "cancellation" }
 ,{ "features." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "packet" }
 ,{ "originators." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "internal" }
 ,{ "synchronization" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "argument" }
 ,{ "max_packet" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "limit." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "have" }
 ,{ "more" }
 ,{ "than" }
 ,{ "max_packet" , & fmt_text_b }
 ,{ "active" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "this" }
 ,{ "packet" }
 ,{ "set" }
 ,{ "(\"external\"" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "not" }
 ,{ "counted)." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "PacketSet" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "cancel_and_wait()" , & fmt_text_b }
 ,{ "operation." }
 ,{ "It" }
 ,{ "also" }
 ,{ "waits" }
 ,{ "until" }
 ,{ "all" }
 ,{ "\"external\"" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "completed." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Packet" }
 ,{ "get" }
 ,{ "methods." }
 ,{ "They" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "semantic," }
 ,{ "as" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "packet" }
 ,{ "pool" }
 ,{ "methods." }
 ,{ "Packets" }
 ,{ "are" }
 ,{ "taken" }
 ,{ "from" }
 ,{ "the" }
 ,{ "default" }
 ,{ "packet" }
 ,{ "pool." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "set" }
 ,{ "limits" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "active" }
 ,{ "packets" }
 ,{ "by" }
 ,{ "the" }
 ,{ "max_packet" , & fmt_text_b }
 ,{ "." }
 ,{ "All" }
 ,{ "taken" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "remembered" }
 ,{ "in" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "packet" }
 ,{ "list," }
 ,{ "so" }
 ,{ "it" }
 ,{ "is" }
 ,{ "possible" }
 ,{ "cancel" }
 ,{ "them" }
 ,{ "or" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "completion." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "cancel_and_wait()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "all" }
 ,{ "active" }
 ,{ "packets" }
 ,{ "and" }
 ,{ "then" }
 ,{ "waits" }
 ,{ "indefinitely" }
 ,{ "until" }
 ,{ "they" }
 ,{ "are" }
 ,{ "completed" }
 ,{ "(\"external\"" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "not" }
 ,{ "included)." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "wait()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "until" }
 ,{ "all" }
 ,{ "active" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "completed" }
 ,{ "(\"external\"" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "not" }
 ,{ "included)" }
 ,{ "or" }
 ,{ "up" }
 ,{ "to" }
 ,{ "timeout" }
 ,{ "expired." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "first" }
 ,{ "case" }
 ,{ "happens." }
 ,{ "If" }
 ,{ "the" }
 ,{ "timeout" }
 ,{ "expires," }
 ,{ "then" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "cancel_and_wait()" , & fmt_text_b }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Packet" }
 ,{ "get" }
 ,{ "method" }
 ,{ "with" }
 ,{ "an" }
 ,{ "external" }
 ,{ "packet" }
 ,{ "list." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "an" }
 ,{ "additional" }
 ,{ "external" }
 ,{ "packet" }
 ,{ "list," }
 ,{ "represented" }
 ,{ "by" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "type" }
 ,{ "PacketSet::ExtTop" , & fmt_text_b }
 ,{ "," }
 ,{ "when" }
 ,{ "getting" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "set." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "list" }
 ,{ "further" }
 ,{ "to" }
 ,{ "cancel" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "this" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "cancel(ExtTop" , & fmt_text_b }
 ,{ "&ext_list)" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "all" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "external" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Using" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "Cancel" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "can" }
 ,{ "cancel" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "external" }
 ,{ "list" }
 ,{ "or" }
 ,{ "several" }
 ,{ "such" }
 ,{ "lists" }
 ,{ "in" }
 ,{ "two" }
 ,{ "phase." }
 ,{ "The" }
 ,{ "method" }
 ,{ "build()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "external" }
 ,{ "list" }
 ,{ "and" }
 ,{ "collects" }
 ,{ "them" }
 ,{ "into" }
 ,{ "the" }
 ,{ "working" }
 ,{ "list." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "method" }
 ,{ "cancel()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "cancel" }
 ,{ "functions" }
 ,{ "of" }
 ,{ "collected" }
 ,{ "packets." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "\"External\"" }
 ,{ "packets" }
 ,{ "may" }
 ,{ "be" }
 ,{ "included" }
 ,{ "in" }
 ,{ "cancellation" }
 ,{ "operations" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "set." }
 ,{ "The" }
 ,{ "method" }
 ,{ "enlist()" , & fmt_text_b }
 ,{ "is" }
 ,{ "to" }
 ,{ "do" }
 ,{ "this." }
 ,{ "You" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "an" }
 ,{ "external" }
 ,{ "packet" }
 ,{ "list" }
 ,{ "also." }
 ,{ "\"External\"" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "not" }
 ,{ "included" }
 ,{ "in" }
 ,{ "waiting" }
 ,{ "operations." }
 ,{ "Only" }
 ,{ "the" }
 ,{ "PacketSet" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "waits" }
 ,{ "for" }
 ,{ "their" }
 ,{ "completion." }
} , & fmt_text , & align_text } ;

Page page = { "page_PacketSet" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ParserGen {

Text b0 = { {
 { "ParserGen" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "CCore-ParserGen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "lang" }
 ,{ "parser" }
 ,{ "code" }
 ,{ "generator." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "ddl" , & fmt_text_b }
 ,{ "output" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CondLangLR1" , & fmt_text_a }
 ,{ "and" }
 ,{ "generates" }
 ,{ "two" }
 ,{ "output" }
 ,{ "files" }
 ,{ "with" }
 ,{ "C++" , & fmt_text_b }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Lang.ddl" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "ddl" , & fmt_text_b }
 ,{ "output." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ClassName" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "in" }
 ,{ "the" }
 ,{ "output" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Lang.gen.h" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "output" }
 ,{ "h" , & fmt_text_b }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Lang.gen.cpp" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "output" }
 ,{ "cpp" , & fmt_text_b }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "folder" }
 ,{ "CCORE_ROOT/tools/CondLangLR1/Gen/sample" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "sample." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "below" }
 ,{ "to" }
 ,{ "describe" }
 ,{ "the" }
 ,{ "output." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "output" }
 ,{ "h" , & fmt_text_b }
 ,{ "file" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "following" }
 ,{ "sections." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "This" }
 ,{ "is" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "of" }
 ,{ "lang" }
 ,{ "atoms." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "manually" }
 ,{ "edit" }
 ,{ "enumerator" }
 ,{ "names" }
 ,{ "to" }
 ,{ "make" }
 ,{ "them" }
 ,{ "verbose." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "GetTextDesc()" , & fmt_text_b }
 ,{ "resides" }
 ,{ "in" }
 ,{ "the" }
 ,{ "cpp" , & fmt_text_b }
 ,{ "output" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "This" }
 ,{ "data" }
 ,{ "structure" }
 ,{ "contains" }
 ,{ "various" }
 ,{ "lang" }
 ,{ "properties" }
 ,{ "including" }
 ,{ "the" }
 ,{ "parsing" }
 ,{ "LR1" }
 ,{ "state" }
 ,{ "machine" }
 ,{ "description." }
 ,{ "The" }
 ,{ "structure" }
 ,{ "name" }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "from" }
 ,{ "the" }
 ,{ "second" }
 ,{ "command" }
 ,{ "line" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "structure" }
 ,{ "definition" }
 ,{ "is" }
 ,{ "stereotypic," }
 ,{ "except" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "element" }
 ,{ "structs." }
 ,{ "Each" }
 ,{ "lang" }
 ,{ "synt" }
 ,{ "has" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "inner" }
 ,{ "struct" }
 ,{ "with" }
 ,{ "the" }
 ,{ "name" }
 ,{ "Element_<synt" , & fmt_text_b }
 ,{ "name>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "This" }
 ,{ "two" }
 ,{ "structures" }
 ,{ "should" }
 ,{ "be" }
 ,{ "updated" }
 ,{ "according" }
 ,{ "your" }
 ,{ "way" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "lang" }
 ,{ "parser." }
 ,{ "In" }
 ,{ "particular," }
 ,{ "types" }
 ,{ "RetType" , & fmt_text_b }
 ,{ "and" }
 ,{ "ContextType" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "redefined." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Each" }
 ,{ "synt" }
 ,{ "structure" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "one." }
 ,{ "They" }
 ,{ "should" }
 ,{ "be" }
 ,{ "updated" }
 ,{ "with" }
 ,{ "a" }
 ,{ "synt" }
 ,{ "value" }
 ,{ "content." }
 ,{ "Each" }
 ,{ "rule" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "method" }
 ,{ "of" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "initialization." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "is" }
 ,{ "the" }
 ,{ "\"reduced\"" }
 ,{ "rule" }
 ,{ "name." }
 ,{ "\"Reduction\"" }
 ,{ "means" }
 ,{ "the" }
 ,{ "following:" }
 ,{ "if" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "name" }
 ,{ "has" }
 ,{ "several" }
 ,{ "C-name" }
 ,{ "components," }
 ,{ "combined" }
 ,{ "using" }
 ,{ "the" }
 ,{ "character" }
 ,{ "'@'," }
 ,{ "the" }
 ,{ "first" }
 ,{ "component" }
 ,{ "is" }
 ,{ "selected." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "parser" }
 ,{ "context," }
 ,{ "others" }
 ,{ "are" }
 ,{ "pointers" }
 ,{ "to" }
 ,{ "already" }
 ,{ "created" }
 ,{ "element" }
 ,{ "structures." }
 ,{ "Each" }
 ,{ "such" }
 ,{ "structue" }
 ,{ "either" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "element" }
 ,{ "structure" }
 ,{ "or" }
 ,{ "a" }
 ,{ "synt" }
 ,{ "element" }
 ,{ "structure." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "last" }
 ,{ "member" }
 ,{ "is" }
 ,{ "a" }
 ,{ "function" }
 ,{ "template." }
 ,{ "This" }
 ,{ "function" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "specific" }
 ,{ "rule" }
 ,{ "based" }
 ,{ "on" }
 ,{ "its" }
 ,{ "index." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "rule" }
 ,{ "index." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor." }
 ,{ "This" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "called" }
 ,{ "with" }
 ,{ "two" }
 ,{ "arguments," }
 ,{ "the" }
 ,{ "first" }
 ,{ "is" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "method," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "element" }
 ,{ "index." }
 ,{ "If" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "index" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "range," }
 ,{ "the" }
 ,{ "functor" }
 ,{ "without" }
 ,{ "arguments" }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "cpp" , & fmt_text_b }
 ,{ "output" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "RuleOutput()" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "state" }
 ,{ "table." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "This" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "element" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "rule" }
 ,{ "production." }
 ,{ "If" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "index" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "scope" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "0." }
 ,{ "All" }
 ,{ "elements" }
 ,{ "are" }
 ,{ "1-based" }
 ,{ "numbered." }
 ,{ "The" }
 ,{ "first" }
 ,{ "group" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "are" }
 ,{ "atom" }
 ,{ "elements." }
 ,{ "To" }
 ,{ "convert" }
 ,{ "an" }
 ,{ "atom" }
 ,{ "class" }
 ,{ "into" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "element" }
 ,{ "index" }
 ,{ "the" }
 ,{ "method" }
 ,{ "AtomToElement()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Finally," }
 ,{ "the" }
 ,{ "state" }
 ,{ "table." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "array" }
 ,{ "of" }
 ,{ "structues" }
 ,{ "State" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "element" }
 ,{ "is" }
 ,{ "pointed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "member" }
 ,{ "Start" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "state" }
 ,{ "machine." }
 ,{ "Each" }
 ,{ "state" }
 ,{ "has" }
 ,{ "two" }
 ,{ "properties:" }
 ,{ "the" }
 ,{ "function" }
 ,{ "prop" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "function" }
 ,{ "trans" , & fmt_text_b }
 ,{ "." }
 ,{ "prop" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "function," }
 ,{ "which" }
 ,{ "maps" }
 ,{ "an" }
 ,{ "atom" }
 ,{ "class" }
 ,{ "to" }
 ,{ "the" }
 ,{ "rule" }
 ,{ "index." }
 ,{ "This" }
 ,{ "rule" }
 ,{ "must" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "if" }
 ,{ "the" }
 ,{ "following" }
 ,{ "atom" }
 ,{ "has" }
 ,{ "the" }
 ,{ "given" }
 ,{ "atom" }
 ,{ "class." }
 ,{ "Two" }
 ,{ "values" }
 ,{ "are" }
 ,{ "reserved:" }
 ,{ "NoRule" , & fmt_text_b }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "rule" }
 ,{ "(which" }
 ,{ "means" }
 ,{ "a" }
 ,{ "error" }
 ,{ "in" }
 ,{ "the" }
 ,{ "input" }
 ,{ "atom" }
 ,{ "sequence)" }
 ,{ "and" }
 ,{ "ShiftRule" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "must" }
 ,{ "be" }
 ,{ "pushed" }
 ,{ "into" }
 ,{ "the" }
 ,{ "stack." }
 ,{ "The" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "atom" }
 ,{ "sequence" }
 ,{ "is" }
 ,{ "designated" }
 ,{ "with" }
 ,{ "AtomNull" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "ShiftRule" , & fmt_text_b }
 ,{ "output" }
 ,{ "on" }
 ,{ "the" }
 ,{ "AtomNull" , & fmt_text_b }
 ,{ "input" }
 ,{ "means" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "processing." }
 ,{ "trans" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "state" }
 ,{ "transition" }
 ,{ "function." }
 ,{ "It" }
 ,{ "maps" }
 ,{ "an" }
 ,{ "element" }
 ,{ "index" }
 ,{ "into" }
 ,{ "the" }
 ,{ "next" }
 ,{ "state." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "transition" }
 ,{ "the" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_ParserGen" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Partition {

Text b0 = { {
 { "Partition" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/Partition.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/Partition.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Partition()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "classical" }
 ,{ "partition" }
 ,{ "algorithm" }
 ,{ "like" }
 ,{ "std::partition" , & fmt_text_b }
 ,{ "with" }
 ,{ "slightly" }
 ,{ "different" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "first" }
 ,{ "variant" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "a" }
 ,{ "range" }
 ,{ "and" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length" }
 ,{ "as" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "third" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "predicate." }
 ,{ "The" }
 ,{ "algorithm" }
 ,{ "reorders" }
 ,{ "the" }
 ,{ "range" }
 ,{ "in" }
 ,{ "such" }
 ,{ "a" }
 ,{ "way," }
 ,{ "that" }
 ,{ "elements" }
 ,{ "which" }
 ,{ "make" }
 ,{ "the" }
 ,{ "predicate" }
 ,{ "true" , & fmt_text_b }
 ,{ "goes" }
 ,{ "first" }
 ,{ "and" }
 ,{ "others" }
 ,{ "goes" }
 ,{ "after." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "with" }
 ,{ "the" }
 ,{ "second" }
 ,{ "kind" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "second" }
 ,{ "variant" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "the" }
 ,{ "usual" }
 ,{ "object" }
 ,{ "range," }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "PtrLen<T>" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "subrange." }
} , & fmt_text , & align_text } ;

Page page = { "page_Partition" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Paths {

Text b0 = { {
 { "Paths" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Path.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Path.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "file" }
 ,{ "paths." }
 ,{ "A" }
 ,{ "path" }
 ,{ "may" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "components:" }
} , & fmt_text , & align_text } ;

Text b3_0 = { {
 { "device," }
 ,{ "ended" }
 ,{ "with" }
 ,{ "':'" , & fmt_list_b }
} , & fmt_list , & align_list } ;

Text b3_1 = { {
 { "directory," }
 ,{ "separated" }
 ,{ "with" }
 ,{ "'/'" , & fmt_list_b }
 ,{ "or" }
 ,{ "'\\'" , & fmt_list_b }
} , & fmt_list , & align_list } ;

Text b3_2 = { {
 { "file" }
 ,{ "name" }
} , & fmt_list , & align_list } ;

Text b3_3 = { {
 { "file" }
 ,{ "extension," }
 ,{ "started" }
 ,{ "with" }
 ,{ "'.'" , & fmt_list_b }
} , & fmt_list , & align_list } ;

TextList b3 = { {
 { 'â€¢' , { { & b3_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_3 , null , ItemInner , ItemOuter } } }
} } ;

Text b4 = { {
 { "A" }
 ,{ "path" }
 ,{ "may" }
 ,{ "have" }
 ,{ "multiple" }
 ,{ "device" }
 ,{ "components," }
 ,{ "directory" }
 ,{ "components," }
 ,{ "a" }
 ,{ "file" }
 ,{ "name" }
 ,{ "may" }
 ,{ "have" }
 ,{ "multiple" }
 ,{ "file" }
 ,{ "extension" }
 ,{ "components:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "PrefixPath()" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "PrefixPath()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "which" }
 ,{ "is" }
 ,{ "a" }
 ,{ "path." }
 ,{ "I.e." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "But" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "SuffixExt()" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "SuffixExt()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "which" }
 ,{ "is" }
 ,{ "an" }
 ,{ "extension." }
 ,{ "I.e." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "PathBase" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "This" }
 ,{ "structure" }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "for" }
 ,{ "the" }
 ,{ "path" }
 ,{ "scanning." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "IsSlash()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "is" }
 ,{ "a" }
 ,{ "slash." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "IsDot()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "is" }
 ,{ "dot." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "IsColon()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "is" }
 ,{ "colon." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "IsDot()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "is" }
 ,{ "the" }
 ,{ "single" }
 ,{ "dot" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "IsDotDot()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "is" }
 ,{ "the" }
 ,{ "double" }
 ,{ "dot" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "IsSpecial()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "name," }
 ,{ "i.e." }
 ,{ "is" }
 ,{ "the" }
 ,{ "single" }
 ,{ "dot" }
 ,{ "or" }
 ,{ "double" }
 ,{ "dot" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "IsTilde()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "is" }
 ,{ "the" }
 ,{ "single" }
 ,{ "tilde" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "TurnSlash()" , & fmt_text_b }
 ,{ "turns" }
 ,{ "all" }
 ,{ "slashes" }
 ,{ "into" }
 ,{ "'/'" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "GetNameType()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "possible" }
 ,{ "answers:" }
} , & fmt_text , & align_text } ;

Text b21_0 = { {
 { "Name" }
 ,{ "â€”" }
 ,{ "a" }
 ,{ "regular" }
 ,{ "file" }
 ,{ "name" }
} , & fmt_list , & align_list } ;

Text b21_1 = { {
 { "EmptyName" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "name" }
} , & fmt_list , & align_list } ;

Text b21_2 = { {
 { "DotName" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "single" }
 ,{ "dot" }
 ,{ "name" }
} , & fmt_list , & align_list } ;

Text b21_3 = { {
 { "DotDotName" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "double" }
 ,{ "dot" }
 ,{ "name" }
} , & fmt_list , & align_list } ;

TextList b21 = { {
 { 'â€¢' , { { & b21_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b21_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b21_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b21_3 , null , ItemInner , ItemOuter } } }
} } ;

Text b22 = { {
 { "The" }
 ,{ "following" }
 ,{ "set" }
 ,{ "of" }
 ,{ "classes" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "split" }
 ,{ "the" }
 ,{ "given" }
 ,{ "string" }
 ,{ "into" }
 ,{ "components." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "ForwardScan" , & fmt_text_b }
 ,{ "scans" }
 ,{ "forward" }
 ,{ "the" }
 ,{ "given" }
 ,{ "string" }
 ,{ "for" }
 ,{ "the" }
 ,{ "character," }
 ,{ "satisfying" }
 ,{ "the" }
 ,{ "given" }
 ,{ "condition." }
 ,{ "If" }
 ,{ "such" }
 ,{ "character" }
 ,{ "is" }
 ,{ "found," }
 ,{ "it" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "method" }
 ,{ "set(StrLen" , & fmt_text_b }
 ,{ "str,StrLen" , & fmt_text_b }
 ,{ "cur)" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "method" }
 ,{ "set(StrLen" , & fmt_text_b }
 ,{ "str)" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "BackwardScan" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ForwardScan" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "scans" }
 ,{ "backward." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "The" }
 ,{ "remaining" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "split" }
 ,{ "the" }
 ,{ "string" }
 ,{ "at" }
 ,{ "the" }
 ,{ "found" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "ToPrefix" , & fmt_text_b }
 ,{ "splits" }
 ,{ "after" }
 ,{ "the" }
 ,{ "found" }
 ,{ "position," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "found" }
 ,{ "character" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "prefix." }
 ,{ "In" }
 ,{ "case" }
 ,{ "the" }
 ,{ "required" }
 ,{ "character" }
 ,{ "is" }
 ,{ "not" }
 ,{ "found," }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "ToPrefixDel" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ToPrefix" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "it" }
 ,{ "removes" }
 ,{ "the" }
 ,{ "found" }
 ,{ "character" }
 ,{ "from" }
 ,{ "the" }
 ,{ "prefix." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "ToSuffix" , & fmt_text_b }
 ,{ "splits" }
 ,{ "before" }
 ,{ "the" }
 ,{ "found" }
 ,{ "position," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "found" }
 ,{ "character" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "suffix." }
 ,{ "In" }
 ,{ "case" }
 ,{ "the" }
 ,{ "required" }
 ,{ "character" }
 ,{ "is" }
 ,{ "not" }
 ,{ "found," }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "SplitDev" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path" }
 ,{ "into" }
 ,{ "the" }
 ,{ "first" }
 ,{ "device" }
 ,{ "component" }
 ,{ "and" }
 ,{ "the" }
 ,{ "rest." }
 ,{ "The" }
 ,{ "no_dev" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "device" }
 ,{ "component." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "dev" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "dev_path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path." }
 ,{ "Colon" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "dev" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "SplitPath" }
} , & fmt_h4 , & align_h4 } ;

Text b32 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path" }
 ,{ "into" }
 ,{ "the" }
 ,{ "all" }
 ,{ "device" }
 ,{ "components" }
 ,{ "and" }
 ,{ "the" }
 ,{ "rest." }
 ,{ "The" }
 ,{ "no_dev" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "device" }
 ,{ "component." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "dev" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path." }
 ,{ "Colon" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "dev" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "SplitDir" }
} , & fmt_h4 , & align_h4 } ;

Text b34 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path" }
 ,{ "(assumed" }
 ,{ "without" }
 ,{ "device" }
 ,{ "component)" }
 ,{ "into" }
 ,{ "the" }
 ,{ "first" }
 ,{ "directory" }
 ,{ "component" }
 ,{ "and" }
 ,{ "the" }
 ,{ "rest." }
 ,{ "The" }
 ,{ "no_path" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "directory" }
 ,{ "component." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "dir" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path." }
 ,{ "Slash" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "dir" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "SplitName" }
} , & fmt_h4 , & align_h4 } ;

Text b36 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path" }
 ,{ "(assumed" }
 ,{ "without" }
 ,{ "device" }
 ,{ "component)" }
 ,{ "into" }
 ,{ "the" }
 ,{ "all" }
 ,{ "directory" }
 ,{ "components" }
 ,{ "and" }
 ,{ "the" }
 ,{ "rest." }
 ,{ "The" }
 ,{ "no_path" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "directory" }
 ,{ "component." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "given" }
 ,{ "path." }
 ,{ "Slash" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "path" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "getNameType()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "component." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "SplitFullExt" }
} , & fmt_h4 , & align_h4 } ;

Text b39 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "into" }
 ,{ "the" }
 ,{ "all" }
 ,{ "extensions" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name." }
 ,{ "The" }
 ,{ "no_ext" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "extension." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "ext" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "Dot" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ext" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "SplitExt" }
} , & fmt_h4 , & align_h4 } ;

Text b41 = { {
 { "This" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "splits" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name" }
 ,{ "into" }
 ,{ "the" }
 ,{ "last" }
 ,{ "extension" }
 ,{ "and" }
 ,{ "the" }
 ,{ "rest." }
 ,{ "The" }
 ,{ "no_ext" , & fmt_text_b }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "extension." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "ext" , & fmt_text_b }
 ,{ "is" }
 ,{ "null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "Dot" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ext" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "SplitDevName" }
} , & fmt_h4 , & align_h4 } ;

Text b43 = { {
 { "SplitDevName" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SplitDev" , & fmt_text_b }
 ,{ "," }
 ,{ "except" }
 ,{ "it" }
 ,{ "removes" }
 ,{ "colon" }
 ,{ "from" }
 ,{ "the" }
 ,{ "dev_name" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "SplitDirName" }
} , & fmt_h4 , & align_h4 } ;

Text b45 = { {
 { "SplitDirName" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SplitDir" , & fmt_text_b }
 ,{ "," }
 ,{ "except" }
 ,{ "it" }
 ,{ "removes" }
 ,{ "slash" }
 ,{ "from" }
 ,{ "the" }
 ,{ "dir_name" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "getNameType()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "name" }
 ,{ "component." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "SplitPathName" }
} , & fmt_h4 , & align_h4 } ;

Text b48 = { {
 { "SplitPathName" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SplitName" , & fmt_text_b }
 ,{ "," }
 ,{ "except" }
 ,{ "it" }
 ,{ "removes" }
 ,{ "slash" }
 ,{ "from" }
 ,{ "the" }
 ,{ "path" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "WalkPath()" }
} , & fmt_h4 , & align_h4 } ;

Text b50 = { {
 { "This" }
 ,{ "function" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "for" }
 ,{ "each" }
 ,{ "subpath" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument." }
 ,{ "I.e." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "Path" }
} , & fmt_h4 , & align_h4 } ;

Text b52 = { {
 { "The" }
 ,{ "class" }
 ,{ "Path" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "manipulate" }
 ,{ "with" }
 ,{ "a" }
 ,{ "path." }
 ,{ "The" }
 ,{ "path" }
 ,{ "inside" }
 ,{ "Path" , & fmt_text_b }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer." }
 ,{ "It" }
 ,{ "has" }
 ,{ "a" }
 ,{ "non-mutable" }
 ,{ "prefix." }
 ,{ "This" }
 ,{ "prefix" }
 ,{ "is" }
 ,{ "determined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "constructor." }
 ,{ "The" }
 ,{ "string" }
 ,{ "after" }
 ,{ "prefix" }
 ,{ "is" }
 ,{ "a" }
 ,{ "normalized" }
 ,{ "path." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "may" }
 ,{ "be" }
 ,{ "empty" }
 ,{ "or" }
 ,{ "\".\"" , & fmt_text_b }
 ,{ "or" }
 ,{ "\"dir1/dir2/.../dir_or_file\"" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "dir" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "normal" }
 ,{ "names," }
 ,{ "dir_of_file" , & fmt_text_b }
 ,{ "may" }
 ,{ "be" }
 ,{ "\".\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "Path(Path::BeginEmpty)" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "path" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "path" }
 ,{ "prefix." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "Path(Path::BeginRoot)" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "path" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "path" }
 ,{ "prefix" }
 ,{ "equals" }
 ,{ "\"/\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "Path(StrLen" , & fmt_text_b }
 ,{ "dev_name)" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "path" }
 ,{ "object," }
 ,{ "which" }
 ,{ "has" }
 ,{ "the" }
 ,{ "path" }
 ,{ "prefix" }
 ,{ "dev_name+\":/\"" , & fmt_text_b }
 ,{ ";" }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "Path" , & fmt_text_b }
 ,{ "is" }
 ,{ "castable" }
 ,{ "to" }
 ,{ "the" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "printable" }
 ,{ "using" }
 ,{ "this" }
 ,{ "type" }
 ,{ "as" }
 ,{ "the" }
 ,{ "PrintProxyType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "root()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "Path" , & fmt_text_b }
 ,{ "value" }
 ,{ "to" }
 ,{ "its" }
 ,{ "path" }
 ,{ "prefix." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "rootDir()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "Path" , & fmt_text_b }
 ,{ "value" }
 ,{ "to" }
 ,{ "its" }
 ,{ "path" }
 ,{ "prefix" }
 ,{ "+" }
 ,{ "\".\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "isRoot()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "at" }
 ,{ "the" }
 ,{ "root()" , & fmt_text_b }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "isRootDir()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "at" }
 ,{ "the" }
 ,{ "rootDir()" , & fmt_text_b }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" }
 ,{ "top" }
 ,{ "path" }
 ,{ "component." }
 ,{ "It" }
 ,{ "properly" }
 ,{ "handles" }
 ,{ "single" }
 ,{ "dot" }
 ,{ "and" }
 ,{ "double" }
 ,{ "dot" }
 ,{ "names." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "back()" , & fmt_text_b }
 ,{ "removes" }
 ,{ "the" }
 ,{ "top" }
 ,{ "path" }
 ,{ "component." }
 ,{ "The" }
 ,{ "path" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "root()" , & fmt_text_b }
 ,{ "or" }
 ,{ "the" }
 ,{ "rootDir()" , & fmt_text_b }
 ,{ "state" }
 ,{ "â€”" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "will" }
 ,{ "be" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "addPath()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "multiple" }
 ,{ "path" }
 ,{ "components." }
 ,{ "If" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "started" }
 ,{ "with" }
 ,{ "slash," }
 ,{ "then" }
 ,{ "path" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "absolute," }
 ,{ "otherwise" }
 ,{ "â€”" }
 ,{ "relative" }
 ,{ "to" }
 ,{ "the" }
 ,{ "current" }
 ,{ "value." }
 ,{ "The" }
 ,{ "empty" }
 ,{ "argument" }
 ,{ "does" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "copyPath()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Page page = { "page_Paths" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_list , outer_list , back_list }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_list , outer_list , back_list }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PerTask {

Text b0 = { {
 { "PerTask" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PerTask.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PerTask.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PerTask" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "advanced" }
 ,{ "tool" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "per-task" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "class" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "itself" }
 ,{ "is" }
 ,{ "not" }
 ,{ "required" }
 ,{ "to" }
 ,{ "work" }
 ,{ "directly" }
 ,{ "with," }
 ,{ "but" }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "indirectly" }
 ,{ "once" }
 ,{ "you" }
 ,{ "deal" }
 ,{ "with" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "per-task" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Each" }
 ,{ "task" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "object." }
 ,{ "To" }
 ,{ "retrieve" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "PerTask::Get()" , & fmt_text_b }
 ,{ "(or" }
 ,{ "PerTask::TryGet()" , & fmt_text_b }
 ,{ ")." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "object" }
 ,{ "yet," }
 ,{ "it" }
 ,{ "is" }
 ,{ "created." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "(null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned)." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "A" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed," }
 ,{ "once" }
 ,{ "the" }
 ,{ "host" }
 ,{ "task" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "It" }
 ,{ "is" }
 ,{ "guaranteed" }
 ,{ "for" }
 ,{ "tasks," }
 ,{ "created" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_a }
 ,{ "class" }
 ,{ "help," }
 ,{ "so" }
 ,{ "it" }
 ,{ "is" }
 ,{ "always" }
 ,{ "true" }
 ,{ "for" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "platforms." }
 ,{ "For" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "platform" }
 ,{ "you" }
 ,{ "may," }
 ,{ "however," }
 ,{ "create" }
 ,{ "a" }
 ,{ "task" }
 ,{ "not" }
 ,{ "using" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_b }
 ,{ "class." }
 ,{ "If" }
 ,{ "such" }
 ,{ "task" }
 ,{ "is" }
 ,{ "using" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "feature," }
 ,{ "you" }
 ,{ "must" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "DestroyPerTask" , & fmt_text_b }
 ,{ "to" }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "main" }
 ,{ "task" }
 ,{ "destroys" }
 ,{ "its" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "object" }
 ,{ "after" }
 ,{ "the" }
 ,{ "function" }
 ,{ "main()" , & fmt_text_b }
 ,{ "is" }
 ,{ "finished." }
 ,{ "Sometime" }
 ,{ "it" }
 ,{ "is" }
 ,{ "too" }
 ,{ "late." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "DestroyPerTask" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "earlier" }
 ,{ "termination." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "DestroyPerTask" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "destroys" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "A" }
 ,{ "PerTask" , & fmt_text_b }
 ,{ "object" }
 ,{ "should" }
 ,{ "not" }
 ,{ "be" }
 ,{ "used" }
 ,{ "directly." }
 ,{ "It" }
 ,{ "serves" }
 ,{ "as" }
 ,{ "a" }
 ,{ "container" }
 ,{ "for" }
 ,{ "particular" }
 ,{ "per-task" }
 ,{ "objects." }
 ,{ "Each" }
 ,{ "particular" }
 ,{ "per-task" }
 ,{ "object" }
 ,{ "is" }
 ,{ "described" }
 ,{ "by" }
 ,{ "its" }
 ,{ "Task-Object-Control" , & fmt_text_b }
 ,{ "class." }
 ,{ "Such" }
 ,{ "class" }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "structure" }
 ,{ "with" }
 ,{ "two" }
 ,{ "inner" }
 ,{ "types:" }
 ,{ "ObjectType" , & fmt_text_b }
 ,{ "and" }
 ,{ "BuilderType" , & fmt_text_b }
 ,{ "." }
 ,{ "ObjectType" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "per-task" }
 ,{ "object." }
 ,{ "BuilderType" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "class" }
 ,{ "which" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "per-task" }
 ,{ "object." }
 ,{ "Its" }
 ,{ "method" }
 ,{ "create()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object." }
 ,{ "To" }
 ,{ "destroy" }
 ,{ "an" }
 ,{ "object" }
 ,{ "the" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Two" }
 ,{ "global" }
 ,{ "functions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "get" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "per-task" }
 ,{ "object:" }
 ,{ "GetTaskObject<TOC>()" , & fmt_text_b }
 ,{ "and" }
 ,{ "TryGetTaskObject<TOC>()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "created" }
 ,{ "yet," }
 ,{ "it" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "assigned" }
 ,{ "builder" }
 ,{ "object." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "(null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned)." }
 ,{ "But" }
 ,{ "before" }
 ,{ "you" }
 ,{ "must" }
 ,{ "assign" }
 ,{ "an" }
 ,{ "object" }
 ,{ "builder." }
 ,{ "This" }
 ,{ "is" }
 ,{ "what" }
 ,{ "the" }
 ,{ "class" }
 ,{ "TaskObjectBuild<TOC>" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "for." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "In" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "the" }
 ,{ "builder" }
 ,{ "object" }
 ,{ "is" }
 ,{ "created" }
 ,{ "and" }
 ,{ "made" }
 ,{ "active." }
 ,{ "If" }
 ,{ "some" }
 ,{ "builder" }
 ,{ "is" }
 ,{ "already" }
 ,{ "active" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "In" }
 ,{ "destructor" }
 ,{ "the" }
 ,{ "builder" }
 ,{ "is" }
 ,{ "deactivated." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "To" }
 ,{ "control" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "per-task" }
 ,{ "object" }
 ,{ "the" }
 ,{ "class" }
 ,{ "PerTaskObjectScope" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "It" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "per-task" }
 ,{ "object" }
 ,{ "in" }
 ,{ "destructor." }
 ,{ "If" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "(by" }
 ,{ "default)" }
 ,{ "it" }
 ,{ "is" }
 ,{ "also" }
 ,{ "doing" }
 ,{ "in" }
 ,{ "the" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Page page = { "page_PerTask" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PKE {

Text b0 = { {
 { "PKE" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PSecCore.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PSecCore.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/PKE.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PKE.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "PKE" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "key" }
 ,{ "exchange" }
 ,{ "and" }
 ,{ "authentication" }
 ,{ "protocol" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "." }
 ,{ "Two" }
 ,{ "peers" }
 ,{ "communicate" }
 ,{ "using" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "to" }
 ,{ "confirm" }
 ,{ "peers" }
 ,{ "identity" }
 ,{ "and" }
 ,{ "to" }
 ,{ "generate" }
 ,{ "a" }
 ,{ "session" }
 ,{ "key." }
 ,{ "This" }
 ,{ "key" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "further" }
 ,{ "to" }
 ,{ "open" }
 ,{ "a" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "communication" }
 ,{ "channel." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "this" }
 ,{ "protocol" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b5 = { {
 { "PKError" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "PKError" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "error" }
 ,{ "code" }
 ,{ "type." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "identify" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "error" }
 ,{ "situation" }
 ,{ "during" }
 ,{ "the" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "negotiation." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "PKENoError" , & fmt_text_b }
 ,{ "means" }
 ,{ "no" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "PKError_NoClientID" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "server" }
 ,{ "has" }
 ,{ "not" }
 ,{ "recognized" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "client" }
 ,{ "identity." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "PKError_Exhausted" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "server" }
 ,{ "cannot" }
 ,{ "proceed" }
 ,{ "due" }
 ,{ "to" }
 ,{ "a" }
 ,{ "lack" }
 ,{ "of" }
 ,{ "some" }
 ,{ "processing" }
 ,{ "resource." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "PKError_NoAlgo" , & fmt_text_b }
 ,{ "means" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "common" }
 ,{ "algorithm" }
 ,{ "selection" }
 ,{ "between" }
 ,{ "the" }
 ,{ "client" }
 ,{ "and" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "PKError_NoAccess" , & fmt_text_b }
 ,{ "means" }
 ,{ "the" }
 ,{ "client" }
 ,{ "access" }
 ,{ "has" }
 ,{ "been" }
 ,{ "denied." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "PKError_NoLimit" , & fmt_text_b }
 ,{ "means" }
 ,{ "there" }
 ,{ "is" }
 ,{ "too" }
 ,{ "many" }
 ,{ "negotiations" }
 ,{ "on" }
 ,{ "the" }
 ,{ "server" }
 ,{ "side." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Prime" }
 ,{ "Key" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "A" }
 ,{ "prime" , & fmt_text_i }
 ,{ "key" , & fmt_text_i }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "hash" }
 ,{ "function." }
 ,{ "This" }
 ,{ "key" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "identify" }
 ,{ "a" }
 ,{ "peer" }
 ,{ "and" }
 ,{ "participates" }
 ,{ "in" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key" }
 ,{ "generation" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "To" }
 ,{ "carry" }
 ,{ "a" }
 ,{ "prime" }
 ,{ "key" }
 ,{ "an" }
 ,{ "OwnPtr" , & fmt_text_b }
 ,{ "to" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "AbstractClientID" }
} , & fmt_h4 , & align_h4 } ;

Text b17 = { {
 { "AbstractClientID" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "present" }
 ,{ "a" }
 ,{ "client" }
 ,{ "identity" }
 ,{ "(\"user" }
 ,{ "name\")." }
 ,{ "A" }
 ,{ "client" }
 ,{ "identity" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "octets." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "these" }
 ,{ "octets" }
 ,{ "is" }
 ,{ "transparent." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "plain" }
 ,{ "user" }
 ,{ "name" }
 ,{ "of" }
 ,{ "a" }
 ,{ "hash" }
 ,{ "digest" }
 ,{ "of" }
 ,{ "a" }
 ,{ "plain" }
 ,{ "user" }
 ,{ "name." }
 ,{ "It" }
 ,{ "is" }
 ,{ "transported" }
 ,{ "to" }
 ,{ "the" }
 ,{ "server" }
 ,{ "to" }
 ,{ "start" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "id" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "getID()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "the" }
 ,{ "id" }
 ,{ "octets" }
 ,{ "to" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "SessionKeyParam" }
} , & fmt_h4 , & align_h4 } ;

Text b21 = { {
 { "SessionKeyParam" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "session" }
 ,{ "key" }
 ,{ "parameters." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "keyset_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "keyset" }
 ,{ "length." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[MinKeySetLen,MaxKeySetLen]" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "default" }
 ,{ "value" }
 ,{ "is" }
 ,{ "DefaultKeySetLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "ttl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "time-to-live" }
 ,{ "key" }
 ,{ "parameter." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[MinTTL,MaxTTL]" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "default" }
 ,{ "value" }
 ,{ "is" }
 ,{ "DefaultTTL" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "utl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "key" }
 ,{ "traffic" }
 ,{ "limit." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[MinUTL,MaxUTL]" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "default" }
 ,{ "value" }
 ,{ "is" }
 ,{ "DefaultUTL" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "CryptAlgoSelect" }
} , & fmt_h4 , & align_h4 } ;

Text b26 = { {
 { "To" }
 ,{ "generate" }
 ,{ "a" }
 ,{ "session" }
 ,{ "key" }
 ,{ "three" }
 ,{ "cryptography" }
 ,{ "algorithms" }
 ,{ "must" }
 ,{ "be" }
 ,{ "selected." }
 ,{ "Both" }
 ,{ "server" }
 ,{ "and" }
 ,{ "client" }
 ,{ "propose" }
 ,{ "lists" }
 ,{ "of" }
 ,{ "such" }
 ,{ "triples" }
 ,{ "and" }
 ,{ "negotiate" }
 ,{ "selection." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "crypt_id" , & fmt_text_b }
 ,{ "identifies" }
 ,{ "a" }
 ,{ "block" }
 ,{ "cipher" }
 ,{ "algorithm." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "hash_id" , & fmt_text_b }
 ,{ "identifies" }
 ,{ "a" }
 ,{ "hash" }
 ,{ "algorithm." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "dhg_id" , & fmt_text_b }
 ,{ "identifies" }
 ,{ "a" }
 ,{ "Diffie-Hellman" }
 ,{ "group" }
 ,{ "algorithm." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "ClientDatabase" }
} , & fmt_h4 , & align_h4 } ;

Text b31 = { {
 { "ClientDatabase" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "interface" }
 ,{ "to" }
 ,{ "work" }
 ,{ "to" }
 ,{ "a" }
 ,{ "client" }
 ,{ "database." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "The" }
 ,{ "only" }
 ,{ "method" }
 ,{ "is" }
 ,{ "the" }
 ,{ "findClient()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "looks" }
 ,{ "up" }
 ,{ "in" }
 ,{ "the" }
 ,{ "client" }
 ,{ "database" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "client" }
 ,{ "credentials," }
 ,{ "if" }
 ,{ "any." }
 ,{ "client_id" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "client" }
 ,{ "identity." }
 ,{ "client_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "prime" }
 ,{ "client" }
 ,{ "key." }
 ,{ "client_profile" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "return" }
 ,{ "the" }
 ,{ "client" }
 ,{ "profile." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "AlgoSet" }
} , & fmt_h4 , & align_h4 } ;

Text b34 = { {
 { "AlgoSet" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "algorithm" }
 ,{ "selection" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "list." }
 ,{ "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "DefaultType" , & fmt_text_b }
 ,{ "argument" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "default" }
 ,{ "algorithm" }
 ,{ "selection" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "algorithm" }
 ,{ "selection" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "crypt_id" , & fmt_text_b }
 ,{ "," }
 ,{ "hash_id" , & fmt_text_b }
 ,{ "and" }
 ,{ "dhg_id" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "addDefault()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "some" }
 ,{ "default" }
 ,{ "algorithm" }
 ,{ "selection" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "getAlgoList()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "the" }
 ,{ "algorithm" }
 ,{ "selections." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "getAlgoLens()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "AlgoLen" , & fmt_text_b }
 ,{ "s," }
 ,{ "correspondent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "algorithm" }
 ,{ "selections." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "ClientNegotiant" }
} , & fmt_h3 , & align_h3 } ;

Text b41 = { {
 { "ClientNegotiant" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "client" }
 ,{ "to" }
 ,{ "start" }
 ,{ "a" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "exchange." }
 ,{ "When" }
 ,{ "the" }
 ,{ "exchange" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "a" }
 ,{ "signal" }
 ,{ "is" }
 ,{ "asserted" }
 ,{ "and" }
 ,{ "the" }
 ,{ "outcome" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "PacketEndpoint" , & fmt_text_b }
 ,{ "device" }
 ,{ "name." }
 ,{ "This" }
 ,{ "device" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "communicate" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "an" }
 ,{ "alert" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing" }
 ,{ "when" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "All" }
 ,{ "class" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "thread-safe." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "getState()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "The" }
 ,{ "state" }
 ,{ "is" }
 ,{ "State_Null" , & fmt_text_b }
 ,{ "right" }
 ,{ "after" }
 ,{ "the" }
 ,{ "creation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "prepare()" , & fmt_text_b }
 ,{ "method" }
 ,{ "turns" }
 ,{ "it" }
 ,{ "into" }
 ,{ "the" }
 ,{ "State_Ready" , & fmt_text_b }
 ,{ "." }
 ,{ "start()" , & fmt_text_b }
 ,{ "method" }
 ,{ "turns" }
 ,{ "it" }
 ,{ "into" }
 ,{ "the" }
 ,{ "State_Started" , & fmt_text_b }
 ,{ "." }
 ,{ "After" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "the" }
 ,{ "state" }
 ,{ "is" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "following:" }
 ,{ "State_Done" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "successful," }
 ,{ "State_ClientError" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "client" }
 ,{ "is" }
 ,{ "reported" }
 ,{ "a" }
 ,{ "error," }
 ,{ "State_ServerError" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "server" }
 ,{ "is" }
 ,{ "reported" }
 ,{ "a" }
 ,{ "error," }
 ,{ "State_Timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "protocol" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired." }
 ,{ "If" }
 ,{ "the" }
 ,{ "state" }
 ,{ "is" }
 ,{ "State_Done" , & fmt_text_b }
 ,{ "the" }
 ,{ "session" }
 ,{ "key" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getSessionKey()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "getError()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "This" }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "a" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "prepare()" , & fmt_text_b }
 ,{ "prepares" }
 ,{ "the" }
 ,{ "object" }
 ,{ "for" }
 ,{ "the" }
 ,{ "negotiation." }
 ,{ "The" }
 ,{ "following" }
 ,{ "data" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided:" }
 ,{ "psec_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "local" }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "further" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "communication" }
 ,{ "channel." }
 ,{ "client_id" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "client" }
 ,{ "identity." }
 ,{ "client_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "primary" }
 ,{ "client" }
 ,{ "key." }
 ,{ "server_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "primary" }
 ,{ "server" }
 ,{ "key." }
 ,{ "param" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "proposed" }
 ,{ "session" }
 ,{ "parameters." }
 ,{ "The" }
 ,{ "final" }
 ,{ "choice" }
 ,{ "of" }
 ,{ "these" }
 ,{ "parameters" }
 ,{ "is" }
 ,{ "a" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "start()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "process." }
 ,{ "A" }
 ,{ "list" }
 ,{ "of" }
 ,{ "algorithm" }
 ,{ "selections" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided," }
 ,{ "either" }
 ,{ "as" }
 ,{ "a" }
 ,{ "range" }
 ,{ "or" }
 ,{ "as" }
 ,{ "an" }
 ,{ "AlgoSet" , & fmt_text_b }
 ,{ "reference." }
 ,{ "The" }
 ,{ "algorithm" }
 ,{ "with" }
 ,{ "less" }
 ,{ "index" }
 ,{ "is" }
 ,{ "more" }
 ,{ "preferred." }
 ,{ "The" }
 ,{ "final" }
 ,{ "choice" }
 ,{ "of" }
 ,{ "algorithms" }
 ,{ "is" }
 ,{ "a" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "getSessionKey()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key." }
 ,{ "This" }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "if" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "successfully." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "ServerNegotiant" }
} , & fmt_h3 , & align_h3 } ;

Text b49 = { {
 { "ServerNegotiant" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "client" }
 ,{ "to" }
 ,{ "start" }
 ,{ "a" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "exchange." }
 ,{ "When" }
 ,{ "the" }
 ,{ "exchange" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "a" }
 ,{ "signal" }
 ,{ "is" }
 ,{ "asserted" }
 ,{ "and" }
 ,{ "the" }
 ,{ "outcome" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved." }
 ,{ "This" }
 ,{ "class" }
 ,{ "serves" }
 ,{ "multiple" }
 ,{ "clients" }
 ,{ "from" }
 ,{ "multiple" }
 ,{ "endpoints." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "EndpointDevice" , & fmt_text_b }
 ,{ "name." }
 ,{ "This" }
 ,{ "device" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "communicate" }
 ,{ "with" }
 ,{ "clients" }
 ,{ "from" }
 ,{ "multiple" }
 ,{ "endpoints." }
 ,{ "client_db" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "a" }
 ,{ "client" }
 ,{ "database." }
 ,{ "This" }
 ,{ "object" }
 ,{ "must" }
 ,{ "persist" }
 ,{ "during" }
 ,{ "the" }
 ,{ "negotiant" }
 ,{ "object" }
 ,{ "life-time." }
 ,{ "epman" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "a" }
 ,{ "endpoint" }
 ,{ "manager." }
 ,{ "This" }
 ,{ "object" }
 ,{ "must" }
 ,{ "persist" }
 ,{ "during" }
 ,{ "the" }
 ,{ "negotiant" }
 ,{ "object" }
 ,{ "life-time." }
 ,{ "Once" }
 ,{ "some" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "finished" }
 ,{ "the" }
 ,{ "open" }
 ,{ "method" }
 ,{ "of" }
 ,{ "this" }
 ,{ "manager" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "submit" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key" }
 ,{ "and" }
 ,{ "other" }
 ,{ "client" }
 ,{ "information" }
 ,{ "to" }
 ,{ "open" }
 ,{ "a" }
 ,{ "communication" }
 ,{ "with" }
 ,{ "the" }
 ,{ "client." }
 ,{ "max_clients" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "limit" }
 ,{ "of" }
 ,{ "the" }
 ,{ "simultaneously" }
 ,{ "going" }
 ,{ "negotiations." }
 ,{ "final_timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "time" }
 ,{ "to" }
 ,{ "keep" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "state" }
 ,{ "alive" }
 ,{ "after" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "During" }
 ,{ "this" }
 ,{ "time" }
 ,{ "the" }
 ,{ "client" }
 ,{ "can" }
 ,{ "resend" }
 ,{ "the" }
 ,{ "final" }
 ,{ "packet" }
 ,{ "to" }
 ,{ "get" }
 ,{ "confirmation" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "succeeded." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "prepare()" , & fmt_text_b }
 ,{ "prepares" }
 ,{ "the" }
 ,{ "server" }
 ,{ "for" }
 ,{ "negotiations." }
 ,{ "The" }
 ,{ "following" }
 ,{ "data" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided:" }
 ,{ "server_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "primary" }
 ,{ "server" }
 ,{ "key." }
 ,{ "param" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "proposed" }
 ,{ "session" }
 ,{ "parameters." }
 ,{ "A" }
 ,{ "final" }
 ,{ "choice" }
 ,{ "of" }
 ,{ "these" }
 ,{ "parameters" }
 ,{ "is" }
 ,{ "a" }
 ,{ "result" }
 ,{ "of" }
 ,{ "a" }
 ,{ "negotiation" }
 ,{ "with" }
 ,{ "a" }
 ,{ "client." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "start()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "the" }
 ,{ "server." }
 ,{ "A" }
 ,{ "list" }
 ,{ "of" }
 ,{ "algorithm" }
 ,{ "selections" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided," }
 ,{ "either" }
 ,{ "as" }
 ,{ "a" }
 ,{ "range" }
 ,{ "or" }
 ,{ "as" }
 ,{ "an" }
 ,{ "AlgoSet" , & fmt_text_b }
 ,{ "reference." }
 ,{ "The" }
 ,{ "algorithm" }
 ,{ "selection" }
 ,{ "with" }
 ,{ "less" }
 ,{ "index" }
 ,{ "is" }
 ,{ "more" }
 ,{ "preferred." }
 ,{ "The" }
 ,{ "final" }
 ,{ "choice" }
 ,{ "of" }
 ,{ "algorithms" }
 ,{ "is" }
 ,{ "a" }
 ,{ "result" }
 ,{ "of" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server." }
 ,{ "Server" }
 ,{ "is" }
 ,{ "responding" }
 ,{ "on" }
 ,{ "a" }
 ,{ "client" }
 ,{ "negotiation" }
 ,{ "prompt." }
 ,{ "Once" }
 ,{ "such" }
 ,{ "prompt" }
 ,{ "is" }
 ,{ "recognized" }
 ,{ "in" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "stream" }
 ,{ "of" }
 ,{ "packets" }
 ,{ "a" }
 ,{ "negotiation" }
 ,{ "with" }
 ,{ "the" }
 ,{ "client" }
 ,{ "is" }
 ,{ "started." }
 ,{ "The" }
 ,{ "negotiation" }
 ,{ "state" }
 ,{ "is" }
 ,{ "created." }
 ,{ "During" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "this" }
 ,{ "state" }
 ,{ "is" }
 ,{ "updated" }
 ,{ "and" }
 ,{ "finally" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "some" }
 ,{ "outcome." }
 ,{ "If" }
 ,{ "the" }
 ,{ "negotiation" }
 ,{ "is" }
 ,{ "successful," }
 ,{ "the" }
 ,{ "endpoint" }
 ,{ "manager" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "open" }
 ,{ "a" }
 ,{ "communicated" }
 ,{ "with" }
 ,{ "this" }
 ,{ "client." }
} , & fmt_text , & align_text } ;

Page page = { "page_PKE" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Place {

Text b0 = { {
 { "Place" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Place.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Place.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "raw" }
 ,{ "memory" }
 ,{ "pointers." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Byte" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "byte" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "atom." }
 ,{ "It" }
 ,{ "is" }
 ,{ "always" }
 ,{ "defined" }
 ,{ "as" }
 ,{ "the" }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "," }
 ,{ "according" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "standard." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Pointer" }
 ,{ "move" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "CastPtr()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "byte" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "PtrAdd()" , & fmt_text_b }
 ,{ "and" }
 ,{ "PtrSub()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "pointer" }
 ,{ "up" }
 ,{ "and" }
 ,{ "down" }
 ,{ "on" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "PtrDist()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "from" }
 ,{ "the" }
 ,{ "one" }
 ,{ "raw" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "another." }
 ,{ "Both" }
 ,{ "pointers" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "same" }
 ,{ "\"memory" }
 ,{ "segment\"" }
 ,{ "and" }
 ,{ "to" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "after" }
 ,{ "from" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Place" }
} , & fmt_h3 , & align_h3 } ;

Text b10 = { {
 { "Place" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "wrapper" }
 ,{ "around" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "You" }
 ,{ "can" }
 ,{ "move" }
 ,{ "Place" , & fmt_text_b }
 ,{ "on" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "and" }
 ,{ "auto-cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "desired" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Be" , & fmt_text_Alert }
 ,{ "warned" , & fmt_text_Alert }
 ,{ "," }
 ,{ "unlike" }
 ,{ "for" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "operators" }
 ,{ "+=" , & fmt_text_b }
 ,{ "and" }
 ,{ "-=" , & fmt_text_b }
 ,{ "return" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "value," }
 ,{ "not" }
 ,{ "the" }
 ,{ "new" }
 ,{ "one." }
 ,{ "Using" }
 ,{ "these" }
 ,{ "operators" }
 ,{ "you" }
 ,{ "can" }
 ,{ "dispense" }
 ,{ "a" }
 ,{ "raw" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "to" }
 ,{ "store" }
 ,{ "multiple" }
 ,{ "objects:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "PlaceAt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "Place" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Finally," }
 ,{ "a" }
 ,{ "placement" }
 ,{ "new" }
 ,{ "and" }
 ,{ "delete" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "for" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Place<void>" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_Place" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PlanInit {

Text b0 = { {
 { "PlanInit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PlanInit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PlanInit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "In" }
 ,{ "C++" }
 ,{ "constructors" }
 ,{ "of" }
 ,{ "global" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "called" }
 ,{ "in" }
 ,{ "undefined" }
 ,{ "order," }
 ,{ "except" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "the" }
 ,{ "same" }
 ,{ "translation" }
 ,{ "unit" }
 ,{ "initialized" }
 ,{ "in" }
 ,{ "the" }
 ,{ "order" }
 ,{ "of" }
 ,{ "definition." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "requires," }
 ,{ "however," }
 ,{ "the" }
 ,{ "more" }
 ,{ "precise" }
 ,{ "control" }
 ,{ "on" }
 ,{ "this" }
 ,{ "matter." }
 ,{ "PlanInit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "feature," }
 ,{ "designed" }
 ,{ "for" }
 ,{ "this." }
 ,{ "It" }
 ,{ "provides" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b3_0 = { {
 { "objects," }
 ,{ "initialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "PlanInit" , & fmt_list_b }
 ,{ "are" }
 ,{ "initialized" }
 ,{ "before" }
 ,{ "all" }
 ,{ "other" }
 ,{ "global" }
 ,{ "objects," }
} , & fmt_list , & align_list } ;

Text b3_1 = { {
 { "you" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "initialization" }
 ,{ "dependencies," }
 ,{ "i.e." }
 ,{ "you" }
 ,{ "may" }
 ,{ "specify," }
 ,{ "that" }
 ,{ "some" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "initialized" }
 ,{ "before" }
 ,{ "another," }
} , & fmt_list , & align_list } ;

Text b3_2 = { {
 { "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "dependency" }
 ,{ "cycle," }
 ,{ "execution" }
 ,{ "is" }
 ,{ "aborted," }
} , & fmt_list , & align_list } ;

Text b3_3 = { {
 { "uninitialization" }
 ,{ "happens" }
 ,{ "according" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "general" }
 ,{ "rule:" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order," }
 ,{ "than" }
 ,{ "initialization." }
} , & fmt_list , & align_list } ;

TextList b3 = { {
 { 'â€¢' , { { & b3_0 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_1 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_2 , null , ItemInner , ItemOuter } } }
 ,{ 'â€¢' , { { & b3_3 , null , ItemInner , ItemOuter } } }
} } ;

Text b4 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "usage" }
 ,{ "pattern." }
 ,{ "Assume," }
 ,{ "you" }
 ,{ "have" }
 ,{ "the" }
 ,{ "header" }
 ,{ "XXX.h" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "source" }
 ,{ "XXX.cpp" , & fmt_text_b }
 ,{ "and" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "create" }
 ,{ "the" }
 ,{ "global" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "GlobalXXXType" , & fmt_text_b }
 ,{ "using" }
 ,{ "PlanInit" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "declare" }
 ,{ "the" }
 ,{ "following" }
 ,{ "global" }
 ,{ "function" }
 ,{ "in" }
 ,{ "the" }
 ,{ "XXX.h" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Then" }
 ,{ "in" }
 ,{ "the" }
 ,{ "source" }
 ,{ "file" }
 ,{ "XXX.cpp" , & fmt_text_b }
 ,{ "you" }
 ,{ "define" }
 ,{ "the" }
 ,{ "global" }
 ,{ "object" }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "You" }
 ,{ "may" }
 ,{ "provide" }
 ,{ "as" }
 ,{ "many" }
 ,{ "requirements" }
 ,{ "as" }
 ,{ "you" }
 ,{ "need." }
 ,{ "PlanInit" , & fmt_text_b }
 ,{ "make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "XXX" , & fmt_text_b }
 ,{ "initialization" }
 ,{ "happens" }
 ,{ "after" }
 ,{ "YYY" , & fmt_text_b }
 ,{ "." }
 ,{ "Functions" }
 ,{ "GetPlanInitNode_XXX()" , & fmt_text_b }
 ,{ "are" }
 ,{ "required" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "dependencies." }
 ,{ "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "don't" }
 ,{ "expose" }
 ,{ "global" }
 ,{ "objects," }
 ,{ "they" }
 ,{ "are" }
 ,{ "hidden" }
 ,{ "in" }
 ,{ "source" }
 ,{ "files" }
 ,{ "and" }
 ,{ "provide" }
 ,{ "functionality" }
 ,{ "using" }
 ,{ "global" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "function" }
 ,{ "GetPlanInitNode_CCore()" , & fmt_text_b }
 ,{ "marks" }
 ,{ "the" }
 ,{ "entire" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "initialization." }
 ,{ "If" }
 ,{ "you" }
 ,{ "are" }
 ,{ "using" }
 ,{ "the" }
 ,{ "PlanInit" , & fmt_text_b }
 ,{ "in" }
 ,{ "your" }
 ,{ "project," }
 ,{ "make" }
 ,{ "sure" }
 ,{ "to" }
 ,{ "add" }
 ,{ "this" }
 ,{ "node" }
 ,{ "in" }
 ,{ "requirement" }
 ,{ "lists." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "type" }
 ,{ "GlobalXXXType" , & fmt_text_b }
 ,{ "must" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "node" }
 ,{ "tag:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "node" }
 ,{ "GlobalXXXObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "initialization" }
 ,{ "priority" }
 ,{ "attributes," }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "the" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "family" }
 ,{ "of" }
 ,{ "C++" }
 ,{ "compilers." }
 ,{ "There" }
 ,{ "are" }
 ,{ "4" }
 ,{ "levels" }
 ,{ "of" }
 ,{ "priority," }
 ,{ "reserved" }
 ,{ "for" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "needs:" }
 ,{ "CCORE_INITPRI_0" , & fmt_text_b }
 ,{ "," }
 ,{ "CCORE_INITPRI_1" , & fmt_text_b }
 ,{ "," }
 ,{ "CCORE_INITPRI_2" , & fmt_text_b }
 ,{ "and" }
 ,{ "CCORE_INITPRI_3" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "most" }
 ,{ "urgent" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "reserved" }
 ,{ "for" }
 ,{ "PlanInit" , & fmt_text_b }
 ,{ "nodes." }
 ,{ "Finally," }
 ,{ "PlanInit" , & fmt_text_b }
 ,{ "object" }
 ,{ "initialization" }
 ,{ "happens" }
 ,{ "on" }
 ,{ "the" }
 ,{ "third" }
 ,{ "level." }
 ,{ "The" }
 ,{ "last" }
 ,{ "level" }
 ,{ "is" }
 ,{ "reserved" }
 ,{ "for" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "of" }
 ,{ "global" }
 ,{ "objects" }
 ,{ "after" }
 ,{ "the" }
 ,{ "main" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "library" }
 ,{ "is" }
 ,{ "up" }
 ,{ "but" }
 ,{ "before" }
 ,{ "\"normal\"" }
 ,{ "global" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "coming" }
 ,{ "up." }
} , & fmt_text , & align_text } ;

Page page = { "page_PlanInit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_list , outer_list , back_list }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PosSub {

Text b0 = { {
 { "PosSub" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/PosSub.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/PosSub.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PosSub()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "function," }
 ,{ "performing" }
 ,{ "the" }
 ,{ "positive" }
 ,{ "subtraction:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "PosSub()" , & fmt_text_b }
 ,{ "accepts" }
 ,{ "any" }
 ,{ "number" }
 ,{ "of" }
 ,{ "UIntType" , & fmt_text_b }
 ,{ "arguments," }
 ,{ "value" }
 ,{ "type" }
 ,{ "is" }
 ,{ "determined" }
 ,{ "from" }
 ,{ "the" }
 ,{ "first" }
 ,{ "one." }
 ,{ "Extra" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "subtracted" }
 ,{ "one" }
 ,{ "by" }
 ,{ "one" }
 ,{ "from" }
 ,{ "the" }
 ,{ "first" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "resulting" }
 ,{ "type" }
 ,{ "encodes" }
 ,{ "both" }
 ,{ "the" }
 ,{ "result" }
 ,{ "and" }
 ,{ "the" }
 ,{ "no-underflow" }
 ,{ "flag," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "implicitly" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Some" }
 ,{ "examples:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "All" }
 ,{ "involved" }
 ,{ "functions" }
 ,{ "and" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "constexpr" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "function" }
 ,{ "Enough()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "value" , & fmt_text_b }
 ,{ "is" }
 ,{ "greater" }
 ,{ "of" }
 ,{ "equal" }
 ,{ "the" }
 ,{ "sum" }
 ,{ "of" }
 ,{ "the" }
 ,{ "other" }
 ,{ "arguments." }
 ,{ "It" }
 ,{ "calls" }
 ,{ "PosSub()" , & fmt_text_b }
 ,{ "and" }
 ,{ "skips" }
 ,{ "the" }
 ,{ "result," }
 ,{ "only" }
 ,{ "the" }
 ,{ "non-overflow" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_PosSub" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Pow {

Text b0 = { {
 { "Pow" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Pow.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Pow.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "These" }
 ,{ "two" }
 ,{ "functions" }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "second" }
 ,{ "arguments" }
 ,{ "is" }
 ,{ "the" }
 ,{ "power" }
 ,{ "exponent." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "value." }
 ,{ "The" }
 ,{ "function" }
 ,{ "Pow_pos()" , & fmt_text_b }
 ,{ "assumes" }
 ,{ "the" }
 ,{ "exponent" }
 ,{ "is" }
 ,{ "positive." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "function" }
 ,{ "Pow()" , & fmt_text_b }
 ,{ "assumes" }
 ,{ "that" }
 ,{ "T(1)" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "one" }
 ,{ "value" }
 ,{ "for" }
 ,{ "this" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Page page = { "page_Pow" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PretextFileToMem {

Text b0 = { {
 { "PretextFileToMem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PretextFileToMem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PretextFileToMem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PretextFileToMem" , & fmt_text_b }
 ,{ "behaves" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "FileToMem" , & fmt_text_b }
 ,{ "class:" }
 ,{ "it" }
 ,{ "maps" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory." }
 ,{ "But" }
 ,{ "it" }
 ,{ "can" }
 ,{ "instead" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "some" }
 ,{ "hard-coded" }
 ,{ "virtual" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "first" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "can" }
 ,{ "be" }
 ,{ "the" }
 ,{ "FileToMem" , & fmt_text_b }
 ,{ "class" }
 ,{ "or" }
 ,{ "any" }
 ,{ "class" }
 ,{ "with" }
 ,{ "similar" }
 ,{ "functionality." }
 ,{ "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "some" }
 ,{ "object." }
 ,{ "This" }
 ,{ "object" }
 ,{ "provides" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "virtual" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "PretextMap" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "of" }
 ,{ "a" }
 ,{ "Pretext" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "should" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "class" }
 ,{ "from" }
 ,{ "this" }
 ,{ "one" }
 ,{ "and" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "prepare()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "should" }
 ,{ "register" }
 ,{ "each" }
 ,{ "virtual" }
 ,{ "file" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "add()" , & fmt_text_b }
 ,{ "." }
 ,{ "Constructor" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PretextMap" , & fmt_text_b }
 ,{ "has" }
 ,{ "one" }
 ,{ "argument" }
 ,{ "check_dev" , & fmt_text_b }
 ,{ "," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "this" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "the" }
 ,{ "file_name" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "prefix" }
 ,{ "pretext:" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "such" }
 ,{ "prefix" }
 ,{ "is" }
 ,{ "not" }
 ,{ "found," }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "not" }
 ,{ "virtual." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "is" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "a" }
 ,{ "virtual." }
 ,{ "If" }
 ,{ "the" }
 ,{ "check_dev" , & fmt_text_b }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "," }
 ,{ "only" }
 ,{ "registered" }
 ,{ "files" }
 ,{ "are" }
 ,{ "considered" }
 ,{ "as" }
 ,{ "virtual." }
} , & fmt_text , & align_text } ;

Page page = { "page_PretextFileToMem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintAbort {

Text b0 = { {
 { "PrintAbort" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintAbort.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintAbort.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PrintAbort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "helper" }
 ,{ "function." }
 ,{ "It" }
 ,{ "formats" }
 ,{ "a" }
 ,{ "message" }
 ,{ "in" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "then" }
 ,{ "calls" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintAbort" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintBits {

Text b0 = { {
 { "PrintBits" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintBits.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintBits.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PrintBits()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "bind" }
 ,{ "together" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "device" }
 ,{ "and" }
 ,{ "some" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "value" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "PrintBitsClass" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "PrintBitsClass" , & fmt_text_b }
 ,{ "prints" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "in" }
 ,{ "a" }
 ,{ "textual" }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "usage" }
 ,{ "pattern" }
 ,{ "(from" }
 ,{ "GenFile.h" , & fmt_text_b }
 ,{ "):" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "And" }
 ,{ "more:" }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintBits" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintDevice {

Text b0 = { {
 { "Printing" }
 ,{ "devices" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Print.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Print.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/print" , & fmt_text_Files_b }
 ,{ "CCore/src/print" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "standard" }
 ,{ "\"printing" }
 ,{ "device\"" }
 ,{ "classes," }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "." }
 ,{ "Lists" }
 ,{ "are" }
 ,{ "differ" }
 ,{ "in" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "PrintCon" }
 ,{ "(HCore)" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "PrintCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "and" }
 ,{ "the" }
 ,{ "most" }
 ,{ "important" }
 ,{ "class" }
 ,{ "in" }
 ,{ "the" }
 ,{ "list." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "print" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target" }
 ,{ "function" }
 ,{ "ConWrite" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysCon.h" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "to" }
 ,{ "call" }
 ,{ "some" }
 ,{ "native" }
 ,{ "OS" }
 ,{ "function" }
 ,{ "to" }
 ,{ "print" }
 ,{ "the" }
 ,{ "text" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "word" }
 ,{ "Con" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "print" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "class" }
 ,{ "PrintCon" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "small" }
 ,{ "stack" }
 ,{ "buffer" }
 ,{ "to" }
 ,{ "accumulate" }
 ,{ "the" }
 ,{ "incoming" }
 ,{ "text" }
 ,{ "stream:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "static" }
 ,{ "methods" }
 ,{ "Print()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "direct" }
 ,{ "printing" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "PrintCon" }
 ,{ "(XCore)" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "The" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PrintCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "close" }
 ,{ "to" }
 ,{ "the" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "small" }
 ,{ "difference" }
 ,{ "is" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "argument" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "DefaultTimeout" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "main" }
 ,{ "difference," }
 ,{ "however," }
 ,{ "is" }
 ,{ "not" }
 ,{ "the" }
 ,{ "interface," }
 ,{ "but" }
 ,{ "the" }
 ,{ "implementation." }
 ,{ "XCore" , & fmt_text_b }
 ,{ "PrintCon" , & fmt_text_b }
 ,{ "uses" }
 ,{ "NanoPacket" , & fmt_text_a }
 ,{ "s." }
 ,{ "Methods" }
 ,{ "Print()" , & fmt_text_b }
 ,{ "create" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "PrintCon" , & fmt_text_b }
 ,{ "object" }
 ,{ "to" }
 ,{ "print" }
 ,{ "the" }
 ,{ "text." }
 ,{ "Printing" }
 ,{ "is" }
 ,{ "not" }
 ,{ "permitted" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "XCore" , & fmt_text_b }
 ,{ "supports" }
 ,{ "the" }
 ,{ "console" }
 ,{ "printing" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "functions," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "sys/SysCon.h" , & fmt_text_b }
 ,{ "header." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "full" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "is" }
 ,{ "the" }
 ,{ "target" }
 ,{ "resposibility." }
 ,{ "For" }
 ,{ "this" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Sys::ConBase" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "defined." }
 ,{ "Usually" }
 ,{ "a" }
 ,{ "target" }
 ,{ "device" }
 ,{ "has" }
 ,{ "a" }
 ,{ "serial" }
 ,{ "port" }
 ,{ "and" }
 ,{ "console" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "delivered" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host" }
 ,{ "computer" }
 ,{ "through" }
 ,{ "the" }
 ,{ "port" }
 ,{ "driver." }
} , & fmt_text , & align_text } ;

Link link_PrintFile = { & page , { 14 } } ;

Text b14 = { {
 { "PrintFile" }
 ,{ "(HCore)" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "PrintFile" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "print" }
 ,{ "to" }
 ,{ "a" }
 ,{ "file." }
 ,{ "On" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "OS" }
 ,{ "native" }
 ,{ "file" }
 ,{ "input-output" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "PrintFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "or" }
 ,{ "closed." }
 ,{ "To" }
 ,{ "print" }
 ,{ "to" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "file," }
 ,{ "the" }
 ,{ "PrintFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "and" }
 ,{ "open" , & fmt_text_a }
 ,{ "flags" , & fmt_text_a }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "closed" }
 ,{ "state." }
 ,{ "Non-default" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "file." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Destructor" }
 ,{ "flushes" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "closed" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "and" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "and" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pending" }
 ,{ "output" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "the" }
 ,{ "FileMultiError" , & fmt_text_a }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "disableExceptions()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "exceptions" }
 ,{ "during" }
 ,{ "print" }
 ,{ "operations." }
 ,{ "You" }
 ,{ "may" }
 ,{ "call" }
 ,{ "this" }
 ,{ "method" }
 ,{ "after" }
 ,{ "the" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "exceptions" }
 ,{ "are" }
 ,{ "disabled," }
 ,{ "the" }
 ,{ "special" }
 ,{ "internal" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "printing" }
 ,{ "error." }
 ,{ "This" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "added" }
 ,{ "in" }
 ,{ "the" }
 ,{ "error" }
 ,{ "list" }
 ,{ "during" }
 ,{ "a" }
 ,{ "close" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "preserveFile()" , & fmt_text_b }
 ,{ "preserves" }
 ,{ "a" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "AutoDelete" , & fmt_text_b }
 ,{ "open" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "PrintFile" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "constructed" }
 ,{ "from" }
 ,{ "two" }
 ,{ "classes:" }
 ,{ "SafeBuf" , & fmt_text_a }
 ,{ "and" }
 ,{ "RawFileToPrint" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "The" }
 ,{ "SafeBuf" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "file" }
 ,{ "buffer." }
 ,{ "PrintFile" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "file" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "size" }
 ,{ "64" }
 ,{ "KBytes." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "required" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "not" }
 ,{ "available," }
 ,{ "SafeBuf" , & fmt_text_b }
 ,{ "uses" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "small" }
 ,{ "safeguard" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "size" }
 ,{ "32" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "RawFileToPrint" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "built" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target" }
 ,{ "class" }
 ,{ "Sys::File" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "sys/SysFile.h" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "performs" }
 ,{ "open/close" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "the" }
 ,{ "raw" }
 ,{ "file" }
 ,{ "output." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "The" }
 ,{ "target" }
 ,{ "Sys::File" , & fmt_text_b }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "classical" }
 ,{ "set" }
 ,{ "of" }
 ,{ "file" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "call" }
 ,{ "directly" }
 ,{ "OS" }
 ,{ "file" }
 ,{ "system" }
 ,{ "interface" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "PrintFile" }
 ,{ "(XCore)" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "On" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "PrintFile" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PrintAsyncFile" , & fmt_text_a , & link_PrintAsyncFile }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "To" }
 ,{ "open" }
 ,{ "a" }
 ,{ "file" }
 ,{ "the" }
 ,{ "DefaultFileDevice" , & fmt_text_a }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Link link_PrintAsyncFile = { & page , { 32 } } ;

Text b32 = { {
 { "PrintAsyncFile" }
} , & fmt_h4 , & align_h4 } ;

Text b33 = { {
 { "PrintAsyncFile" , & fmt_text_b }
 ,{ "is" }
 ,{ "built" }
 ,{ "using" }
 ,{ "the" }
 ,{ "AsyncFile" , & fmt_text_a }
 ,{ "class." }
 ,{ "Output" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "buffered" }
 ,{ "using" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "buffers." }
 ,{ "Once" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "filled," }
 ,{ "it" }
 ,{ "is" }
 ,{ "submitted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "object," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "may" }
 ,{ "be" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "target" }
 ,{ "device" }
 ,{ "asynchronously." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "A" }
 ,{ "file" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "before" }
 ,{ "a" }
 ,{ "printing." }
 ,{ "You" }
 ,{ "can" }
 ,{ "do" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Constructors" }
 ,{ "arguments" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "and" }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "are" }
 ,{ "propagated" }
 ,{ "to" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "object." }
 ,{ "file_name" , & fmt_text_b }
 ,{ "and" }
 ,{ "open_flags" , & fmt_text_b }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "file" }
 ,{ "to" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "and" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "file" }
 ,{ "may" }
 ,{ "be" }
 ,{ "also" }
 ,{ "specified" }
 ,{ "using" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "device" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Destructor" }
 ,{ "completes" }
 ,{ "operations," }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file" }
 ,{ "and" }
 ,{ "reports" }
 ,{ "errors" }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "setFinalTimeout()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "\"final" }
 ,{ "timeout\"." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "exec2()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "execute" }
 ,{ "a" }
 ,{ "program." }
 ,{ "Some" }
 ,{ "AsyncFileSystem" , & fmt_text_a }
 ,{ "object" }
 ,{ "is" }
 ,{ "involved." }
 ,{ "Once" }
 ,{ "you" }
 ,{ "\"open\"" }
 ,{ "a" }
 ,{ "file" }
 ,{ "with" }
 ,{ "this" }
 ,{ "method," }
 ,{ "you" }
 ,{ "may" }
 ,{ "print" }
 ,{ "the" }
 ,{ "program" }
 ,{ "command-line." }
 ,{ "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "program," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "preserveFile()" , & fmt_text_b }
 ,{ "and" }
 ,{ "close" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "first" }
 ,{ "variant" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "AsyncFileSystem" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name" }
 ,{ "found" }
 ,{ "in" }
 ,{ "arguments" }
 ,{ "(both" }
 ,{ "device" }
 ,{ "names" }
 ,{ "in" }
 ,{ "dir" , & fmt_text_b }
 ,{ "and" }
 ,{ "program" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "same)." }
 ,{ "Additional" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "output" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "FileMultiError" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "close()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "output" }
 ,{ "and" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "preserveFile()" , & fmt_text_b }
 ,{ "preserves" }
 ,{ "the" }
 ,{ "file," }
 ,{ "opened" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Open_AutoDelete" , & fmt_text_b }
 ,{ "open" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "AsyncFile" , & fmt_text_b }
 ,{ "methods." }
 ,{ "Usually" }
 ,{ "they" }
 ,{ "are" }
 ,{ "not" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "PrintPTPCon" }
} , & fmt_h4 , & align_h4 } ;

Text b45 = { {
 { "This" }
 ,{ "class" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_a }
 ,{ "Console" , & fmt_text_a }
 ,{ "protocol" }
 ,{ "to" }
 ,{ "print" }
 ,{ "over" }
 ,{ "a" }
 ,{ "net." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "Constructor" }
 ,{ "connects" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Con" , & fmt_text_b }
 ,{ "client" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "enableExceptions()" , & fmt_text_b }
 ,{ "enables" }
 ,{ "exception" }
 ,{ "generation" }
 ,{ "during" }
 ,{ "printing." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "flush_and_wait()" , & fmt_text_b }
 ,{ "flushes" }
 ,{ "stream" }
 ,{ "and" }
 ,{ "waits" }
 ,{ "until" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "operations" }
 ,{ "are" }
 ,{ "finished" }
 ,{ "(up" }
 ,{ "to" }
 ,{ "timeout)." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "Before" }
 ,{ "printing" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Con" , & fmt_text_b }
 ,{ "device," }
 ,{ "console" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened." }
 ,{ "You" }
 ,{ "can" }
 ,{ "do" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "PTPConOpenClose" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Constructor" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "console" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "and" }
 ,{ "configuration" }
 ,{ "properties." }
 ,{ "Destructor" }
 ,{ "closes" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "This" }
 ,{ "class" }
 ,{ "also" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "read" }
 ,{ "or" }
 ,{ "write" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Con" , & fmt_text_b }
 ,{ "device," }
 ,{ "using" }
 ,{ "\"raw\"" }
 ,{ "methods." }
 ,{ "But" }
 ,{ "it" }
 ,{ "is" }
 ,{ "better" }
 ,{ "to" }
 ,{ "use" }
 ,{ "classes," }
 ,{ "intended" }
 ,{ "for" }
 ,{ "printing" }
 ,{ "or" }
 ,{ "console" , & fmt_text_a }
 ,{ "reading" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintError {

Text b0 = { {
 { "PrintError" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintError.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintError.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PrintError" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "text" }
 ,{ "description" }
 ,{ "of" }
 ,{ "the" }
 ,{ "system" }
 ,{ "error" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "For" }
 ,{ "example," }
 ,{ "in" }
 ,{ "HCore" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintError" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Printing {

Text b0 = { {
 { "Printing" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Printf.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Printf.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/DetectProxy.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DetectProxy.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Subfolders" }
 ,{ "CCore/inc/printf" , & fmt_text_Files_b }
 ,{ "CCore/src/printf" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "infrastructure." }
 ,{ "Printing" }
 ,{ "is" }
 ,{ "a" }
 ,{ "transformation" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "into" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "characters." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "actors" }
 ,{ "in" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "process:" }
 ,{ "the" }
 ,{ "object," }
 ,{ "the" }
 ,{ "output" }
 ,{ "device" }
 ,{ "and" }
 ,{ "printing" }
 ,{ "options." }
 ,{ "The" }
 ,{ "output" }
 ,{ "device" }
 ,{ "consumes" }
 ,{ "characters," }
 ,{ "printing" }
 ,{ "options" }
 ,{ "determines" }
 ,{ "how" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "exactly" }
 ,{ "transformed." }
 ,{ "For" }
 ,{ "example," }
 ,{ "integer" }
 ,{ "can" }
 ,{ "be" }
 ,{ "represented" }
 ,{ "in" }
 ,{ "the" }
 ,{ "decimal" }
 ,{ "form" }
 ,{ "or" }
 ,{ "in" }
 ,{ "the" }
 ,{ "hexadecimal," }
 ,{ "with" }
 ,{ "or" }
 ,{ "without" }
 ,{ "sign," }
 ,{ "with" }
 ,{ "extra" }
 ,{ "zero" }
 ,{ "digits" }
 ,{ "and" }
 ,{ "so" }
 ,{ "on." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "printing" }
 ,{ "implementation." }
 ,{ "There" }
 ,{ "are" }
 ,{ "default" }
 ,{ "implementations" }
 ,{ "for" }
 ,{ "integral" }
 ,{ "and" }
 ,{ "string-like" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Printing" }
 ,{ "functions" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "Printing" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "printing" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Printf()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "format" }
 ,{ "string" }
 ,{ "to" }
 ,{ "embed" }
 ,{ "given" }
 ,{ "objects" }
 ,{ "into" }
 ,{ "the" }
 ,{ "string" }
 ,{ "with" }
 ,{ "specified" }
 ,{ "printing" }
 ,{ "options" }
 ,{ "and" }
 ,{ "puts" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "given" }
 ,{ "output" }
 ,{ "device." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "classic" }
 ,{ "C" }
 ,{ "printf()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "advantages:" }
 ,{ "type-safe" }
 ,{ "and" }
 ,{ "type-driven," }
 ,{ "easily" }
 ,{ "customizable" }
 ,{ "output" }
 ,{ "devices," }
 ,{ "extendable" }
 ,{ "to" }
 ,{ "print" }
 ,{ "any" }
 ,{ "desired" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Putobj()" , & fmt_text_b }
 ,{ "outs" }
 ,{ "given" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "default" }
 ,{ "printing" }
 ,{ "options." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Putch()" , & fmt_text_b }
 ,{ "casts" }
 ,{ "given" }
 ,{ "objects" }
 ,{ "to" }
 ,{ "char" , & fmt_text_b }
 ,{ "s" }
 ,{ "and" }
 ,{ "outs" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Format" }
 ,{ "string" }
 ,{ "is" }
 ,{ "an" }
 ,{ "ordinary" }
 ,{ "zero-terminated" }
 ,{ "string" }
 ,{ "with" }
 ,{ "embedded" }
 ,{ "format" }
 ,{ "specifiers." }
 ,{ "Format" }
 ,{ "specifier" }
 ,{ "has" }
 ,{ "a" }
 ,{ "form" }
 ,{ "\"#<options>;\"" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "<options>" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "option" }
 ,{ "string." }
 ,{ "It" }
 ,{ "is" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "object" }
 ,{ "print" }
 ,{ "options." }
 ,{ "To" }
 ,{ "print" }
 ,{ "the" }
 ,{ "character" }
 ,{ "'#'" , & fmt_text_b }
 ,{ "use" }
 ,{ "\"##\"" , & fmt_text_b }
 ,{ "as" }
 ,{ "a" }
 ,{ "format" }
 ,{ "specifier." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Format" }
 ,{ "string" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "zero-terminated" }
 ,{ "character" }
 ,{ "string," }
 ,{ "not" }
 ,{ "as" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "," }
 ,{ "due" }
 ,{ "to" }
 ,{ "the" }
 ,{ "printf()" , & fmt_text_b }
 ,{ "tradition." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "How" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "type" }
 ,{ "printable" }
} , & fmt_h3 , & align_h3 } ;

Text b13 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "ways" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "type" }
 ,{ "printable." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "most" }
 ,{ "direct" }
 ,{ "way:" }
 ,{ "define" }
 ,{ "in" }
 ,{ "the" }
 ,{ "class" }
 ,{ "definition" }
 ,{ "the" }
 ,{ "method" }
 ,{ "template" }
 ,{ "print()" , & fmt_text_b }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "If" }
 ,{ "you" }
 ,{ "need" }
 ,{ "printing" }
 ,{ "options" }
 ,{ "do" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "second" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "proxy" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "type" }
 ,{ "SomeClass" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "castable" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SomeClass::PrintProxyType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "For" }
 ,{ "a" }
 ,{ "non-class" }
 ,{ "type" }
 ,{ "you" }
 ,{ "can" }
 ,{ "define" }
 ,{ "a" }
 ,{ "function" }
 ,{ "GetTextDesc()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "This" }
 ,{ "way" }
 ,{ "is" }
 ,{ "intended" }
 ,{ "mostly" }
 ,{ "to" }
 ,{ "print" }
 ,{ "enumerations." }
 ,{ "GetTextDesc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "proxy:" }
 ,{ "it" }
 ,{ "must" }
 ,{ "return" }
 ,{ "something" }
 ,{ "printable." }
 ,{ "There" }
 ,{ "is" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "such" }
 ,{ "functions" }
 ,{ "for" }
 ,{ "bool" , & fmt_text_b }
 ,{ "and" }
 ,{ "integral" }
 ,{ "types:" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "It" }
 ,{ "allows" }
 ,{ "to" }
 ,{ "print" }
 ,{ "a" }
 ,{ "non-class" }
 ,{ "type," }
 ,{ "castable" }
 ,{ "to" }
 ,{ "one" }
 ,{ "of" }
 ,{ "these" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "specialize" }
 ,{ "the" }
 ,{ "template" }
 ,{ "CCore::PrintProxy<T>" , & fmt_text_b }
 ,{ "to" }
 ,{ "define" }
 ,{ "the" }
 ,{ "print" }
 ,{ "proxy" }
 ,{ "type" }
 ,{ "and" }
 ,{ "optionally" }
 ,{ "the" }
 ,{ "print" }
 ,{ "option" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "You" }
 ,{ "can" }
 ,{ "determine" }
 ,{ "the" }
 ,{ "printing" }
 ,{ "option" }
 ,{ "type" }
 ,{ "using" }
 ,{ "the" }
 ,{ "PrintOptAdapter<T>" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "option" }
 ,{ "type" }
 ,{ "(even" }
 ,{ "through" }
 ,{ "proxy)," }
 ,{ "then" }
 ,{ "PrintOptAdapter<T>::PrintOptType" , & fmt_text_b }
 ,{ "is" }
 ,{ "that" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Sometimes" }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "printing" }
 ,{ "options" }
 ,{ "using" }
 ,{ "the" }
 ,{ "object," }
 ,{ "not" }
 ,{ "the" }
 ,{ "format" }
 ,{ "string." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "BindOpt" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Output" }
 ,{ "devices" }
} , & fmt_h3 , & align_h3 } ;

Text b25 = { {
 { "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "output" }
 ,{ "device" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "ether" }
 ,{ "output" }
 ,{ "device" }
 ,{ "class" }
 ,{ "or" }
 ,{ "define" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "adapter" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Or" }
 ,{ "using" }
 ,{ "specialization:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "A" }
 ,{ "temporary" }
 ,{ "printing" }
 ,{ "adapter" }
 ,{ "type" }
 ,{ "object" }
 ,{ "is" }
 ,{ "created" }
 ,{ "from" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "function" }
 ,{ "in" }
 ,{ "such" }
 ,{ "case" }
 ,{ "and" }
 ,{ "used" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "printing." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Output" }
 ,{ "device" }
 ,{ "class" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "members:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "The" }
 ,{ "following" }
 ,{ "output" }
 ,{ "types" }
 ,{ "are" }
 ,{ "provided:" }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "NoPrint" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "word" , & fmt_text_b }
 ,{ "to" }
 ,{ "print" }
 ,{ "nowhere:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "The" }
 ,{ "next" }
 ,{ "type" }
 ,{ "is" }
 ,{ "PrintBase" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "for" }
 ,{ "actual" }
 ,{ "output" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "When" }
 ,{ "you" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "class" }
 ,{ "from" }
 ,{ "PrintBase" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "two" }
 ,{ "virtual" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "do_provide()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "setup" }
 ,{ "the" }
 ,{ "printing" }
 ,{ "buffer." }
 ,{ "This" }
 ,{ "method" }
 ,{ "may" }
 ,{ "either" }
 ,{ "return" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "for" }
 ,{ "printing," }
 ,{ "or" }
 ,{ "return" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "buffer" }
 ,{ "or" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception." }
 ,{ "If" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "returned," }
 ,{ "PrintBase" , & fmt_text_b }
 ,{ "will" }
 ,{ "skip" }
 ,{ "some" }
 ,{ "output" }
 ,{ "characters" }
 ,{ "and" }
 ,{ "set" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "overflow" }
 ,{ "flag." }
 ,{ "Derived" }
 ,{ "class" }
 ,{ "may" }
 ,{ "clear" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "using" }
 ,{ "clearOverflowFlag()" , & fmt_text_b }
 ,{ "method." }
 ,{ "You" }
 ,{ "can" }
 ,{ "check" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "using" }
 ,{ "getOverflowFlag()" , & fmt_text_b }
 ,{ "method" }
 ,{ "or" }
 ,{ "call" }
 ,{ "the" }
 ,{ "guard" }
 ,{ "method" }
 ,{ "guardOverflow()" , & fmt_text_b }
 ,{ "to" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "has" }
 ,{ "happened." }
 ,{ "When" }
 ,{ "PrintBase" , & fmt_text_b }
 ,{ "got" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "it" }
 ,{ "fills" }
 ,{ "it" }
 ,{ "with" }
 ,{ "output" }
 ,{ "characters" }
 ,{ "and" }
 ,{ "flush" }
 ,{ "sometimes" }
 ,{ "during" }
 ,{ "printing" }
 ,{ "operations." }
 ,{ "So" }
 ,{ "the" }
 ,{ "method" }
 ,{ "do_flush()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "propagate" }
 ,{ "the" }
 ,{ "output" }
 ,{ "characters." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "a" }
 ,{ "paired" }
 ,{ "method" }
 ,{ "for" }
 ,{ "do_provide()" , & fmt_text_b }
 ,{ ":" }
 ,{ "i.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "called" }
 ,{ "sometimes" }
 ,{ "after" }
 ,{ "if" }
 ,{ "the" }
 ,{ "do_provide()" , & fmt_text_b }
 ,{ "was" }
 ,{ "called" }
 ,{ "successfully." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "call" }
 ,{ "flush()" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "to" }
 ,{ "commit" }
 ,{ "pending" }
 ,{ "characters." }
 ,{ "For" }
 ,{ "better" }
 ,{ "understanding" }
 ,{ "how" }
 ,{ "to" }
 ,{ "derive" }
 ,{ "from" }
 ,{ "PrintBase" , & fmt_text_b }
 ,{ "see" }
 ,{ "the" }
 ,{ "PrintBuf" , & fmt_text_b }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "next" }
 ,{ "class" }
 ,{ "is" }
 ,{ "PrintBuf" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "prints" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Methods" }
 ,{ "close()" , & fmt_text_b }
 ,{ "and" }
 ,{ "closeZStr()" , & fmt_text_b }
 ,{ "both" }
 ,{ "complete" }
 ,{ "printing," }
 ,{ "append" }
 ,{ "zero" }
 ,{ "character" }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "Method" }
 ,{ "init()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "buffer" }
 ,{ "and" }
 ,{ "attach" }
 ,{ "the" }
 ,{ "new" }
 ,{ "one." }
 ,{ "It" }
 ,{ "also" }
 ,{ "clears" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "The" }
 ,{ "last" }
 ,{ "class" }
 ,{ "is" }
 ,{ "PrintCount<P>" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "counts" }
 ,{ "printing" }
 ,{ "characters" }
 ,{ "and" }
 ,{ "passes" }
 ,{ "them" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "printing" }
 ,{ "device." }
 ,{ "If" }
 ,{ "you" }
 ,{ "need" }
 ,{ "only" }
 ,{ "counting," }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "PrintCount<void>" , & fmt_text_b }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "is" }
 ,{ "counted," }
 ,{ "not" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "Tuple" }
 ,{ "printing" }
} , & fmt_h3 , & align_h3 } ;

Text b40 = { {
 { "Tuple" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "treated" }
 ,{ "especially" }
 ,{ "by" }
 ,{ "print" }
 ,{ "functions:" }
 ,{ "they" }
 ,{ "are" }
 ,{ "printed" }
 ,{ "as" }
 ,{ "if" }
 ,{ "they" }
 ,{ "members" }
 ,{ "was" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list." }
 ,{ "For" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "has" }
 ,{ "the" }
 ,{ "same" }
 ,{ "effect" }
 ,{ "as:" }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "This" }
 ,{ "rule" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "recursively." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "String" }
 ,{ "printing" }
} , & fmt_h3 , & align_h3 } ;

Text b44 = { {
 { "The" }
 ,{ "following" }
 ,{ "function" }
 ,{ "(defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "SymCount.h" , & fmt_text_b }
 ,{ ")" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "the" }
 ,{ "string" }
 ,{ "symbol" }
 ,{ "length:" }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "is" }
 ,{ "differ" }
 ,{ "than" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "The" }
 ,{ "following" }
 ,{ "types:" }
 ,{ "char" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "," }
 ,{ "const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "," }
 ,{ "char[N]" , & fmt_text_b }
 ,{ "," }
 ,{ "const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "[N]" , & fmt_text_b }
 ,{ "," }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "," }
 ,{ "are" }
 ,{ "string-like" }
 ,{ "types" }
 ,{ "and" }
 ,{ "printed" }
 ,{ "as" }
 ,{ "strings" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "using" }
 ,{ "the" }
 ,{ "proxy" }
 ,{ "class" }
 ,{ "StrPrint" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "has" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "options," }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "struct" }
 ,{ "StrPrintOpt" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "width" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "output" }
 ,{ "length," }
 ,{ "if" }
 ,{ "the" }
 ,{ "string" }
 ,{ "has" }
 ,{ "less" }
 ,{ "characters," }
 ,{ "then" }
 ,{ "it" }
 ,{ "is" }
 ,{ "extended" }
 ,{ "to" }
 ,{ "fit" }
 ,{ "it." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "is" }
 ,{ "used," }
 ,{ "not" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "align" , & fmt_text_b }
 ,{ "determines" }
 ,{ "how" }
 ,{ "the" }
 ,{ "string" }
 ,{ "is" }
 ,{ "placed" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "extension." }
 ,{ "Left" }
 ,{ "alignment" }
 ,{ "means" }
 ,{ "extension" }
 ,{ "by" }
 ,{ "space" }
 ,{ "characters" }
 ,{ "after" }
 ,{ "the" }
 ,{ "string," }
 ,{ "right" }
 ,{ "â€”" }
 ,{ "before," }
 ,{ "center" }
 ,{ "â€”" }
 ,{ "both" }
 ,{ "before" }
 ,{ "and" }
 ,{ "after" }
 ,{ "by" }
 ,{ "equal" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "quoted" , & fmt_text_b }
 ,{ "encloses" }
 ,{ "the" }
 ,{ "string" }
 ,{ "in" }
 ,{ "quotes." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Text" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "options" }
 ,{ "may" }
 ,{ "include" }
 ,{ "width," }
 ,{ "qouted" }
 ,{ "flag" }
 ,{ "(.q" }
 ,{ "or" }
 ,{ ".Q)" }
 ,{ "and" }
 ,{ "alignment" }
 ,{ "flag." }
 ,{ "For" }
 ,{ "example," }
 ,{ "\"#20L;\"" , & fmt_text_b }
 ,{ "means" }
 ,{ "width" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "20" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "align" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "StrAlignLeft" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "quoted" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "false" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "," }
 ,{ "\"#20.qC;\"" , & fmt_text_b }
 ,{ "means" }
 ,{ "width" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "20" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "align" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "StrAlignCenter" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "quoted" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ "true" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "To" }
 ,{ "print" }
 ,{ "the" }
 ,{ "same" }
 ,{ "character" }
 ,{ "several" }
 ,{ "times" }
 ,{ "use" }
 ,{ "the" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "RepeatChar" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Link link_Title = { & page , { 52 } } ;

Text b52 = { {
 { "Title" }
 ,{ "printing" }
} , & fmt_h3 , & align_h3 } ;

Text b53 = { {
 { "Title" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "The" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Class" , & fmt_text_b }
 ,{ "Title" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "print" }
 ,{ "a" }
 ,{ "title:" }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "And" }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Title" , & fmt_text_b }
 ,{ "printing" }
 ,{ "options:" }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "width" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "total" }
 ,{ "title" }
 ,{ "length," }
 ,{ "off" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "text" }
 ,{ "offset," }
 ,{ "border" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "border" }
 ,{ "character." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "is" }
 ,{ "used," }
 ,{ "not" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "Text" }
 ,{ "divider" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "It" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "TextDivider" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "The" }
 ,{ "following" }
 ,{ "printing" }
 ,{ "options" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "width" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "total" }
 ,{ "divider" }
 ,{ "length," }
 ,{ "border" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "border" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "Integer" }
 ,{ "printing" }
} , & fmt_h3 , & align_h3 } ;

Text b62 = { {
 { "Integral" }
 ,{ "types" }
 ,{ "are" }
 ,{ "printed" }
 ,{ "using" }
 ,{ "proxy" }
 ,{ "classes" }
 ,{ "SIntPrint<SInt>" , & fmt_text_b }
 ,{ "and" }
 ,{ "UIntPrint<UInt>" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "IntPrintOpt" , & fmt_text_b }
 ,{ "represents" }
 ,{ "the" }
 ,{ "printing" }
 ,{ "options:" }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "There" }
 ,{ "are" }
 ,{ "six" }
 ,{ "printing" }
 ,{ "options:" }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "width" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "output" }
 ,{ "length." }
 ,{ "If" }
 ,{ "the" }
 ,{ "representation" }
 ,{ "is" }
 ,{ "shorter" }
 ,{ "than" }
 ,{ "this" }
 ,{ "value," }
 ,{ "then" }
 ,{ "it" }
 ,{ "is" }
 ,{ "extended" }
 ,{ "to" }
 ,{ "fit" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "fract" , & fmt_text_b }
 ,{ "defines" }
 ,{ "a" }
 ,{ "fractional" }
 ,{ "part" }
 ,{ "length" }
 ,{ "to" }
 ,{ "print" }
 ,{ "integral" }
 ,{ "value" }
 ,{ "as" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "fraction." }
 ,{ "If" }
 ,{ "this" }
 ,{ "option" }
 ,{ "is" }
 ,{ "not" }
 ,{ "zero," }
 ,{ "then" }
 ,{ "the" }
 ,{ "value" }
 ,{ "is" }
 ,{ "interpreted" }
 ,{ "as" }
 ,{ "a" }
 ,{ "fraction" }
 ,{ "value/10" , & fmt_text_b }
 ,{ "fract" , & fmt_text_b }
 ,{ "and" }
 ,{ "printed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "form" }
 ,{ "\"12345.6789\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "align" , & fmt_text_b }
 ,{ "is" }
 ,{ "determined" }
 ,{ "how" }
 ,{ "extension" }
 ,{ "is" }
 ,{ "performed." }
 ,{ "Internal" }
 ,{ "alignment" }
 ,{ "inserts" }
 ,{ "zero" }
 ,{ "digits" }
 ,{ "in" }
 ,{ "the" }
 ,{ "number" }
 ,{ "representation." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "base" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "representation" }
 ,{ "base," }
 ,{ "it" }
 ,{ "can" }
 ,{ "vary" }
 ,{ "form" }
 ,{ "2" }
 ,{ "to" }
 ,{ "16." }
 ,{ "It" }
 ,{ "may" }
 ,{ "have" }
 ,{ "the" }
 ,{ "special" }
 ,{ "value" }
 ,{ "0." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "printing" }
 ,{ "number" }
 ,{ "is" }
 ,{ "casted" }
 ,{ "to" }
 ,{ "char" , & fmt_text_b }
 ,{ "and" }
 ,{ "this" }
 ,{ "character" }
 ,{ "goes" }
 ,{ "out." }
 ,{ "The" }
 ,{ "base" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "number" }
 ,{ "after" }
 ,{ "dot," }
 ,{ "or" }
 ,{ "as" }
 ,{ "a" }
 ,{ "letter" }
 ,{ "after" }
 ,{ "dot." }
 ,{ "Letter" }
 ,{ "b" , & fmt_text_b }
 ,{ "means" }
 ,{ "base" , & fmt_text_b }
 ,{ "=" }
 ,{ "2" }
 ,{ "and" }
 ,{ "show_base" , & fmt_text_b }
 ,{ "=" }
 ,{ "IntShowBaseSuffix" , & fmt_text_b }
 ,{ "," }
 ,{ "letter" }
 ,{ "h" , & fmt_text_b }
 ,{ "means" }
 ,{ "base" , & fmt_text_b }
 ,{ "=" }
 ,{ "16" }
 ,{ "and" }
 ,{ "show_base" , & fmt_text_b }
 ,{ "=" }
 ,{ "IntShowBaseSuffix" , & fmt_text_b }
 ,{ "," }
 ,{ "letter" }
 ,{ "x" , & fmt_text_b }
 ,{ "means" }
 ,{ "base" , & fmt_text_b }
 ,{ "=" }
 ,{ "16" }
 ,{ "and" }
 ,{ "show_base" , & fmt_text_b }
 ,{ "=" }
 ,{ "IntShowBasePrefix" , & fmt_text_b }
 ,{ "." }
 ,{ "Letter" }
 ,{ "c" , & fmt_text_b }
 ,{ "means" }
 ,{ "base" , & fmt_text_b }
 ,{ "=" }
 ,{ "0." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "show_sign" , & fmt_text_b }
 ,{ "shows" }
 ,{ "sign" }
 ,{ "plus" }
 ,{ "for" }
 ,{ "positive" }
 ,{ "numbers." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "show_base" , & fmt_text_b }
 ,{ "shows" }
 ,{ "representation" }
 ,{ "base" }
 ,{ "as" }
 ,{ "suffix" }
 ,{ "or" }
 ,{ "prefix." }
 ,{ "Prefix" }
 ,{ "is" }
 ,{ "0x" , & fmt_text_b }
 ,{ "for" }
 ,{ "base" }
 ,{ "16." }
 ,{ "Suffixes" }
 ,{ "are" }
 ,{ "h" , & fmt_text_b }
 ,{ "for" }
 ,{ "base" }
 ,{ "16" }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "for" }
 ,{ "base" }
 ,{ "2." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "Here" }
 ,{ "is" }
 ,{ "some" }
 ,{ "examples:" }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "prints" }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "Dumps" }
} , & fmt_h3 , & align_h3 } ;

Text b74 = { {
 { "PrintDump" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "print" }
 ,{ "hexadecimal" }
 ,{ "dumps" }
 ,{ "of" }
 ,{ "integers." }
 ,{ "Dumps" }
 ,{ "look" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "To" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PrintDump" , & fmt_text_b }
 ,{ "type" }
 ,{ "use" }
 ,{ "the" }
 ,{ "overloaded" }
 ,{ "PrintDump" , & fmt_text_b }
 ,{ "constructors:" }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "And" }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "options:" }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "width" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "output" }
 ,{ "width" }
 ,{ "of" }
 ,{ "each" }
 ,{ "integer." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "0," }
 ,{ "then" }
 ,{ "the" }
 ,{ "hexadecimal" }
 ,{ "width" }
 ,{ "of" }
 ,{ "the" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "is" }
 ,{ "used" }
 ,{ "(2" }
 ,{ "for" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "4" }
 ,{ "for" }
 ,{ "uint16" , & fmt_text_b }
 ,{ "and" }
 ,{ "so" }
 ,{ "on)." }
} , & fmt_text , & align_text } ;

Text b78 = { {
 { "line_len" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "integers" }
 ,{ "on" }
 ,{ "the" }
 ,{ "one" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Page page = { "page_Printing" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
 ,{ & b78 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintRatio {

Text b0 = { {
 { "PrintRatio" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintRatio.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintRatio.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "PrintRatio" , & fmt_text_b }
 ,{ "class" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "ratio" }
 ,{ "of" }
 ,{ "two" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "values" }
 ,{ "in" }
 ,{ "the" }
 ,{ "decimal" }
 ,{ "dot-notation." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "following" }
 ,{ "options" }
 ,{ "can" }
 ,{ "be" }
 ,{ "applied:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "It" }
 ,{ "includes" }
 ,{ "output" }
 ,{ "width," }
 ,{ "fraction" }
 ,{ "part" }
 ,{ "length," }
 ,{ "alignment" }
 ,{ "and" }
 ,{ "show" }
 ,{ "sign" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintRatio" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintSet {

Text b0 = { {
 { "PrintSet" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintSet.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintSet.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PrintSet" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "some" }
 ,{ "list" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "\"{" }
 ,{ "..." }
 ,{ "}\"" }
 ,{ "form." }
 ,{ "The" }
 ,{ "type" }
 ,{ "R" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "to" }
 ,{ "iterate" }
 ,{ "through" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "object" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "derived" }
 ,{ "by" }
 ,{ "default" }
 ,{ "from" }
 ,{ "the" }
 ,{ "R" , & fmt_text_b }
 ,{ "." }
 ,{ "Options" }
 ,{ "may" }
 ,{ "be" }
 ,{ "provided" }
 ,{ "to" }
 ,{ "control" }
 ,{ "how" }
 ,{ "to" }
 ,{ "print" }
 ,{ "each" }
 ,{ "element." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintSet" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintStem {

Text b0 = { {
 { "PrintStem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintStem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintStem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "These" }
 ,{ "files" }
 ,{ "provide" }
 ,{ "two" }
 ,{ "utility" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "help" }
 ,{ "printing" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "These" }
 ,{ "classes" }
 ,{ "prints" }
 ,{ "\"stems\"" }
 ,{ "before" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "object." }
 ,{ "The" }
 ,{ "stem" }
 ,{ "depends" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "position" }
 ,{ "in" }
 ,{ "the" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Each" }
 ,{ "stem" }
 ,{ "class" }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "printed." }
 ,{ "Each" }
 ,{ "print" }
 ,{ "operation" }
 ,{ "changes" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "state" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "The" }
 ,{ "actual" }
 ,{ "print" }
 ,{ "result" }
 ,{ "depends" }
 ,{ "on" }
 ,{ "this" }
 ,{ "state." }
 ,{ "You" }
 ,{ "may" }
 ,{ "reset" }
 ,{ "the" }
 ,{ "state" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "reset()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "PrintFirst" }
} , & fmt_h3 , & align_h3 } ;

Text b5 = { {
 { "This" }
 ,{ "class" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "first" , & fmt_text_b }
 ,{ "string" }
 ,{ "the" }
 ,{ "first" }
 ,{ "time" }
 ,{ "and" }
 ,{ "the" }
 ,{ "other" , & fmt_text_b }
 ,{ "string" }
 ,{ "otherwise." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "the" }
 ,{ "printout" }
 ,{ "is:" }
 ,{ "first" , & fmt_text_b }
 ,{ "other" , & fmt_text_b }
 ,{ "other" , & fmt_text_b }
 ,{ "..." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "method" }
 ,{ "end()" , & fmt_text_b }
 ,{ "selects" }
 ,{ "from" }
 ,{ "two" }
 ,{ "string:" }
 ,{ "non_empty" , & fmt_text_b }
 ,{ "and" }
 ,{ "empty" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "empty" , & fmt_text_b }
 ,{ "is" }
 ,{ "selected" }
 ,{ "iff" }
 ,{ "the" }
 ,{ "object" }
 ,{ "has" }
 ,{ "not" }
 ,{ "been" }
 ,{ "printed" }
 ,{ "yet." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "PrintPeriod" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "This" }
 ,{ "class" }
 ,{ "has" }
 ,{ "four" }
 ,{ "parameters:" }
 ,{ "period" , & fmt_text_b }
 ,{ "," }
 ,{ "first" , & fmt_text_b }
 ,{ "," }
 ,{ "next" , & fmt_text_b }
 ,{ "and" }
 ,{ "line" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "printout" }
 ,{ "is:" }
 ,{ "first" , & fmt_text_b }
 ,{ "next" , & fmt_text_b }
 ,{ "..." }
 ,{ "next" , & fmt_text_b }
 ,{ "(" }
 ,{ "line" , & fmt_text_b }
 ,{ "next" , & fmt_text_b }
 ,{ "..." }
 ,{ "next" , & fmt_text_b }
 ,{ ")" }
 ,{ "..." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "line" }
 ,{ "is" }
 ,{ "period" , & fmt_text_b }
 ,{ "." }
 ,{ "I.e." }
 ,{ "from" }
 ,{ "first" , & fmt_text_b }
 ,{ "to" }
 ,{ "line" , & fmt_text_b }
 ,{ "and" }
 ,{ "from" }
 ,{ "line" , & fmt_text_b }
 ,{ "to" }
 ,{ "next" }
 ,{ "line" , & fmt_text_b }
 ,{ "there" }
 ,{ "are" }
 ,{ "exact" }
 ,{ "period-1" , & fmt_text_b }
 ,{ "next" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "method" }
 ,{ "end()" , & fmt_text_b }
 ,{ "selects" }
 ,{ "from" }
 ,{ "two" }
 ,{ "string:" }
 ,{ "non_empty" , & fmt_text_b }
 ,{ "and" }
 ,{ "empty" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "empty" , & fmt_text_b }
 ,{ "is" }
 ,{ "selected" }
 ,{ "iff" }
 ,{ "the" }
 ,{ "object" }
 ,{ "has" }
 ,{ "not" }
 ,{ "been" }
 ,{ "printed" }
 ,{ "yet." }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintStem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintTime {

Text b0 = { {
 { "PrintTime" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintTime.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintTime.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PrintTime" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "a" }
 ,{ "time," }
 ,{ "represented" }
 ,{ "by" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "in" }
 ,{ "seconds." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Time" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "form" }
 ,{ "hh:mm:ss" , & fmt_text_b }
 ,{ "or" }
 ,{ "dd:hh:mm:ss" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintTime" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PrintTitle {

Text b0 = { {
 { "PrintTitle" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/PrintTitle.h" , & fmt_text_Files_b }
 ,{ "CCore/src/PrintTitle.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PrintTitle" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "prints" }
 ,{ "a" }
 ,{ "title." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Title" }
 ,{ "is" }
 ,{ "printed" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Title" , & fmt_text_a }
 ,{ "," }
 ,{ "and" }
 ,{ "has" }
 ,{ "the" }
 ,{ "same" }
 ,{ "printing" }
 ,{ "options." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "But" }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "any" }
 ,{ "object" }
 ,{ "for" }
 ,{ "it," }
 ,{ "not" }
 ,{ "just" }
 ,{ "only" }
 ,{ "string!" }
} , & fmt_text , & align_text } ;

Page page = { "page_PrintTitle" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PSec {

Text b0 = { {
 { "PSec" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PSecCore.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PSecCore.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/PSec.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PSec.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Files" }
 ,{ "CCore/inc/net/PSecKey.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PSecKey.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "PSec" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "security" }
 ,{ "protocol" }
 ,{ "for" }
 ,{ "point-to-point" }
 ,{ "packet-based" }
 ,{ "communication." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "this" }
 ,{ "protocol." }
 ,{ "It's" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "protocol" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "described" }
 ,{ "in" }
 ,{ "this" , & fmt_text_a }
 ,{ "document" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "utility" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "AbstractCryptFunc" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "AbstractCryptFunc" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "block" }
 ,{ "cipher" }
 ,{ "function" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "getBLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "cipher" }
 ,{ "block" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "getKLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "key" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "key()" , & fmt_text_b }
 ,{ "activates" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "getKLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "After" }
 ,{ "this" }
 ,{ "method" }
 ,{ "call" }
 ,{ "the" }
 ,{ "function" }
 ,{ "can" }
 ,{ "process" }
 ,{ "data" }
 ,{ "blocks." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "apply()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "block" }
 ,{ "cipher" }
 ,{ "in-place." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "getBLen()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "AbstractHashFunc" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "AbstractHashFunc" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getHLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "digest" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "add()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "a" }
 ,{ "chunk" }
 ,{ "of" }
 ,{ "data" }
 ,{ "in" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "calculation." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "finish()" , & fmt_text_b }
 ,{ "finishes" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "calculation" }
 ,{ "and" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "function" }
 ,{ "over." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "in" }
 ,{ "some" }
 ,{ "internal" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "getHLen()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "AbstractKeyGen" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "AbstractKeyGen" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "key" }
 ,{ "generation" }
 ,{ "process." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "power" }
 ,{ "calculation" }
 ,{ "for" }
 ,{ "some" }
 ,{ "finite" }
 ,{ "group." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "getGLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "group" }
 ,{ "element" }
 ,{ "octet" }
 ,{ "representation" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "getKLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "key" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "pow()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "generator" }
 ,{ "element" }
 ,{ "g" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "key()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "power" }
 ,{ "gy" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "and" }
 ,{ "transforms" }
 ,{ "the" }
 ,{ "result" }
 ,{ "into" }
 ,{ "the" }
 ,{ "key." }
 ,{ "(g" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ ")" , & fmt_text_b }
 ,{ "y" , & fmt_text_b }
 ,{ "and" }
 ,{ "(g" , & fmt_text_b }
 ,{ "y" , & fmt_text_b }
 ,{ ")" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "renders" }
 ,{ "the" }
 ,{ "same" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "AbstractRandomGen" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "AbstractRandomGen" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "random" }
 ,{ "generator" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "required" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "cryptography" }
 ,{ "strong." }
 ,{ "But" }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "a" }
 ,{ "quality" }
 ,{ "RNG." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "fill()" , & fmt_text_b }
 ,{ "fills" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "random" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "LifeLim" }
} , & fmt_h4 , & align_h4 } ;

Text b28 = { {
 { "LifeLim" , & fmt_text_b }
 ,{ "presents" }
 ,{ "key" }
 ,{ "lifetime" }
 ,{ "limits." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "ttl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "time" }
 ,{ "limit" }
 ,{ "in" }
 ,{ "seconds." }
 ,{ "A" }
 ,{ "key" }
 ,{ "must" }
 ,{ "be" }
 ,{ "replaced" }
 ,{ "after" }
 ,{ "this" }
 ,{ "time" }
 ,{ "is" }
 ,{ "expired." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "utl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "traffic" }
 ,{ "limit" }
 ,{ "in" }
 ,{ "octets." }
 ,{ "A" }
 ,{ "key" }
 ,{ "must" }
 ,{ "be" }
 ,{ "replaced" }
 ,{ "after" }
 ,{ "this" }
 ,{ "number" }
 ,{ "of" }
 ,{ "octets" }
 ,{ "has" }
 ,{ "been" }
 ,{ "encrypted" }
 ,{ "using" }
 ,{ "this" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "AlgoLen" }
} , & fmt_h4 , & align_h4 } ;

Text b32 = { {
 { "AlgoLen" , & fmt_text_b }
 ,{ "presents" }
 ,{ "key" }
 ,{ "algorithms" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "blen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "block" }
 ,{ "cipher" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "hlen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "digest" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "EndpointManager" }
} , & fmt_h3 , & align_h3 } ;

Text b36 = { {
 { "EndpointManager" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "interface" }
 ,{ "to" }
 ,{ "manage" }
 ,{ "secure" }
 ,{ "endpoint" }
 ,{ "session." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "communication" }
 ,{ "session" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "endpoint." }
 ,{ "The" }
 ,{ "endpoint" }
 ,{ "is" }
 ,{ "identified" }
 ,{ "by" }
 ,{ "its" }
 ,{ "abstract" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "address" }
 ,{ "point" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "MasterKey" , & fmt_text_b }
 ,{ "reference." }
 ,{ "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "used" }
 ,{ "only" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "method" }
 ,{ "and" }
 ,{ "may" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "after" }
 ,{ "the" }
 ,{ "method" }
 ,{ "call." }
 ,{ "The" }
 ,{ "last" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "client" }
 ,{ "profile" }
 ,{ "pointer." }
 ,{ "A" }
 ,{ "client" }
 ,{ "profile" }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "piece" }
 ,{ "of" }
 ,{ "data" }
 ,{ "associated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "client." }
 ,{ "It" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "caller" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getClientProfile()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "status" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "the" }
 ,{ "session" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "endpoint." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "if" }
 ,{ "such" }
 ,{ "connection" }
 ,{ "exists" }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "closeAll()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "all" }
 ,{ "sessions" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "sessions" }
 ,{ "closed." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "getClientProfile()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "client" }
 ,{ "profile," }
 ,{ "associated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "endpoint." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "null," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "session" }
 ,{ "with" }
 ,{ "this" }
 ,{ "endpoint." }
 ,{ "An" }
 ,{ "implementation" }
 ,{ "should" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "context" }
 ,{ "requirement" }
 ,{ "for" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "this" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "MasterKey" }
} , & fmt_h3 , & align_h3 } ;

Text b42 = { {
 { "The" }
 ,{ "MasterKey" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "present" }
 ,{ "a" }
 ,{ "key" }
 ,{ "information" }
 ,{ "for" }
 ,{ "a" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "connection." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "multi-factory." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "The" }
 ,{ "first" }
 ,{ "group" }
 ,{ "of" }
 ,{ "method" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "various" }
 ,{ "processing" }
 ,{ "objects." }
 ,{ "They" }
 ,{ "return" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "object" }
 ,{ "interface." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "createEncrypt()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "encryption" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "createDecrypt()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "complementary" }
 ,{ "decryption" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "createHash()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "hash" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "createKeyGen()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "key" }
 ,{ "generator." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "createRandom()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "random" }
 ,{ "generator." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "The" }
 ,{ "second" }
 ,{ "group" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "present" }
 ,{ "key" }
 ,{ "information." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "getKLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "key" }
 ,{ "length." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "key" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "encryption" }
 ,{ "and" }
 ,{ "decryption" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "getLifeLim()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "life" }
 ,{ "limit" }
 ,{ "per" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "getKey0()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "the" }
 ,{ "key-0" }
 ,{ "into" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "buffer" }
 ,{ "length" }
 ,{ "is" }
 ,{ "getKLen()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "getKeySetLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "keys" }
 ,{ "in" }
 ,{ "the" }
 ,{ "keyset." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "getKey()" , & fmt_text_b }
 ,{ "copies" }
 ,{ "the" }
 ,{ "key" }
 ,{ "from" }
 ,{ "the" }
 ,{ "keyset" }
 ,{ "into" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "buffer" }
 ,{ "length" }
 ,{ "is" }
 ,{ "getKLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "key" }
 ,{ "index" }
 ,{ "is" }
 ,{ "zero-based." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "EndpointDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b56 = { {
 { "EndpointDevice" , & fmt_text_b }
 ,{ "transforms" }
 ,{ "an" }
 ,{ "insecure" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "into" }
 ,{ "a" }
 ,{ "secure" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "on" }
 ,{ "the" }
 ,{ "client" }
 ,{ "side." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "three" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "an" }
 ,{ "insecure" }
 ,{ "endpoint" }
 ,{ "device." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "master" }
 ,{ "key" }
 ,{ "for" }
 ,{ "the" }
 ,{ "protected" }
 ,{ "session." }
 ,{ "The" }
 ,{ "key" }
 ,{ "object" }
 ,{ "may" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "after" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "call." }
 ,{ "The" }
 ,{ "third" }
 ,{ "is" }
 ,{ "the" }
 ,{ "keep-alive" }
 ,{ "timeout." }
 ,{ "If" }
 ,{ "this" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "then" }
 ,{ "the" }
 ,{ "keep-alive" }
 ,{ "mechanic" }
 ,{ "is" }
 ,{ "activated." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "confirmed" }
 ,{ "inbound" }
 ,{ "packets" }
 ,{ "during" }
 ,{ "some" }
 ,{ "period" }
 ,{ "then" }
 ,{ "the" }
 ,{ "connection" }
 ,{ "is" }
 ,{ "closed." }
 ,{ "Ping" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "sent" }
 ,{ "prior" }
 ,{ "the" }
 ,{ "timeout" }
 ,{ "expiration" }
 ,{ "to" }
 ,{ "make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "is" }
 ,{ "alive." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "The" }
 ,{ "object" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "the" }
 ,{ "secure" }
 ,{ "endpoint" }
 ,{ "device." }
 ,{ "Outbound" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "encrypted" }
 ,{ "and" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "insecure" }
 ,{ "device." }
 ,{ "Inbound" }
 ,{ "packets" }
 ,{ "from" }
 ,{ "the" }
 ,{ "insecure" }
 ,{ "device" }
 ,{ "are" }
 ,{ "verified," }
 ,{ "decrypted" }
 ,{ "and" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processor." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "close()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "close" }
 ,{ "the" }
 ,{ "connection." }
 ,{ "The" }
 ,{ "Close" , & fmt_text_b }
 ,{ "packet" }
 ,{ "is" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "connection_lost" , & fmt_text_b }
 ,{ "is" }
 ,{ "asserted." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "connection" }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "MultipointDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b62 = { {
 { "MultipointDevice" , & fmt_text_b }
 ,{ "transforms" }
 ,{ "insecure" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "into" }
 ,{ "s" }
 ,{ "secure" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "on" }
 ,{ "the" }
 ,{ "server" }
 ,{ "side." }
 ,{ "The" }
 ,{ "communication" }
 ,{ "with" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "network" }
 ,{ "peer" }
 ,{ "is" }
 ,{ "protected" }
 ,{ "using" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "master" }
 ,{ "key." }
 ,{ "This" }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "EndpointManager" , & fmt_text_b }
 ,{ "interface" }
 ,{ "to" }
 ,{ "control" }
 ,{ "opened" }
 ,{ "sessions." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "insecure" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AlgoLen" , & fmt_text_b }
 ,{ "structures" }
 ,{ "for" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "session" }
 ,{ "keys." }
 ,{ "The" }
 ,{ "max_clients" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "client" }
 ,{ "number" }
 ,{ "which" }
 ,{ "can" }
 ,{ "be" }
 ,{ "active" }
 ,{ "simultaneously." }
 ,{ "If" }
 ,{ "last" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "keep-alive" }
 ,{ "timeout." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "null," }
 ,{ "then" }
 ,{ "the" }
 ,{ "keep-alive" }
 ,{ "is" }
 ,{ "activated." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "To" }
 ,{ "manage" }
 ,{ "client" }
 ,{ "sessions" }
 ,{ "the" }
 ,{ "EndpointManager" , & fmt_text_b }
 ,{ "interface" }
 ,{ "is" }
 ,{ "provided." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "connection" }
 ,{ "statistic" }
 ,{ "counters." }
 ,{ "If" }
 ,{ "the" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "is" }
 ,{ "given" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "counters" }
 ,{ "for" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "session." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "The" }
 ,{ "method" }
 ,{ "processStat()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "iterate" }
 ,{ "over" }
 ,{ "the" }
 ,{ "active" }
 ,{ "sessions." }
 ,{ "It" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "per" }
 ,{ "each" }
 ,{ "session" }
 ,{ "with" }
 ,{ "two" }
 ,{ "arguments:" }
 ,{ "the" }
 ,{ "first" }
 ,{ "is" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "address," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "statistic" }
 ,{ "counters" }
 ,{ "for" }
 ,{ "this" }
 ,{ "session." }
 ,{ "The" }
 ,{ "method" }
 ,{ "is" }
 ,{ "working" }
 ,{ "under" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "mutex" }
 ,{ "protection." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "Outbound" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "encrypted" }
 ,{ "using" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "session." }
 ,{ "The" }
 ,{ "peer" }
 ,{ "address" }
 ,{ "determines" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "session." }
 ,{ "Inbound" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "verified," }
 ,{ "decrypted" }
 ,{ "and" }
 ,{ "sent" }
 ,{ "to" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processor." }
 ,{ "They" }
 ,{ "are" }
 ,{ "processed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "context" }
 ,{ "of" }
 ,{ "the" }
 ,{ "opened" }
 ,{ "session." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "one" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "discarded." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "The" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "or" }
 ,{ "reopens" }
 ,{ "the" }
 ,{ "session." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "case" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key" }
 ,{ "and" }
 ,{ "the" }
 ,{ "client" }
 ,{ "profile" }
 ,{ "are" }
 ,{ "replaced." }
 ,{ "A" }
 ,{ "session" }
 ,{ "can" }
 ,{ "be" }
 ,{ "closed" }
 ,{ "manually" }
 ,{ "or" }
 ,{ "by" }
 ,{ "the" }
 ,{ "keep-alive" }
 ,{ "processor" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "response" }
 ,{ "from" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "during" }
 ,{ "the" }
 ,{ "given" }
 ,{ "period." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "The" }
 ,{ "method" }
 ,{ "getClientProfile()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "safely" }
 ,{ "called" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "processStat()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PSec" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PSecEchoServer {

Text b0 = { {
 { "PSecEchoServer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PSecEchoServer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "secure" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "PTP" , & fmt_text_a }
 ,{ "echo" , & fmt_text_a }
 ,{ "server." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "PSec" , & fmt_text_a }
 ,{ "and" }
 ,{ "PKE" , & fmt_text_a }
 ,{ "protocols" }
 ,{ "to" }
 ,{ "establish" }
 ,{ "the" }
 ,{ "communication" }
 ,{ "with" }
 ,{ "a" }
 ,{ "client" }
 ,{ "and" }
 ,{ "protect" }
 ,{ "traffic." }
 ,{ "It" }
 ,{ "occupies" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "52103" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "communication" }
 ,{ "and" }
 ,{ "52102" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "communication." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "echo" }
 ,{ "service" }
 ,{ "and" }
 ,{ "three" }
 ,{ "functions" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_a }
 ,{ "support" , & fmt_text_a }
 ,{ "service" , & fmt_text_a }
 ,{ ":" }
 ,{ "Len," }
 ,{ "Seed," }
 ,{ "Session." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "The" }
 ,{ "following" }
 ,{ "credentials" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "gain" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "server:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "There" }
 ,{ "are" }
 ,{ "no" }
 ,{ "command" }
 ,{ "line" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "following" }
 ,{ "commands" }
 ,{ "are" }
 ,{ "supported:" }
 ,{ "help" , & fmt_text_b }
 ,{ "," }
 ,{ "exit" , & fmt_text_b }
 ,{ "," }
 ,{ "stat" , & fmt_text_b }
 ,{ "," }
 ,{ "clear" , & fmt_text_b }
 ,{ "," }
 ,{ "psecstat" , & fmt_text_b }
 ,{ "," }
 ,{ "close" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "help" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "commands." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "exit" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "statistic" }
 ,{ "and" }
 ,{ "exit" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "clear" , & fmt_text_b }
 ,{ "clears" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "and" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "stat" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "and" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "psecstat" , & fmt_text_b }
 ,{ "without" }
 ,{ "arguments" }
 ,{ "prints" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "statistic" }
 ,{ "counters" }
 ,{ "for" }
 ,{ "all" }
 ,{ "established" }
 ,{ "connections." }
 ,{ "But" }
 ,{ "you" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "an" }
 ,{ "address" }
 ,{ "to" }
 ,{ "print" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "statistic" }
 ,{ "of" }
 ,{ "the" }
 ,{ "single" }
 ,{ "connection." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "close" , & fmt_text_b }
 ,{ "without" }
 ,{ "arguments" }
 ,{ "closes" }
 ,{ "all" }
 ,{ "connections." }
 ,{ "With" }
 ,{ "the" }
 ,{ "given" }
 ,{ "argument" }
 ,{ "it" }
 ,{ "closes" }
 ,{ "a" }
 ,{ "single" }
 ,{ "connection." }
} , & fmt_text , & align_text } ;

Page page = { "page_PSecEchoServer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTP {

Text b0 = { {
 { "PTP" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPExtra.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPExtra.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPClientDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPClientDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPServerDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPServerDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b5 = { {
 { "PTP" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "Packet" , & fmt_text_b }
 ,{ "Transaction" , & fmt_text_b }
 ,{ "Protocol" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "packet-based," }
 ,{ "reliable," }
 ,{ "transactional," }
 ,{ "parallel" }
 ,{ "point-to-point" }
 ,{ "protocol." }
 ,{ "It" }
 ,{ "is" }
 ,{ "best" }
 ,{ "suited" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "an" }
 ,{ "asynchronous" }
 ,{ "call-type" }
 ,{ "client-server" }
 ,{ "interaction." }
 ,{ "It" }
 ,{ "works" }
 ,{ "atop" }
 ,{ "a" }
 ,{ "packet-based" }
 ,{ "communication" }
 ,{ "layer." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "security" }
 ,{ "features" }
 ,{ "in" }
 ,{ "the" }
 ,{ "protocol." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Protocol" }
 ,{ "description" }
} , & fmt_h3 , & align_h3 } ;

Text b7 = { {
 { "PTP" , & fmt_text_b }
 ,{ "defines" }
 ,{ "rules" }
 ,{ "for" }
 ,{ "two" }
 ,{ "endpoints," }
 ,{ "one" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Server" , & fmt_text_b }
 ,{ "," }
 ,{ "another" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Client" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "endpoints" }
 ,{ "exchange" }
 ,{ "raw" }
 ,{ "data" }
 ,{ "packets" }
 ,{ "(byte" }
 ,{ "packets)." }
 ,{ "Client" , & fmt_text_b }
 ,{ "issues" }
 ,{ "call" }
 ,{ "requests," }
 ,{ "Server" , & fmt_text_b }
 ,{ "takes" }
 ,{ "call" }
 ,{ "data," }
 ,{ "processes" }
 ,{ "it" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "some" }
 ,{ "resulting" }
 ,{ "data." }
 ,{ "From" }
 ,{ "the" }
 ,{ "Client" , & fmt_text_b }
 ,{ "perspective," }
 ,{ "it" }
 ,{ "makes" }
 ,{ "a" }
 ,{ "function" }
 ,{ "call." }
 ,{ "Function" }
 ,{ "arguments" }
 ,{ "is" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "range." }
 ,{ "Server" , & fmt_text_b }
 ,{ "\"evaluates\"" }
 ,{ "the" }
 ,{ "function" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "result" }
 ,{ "â€”" }
 ,{ "another" }
 ,{ "byte" }
 ,{ "range." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "data" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "scope" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "protocol," }
 ,{ "it" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "by" }
 ,{ "an" }
 ,{ "upper" }
 ,{ "protocol" }
 ,{ "level." }
 ,{ "Usually," }
 ,{ "Server" , & fmt_text_b }
 ,{ "may" }
 ,{ "serve" }
 ,{ "multiple" }
 ,{ "Client" , & fmt_text_b }
 ,{ "s." }
 ,{ "From" }
 ,{ "the" }
 ,{ "protocol" }
 ,{ "perspective" }
 ,{ "all" }
 ,{ "transactions" }
 ,{ "are" }
 ,{ "parallel" }
 ,{ "and" }
 ,{ "independent." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Protocol" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "following" }
 ,{ "constants:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "MaxPacketLen" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "maximum" }
 ,{ "packet" }
 ,{ "length." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "chosen" }
 ,{ "as" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "UDP" }
 ,{ "data" }
 ,{ "length" }
 ,{ "fits" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "Ethernet" }
 ,{ "frame" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "DeltaInfoLen" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "maximum" }
 ,{ "delta" }
 ,{ "between" }
 ,{ "packet" }
 ,{ "length" }
 ,{ "and" }
 ,{ "information" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "MaxInfoLen" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "maximum" }
 ,{ "information" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "MinTimeout" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "minimum" }
 ,{ "timeout" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "MaxTimeout" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "maximum" }
 ,{ "timeout" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "DeltaTimeout" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "timeout" }
 ,{ "increment." }
 ,{ "Each" }
 ,{ "time" }
 ,{ "a" }
 ,{ "timeout" }
 ,{ "value" }
 ,{ "is" }
 ,{ "used," }
 ,{ "it" }
 ,{ "is" }
 ,{ "incremented" }
 ,{ "by" }
 ,{ "DeltaTimeout" , & fmt_text_b }
 ,{ "up" }
 ,{ "to" }
 ,{ "MaxTimeout" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Protocol" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "following" }
 ,{ "data" }
 ,{ "types:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "uint8," , & fmt_text_b }
 ,{ "uint16," , & fmt_text_b }
 ,{ "uint32," , & fmt_text_b }
 ,{ "uint64" , & fmt_text_b }
 ,{ "are" }
 ,{ "usual" }
 ,{ "arithmetic" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types." }
 ,{ "For" }
 ,{ "the" }
 ,{ "protocol" }
 ,{ "purpose" }
 ,{ "they" }
 ,{ "are" }
 ,{ "transported" }
 ,{ "using" }
 ,{ "the" }
 ,{ "big-endian" }
 ,{ "representation." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "PacketType" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "SlotId" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "slot" }
 ,{ "id." }
 ,{ "Slot" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "processing" }
 ,{ "resource" }
 ,{ "on" }
 ,{ "both" }
 ,{ "sides." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "data," }
 ,{ "related" }
 ,{ "with" }
 ,{ "a" }
 ,{ "single" }
 ,{ "transaction." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "RecallNumber" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "recall" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "TransId" , & fmt_text_b }
 ,{ "is" }
 ,{ "128-bit" }
 ,{ "value," }
 ,{ "it" }
 ,{ "is" }
 ,{ "generated" }
 ,{ "by" }
 ,{ "Client" , & fmt_text_b }
 ,{ "and" }
 ,{ "serves" }
 ,{ "as" }
 ,{ "the" }
 ,{ "unique" }
 ,{ "transaction" }
 ,{ "id." }
 ,{ "It's" }
 ,{ "recommended," }
 ,{ "that" }
 ,{ "the" }
 ,{ "number" , & fmt_text_b }
 ,{ "is" }
 ,{ "incremented" }
 ,{ "with" }
 ,{ "each" }
 ,{ "transaction" }
 ,{ "and" }
 ,{ "the" }
 ,{ "clock" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "high-frequency" }
 ,{ "clock" }
 ,{ "or" }
 ,{ "another" }
 ,{ "random" }
 ,{ "input." }
 ,{ "A" }
 ,{ "random" }
 ,{ "mask" }
 ,{ "can" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "TransId" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "better" }
 ,{ "diversity." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Info" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "call" }
 ,{ "or" }
 ,{ "return" }
 ,{ "information." }
 ,{ "It" }
 ,{ "is" }
 ,{ "sent" }
 ,{ "as" }
 ,{ "the" }
 ,{ "length," }
 ,{ "followed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "information" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "There" }
 ,{ "are" }
 ,{ "8" }
 ,{ "packet" }
 ,{ "types," }
 ,{ "3" }
 ,{ "with" }
 ,{ "attached" }
 ,{ "information" }
 ,{ "and" }
 ,{ "5" }
 ,{ "are" }
 ,{ "short." }
 ,{ "Each" }
 ,{ "packet" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "a" }
 ,{ "fixed" }
 ,{ "format" }
 ,{ "header." }
 ,{ "Info" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "ended" }
 ,{ "with" }
 ,{ "Info" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "To" }
 ,{ "start" }
 ,{ "a" }
 ,{ "transaction," }
 ,{ "Client" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "slot," }
 ,{ "prepares" }
 ,{ "client" }
 ,{ "Info" , & fmt_text_b }
 ,{ "," }
 ,{ "generates" }
 ,{ "TransId" , & fmt_text_b }
 ,{ "and" }
 ,{ "client" }
 ,{ "SlotId" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "it" }
 ,{ "prepares" }
 ,{ "and" }
 ,{ "sends" }
 ,{ "the" }
 ,{ "CALL" , & fmt_text_b }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Server" , & fmt_text_b }
 ,{ "accepts" }
 ,{ "transaction" }
 ,{ "by" }
 ,{ "allocating" }
 ,{ "a" }
 ,{ "server" }
 ,{ "slot." }
 ,{ "It" }
 ,{ "may" }
 ,{ "replay" }
 ,{ "with" }
 ,{ "RET" , & fmt_text_b }
 ,{ "," }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "," }
 ,{ "NOINFO" , & fmt_text_b }
 ,{ "or" }
 ,{ "RERET" , & fmt_text_b }
 ,{ "packets." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Client" , & fmt_text_b }
 ,{ "completes" }
 ,{ "transaction" }
 ,{ "by" }
 ,{ "the" }
 ,{ "ACK" , & fmt_text_b }
 ,{ "packet," }
 ,{ "it" }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "slot." }
 ,{ "Server" , & fmt_text_b }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "slot" }
 ,{ "upon" }
 ,{ "reception" }
 ,{ "of" }
 ,{ "this" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "\"good\"" }
 ,{ "case" }
 ,{ "if" }
 ,{ "a" }
 ,{ "transaction" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "by" }
 ,{ "these" }
 ,{ "3" }
 ,{ "packets." }
 ,{ "Everything" }
 ,{ "else" }
 ,{ "is" }
 ,{ "to" }
 ,{ "make" }
 ,{ "the" }
 ,{ "protocol" }
 ,{ "reliable." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Once" }
 ,{ "Client" , & fmt_text_b }
 ,{ "is" }
 ,{ "sent" }
 ,{ "the" }
 ,{ "CALL" , & fmt_text_b }
 ,{ "packet," }
 ,{ "it" }
 ,{ "setup" }
 ,{ "a" }
 ,{ "timer" }
 ,{ "to" }
 ,{ "count" }
 ,{ "timeout." }
 ,{ "The" }
 ,{ "initial" }
 ,{ "timeout" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "MinTimeout" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "this" }
 ,{ "timer" }
 ,{ "expires" }
 ,{ "before" }
 ,{ "an" }
 ,{ "expected" }
 ,{ "reply," }
 ,{ "the" }
 ,{ "RECALL" , & fmt_text_b }
 ,{ "packet" }
 ,{ "is" }
 ,{ "sent." }
 ,{ "number" , & fmt_text_b }
 ,{ "starts" }
 ,{ "from" }
 ,{ "1" }
 ,{ "and" }
 ,{ "is" }
 ,{ "incremented" }
 ,{ "with" }
 ,{ "saturation" }
 ,{ "per" }
 ,{ "each" }
 ,{ "RECALL" , & fmt_text_b }
 ,{ "packet." }
 ,{ "The" }
 ,{ "timeout" }
 ,{ "value" }
 ,{ "is" }
 ,{ "incremented" }
 ,{ "each" }
 ,{ "time" }
 ,{ "it" }
 ,{ "is" }
 ,{ "expired." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Server" , & fmt_text_b }
 ,{ "may" }
 ,{ "send" }
 ,{ "the" }
 ,{ "NOINFO" , & fmt_text_b }
 ,{ "packet" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "RET" , & fmt_text_b }
 ,{ "packet" }
 ,{ "to" }
 ,{ "confirm" }
 ,{ "it" }
 ,{ "has" }
 ,{ "received" }
 ,{ "the" }
 ,{ "CALL" , & fmt_text_b }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "If" }
 ,{ "Client" , & fmt_text_b }
 ,{ "gets" }
 ,{ "this" }
 ,{ "packet" }
 ,{ "it" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "flag" }
 ,{ "no_info" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "slot." }
 ,{ "If" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "Client" , & fmt_text_b }
 ,{ "sends" }
 ,{ "the" }
 ,{ "SENDRET" , & fmt_text_b }
 ,{ "packet" }
 ,{ "at" }
 ,{ "a" }
 ,{ "timeout" }
 ,{ "expiration" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "RECALL" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "To" }
 ,{ "cancel" }
 ,{ "a" }
 ,{ "transaction" }
 ,{ "Server" , & fmt_text_b }
 ,{ "may" }
 ,{ "send" }
 ,{ "the" }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "packet." }
 ,{ "Client" , & fmt_text_b }
 ,{ "responds" }
 ,{ "with" }
 ,{ "the" }
 ,{ "ACK" , & fmt_text_b }
 ,{ "packet" }
 ,{ "and" }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "slot." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Server" , & fmt_text_b }
 ,{ "may" }
 ,{ "also" }
 ,{ "send" }
 ,{ "the" }
 ,{ "RERET" , & fmt_text_b }
 ,{ "(Ready" }
 ,{ "Return)" }
 ,{ "packet." }
 ,{ "In" }
 ,{ "response," }
 ,{ "Client" , & fmt_text_b }
 ,{ "sends" }
 ,{ "the" }
 ,{ "SENDRET" , & fmt_text_b }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Server" , & fmt_text_b }
 ,{ "starts" }
 ,{ "a" }
 ,{ "transaction" }
 ,{ "processing" }
 ,{ "upon" }
 ,{ "CALL" , & fmt_text_b }
 ,{ "or" }
 ,{ "RECALL" , & fmt_text_b }
 ,{ "packet." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "available" }
 ,{ "slots" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "discarded." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "CALL" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "id" }
 ,{ "is" }
 ,{ "used," }
 ,{ "then" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "discarded." }
 ,{ "If" }
 ,{ "Server" , & fmt_text_b }
 ,{ "serves" }
 ,{ "multiple" }
 ,{ "Client" , & fmt_text_b }
 ,{ "s," }
 ,{ "Client" , & fmt_text_b }
 ,{ "id" }
 ,{ "must" }
 ,{ "be" }
 ,{ "accounted" }
 ,{ "for" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "identification." }
 ,{ "The" }
 ,{ "CALL" , & fmt_text_b }
 ,{ "packet" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "processing." }
 ,{ "If" }
 ,{ "the" }
 ,{ "RECALL" , & fmt_text_b }
 ,{ "packet" }
 ,{ "has" }
 ,{ "the" }
 ,{ "new" }
 ,{ "transaction" }
 ,{ "id," }
 ,{ "it" }
 ,{ "also" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "processing." }
 ,{ "Otherwise" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "RET" , & fmt_text_b }
 ,{ "," }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "or" }
 ,{ "NOINFO" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Client" , & fmt_text_b }
 ,{ "." }
 ,{ "RET" , & fmt_text_b }
 ,{ "or" }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "if" }
 ,{ "the" }
 ,{ "slot" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "NOINFO" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "slot" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "in" }
 ,{ "progress." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "When" }
 ,{ "Server" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "slot" }
 ,{ "processing" }
 ,{ "and" }
 ,{ "has" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "result," }
 ,{ "it" }
 ,{ "sends" }
 ,{ "the" }
 ,{ "RET" , & fmt_text_b }
 ,{ "packet" }
 ,{ "or" }
 ,{ "the" }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "packet," }
 ,{ "if" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "canceled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "entity." }
 ,{ "Once" }
 ,{ "it" }
 ,{ "is" }
 ,{ "done," }
 ,{ "the" }
 ,{ "Server" , & fmt_text_b }
 ,{ "setup" }
 ,{ "a" }
 ,{ "timer" }
 ,{ "to" }
 ,{ "count" }
 ,{ "timeout." }
 ,{ "When" }
 ,{ "timer" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "Server" , & fmt_text_b }
 ,{ "sends" }
 ,{ "RERET" , & fmt_text_b }
 ,{ "packet." }
 ,{ "Server" , & fmt_text_b }
 ,{ "sends" }
 ,{ "RET" , & fmt_text_b }
 ,{ "or" }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "packet" }
 ,{ "as" }
 ,{ "the" }
 ,{ "answer" }
 ,{ "on" }
 ,{ "SENDRET" , & fmt_text_b }
 ,{ "packet" }
 ,{ "from" }
 ,{ "Client" , & fmt_text_b }
 ,{ "." }
 ,{ "And" }
 ,{ "only" }
 ,{ "ACK" , & fmt_text_b }
 ,{ "packet" }
 ,{ "finally" }
 ,{ "cleanup" }
 ,{ "the" }
 ,{ "processing" }
 ,{ "slot." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "If" }
 ,{ "Server" , & fmt_text_b }
 ,{ "gets" }
 ,{ "SENDRET" , & fmt_text_b }
 ,{ "packet" }
 ,{ "and" }
 ,{ "cannot" }
 ,{ "find" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "processing" }
 ,{ "slot," }
 ,{ "it" }
 ,{ "responds" }
 ,{ "with" }
 ,{ "CANCEL" , & fmt_text_b }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "If" }
 ,{ "Client" , & fmt_text_b }
 ,{ "gets" }
 ,{ "any" }
 ,{ "packet" }
 ,{ "and" }
 ,{ "cannot" }
 ,{ "find" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "processing" }
 ,{ "slot," }
 ,{ "it" }
 ,{ "responds" }
 ,{ "with" }
 ,{ "ACK" , & fmt_text_b }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "The" }
 ,{ "file" }
 ,{ "txt/cpp/PTP.txt.cpp" , & fmt_text_b }
 ,{ "contains" }
 ,{ "a" }
 ,{ "precise" }
 ,{ "protocol" }
 ,{ "description" }
 ,{ "in" }
 ,{ "pseudo-C++" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "The" }
 ,{ "file" }
 ,{ "net/PTPBase.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "protocol" }
 ,{ "definition" }
 ,{ "in" }
 ,{ "C++" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Link link_ClientDevice = { & page , { 38 } } ;

Text b38 = { {
 { "PTPClientDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b39 = { {
 { "PTPClientDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "client" }
 ,{ "protocol" }
 ,{ "as" }
 ,{ "a" }
 ,{ "device" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "namespace" }
 ,{ "(" }
 ,{ "::CCore::Net::PTP" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "name." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "transaction" }
 ,{ "slots." }
 ,{ "When" }
 ,{ "all" }
 ,{ "slots" }
 ,{ "are" }
 ,{ "active," }
 ,{ "an" }
 ,{ "extra" }
 ,{ "transaction" }
 ,{ "is" }
 ,{ "put" }
 ,{ "into" }
 ,{ "a" }
 ,{ "wait" }
 ,{ "queue." }
 ,{ "It" }
 ,{ "is" }
 ,{ "activated" }
 ,{ "as" }
 ,{ "soon" }
 ,{ "as" }
 ,{ "a" }
 ,{ "slot" }
 ,{ "becomes" }
 ,{ "available." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "getEPDevice()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "this" }
 ,{ "object" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "to." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "getMaxOutboundInfoLen()" , & fmt_text_b }
 ,{ "and" }
 ,{ "getMaxInboundInfoLen()" , & fmt_text_b }
 ,{ "are" }
 ,{ "info" }
 ,{ "length" }
 ,{ "limits," }
 ,{ "these" }
 ,{ "values" }
 ,{ "are" }
 ,{ "calculated" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "properties," }
 ,{ "they" }
 ,{ "are" }
 ,{ "always" }
 ,{ "positive." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "abortAll()" , & fmt_text_b }
 ,{ "aborts" }
 ,{ "all" }
 ,{ "active" }
 ,{ "transactions." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "protocol" }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "start(Packet<uint8,TransExt>" , & fmt_text_b }
 ,{ "packet)" , & fmt_text_b }
 ,{ "starts" }
 ,{ "a" }
 ,{ "transaction." }
 ,{ "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "most" }
 ,{ "general" }
 ,{ "way" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "a" }
 ,{ "transaction." }
 ,{ "You" }
 ,{ "must" }
 ,{ "prepare" }
 ,{ "a" }
 ,{ "packet," }
 ,{ "fill" }
 ,{ "it" }
 ,{ "with" }
 ,{ "client" }
 ,{ "info" }
 ,{ "and" }
 ,{ "call" }
 ,{ "this" }
 ,{ "method." }
 ,{ "TransExt" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "flag," }
 ,{ "set" }
 ,{ "this" }
 ,{ "flag" }
 ,{ "to" }
 ,{ "MovePacketBuf" , & fmt_text_b }
 ,{ "if" }
 ,{ "you" }
 ,{ "require" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "movement" }
 ,{ "with" }
 ,{ "server" }
 ,{ "info." }
 ,{ "When" }
 ,{ "transaction" }
 ,{ "is" }
 ,{ "finished," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "is" }
 ,{ "completed." }
 ,{ "In" }
 ,{ "the" }
 ,{ "completion" }
 ,{ "function" }
 ,{ "you" }
 ,{ "will" }
 ,{ "see" }
 ,{ "the" }
 ,{ "server" }
 ,{ "info," }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "field" }
 ,{ "server_info" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "TransExt" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "must" }
 ,{ "use" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "is" }
 ,{ "failed." }
 ,{ "If" }
 ,{ "you" }
 ,{ "required" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "movement," }
 ,{ "the" }
 ,{ "packet" }
 ,{ "will" }
 ,{ "have" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server" }
 ,{ "info" }
 ,{ "attached." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "server_info" , & fmt_text_b }
 ,{ "disappears" }
 ,{ "after" }
 ,{ "the" }
 ,{ "completion" }
 ,{ "function" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Link link_Ext = { & page , { 46 } } ;

Text b46 = { {
 { "Another" }
 ,{ "way" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "a" }
 ,{ "transaction" }
 ,{ "is" }
 ,{ "to" }
 ,{ "define" }
 ,{ "a" }
 ,{ "special" }
 ,{ "structure" }
 ,{ "Ext" , & fmt_text_b }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "ServiceId" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "service" }
 ,{ "id" }
 ,{ "and" }
 ,{ "FunctionId" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "function" }
 ,{ "id." }
 ,{ "See" }
 ,{ "the" }
 ,{ "recommended" , & fmt_text_a }
 ,{ "service/function" , & fmt_text_a }
 ,{ "encoding" , & fmt_text_a }
 ,{ "." }
 ,{ "Serialized" }
 ,{ "InputType" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "function" }
 ,{ "argument" }
 ,{ "and" }
 ,{ "OutputType" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "deserialize" }
 ,{ "the" }
 ,{ "function" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Then" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "start" }
 ,{ "a" }
 ,{ "transaction." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "start(Packet<uint8,Ext>" , & fmt_text_b }
 ,{ "packet,const" , & fmt_text_b }
 ,{ "typename" , & fmt_text_b }
 ,{ "Ext::InputType" , & fmt_text_b }
 ,{ "&input)" , & fmt_text_b }
 ,{ "starts" }
 ,{ "a" }
 ,{ "transaction," }
 ,{ "it" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "input" }
 ,{ "object" }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "a" }
 ,{ "function" }
 ,{ "argument" }
 ,{ "in" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer." }
 ,{ "When" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "is" }
 ,{ "successfully" }
 ,{ "finished," }
 ,{ "the" }
 ,{ "method" }
 ,{ "done()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "It" }
 ,{ "can" }
 ,{ "transport" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "output" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Ext" , & fmt_text_b }
 ,{ "structure." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported" }
 ,{ "in" }
 ,{ "result" , & fmt_text_b }
 ,{ "and" }
 ,{ "error_id" , & fmt_text_b }
 ,{ "fields" }
 ,{ "of" }
 ,{ "the" }
 ,{ "base" }
 ,{ "class." }
 ,{ "The" }
 ,{ "method" }
 ,{ "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Another" }
 ,{ "method" }
 ,{ "start_format()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used," }
 ,{ "if" }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "place" }
 ,{ "additional" }
 ,{ "data" }
 ,{ "after" }
 ,{ "the" }
 ,{ "input" }
 ,{ "object." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "preplace" }
 ,{ "data" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer." }
 ,{ "To" }
 ,{ "do" }
 ,{ "this" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "format." }
 ,{ "You" }
 ,{ "can" }
 ,{ "get" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "getFormat<Ext>()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "FormatResult" , & fmt_text_b }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "getFormat_guarded<Ext>()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "guarded" }
 ,{ "version," }
 ,{ "it" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "if" }
 ,{ "the" }
 ,{ "outbound" }
 ,{ "info" }
 ,{ "length" }
 ,{ "is" }
 ,{ "too" }
 ,{ "short." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "GetFormat<Ext>(ulen" , & fmt_text_b }
 ,{ "max_outbound_info_len)" , & fmt_text_b }
 ,{ "works" }
 ,{ "the" }
 ,{ "same" }
 ,{ "way" }
 ,{ "as" }
 ,{ "the" }
 ,{ "getFormat<Ext>()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "static" }
 ,{ "method" }
 ,{ "and" }
 ,{ "it" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "max_outbound_info_len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "GetFormat<Ext>()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "\"infinite\"" }
 ,{ "max_outbound_info_len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "The" }
 ,{ "Ext::InputType" , & fmt_text_b }
 ,{ "must" }
 ,{ "define" }
 ,{ "the" }
 ,{ "static" }
 ,{ "constant" }
 ,{ "Ext::InputType::MaxLen" , & fmt_text_b }
 ,{ "to" }
 ,{ "cap" }
 ,{ "the" }
 ,{ "extra" }
 ,{ "data" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "If" }
 ,{ "you" }
 ,{ "select" }
 ,{ "MoveNothing" , & fmt_text_b }
 ,{ "flag," }
 ,{ "then" }
 ,{ "packet" }
 ,{ "data" }
 ,{ "buffer" }
 ,{ "will" }
 ,{ "be" }
 ,{ "lost" }
 ,{ "after" }
 ,{ "the" }
 ,{ "completion" }
 ,{ "function" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "But" }
 ,{ "if" }
 ,{ "you" }
 ,{ "set" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "MovePacketBuf" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "during" }
 ,{ "the" }
 ,{ "completion" }
 ,{ "processing" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "resulting" }
 ,{ "data" }
 ,{ "is" }
 ,{ "moved" }
 ,{ "to" }
 ,{ "the" }
 ,{ "transaction" }
 ,{ "packet." }
 ,{ "And" }
 ,{ "if" }
 ,{ "you" }
 ,{ "select" }
 ,{ "MovePacketBufByRequest" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "required" }
 ,{ "behavior" }
 ,{ "giving" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ExtBase" , & fmt_text_b }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "The" }
 ,{ "family" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "built" }
 ,{ "using" }
 ,{ "this" }
 ,{ "approach" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "support" , & fmt_text_a }
 ,{ "service" , & fmt_text_a }
 ,{ "functions" , & fmt_text_a }
 ,{ "." }
 ,{ "Below" }
 ,{ "are" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "Ext" , & fmt_text_b }
 ,{ "structures." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "for" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "interaction" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server." }
 ,{ "Both" }
 ,{ "methods" }
 ,{ "performs" }
 ,{ "three" }
 ,{ "functions:" }
 ,{ "Session" , & fmt_text_b }
 ,{ "," }
 ,{ "Seed" , & fmt_text_b }
 ,{ "and" }
 ,{ "Len" , & fmt_text_b }
 ,{ "." }
 ,{ "Seeds" }
 ,{ "are" }
 ,{ "used" }
 ,{ "for" }
 ,{ "transaction" }
 ,{ "id" }
 ,{ "generation," }
 ,{ "input/output" }
 ,{ "info" }
 ,{ "lengths" }
 ,{ "are" }
 ,{ "corrected" }
 ,{ "according" }
 ,{ "Len" , & fmt_text_b }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "support()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "interaction" }
 ,{ "was" }
 ,{ "successful." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "supply" }
 ,{ "some" }
 ,{ "packet" }
 ,{ "set" }
 ,{ "for" }
 ,{ "this" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "support_guarded()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "failure." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "setSeed()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "seed" }
 ,{ "the" }
 ,{ "client" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PTPSupport::SeedExt" , & fmt_text_b }
 ,{ "fields." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "setLengths()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "reduce" }
 ,{ "inbound/outbound" }
 ,{ "lengths" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PTPSupport::LenExt" , & fmt_text_b }
 ,{ "fields." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "both" }
 ,{ "lengths" }
 ,{ "are" }
 ,{ "non-null." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "and" }
 ,{ "does" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "You" }
 ,{ "can" }
 ,{ "attach/detach" }
 ,{ "some" }
 ,{ "PacketEndpointDevice::ConnectionProc" , & fmt_text_b }
 ,{ "interface" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "connection" }
 ,{ "lost" }
 ,{ "events," }
 ,{ "using" }
 ,{ "the" }
 ,{ "methods" }
 ,{ "attach()/detach()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Link link_ServerDevice = { & page , { 64 } } ;

Text b64 = { {
 { "PTPServerDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b65 = { {
 { "PTPServerDevice" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "server" }
 ,{ "protocol" }
 ,{ "as" }
 ,{ "a" }
 ,{ "device" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "namespace" }
 ,{ "(" }
 ,{ "::CCore::Net::PTP" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b66 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "name." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "available" }
 ,{ "transaction" }
 ,{ "slots." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "getMPDevice()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "this" }
 ,{ "object" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "to." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "getMaxOutboundInfoLen()" , & fmt_text_b }
 ,{ "and" }
 ,{ "getMaxInboundInfoLen()" , & fmt_text_b }
 ,{ "are" }
 ,{ "info" }
 ,{ "length" }
 ,{ "limits," }
 ,{ "these" }
 ,{ "values" }
 ,{ "are" }
 ,{ "calculated" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "properties," }
 ,{ "they" }
 ,{ "are" }
 ,{ "always" }
 ,{ "positive." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "cancelAll()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "all" }
 ,{ "active" }
 ,{ "transactions." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "cancelFrom()" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "all" }
 ,{ "transactions" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "endpoint." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "protocol" }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "To" }
 ,{ "implement" }
 ,{ "a" }
 ,{ "server" }
 ,{ "functionality" }
 ,{ "some" }
 ,{ "server" }
 ,{ "processor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "attached." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "attach()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "server" }
 ,{ "processor." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "detach()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "server" }
 ,{ "processor" }
 ,{ "and" }
 ,{ "waits" }
 ,{ "while" }
 ,{ "it" }
 ,{ "is" }
 ,{ "in" }
 ,{ "use." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "Server" }
 ,{ "processor" }
 ,{ "interface" }
 ,{ "has" }
 ,{ "two" }
 ,{ "methods." }
 ,{ "inbound()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "process" }
 ,{ "a" }
 ,{ "transaction." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "client" }
 ,{ "address," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "a" }
 ,{ "some" }
 ,{ "transaction" }
 ,{ "index," }
 ,{ "then" }
 ,{ "packet" }
 ,{ "follows" }
 ,{ "and" }
 ,{ "client" }
 ,{ "info" }
 ,{ "range" }
 ,{ "from" }
 ,{ "this" }
 ,{ "packet." }
 ,{ "tick()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "network" }
 ,{ "tick." }
 ,{ "When" }
 ,{ "processor" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "transaction," }
 ,{ "it" }
 ,{ "must" }
 ,{ "call" }
 ,{ "either" }
 ,{ "send_info()" , & fmt_text_b }
 ,{ "or" }
 ,{ "send_cancel()" , & fmt_text_b }
 ,{ "methods." }
 ,{ "Each" }
 ,{ "of" }
 ,{ "them" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "transaction" }
 ,{ "index." }
 ,{ "send_info()" , & fmt_text_b }
 ,{ "takes" }
 ,{ "also" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "and" }
 ,{ "a" }
 ,{ "server" }
 ,{ "info" }
 ,{ "data" }
 ,{ "range" }
 ,{ "from" }
 ,{ "this" }
 ,{ "packet." }
 ,{ "The" }
 ,{ "original" }
 ,{ "client" }
 ,{ "packet" }
 ,{ "may" }
 ,{ "be" }
 ,{ "reused," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "completed." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "Server" }
 ,{ "processor" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "optional" }
 ,{ "co-interface" }
 ,{ "PacketMultipointDevice::ConnectionProc" , & fmt_text_b }
 ,{ "to" }
 ,{ "handle" }
 ,{ "connection" }
 ,{ "events." }
 ,{ "Its" }
 ,{ "methods" }
 ,{ "will" }
 ,{ "be" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "ServerDevice" , & fmt_text_b }
 ,{ "during" }
 ,{ "processing" }
 ,{ "the" }
 ,{ "same" }
 ,{ "events" }
 ,{ "from" }
 ,{ "the" }
 ,{ "multipoint" }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "waitActiveComplete...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "all" }
 ,{ "processing" }
 ,{ "slots" }
 ,{ "are" }
 ,{ "free" }
 ,{ "(no" }
 ,{ "in-progress" }
 ,{ "transactions)." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTP" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b65 , null , inner_text , outer_text , back_text }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPBoot {

Text b0 = { {
 { "PTP" }
 ,{ "Boot" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPBootBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPBootBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPBoot.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPBoot.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "PTP" , & fmt_text_b }
 ,{ "Boot" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "service" }
 ,{ "with" }
 ,{ "3" , & fmt_text_b }
 ,{ "functions." }
 ,{ "The" }
 ,{ "service" }
 ,{ "id" }
 ,{ "is" }
 ,{ "4" , & fmt_text_b }
 ,{ "." }
 ,{ "Function" }
 ,{ "ids" }
 ,{ "are" }
 ,{ "1-3" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "protocol" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "remote" }
 ,{ "boot." }
 ,{ "Abstract" }
 ,{ "boot" }
 ,{ "is" }
 ,{ "a" }
 ,{ "process," }
 ,{ "during" }
 ,{ "which" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "boot" }
 ,{ "sections" }
 ,{ "are" }
 ,{ "allocated" }
 ,{ "and" }
 ,{ "filled." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "boot" }
 ,{ "command" }
 ,{ "is" }
 ,{ "issued" }
 ,{ "to" }
 ,{ "start" }
 ,{ "an" }
 ,{ "execution" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "address" }
 ,{ "(aka" }
 ,{ "\"entry" }
 ,{ "point\")." }
 ,{ "The" }
 ,{ "most" }
 ,{ "common" }
 ,{ "example" }
 ,{ "is" }
 ,{ "an" }
 ,{ "application" }
 ,{ "boot," }
 ,{ "sections" }
 ,{ "are" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "memory" }
 ,{ "and" }
 ,{ "filled" }
 ,{ "with" }
 ,{ "the" }
 ,{ "application" }
 ,{ "data" }
 ,{ "and" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Protocol" }
 ,{ "types" }
 ,{ "and" }
 ,{ "constants:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Function" }
 ,{ "Alloc" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "function" }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "boot" }
 ,{ "section" }
 ,{ "at" }
 ,{ "the" }
 ,{ "given" }
 ,{ "address" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
 ,{ "Return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "section" }
 ,{ "index." }
 ,{ "Section" }
 ,{ "is" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "byte" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Function" }
 ,{ "Write" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "a" }
 ,{ "section." }
 ,{ "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "section" }
 ,{ "index." }
 ,{ "off" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "data" }
 ,{ "offset" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "section." }
 ,{ "Then" }
 ,{ "data" }
 ,{ "follows." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Function" }
 ,{ "Boot" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "This" }
 ,{ "function" }
 ,{ "completes" }
 ,{ "the" }
 ,{ "boot" }
 ,{ "process." }
 ,{ "It" }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "entry" }
 ,{ "point" }
 ,{ "and" }
 ,{ "boot" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "flags" }
 ,{ "is" }
 ,{ "implementation-defined." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "file" }
 ,{ "txt/cpp/PTPBoot.txt.cpp" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "file" }
 ,{ "net/PTPBootBase.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition" }
 ,{ "in" }
 ,{ "C++" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PTPBoot" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "PTP" }
 ,{ "Boot" }
 ,{ "classes" }
} , & fmt_h3 , & align_h3 } ;

Text b14 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Boot" , & fmt_text_b }
 ,{ "classes:" }
 ,{ "BootClient" , & fmt_text_b }
 ,{ "and" }
 ,{ "BootInfo" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PTPBoot" , & fmt_text_b }
 ,{ "." }
 ,{ "BootClient" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "client" }
 ,{ "part" }
 ,{ "(host" }
 ,{ "part)," }
 ,{ "and" }
 ,{ "BootInfo" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "server" }
 ,{ "part" }
 ,{ "(target" }
 ,{ "part)." }
 ,{ "A" }
 ,{ "target" }
 ,{ "serves" }
 ,{ "as" }
 ,{ "a" }
 ,{ "server" }
 ,{ "in" }
 ,{ "this" }
 ,{ "case." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "BootClient" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "PTPBoot" , & fmt_text_b }
 ,{ "operations" }
 ,{ "via" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Client" , & fmt_text_b }
 ,{ "device." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "ClientDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "name." }
 ,{ "Others" }
 ,{ "are" }
 ,{ "the" }
 ,{ "operations" }
 ,{ "timeout" }
 ,{ "and" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "count" }
 ,{ "limit." }
 ,{ "All" }
 ,{ "methods" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "section." }
 ,{ "The" }
 ,{ "section" }
 ,{ "index" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "write()" , & fmt_text_b }
 ,{ "fills" }
 ,{ "a" }
 ,{ "section" }
 ,{ "with" }
 ,{ "data." }
 ,{ "The" }
 ,{ "data" }
 ,{ "length" }
 ,{ "is" }
 ,{ "not" }
 ,{ "limited" }
 ,{ "for" }
 ,{ "this" }
 ,{ "method," }
 ,{ "it" }
 ,{ "spawns" }
 ,{ "as" }
 ,{ "many" }
 ,{ "write" }
 ,{ "operations" }
 ,{ "as" }
 ,{ "necessary" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "boot()" , & fmt_text_b }
 ,{ "completes" }
 ,{ "the" }
 ,{ "boot." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "BootInfo" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "BootInfo" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "must" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "class" }
 ,{ "from" }
 ,{ "it" }
 ,{ "to" }
 ,{ "use" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Once" }
 ,{ "a" }
 ,{ "BootInfo" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "created," }
 ,{ "you" }
 ,{ "can" }
 ,{ "start" }
 ,{ "a" }
 ,{ "remote" }
 ,{ "boot" }
 ,{ "process" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "ServerDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "name." }
 ,{ "During" }
 ,{ "the" }
 ,{ "boot" }
 ,{ "process" }
 ,{ "all" }
 ,{ "data" }
 ,{ "are" }
 ,{ "accumulated" }
 ,{ "in" }
 ,{ "the" }
 ,{ "protected" }
 ,{ "members." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "the" }
 ,{ "completion" }
 ,{ "of" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "transactions" }
 ,{ "after" }
 ,{ "the" }
 ,{ "boot" }
 ,{ "process" }
 ,{ "is" }
 ,{ "finished." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "table" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "section" }
 ,{ "table," }
 ,{ "each" }
 ,{ "section" }
 ,{ "record" }
 ,{ "has" }
 ,{ "an" }
 ,{ "address," }
 ,{ "a" }
 ,{ "section" }
 ,{ "length" }
 ,{ "and" }
 ,{ "data." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "entry_point" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "entry" }
 ,{ "point." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "flags" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "boot" }
 ,{ "flags." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "wait_complete()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "to" }
 ,{ "wait" }
 ,{ "for" }
 ,{ "the" }
 ,{ "process" }
 ,{ "completion." }
 ,{ "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "must" }
 ,{ "block" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "in" }
 ,{ "this" }
 ,{ "method" }
 ,{ "until" }
 ,{ "the" }
 ,{ "signal_complete()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "for" }
 ,{ "the" }
 ,{ "waiting." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "wait_complete()" , & fmt_text_b }
 ,{ "method" }
 ,{ "simply" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "method" }
 ,{ "take()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "signal_complete()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "asynchronously" }
 ,{ "during" }
 ,{ "the" }
 ,{ "boot" }
 ,{ "process." }
 ,{ "It" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "stop" }
 ,{ "waiting." }
 ,{ "If" }
 ,{ "you" }
 ,{ "are" }
 ,{ "using" }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "for" }
 ,{ "the" }
 ,{ "waiting," }
 ,{ "the" }
 ,{ "signal_complete()" , & fmt_text_b }
 ,{ "method" }
 ,{ "simply" }
 ,{ "calls" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "method" }
 ,{ "give()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPBoot" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPCilentDeviceEvents {

Text b0 = { {
 { "PTP" }
 ,{ "ClientDevice" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PTP" , & fmt_text_a }
 ,{ "ClientDevice" , & fmt_text_a }
 ,{ "generates" }
 ,{ "protocol" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "following" }
 ,{ "types:" }
 ,{ "ClientProtoEvent" , & fmt_text_b }
 ,{ "and" }
 ,{ "ClientProtoEvent_slot" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "ev" , & fmt_text_b }
 ,{ "is" }
 ,{ "en" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ev" , & fmt_text_b }
 ,{ "is" }
 ,{ "en" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "slot" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "slot" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Event" }
 ,{ "type" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "enum:" }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPCilentDeviceEvents" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPCon {

Text b0 = { {
 { "PTP" }
 ,{ "Console" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPConBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPConBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPConDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPConDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "PTP" , & fmt_text_b }
 ,{ "Console" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "console" }
 ,{ "service" }
 ,{ "with" }
 ,{ "4" , & fmt_text_b }
 ,{ "functions." }
 ,{ "The" }
 ,{ "service" }
 ,{ "id" }
 ,{ "is" }
 ,{ "3" , & fmt_text_b }
 ,{ "." }
 ,{ "Function" }
 ,{ "ids" }
 ,{ "are" }
 ,{ "1-4" , & fmt_text_b }
 ,{ "." }
 ,{ "Server" }
 ,{ "may" }
 ,{ "support" }
 ,{ "single" }
 ,{ "or" }
 ,{ "multiple" }
 ,{ "consoles." }
 ,{ "Each" }
 ,{ "console" }
 ,{ "has" }
 ,{ "an" }
 ,{ "id." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Protocol" }
 ,{ "types" }
 ,{ "and" }
 ,{ "constants:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Function" }
 ,{ "Open" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "function" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "console" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "and" }
 ,{ "parameters." }
 ,{ "The" }
 ,{ "console" }
 ,{ "id" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "write_timeout_msec" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "time" }
 ,{ "in" }
 ,{ "milliseconds." }
 ,{ "The" }
 ,{ "write" }
 ,{ "character" }
 ,{ "frame" }
 ,{ "print" }
 ,{ "may" }
 ,{ "be" }
 ,{ "delayed" }
 ,{ "on" }
 ,{ "this" }
 ,{ "timeout" }
 ,{ "to" }
 ,{ "catch" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "sent" }
 ,{ "frames." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "read_timeout_msec" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "time" }
 ,{ "in" }
 ,{ "milliseconds." }
 ,{ "The" }
 ,{ "read" }
 ,{ "operation" }
 ,{ "completion" }
 ,{ "may" }
 ,{ "be" }
 ,{ "delayed" }
 ,{ "on" }
 ,{ "this" }
 ,{ "timeout" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "trigger" }
 ,{ "character" }
 ,{ "in" }
 ,{ "the" }
 ,{ "input" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "trigger_mask" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "256-bit" }
 ,{ "character" }
 ,{ "mask." }
 ,{ "The" }
 ,{ "masked" }
 ,{ "character" }
 ,{ "is" }
 ,{ "a" }
 ,{ "trigger" }
 ,{ "character." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "appearance" }
 ,{ "of" }
 ,{ "these" }
 ,{ "characters" }
 ,{ "in" }
 ,{ "the" }
 ,{ "input" }
 ,{ "stream" }
 ,{ "causes" }
 ,{ "a" }
 ,{ "read" }
 ,{ "operation" }
 ,{ "completion." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Function" }
 ,{ "Read" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "This" }
 ,{ "function" }
 ,{ "reads" }
 ,{ "the" }
 ,{ "input" }
 ,{ "character" }
 ,{ "stream." }
 ,{ "The" }
 ,{ "number" , & fmt_text_b }
 ,{ "is" }
 ,{ "any" }
 ,{ "number" }
 ,{ "and" }
 ,{ "sent" }
 ,{ "back" }
 ,{ "by" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "read" }
 ,{ "length." }
 ,{ "The" }
 ,{ "operation" }
 ,{ "completion" }
 ,{ "is" }
 ,{ "delayed" }
 ,{ "until" }
 ,{ "a" }
 ,{ "trigger" }
 ,{ "character" }
 ,{ "appears" }
 ,{ "in" }
 ,{ "the" }
 ,{ "input" }
 ,{ "stream" }
 ,{ "or" }
 ,{ "the" }
 ,{ "read" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Function" }
 ,{ "Write" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "This" }
 ,{ "function" }
 ,{ "writes" }
 ,{ "a" }
 ,{ "character" }
 ,{ "frame" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "console." }
 ,{ "The" }
 ,{ "number" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "incremented" }
 ,{ "with" }
 ,{ "each" }
 ,{ "write." }
 ,{ "It" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "0" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Function" }
 ,{ "Close" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "This" }
 ,{ "function" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "file" }
 ,{ "txt/cpp/PTPCon.txt.cpp" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "file" }
 ,{ "net/PTPConBase.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition" }
 ,{ "in" }
 ,{ "C++" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PTPCon" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "ClientDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b19 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "client" }
 ,{ "class" }
 ,{ "ClientDevice" , & fmt_text_b }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "console." }
 ,{ "The" }
 ,{ "class" }
 ,{ "is" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PTPCon" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "ClientDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "To" }
 ,{ "perform" }
 ,{ "Open" , & fmt_text_b }
 ,{ "and" }
 ,{ "Close" , & fmt_text_b }
 ,{ "operations" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "OpenClose" , & fmt_text_b }
 ,{ "is" }
 ,{ "provided." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "does" }
 ,{ "Open" , & fmt_text_b }
 ,{ "and" }
 ,{ "destructor" }
 ,{ "Close" , & fmt_text_b }
 ,{ "." }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "console" }
 ,{ "name" }
 ,{ "and" }
 ,{ "cfg" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "configuration" }
 ,{ "parameters" }
 ,{ "(see" }
 ,{ "below)." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "To" }
 ,{ "read" }
 ,{ "the" }
 ,{ "method" }
 ,{ "start_read()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "abstract" }
 ,{ "interface." }
 ,{ "The" }
 ,{ "method" }
 ,{ "input()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "input" }
 ,{ "data" }
 ,{ "arrives." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "refers" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "buffer," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "input" }
 ,{ "string," }
 ,{ "it" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "method" }
 ,{ "stop()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "signal" }
 ,{ "about" }
 ,{ "console" }
 ,{ "input" }
 ,{ "is" }
 ,{ "shutdown" }
 ,{ "by" }
 ,{ "any" }
 ,{ "reason." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "call" }
 ,{ "in" }
 ,{ "the" }
 ,{ "\"unknown" }
 ,{ "task" }
 ,{ "context\"." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "stop_read()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "reading." }
 ,{ "After" }
 ,{ "this" }
 ,{ "method" }
 ,{ "has" }
 ,{ "returned," }
 ,{ "the" }
 ,{ "input" }
 ,{ "processor" }
 ,{ "may" }
 ,{ "be" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "getWriteErrorFlag()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "there" }
 ,{ "were" }
 ,{ "some" }
 ,{ "write" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "getWriteFormat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "format" }
 ,{ "for" }
 ,{ "the" }
 ,{ "writing." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "write()" , & fmt_text_b }
 ,{ "writes" }
 ,{ "the" }
 ,{ "string" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "The" }
 ,{ "structure" }
 ,{ "Cfg" , & fmt_text_b }
 ,{ "stores" }
 ,{ "configuration" }
 ,{ "properties" }
 ,{ "for" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "console." }
 ,{ "The" }
 ,{ "field" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "timeout" }
 ,{ "for" }
 ,{ "Open" , & fmt_text_b }
 ,{ "and" }
 ,{ "Close" , & fmt_text_b }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "The" }
 ,{ "structure" }
 ,{ "TriggerMask" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "character" }
 ,{ "trigger" }
 ,{ "mask." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "TriggerMask" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "initialize" }
 ,{ "by" }
 ,{ "default" }
 ,{ "(which" }
 ,{ "means" }
 ,{ "the" }
 ,{ "null" }
 ,{ "trigger" }
 ,{ "mask)," }
 ,{ "or" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "zero-terminated" }
 ,{ "string," }
 ,{ "or" }
 ,{ "using" }
 ,{ "the" }
 ,{ "Trigger" , & fmt_text_b }
 ,{ "enumeration." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "setNone()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "mask" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "setDefault()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "mask" }
 ,{ "to" }
 ,{ "the" }
 ,{ "default" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "setAll()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "mask" }
 ,{ "to" }
 ,{ "the" }
 ,{ "all" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "set(char" , & fmt_text_b }
 ,{ "ch)" , & fmt_text_b }
 ,{ "sets" }
 ,{ "only" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "bit" }
 ,{ "to" }
 ,{ "one." }
 ,{ "Other" }
 ,{ "bits" }
 ,{ "remain" }
 ,{ "unchanged." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "set(const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "*zstr)" , & fmt_text_b }
 ,{ "sets" }
 ,{ "only" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "set" }
 ,{ "bits" }
 ,{ "to" }
 ,{ "ones." }
 ,{ "Other" }
 ,{ "bits" }
 ,{ "remain" }
 ,{ "unchanged." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "test()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "test" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "character" }
 ,{ "bit." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPCon" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPEchoServer {

Text b0 = { {
 { "PTPEchoServer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PTPEchoServer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "PTP" , & fmt_text_a }
 ,{ "echo" , & fmt_text_a }
 ,{ "server." }
 ,{ "It" }
 ,{ "occupies" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "52000" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "echo" }
 ,{ "service" }
 ,{ "and" }
 ,{ "three" }
 ,{ "functions" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_a }
 ,{ "support" , & fmt_text_a }
 ,{ "service" , & fmt_text_a }
 ,{ ":" }
 ,{ "Len," }
 ,{ "Seed," }
 ,{ "Session." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "There" }
 ,{ "are" }
 ,{ "no" }
 ,{ "command" }
 ,{ "line" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "can" }
 ,{ "show" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "statistic" }
 ,{ "using" }
 ,{ "the" }
 ,{ "command" }
 ,{ "stat" , & fmt_text_i }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPEchoServer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPEchoTest {

Text b0 = { {
 { "PTP" }
 ,{ "echo" }
 ,{ "test" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPEchoTest.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPEchoTest.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "EchoTest" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "PTP::ServerDevice" , & fmt_text_b }
 ,{ "processor" }
 ,{ "class." }
 ,{ "It" }
 ,{ "accepts" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "transactions" }
 ,{ "with" }
 ,{ "service" }
 ,{ "id" }
 ,{ "equals" }
 ,{ "10000" , & fmt_text_b }
 ,{ "and" }
 ,{ "function" }
 ,{ "id" }
 ,{ "equals" }
 ,{ "1" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "client" }
 ,{ "info" }
 ,{ "payload" }
 ,{ "must" }
 ,{ "start" }
 ,{ "with" }
 ,{ "the" }
 ,{ "data" }
 ,{ "length," }
 ,{ "encoded" }
 ,{ "as" }
 ,{ "an" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "value" }
 ,{ "in" }
 ,{ "bigendian" }
 ,{ "byte" }
 ,{ "order" }
 ,{ "and" }
 ,{ "continues" }
 ,{ "with" }
 ,{ "arbitrary" }
 ,{ "data" }
 ,{ "payload" }
 ,{ "of" }
 ,{ "this" }
 ,{ "length." }
 ,{ "EchoTest" , & fmt_text_b }
 ,{ "sends" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "back" }
 ,{ "with" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code" }
 ,{ "equals" }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "same" }
 ,{ "data" }
 ,{ "payload." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "getMPDevice()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "the" }
 ,{ "PTP" }
 ,{ "server" }
 ,{ "is" }
 ,{ "attached" }
 ,{ "to." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "I.e." }
 ,{ "the" }
 ,{ "output" }
 ,{ "packet" }
 ,{ "content" }
 ,{ "is" }
 ,{ "almost" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "input," }
 ,{ "except" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "field" }
 ,{ "is" }
 ,{ "erased." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "for" }
 ,{ "the" }
 ,{ "testing" }
 ,{ "purpose." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "EchoTest::Ext" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "transactions" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PTP::ClientDevice" , & fmt_text_b }
 ,{ "," }
 ,{ "using" }
 ,{ "Ext" , & fmt_text_a }
 ,{ "extension" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPEchoTest" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPHFS {

Text b0 = { {
 { "HFS" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "\"Server" }
 ,{ "must" }
 ,{ "do" }
 ,{ "the" }
 ,{ "best," }
 ,{ "client" }
 ,{ "must" }
 ,{ "assume" }
 ,{ "the" }
 ,{ "worst.\"" }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/HFSBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/HFSBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Files" }
 ,{ "CCore/inc/net/HFSClientDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/HFSClientDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "Files" }
 ,{ "CCore/inc/net/HFSFileSystemDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/HFSFileSystemDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b5 = { {
 { "HFS" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "host" }
 ,{ "file" }
 ,{ "system" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "service." }
 ,{ "Its" }
 ,{ "service" }
 ,{ "id" }
 ,{ "is" }
 ,{ "2" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "service" }
 ,{ "has" }
 ,{ "14" , & fmt_text_b }
 ,{ "functions" }
 ,{ "with" }
 ,{ "ids" }
 ,{ "1-14" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "perform" }
 ,{ "file" }
 ,{ "input-output" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "file" }
 ,{ "system" }
 ,{ "operations" }
 ,{ "according" }
 ,{ "General" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "operations" , & fmt_text_a }
 ,{ "." }
 ,{ "To" }
 ,{ "identify" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "file" }
 ,{ "the" }
 ,{ "FileId" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Service" }
 ,{ "data" }
 ,{ "types" }
 ,{ "and" }
 ,{ "constants" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Mostly" }
 ,{ "they" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "values" }
 ,{ "and" }
 ,{ "meaning" }
 ,{ "as" }
 ,{ "General" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "data" , & fmt_text_a }
 ,{ "and" , & fmt_text_a }
 ,{ "constants" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Function" }
 ,{ "Open" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "This" }
 ,{ "function" }
 ,{ "opens" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "The" }
 ,{ "file" }
 ,{ "id" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "with" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Function" }
 ,{ "Read" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "This" }
 ,{ "function" }
 ,{ "reads" }
 ,{ "the" }
 ,{ "file" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "file" }
 ,{ "position." }
 ,{ "Server" }
 ,{ "may" }
 ,{ "ether" }
 ,{ "truncate" }
 ,{ "or" }
 ,{ "completely" }
 ,{ "fail" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "if" }
 ,{ "the" }
 ,{ "required" }
 ,{ "range" }
 ,{ "continues" }
 ,{ "past" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file." }
 ,{ "The" }
 ,{ "output" }
 ,{ "data" }
 ,{ "length" }
 ,{ "may" }
 ,{ "also" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "the" }
 ,{ "input" }
 ,{ "length," }
 ,{ "if" }
 ,{ "the" }
 ,{ "input" }
 ,{ "length" }
 ,{ "is" }
 ,{ "too" }
 ,{ "high" }
 ,{ "(exceeds" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "length" }
 ,{ "based" }
 ,{ "limit)." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Function" }
 ,{ "Write" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "This" }
 ,{ "function" }
 ,{ "writes" }
 ,{ "the" }
 ,{ "data" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file" }
 ,{ "at" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "file" }
 ,{ "position." }
 ,{ "The" }
 ,{ "new" }
 ,{ "file" }
 ,{ "length" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Function" }
 ,{ "Close" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "This" }
 ,{ "function" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "opened" }
 ,{ "file." }
 ,{ "The" }
 ,{ "flag" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "cancels" }
 ,{ "the" }
 ,{ "open" }
 ,{ "flag" }
 ,{ "OpenFlag_AutoDelete" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Function" }
 ,{ "GetFileType" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "This" }
 ,{ "function" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Function" }
 ,{ "GetFileList" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "This" }
 ,{ "function" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "virtual" }
 ,{ "temporary" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "file" }
 ,{ "list" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "directory." }
 ,{ "The" }
 ,{ "file" }
 ,{ "id" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Then" }
 ,{ "usual" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used." }
 ,{ "File" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "for" }
 ,{ "reading." }
 ,{ "The" }
 ,{ "file" }
 ,{ "has" }
 ,{ "number" }
 ,{ "of" }
 ,{ "lines," }
 ,{ "each" }
 ,{ "line" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "a" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory" }
 ,{ "name," }
 ,{ "then" }
 ,{ "space," }
 ,{ "then" }
 ,{ "'f'" }
 ,{ "for" }
 ,{ "a" }
 ,{ "file" }
 ,{ "and" }
 ,{ "'d'" }
 ,{ "for" }
 ,{ "a" }
 ,{ "directory." }
 ,{ "End" }
 ,{ "of" }
 ,{ "line" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "'\\n'." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Function" }
 ,{ "CreateFile" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "This" }
 ,{ "function" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Function" }
 ,{ "DeleteFile" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "This" }
 ,{ "function" }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Function" }
 ,{ "CreateDir" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "This" }
 ,{ "function" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Function" }
 ,{ "DeleteDir" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "This" }
 ,{ "function" }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "(recursive" }
 ,{ "or" }
 ,{ "not)." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Function" }
 ,{ "Rename" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "This" }
 ,{ "function" }
 ,{ "renames" }
 ,{ "files" }
 ,{ "or" }
 ,{ "directories." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Function" }
 ,{ "Remove" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "This" }
 ,{ "function" }
 ,{ "removes" }
 ,{ "the" }
 ,{ "file" }
 ,{ "or" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Function" }
 ,{ "Exec" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "This" }
 ,{ "function" }
 ,{ "executes" }
 ,{ "a" }
 ,{ "program" }
 ,{ "at" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "working" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Function" }
 ,{ "Exec2" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "to" }
 ,{ "execute" }
 ,{ "a" }
 ,{ "program" }
 ,{ "at" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "working" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "arguments." }
 ,{ "To" }
 ,{ "setup" }
 ,{ "arguments" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "virtual" }
 ,{ "empty" }
 ,{ "file" }
 ,{ "is" }
 ,{ "created." }
 ,{ "The" }
 ,{ "file" }
 ,{ "id" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Then" }
 ,{ "usual" }
 ,{ "file" }
 ,{ "operations" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used." }
 ,{ "File" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "for" }
 ,{ "reading" }
 ,{ "and" }
 ,{ "writing." }
 ,{ "When" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "closed" }
 ,{ "if" }
 ,{ "the" }
 ,{ "preserve_file" , & fmt_text_b }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set," }
 ,{ "then" }
 ,{ "the" }
 ,{ "program" }
 ,{ "is" }
 ,{ "started." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "Function" }
 ,{ "GetFileUpdateTime" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "The" }
 ,{ "file" }
 ,{ "txt/cpp/HFS.txt.cpp" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "The" }
 ,{ "file" }
 ,{ "net/HFSBase.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition" }
 ,{ "in" }
 ,{ "C++" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "ClientDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b40 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "withing" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "client" }
 ,{ "class." }
 ,{ "You" }
 ,{ "probably" }
 ,{ "should" }
 ,{ "not" }
 ,{ "use" }
 ,{ "its" }
 ,{ "methods" }
 ,{ "directly." }
 ,{ "The" }
 ,{ "best" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "FileSystemDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "an" }
 ,{ "register" }
 ,{ "it," }
 ,{ "then" }
 ,{ "use" }
 ,{ "AsyncFiles" , & fmt_text_b }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "client" }
 ,{ "device" }
 ,{ "object" }
 ,{ "name" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "getPTPDevice()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "ClientDevice" , & fmt_text_b }
 ,{ "being" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Each" }
 ,{ "function" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "with" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "Ext" , & fmt_text_a }
 ,{ "extension" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "FileSystemDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b45 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "implements" }
 ,{ "async" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "and" , & fmt_text_a }
 ,{ "file" , & fmt_text_a }
 ,{ "system" , & fmt_text_a }
 ,{ "interfaces" , & fmt_text_a }
 ,{ "over" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "HFS" , & fmt_text_b }
 ,{ "service." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "an" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "client" }
 ,{ "device" }
 ,{ "object" }
 ,{ "name" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "Below" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "for" }
 ,{ "an" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "target:" }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPHFS" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPSecureClient {

Text b0 = { {
 { "PTPSecureClient" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PTPSecureClient" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "connect" }
 ,{ "to" }
 ,{ "PTPSecureServer" , & fmt_text_a }
 ,{ "and" }
 ,{ "execute" }
 ,{ "some" }
 ,{ "commands," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "download" }
 ,{ "and" }
 ,{ "upload" }
 ,{ "remote" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "To" }
 ,{ "run" }
 ,{ "the" }
 ,{ "PTPSecureClient" , & fmt_text_b }
 ,{ "you" }
 ,{ "must" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "configuration" }
 ,{ "file" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "This" }
 ,{ "file" }
 ,{ "uses" }
 ,{ "DDL" , & fmt_text_a }
 ,{ "to" }
 ,{ "describe" }
 ,{ "various" }
 ,{ "client" }
 ,{ "parameters." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "A" }
 ,{ "configuration" }
 ,{ "file" }
 ,{ "must" }
 ,{ "define" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "PTPSecureConfig" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "name" }
 ,{ "config" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "as" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "server_pke_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "server" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "server_psec_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "server" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "pke_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "psec_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "keyset_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "keys" }
 ,{ "in" }
 ,{ "the" }
 ,{ "session" }
 ,{ "keyset." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "ttl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "lifetime" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "utl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "traffic" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "ip" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "IP" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "server_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "server" }
 ,{ "primary" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "name" }
 ,{ "in" }
 ,{ "the" }
 ,{ "server" }
 ,{ "client" }
 ,{ "database." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "key" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "primary" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "A" }
 ,{ "primary" }
 ,{ "key" }
 ,{ "is" }
 ,{ "described" }
 ,{ "by" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Key" , & fmt_text_b }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "hash_id" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "algorithm." }
 ,{ "One" }
 ,{ "of" }
 ,{ "the" }
 ,{ "predefined" }
 ,{ "constants" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used:" }
 ,{ "SHA1," , & fmt_text_b }
 ,{ "SHA224," , & fmt_text_b }
 ,{ "SHA256," , & fmt_text_b }
 ,{ "SHA384," , & fmt_text_b }
 ,{ "SHA512" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "key" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "sequence" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Once" }
 ,{ "client" }
 ,{ "is" }
 ,{ "started," }
 ,{ "it" }
 ,{ "tries" }
 ,{ "to" }
 ,{ "establish" }
 ,{ "a" }
 ,{ "connection" }
 ,{ "to" }
 ,{ "the" }
 ,{ "server." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "done" }
 ,{ "it" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "console" }
 ,{ "prompt" }
 ,{ "to" }
 ,{ "enter" }
 ,{ "commands." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "The" }
 ,{ "following" }
 ,{ "commands" }
 ,{ "are" }
 ,{ "accepted:" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "pwd" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "current" }
 ,{ "directory" }
 ,{ "on" }
 ,{ "the" }
 ,{ "server" }
 ,{ "file" }
 ,{ "tree." }
 ,{ "This" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "also" }
 ,{ "printed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "prompt" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "dir" , & fmt_text_b }
 ,{ "[<path>]" , & fmt_text_b }
 ,{ "shows" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "directory" }
 ,{ "or" }
 ,{ "the" }
 ,{ "current" }
 ,{ "directory" }
 ,{ "if" }
 ,{ "the" }
 ,{ "path" }
 ,{ "is" }
 ,{ "not" }
 ,{ "specified." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "cd" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "changes" }
 ,{ "the" }
 ,{ "current" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "mkdir" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "new" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "rmdir" , & fmt_text_b }
 ,{ "[-r]" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "removes" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "directory." }
 ,{ "If" }
 ,{ "the" }
 ,{ "option" }
 ,{ "-r" , & fmt_text_b }
 ,{ "is" }
 ,{ "specified" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "removed" }
 ,{ "with" }
 ,{ "all" }
 ,{ "its" }
 ,{ "content." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "mkfile" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "del" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "type" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "types" }
 ,{ "the" }
 ,{ "file" }
 ,{ "content." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "add" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "<line>" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "given" }
 ,{ "line" }
 ,{ "to" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "put" , & fmt_text_b }
 ,{ "<local" , & fmt_text_b }
 ,{ "file>" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "uploads" }
 ,{ "the" }
 ,{ "file" }
 ,{ "to" }
 ,{ "the" }
 ,{ "server." }
 ,{ "The" }
 ,{ "local" }
 ,{ "file" }
 ,{ "is" }
 ,{ "searched" }
 ,{ "with" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "working" }
 ,{ "directory" }
 ,{ "of" }
 ,{ "the" }
 ,{ "client." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "get" , & fmt_text_b }
 ,{ "<local" , & fmt_text_b }
 ,{ "file>" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "downloads" }
 ,{ "the" }
 ,{ "file" }
 ,{ "from" }
 ,{ "the" }
 ,{ "server." }
 ,{ "The" }
 ,{ "local" }
 ,{ "file" }
 ,{ "is" }
 ,{ "searched" }
 ,{ "with" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "working" }
 ,{ "directory" }
 ,{ "of" }
 ,{ "the" }
 ,{ "client." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "fileinfo" , & fmt_text_b }
 ,{ "<path>" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "file" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "last" }
 ,{ "modification" }
 ,{ "file" }
 ,{ "time." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "help" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "commands." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPSecureClient" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPSecureServer {

Text b0 = { {
 { "PTPSecureServer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PTPSecureServer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "secure" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "server." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "protocol" }
 ,{ "to" }
 ,{ "establish" }
 ,{ "a" }
 ,{ "secure" }
 ,{ "communication" }
 ,{ "with" }
 ,{ "a" }
 ,{ "client" }
 ,{ "and" }
 ,{ "grants" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "local" }
 ,{ "file" }
 ,{ "system" }
 ,{ "over" }
 ,{ "the" }
 ,{ "net." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "To" }
 ,{ "run" }
 ,{ "the" }
 ,{ "PTPSecureServer" , & fmt_text_b }
 ,{ "you" }
 ,{ "must" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "configuration" }
 ,{ "file" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "This" }
 ,{ "file" }
 ,{ "uses" }
 ,{ "DDL" , & fmt_text_a }
 ,{ "to" }
 ,{ "describe" }
 ,{ "various" }
 ,{ "server" }
 ,{ "parameters." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "A" }
 ,{ "configuration" }
 ,{ "file" }
 ,{ "must" }
 ,{ "define" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "PTPSecureConfig" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "name" }
 ,{ "config" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "as" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "pke_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "psec_port" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "port" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "keyset_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "keys" }
 ,{ "in" }
 ,{ "the" }
 ,{ "session" }
 ,{ "keyset." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "ttl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "lifetime" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "utl" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "traffic" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "the" }
 ,{ "session" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "max_clients" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "limit" }
 ,{ "for" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "root" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "path" }
 ,{ "to" }
 ,{ "a" }
 ,{ "directory." }
 ,{ "This" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "made" }
 ,{ "accessible" }
 ,{ "to" }
 ,{ "clients" }
 ,{ "by" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "server_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "server" }
 ,{ "primary" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "admin_name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "admin" }
 ,{ "name." }
 ,{ "Admin" }
 ,{ "has" }
 ,{ "full" }
 ,{ "access" }
 ,{ "rights." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "admin_key" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "primary" }
 ,{ "key" }
 ,{ "of" }
 ,{ "the" }
 ,{ "admin." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "clients" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "clients." }
 ,{ "Each" }
 ,{ "client" }
 ,{ "is" }
 ,{ "described" }
 ,{ "using" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Client" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "fields:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "key" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "client" }
 ,{ "primary" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "access_read" , & fmt_text_b }
 ,{ "grants" }
 ,{ "the" }
 ,{ "read" }
 ,{ "access" }
 ,{ "to" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "access_write" , & fmt_text_b }
 ,{ "grants" }
 ,{ "the" }
 ,{ "write" }
 ,{ "access" }
 ,{ "to" }
 ,{ "files." }
 ,{ "Client" }
 ,{ "can" }
 ,{ "also" }
 ,{ "create/destroy" }
 ,{ "directories." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "has_home" , & fmt_text_b }
 ,{ "determines" }
 ,{ "if" }
 ,{ "the" }
 ,{ "client" }
 ,{ "has" }
 ,{ "the" }
 ,{ "home" }
 ,{ "folder." }
 ,{ "The" }
 ,{ "home" }
 ,{ "folder" }
 ,{ "has" }
 ,{ "the" }
 ,{ "path" }
 ,{ "\"/home/client_name\"" , & fmt_text_b }
 ,{ "." }
 ,{ "Client" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "'~'" , & fmt_text_b }
 ,{ "to" }
 ,{ "designate" }
 ,{ "its" }
 ,{ "home" }
 ,{ "folder." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "A" }
 ,{ "primary" }
 ,{ "key" }
 ,{ "is" }
 ,{ "described" }
 ,{ "by" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Key" , & fmt_text_b }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "hash_id" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "algorithm." }
 ,{ "One" }
 ,{ "of" }
 ,{ "the" }
 ,{ "predefined" }
 ,{ "constants" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used:" }
 ,{ "SHA1," , & fmt_text_b }
 ,{ "SHA224," , & fmt_text_b }
 ,{ "SHA256," , & fmt_text_b }
 ,{ "SHA384," , & fmt_text_b }
 ,{ "SHA512" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "key" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "sequence" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "To" }
 ,{ "use" }
 ,{ "the" }
 ,{ "server" }
 ,{ "a" }
 ,{ "client" }
 ,{ "must" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "negotiation" }
 ,{ "process" }
 ,{ "with" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "credentials" }
 ,{ "over" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "protocol" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server" }
 ,{ "PKE" , & fmt_text_b }
 ,{ "port." }
 ,{ "Then" }
 ,{ "it" }
 ,{ "must" }
 ,{ "open" }
 ,{ "a" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "connection" }
 ,{ "using" }
 ,{ "the" }
 ,{ "generated" }
 ,{ "session" }
 ,{ "key" }
 ,{ "over" }
 ,{ "the" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "protocol" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server" }
 ,{ "PSec" , & fmt_text_b }
 ,{ "port." }
 ,{ "Finally," }
 ,{ "client" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "secure" }
 ,{ "packet" }
 ,{ "channel" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "PTP" , & fmt_text_a }
 ,{ "HFS" , & fmt_text_a }
 ,{ "transactions" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server." }
 ,{ "Server" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "Support" , & fmt_text_b }
 ,{ "service" }
 ,{ "and" }
 ,{ "the" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "service" }
 ,{ "without" }
 ,{ "exec" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPSecureServer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPServer {

Text b0 = { {
 { "PTPServer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PTPServer" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "server," }
 ,{ "it" }
 ,{ "implements" }
 ,{ "HFS" , & fmt_text_b }
 ,{ "and" }
 ,{ "PTPCon" , & fmt_text_b }
 ,{ "protocols" }
 ,{ "over" }
 ,{ "UDP" , & fmt_text_b }
 ,{ "(on" }
 ,{ "default" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "server" }
 ,{ "port" }
 ,{ "52000" , & fmt_text_b }
 ,{ ")." }
 ,{ "Clients" }
 ,{ "may" }
 ,{ "connect" }
 ,{ "to" }
 ,{ "the" }
 ,{ "server" }
 ,{ "and" }
 ,{ "use" }
 ,{ "it" }
 ,{ "to" }
 ,{ "open" }
 ,{ "a" }
 ,{ "console" }
 ,{ "and" }
 ,{ "access" }
 ,{ "the" }
 ,{ "file" }
 ,{ "system." }
 ,{ "Server" }
 ,{ "makes" }
 ,{ "visible" }
 ,{ "the" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "tree," }
 ,{ "started" }
 ,{ "from" }
 ,{ "the" }
 ,{ "working" }
 ,{ "directory." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "run" }
 ,{ "applications" }
 ,{ "on" }
 ,{ "the" }
 ,{ "server" }
 ,{ "side" }
 ,{ "from" }
 ,{ "this" }
 ,{ "subtree." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "The" }
 ,{ "only" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "symbol" }
 ,{ "'c'." }
 ,{ "If" }
 ,{ "it" }
 ,{ "is" }
 ,{ "given," }
 ,{ "server" }
 ,{ "will" }
 ,{ "stop" }
 ,{ "execution" }
 ,{ "once" }
 ,{ "a" }
 ,{ "console" }
 ,{ "is" }
 ,{ "closed" }
 ,{ "by" }
 ,{ "a" }
 ,{ "client." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "While" }
 ,{ "server" }
 ,{ "is" }
 ,{ "running," }
 ,{ "you" }
 ,{ "can" }
 ,{ "enter" }
 ,{ "the" }
 ,{ "following" }
 ,{ "commands:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "help" , & fmt_text_b }
 ,{ "prints" }
 ,{ "a" }
 ,{ "brief" }
 ,{ "help." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "stat" , & fmt_text_b }
 ,{ "prints" }
 ,{ "a" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "clear" , & fmt_text_b }
 ,{ "clears" }
 ,{ "statistic" }
 ,{ "counters." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "exit" , & fmt_text_b }
 ,{ "exits" }
 ,{ "the" }
 ,{ "server." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "To" }
 ,{ "work" }
 ,{ "with" }
 ,{ "the" }
 ,{ "server," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "HFS" , & fmt_text_a }
 ,{ "," }
 ,{ "PTPCon" , & fmt_text_a }
 ,{ "," }
 ,{ "PTPSupport" , & fmt_text_a }
 ,{ "PTP" , & fmt_text_a }
 ,{ "services." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPServer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPServerDeviceEvents {

Text b0 = { {
 { "PTP" }
 ,{ "ServerDevice" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "PTP" , & fmt_text_a }
 ,{ "ServerDevice" , & fmt_text_a }
 ,{ "generates" }
 ,{ "protocol" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "following" }
 ,{ "types:" }
 ,{ "ServerProtoEvent" , & fmt_text_b }
 ,{ "and" }
 ,{ "ServerProtoEvent_slot" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "ev" , & fmt_text_b }
 ,{ "is" }
 ,{ "en" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ev" , & fmt_text_b }
 ,{ "is" }
 ,{ "en" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "slot" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "slot" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Event" }
 ,{ "type" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "enum:" }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPServerDeviceEvents" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPService {

Text b0 = { {
 { "PTP" }
 ,{ "Service" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPExtra.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPExtra.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PTP" , & fmt_text_b }
 ,{ "server" }
 ,{ "may" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "variety" }
 ,{ "of" }
 ,{ "functions." }
 ,{ "Usually" }
 ,{ "they" }
 ,{ "are" }
 ,{ "grouped" }
 ,{ "in" }
 ,{ "services." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "way" }
 ,{ "to" }
 ,{ "encode" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "service" }
 ,{ "interaction." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "standard" }
 ,{ "list" }
 ,{ "of" }
 ,{ "common" }
 ,{ "types:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ServiceIdType" , & fmt_text_b }
 ,{ "identifies" }
 ,{ "a" }
 ,{ "service." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "FunctionIdType" , & fmt_text_b }
 ,{ "specifies" }
 ,{ "a" }
 ,{ "function" }
 ,{ "of" }
 ,{ "a" }
 ,{ "service." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "LenType" , & fmt_text_b }
 ,{ "encodes" }
 ,{ "the" }
 ,{ "array" }
 ,{ "data" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "BoolType" , & fmt_text_b }
 ,{ "encodes" }
 ,{ "a" }
 ,{ "boolean" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "FlagType" , & fmt_text_b }
 ,{ "encodes" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "flags." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "ErrorIdType" , & fmt_text_b }
 ,{ "encodes" }
 ,{ "a" }
 ,{ "error" }
 ,{ "code," }
 ,{ "null" }
 ,{ "value" }
 ,{ "means" }
 ,{ "no" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "list" }
 ,{ "of" }
 ,{ "basic" }
 ,{ "error" }
 ,{ "codes:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "NoError" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "no" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "BadInput" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "input" }
 ,{ "data" }
 ,{ "are" }
 ,{ "invalid." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "NoFunction" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "function" }
 ,{ "or" }
 ,{ "service" }
 ,{ "id" }
 ,{ "is" }
 ,{ "invalid." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Exhausted" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "server" }
 ,{ "has" }
 ,{ "not" }
 ,{ "enough" }
 ,{ "resources" }
 ,{ "to" }
 ,{ "serve" }
 ,{ "the" }
 ,{ "request." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Unknown" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "any" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Two" }
 ,{ "common" }
 ,{ "derived" }
 ,{ "types:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Client" }
 ,{ "info" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ServiceFunction" , & fmt_text_b }
 ,{ "header," }
 ,{ "followed" }
 ,{ "by" }
 ,{ "function" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "bigendian" }
 ,{ "byte" }
 ,{ "order" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "encode" }
 ,{ "integral" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Server" }
 ,{ "info" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Result" , & fmt_text_b }
 ,{ "." }
 ,{ "serv_func" , & fmt_text_b }
 ,{ "field" }
 ,{ "is" }
 ,{ "a" }
 ,{ "copy" }
 ,{ "from" }
 ,{ "the" }
 ,{ "client" }
 ,{ "info." }
 ,{ "If" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "result" }
 ,{ "follows" }
 ,{ "after." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "If" }
 ,{ "a" }
 ,{ "client" }
 ,{ "info" }
 ,{ "has" }
 ,{ "no" }
 ,{ "proper" }
 ,{ "header" }
 ,{ "(i.g." }
 ,{ "it" }
 ,{ "is" }
 ,{ "too" }
 ,{ "short)," }
 ,{ "the" }
 ,{ "server" }
 ,{ "cancels" }
 ,{ "transaction." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "The" }
 ,{ "file" }
 ,{ "txt/cpp/PTPService.txt.cpp" , & fmt_text_b }
 ,{ "contains" }
 ,{ "all" }
 ,{ "of" }
 ,{ "these" }
 ,{ "definitions." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "PTPExtra.h" , & fmt_text_b }
 ,{ "defines" }
 ,{ "these" }
 ,{ "entities" }
 ,{ "withing" }
 ,{ "namespace" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPService" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PTPSupport {

Text b0 = { {
 { "PTP" }
 ,{ "Support" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPSupportBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPSupportBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/net/PTPSupport.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/PTPSupport.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "PTP" , & fmt_text_b }
 ,{ "Support" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "service" }
 ,{ "with" }
 ,{ "6" , & fmt_text_b }
 ,{ "functions." }
 ,{ "The" }
 ,{ "service" }
 ,{ "id" }
 ,{ "is" }
 ,{ "1" , & fmt_text_b }
 ,{ "." }
 ,{ "Function" }
 ,{ "ids" }
 ,{ "are" }
 ,{ "1-6" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Function" }
 ,{ "Len" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "cap" }
 ,{ "input/output" }
 ,{ "packet" }
 ,{ "lengths." }
 ,{ "Client" }
 ,{ "sends" }
 ,{ "its" }
 ,{ "limits" }
 ,{ "to" }
 ,{ "the" }
 ,{ "server." }
 ,{ "Limits" }
 ,{ "should" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "MaxInfoLen" , & fmt_text_b }
 ,{ "(" }
 ,{ "1440" , & fmt_text_b }
 ,{ ")." }
 ,{ "Server" }
 ,{ "downs" }
 ,{ "these" }
 ,{ "limits" }
 ,{ "to" }
 ,{ "its" }
 ,{ "own" }
 ,{ "limits" }
 ,{ "and" }
 ,{ "sends" }
 ,{ "back" }
 ,{ "to" }
 ,{ "the" }
 ,{ "client." }
 ,{ "These" }
 ,{ "values" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "further" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "different" }
 ,{ "data" }
 ,{ "limits" }
 ,{ "in" }
 ,{ "other" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "service/functions." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Function" }
 ,{ "Seed" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "a" }
 ,{ "random" }
 ,{ "128-bit" }
 ,{ "value." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "random" }
 ,{ "seeding." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Function" }
 ,{ "Session" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "inform" }
 ,{ "the" }
 ,{ "server," }
 ,{ "that" }
 ,{ "this" }
 ,{ "particular" }
 ,{ "client" }
 ,{ "starts" }
 ,{ "a" }
 ,{ "new" }
 ,{ "session" }
 ,{ "and" }
 ,{ "all" }
 ,{ "remaining" }
 ,{ "state" }
 ,{ "information" }
 ,{ "from" }
 ,{ "the" }
 ,{ "past" }
 ,{ "should" }
 ,{ "be" }
 ,{ "discarded," }
 ,{ "if" }
 ,{ "any." }
 ,{ "It" }
 ,{ "is" }
 ,{ "recommended," }
 ,{ "that" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "client-server" }
 ,{ "interaction" }
 ,{ "starts" }
 ,{ "with" }
 ,{ "Len" , & fmt_text_b }
 ,{ "and" }
 ,{ "Session" , & fmt_text_b }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Function" }
 ,{ "Echo" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "This" }
 ,{ "function" }
 ,{ "echoes" }
 ,{ "the" }
 ,{ "input" }
 ,{ "data" }
 ,{ "after" }
 ,{ "the" }
 ,{ "given" }
 ,{ "delay" }
 ,{ "in" }
 ,{ "milliseconds." }
 ,{ "The" }
 ,{ "maximum" }
 ,{ "delay" }
 ,{ "value" }
 ,{ "is" }
 ,{ "1000*60*60" }
 ,{ "(1" }
 ,{ "hour)." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Function" }
 ,{ "ErrorDesc" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "This" }
 ,{ "function" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "text" }
 ,{ "description" }
 ,{ "of" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "input" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "service/function" }
 ,{ "ids" }
 ,{ "and" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "output" }
 ,{ "is" }
 ,{ "a" }
 ,{ "text" }
 ,{ "(byte)" }
 ,{ "string," }
 ,{ "up" }
 ,{ "to" }
 ,{ "255" }
 ,{ "byte" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Function" }
 ,{ "Exist" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "input/output:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "This" }
 ,{ "function" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "given" }
 ,{ "service/function" }
 ,{ "id" }
 ,{ "combination" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "server." }
 ,{ "Output" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "the" }
 ,{ "input" }
 ,{ "and" }
 ,{ "the" }
 ,{ "error" }
 ,{ "code." }
 ,{ "The" }
 ,{ "error" }
 ,{ "code" }
 ,{ "is" }
 ,{ "NoError" , & fmt_text_b }
 ,{ "or" }
 ,{ "NoFunction" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "file" }
 ,{ "txt/cpp/PTPSupport.txt.cpp" , & fmt_text_b }
 ,{ "contains" }
 ,{ "this" }
 ,{ "service" }
 ,{ "definition." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "PTPSupportBase.h" , & fmt_text_b }
 ,{ "defines" }
 ,{ "these" }
 ,{ "entities" }
 ,{ "withing" }
 ,{ "namespace" }
 ,{ "PTPSupport" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Support" }
 ,{ "functions" }
 ,{ "with" }
 ,{ "ClientDevice" }
} , & fmt_h3 , & align_h3 } ;

Text b19 = { {
 { "Support" }
 ,{ "functions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "ClientDevice" , & fmt_text_b }
 ,{ "class." }
 ,{ "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "helper" }
 ,{ "classes" }
 ,{ "for" }
 ,{ "this." }
 ,{ "They" }
 ,{ "are" }
 ,{ "located" }
 ,{ "withing" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Each" }
 ,{ "class" }
 ,{ "constructor" }
 ,{ "take" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ClientDevice" , & fmt_text_b }
 ,{ "object" }
 ,{ "and" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PacketSet<uint8>" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "packet" }
 ,{ "set" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "take" }
 ,{ "a" }
 ,{ "transaction" }
 ,{ "packet." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "The" }
 ,{ "method" }
 ,{ "perform()" , & fmt_text_b }
 ,{ "or" }
 ,{ "perform_guarded()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "transaction." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "blocking" }
 ,{ "call." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "timeout," }
 ,{ "both" }
 ,{ "MSec" , & fmt_text_b }
 ,{ "and" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "argument" }
 ,{ "types" }
 ,{ "are" }
 ,{ "allowed." }
 ,{ "perform()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "boolean" }
 ,{ "value" }
 ,{ "to" }
 ,{ "indicate" }
 ,{ "a" }
 ,{ "success," }
 ,{ "perform_guarded()" , & fmt_text_b }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "successfully" }
 ,{ "finished," }
 ,{ "the" }
 ,{ "result" }
 ,{ "can" }
 ,{ "be" }
 ,{ "obtained" }
 ,{ "by" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "get()" , & fmt_text_b }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Support_Exist" }
} , & fmt_h4 , & align_h4 } ;

Text b23 = { {
 { "perform()" , & fmt_text_b }
 ,{ "takes" }
 ,{ "the" }
 ,{ "ServiceId" , & fmt_text_b }
 ,{ "and" }
 ,{ "FunctionId" , & fmt_text_b }
 ,{ "as" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "getResult()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "as" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "the" }
 ,{ "Unknown" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Support_ErrorDesc" }
} , & fmt_h4 , & align_h4 } ;

Text b26 = { {
 { "perform()" , & fmt_text_b }
 ,{ "takes" }
 ,{ "the" }
 ,{ "ServiceId" , & fmt_text_b }
 ,{ "," }
 ,{ "FunctionId" , & fmt_text_b }
 ,{ "and" }
 ,{ "ErrorIdType" , & fmt_text_b }
 ,{ "as" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "getDesc()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "error" }
 ,{ "description" }
 ,{ "from" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "\"Unknown" , & fmt_text_b }
 ,{ "error\"" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Support_Seed" }
} , & fmt_h4 , & align_h4 } ;

Text b29 = { {
 { "getSeed1()" , & fmt_text_b }
 ,{ "and" }
 ,{ "getSeed2()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "seed." }
 ,{ "Zero" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Support_Echo" }
} , & fmt_h4 , & align_h4 } ;

Text b31 = { {
 { "perform()" , & fmt_text_b }
 ,{ "takes" }
 ,{ "the" }
 ,{ "delay" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "FillType" , & fmt_text_b }
 ,{ "class" }
 ,{ "as" }
 ,{ "arguments." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "echo" }
 ,{ "data" }
 ,{ "creation." }
 ,{ "It" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "following" }
 ,{ "interface:" }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "getEcho()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "echoed" }
 ,{ "data" }
 ,{ "from" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "empty" }
 ,{ "range" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Page page = { "page_PTPSupport" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PtrLen {

Text b0 = { {
 { "PtrLen" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/PtrLen.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/PtrLen.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Range" }
 ,{ "idiom" }
 ,{ "and" }
 ,{ "loops" }
} , & fmt_h2 , & align_h2 } ;

Text b3 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "main" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "ranges" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "Range" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "part" }
 ,{ "of" }
 ,{ "an" }
 ,{ "array." }
 ,{ "There" }
 ,{ "is" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "address," }
 ,{ "its" }
 ,{ "address" }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
 ,{ "\"Address\"" }
 ,{ "means" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "type." }
 ,{ "If" }
 ,{ "this" }
 ,{ "address" }
 ,{ "is" }
 ,{ "p" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "range" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "addresses" }
 ,{ "{" , & fmt_text_b }
 ,{ "p," , & fmt_text_b }
 ,{ "p+1," , & fmt_text_b }
 ,{ "...," , & fmt_text_b }
 ,{ "p+n-1" , & fmt_text_b }
 ,{ "}" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "n" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
 ,{ "A" }
 ,{ "range" }
 ,{ "can" }
 ,{ "be" }
 ,{ "empty." }
 ,{ "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "base" }
 ,{ "address," }
 ,{ "which" }
 ,{ "may" }
 ,{ "not" }
 ,{ "refer" }
 ,{ "to" }
 ,{ "an" }
 ,{ "existing" }
 ,{ "object," }
 ,{ "but" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "is" }
 ,{ "0" , & fmt_text_b }
 ,{ "." }
 ,{ "A" }
 ,{ "range" }
 ,{ "of" }
 ,{ "length" }
 ,{ "1" , & fmt_text_b }
 ,{ "can" }
 ,{ "also" }
 ,{ "be" }
 ,{ "formed" }
 ,{ "from" }
 ,{ "a" }
 ,{ "single" }
 ,{ "object." }
 ,{ "Finally," }
 ,{ "empty" }
 ,{ "range" }
 ,{ "may" }
 ,{ "have" }
 ,{ "the" }
 ,{ "base" }
 ,{ "address" }
 ,{ "equals" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Sometimes" }
 ,{ "Range" , & fmt_text_b }
 ,{ "is" }
 ,{ "considered" }
 ,{ "more" }
 ,{ "generally" }
 ,{ "using" }
 ,{ "idiom" }
 ,{ "of" }
 ,{ "iterator," }
 ,{ "but" }
 ,{ "we" }
 ,{ "focus" }
 ,{ "on" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "type" }
 ,{ "of" }
 ,{ "ranges," }
 ,{ "because" }
 ,{ "of" }
 ,{ "its" }
 ,{ "practical" }
 ,{ "importance." }
 ,{ "Basic" }
 ,{ "ranges" }
 ,{ "are" }
 ,{ "the" }
 ,{ "most" }
 ,{ "efficient" }
 ,{ "and" }
 ,{ "convenient" }
 ,{ "way" }
 ,{ "of" }
 ,{ "representation" }
 ,{ "of" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "similar" }
 ,{ "data," }
 ,{ "so" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "whenever" }
 ,{ "possible." }
 ,{ "The" }
 ,{ "main" }
 ,{ "advantages" }
 ,{ "of" }
 ,{ "basic" }
 ,{ "ranges" }
 ,{ "are:" }
 ,{ "best" }
 ,{ "loops," }
 ,{ "best" }
 ,{ "sequential" }
 ,{ "and" }
 ,{ "random" }
 ,{ "object" }
 ,{ "access," }
 ,{ "best" }
 ,{ "cache" }
 ,{ "locality." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "best" }
 ,{ "loop" }
 ,{ "in" }
 ,{ "the" }
 ,{ "programming" }
 ,{ "is" }
 ,{ "the" }
 ,{ "loop" }
 ,{ "n-times" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "is" }
 ,{ "because" }
 ,{ "such" }
 ,{ "loops" }
 ,{ "can" }
 ,{ "be" }
 ,{ "unrolled," }
 ,{ "pipelined" }
 ,{ "and" }
 ,{ "optimized" }
 ,{ "for" }
 ,{ "small" }
 ,{ "loop" }
 ,{ "count." }
 ,{ "So" }
 ,{ "compilers" }
 ,{ "usually" }
 ,{ "try" }
 ,{ "to" }
 ,{ "reorganize" }
 ,{ "every" }
 ,{ "loop" }
 ,{ "into" }
 ,{ "this" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "loop," }
 ,{ "if" }
 ,{ "possible." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Range...()" }
} , & fmt_h2 , & align_h2 } ;

Text b7 = { {
 { "Range...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "four" }
 ,{ "basic" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "ranges." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "RangeCopy()" , & fmt_text_b }
 ,{ "does" }
 ,{ "copy" }
 ,{ "one" }
 ,{ "range" }
 ,{ "to" }
 ,{ "disjoint" , & fmt_text_Alert }
 ,{ "another" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "possible" }
 ,{ "implicit" }
 ,{ "type" }
 ,{ "conversion." }
 ,{ "It" }
 ,{ "performs" }
 ,{ "assignments" }
 ,{ "*dst=*src;" , & fmt_text_b }
 ,{ "." }
 ,{ "Here" }
 ,{ "we" }
 ,{ "use" }
 ,{ "the" }
 ,{ "non-standard" }
 ,{ "extension" }
 ,{ "to" }
 ,{ "C++" }
 ,{ "â€”" }
 ,{ "keyword" }
 ,{ "restrict" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "tells" }
 ,{ "compiler," }
 ,{ "that" }
 ,{ "dst" , & fmt_text_b }
 ,{ "and" }
 ,{ "src" , & fmt_text_b }
 ,{ "ranges" }
 ,{ "has" }
 ,{ "no" }
 ,{ "common" }
 ,{ "elements," }
 ,{ "and" }
 ,{ "enables" }
 ,{ "loop" }
 ,{ "optimization," }
 ,{ "based" }
 ,{ "on" }
 ,{ "this" }
 ,{ "assumption." }
 ,{ "restrict" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "a" }
 ,{ "macro" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "PlatformBase.h" , & fmt_text_b }
 ,{ "header," }
 ,{ "so" }
 ,{ "target" }
 ,{ "can" }
 ,{ "define" }
 ,{ "this" }
 ,{ "word" }
 ,{ "according" }
 ,{ "compiler" }
 ,{ "abilities." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "RangeSet()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value." }
 ,{ "The" }
 ,{ "src" , & fmt_text_b }
 ,{ "argument" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "reference." }
 ,{ "It" }
 ,{ "performs" }
 ,{ "assignments" }
 ,{ "*dst=src;" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "RangeSet_null()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "value" }
 ,{ "T()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "performs" }
 ,{ "assignments" }
 ,{ "*dst=T();" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "interface" }
 ,{ "and" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "selected" }
 ,{ "to" }
 ,{ "be" }
 ,{ "more" }
 ,{ "appropriate," }
 ,{ "when" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "do" }
 ,{ "they" }
 ,{ "job" }
 ,{ "in" }
 ,{ "the" }
 ,{ "ascending" }
 ,{ "order," }
 ,{ "but" }
 ,{ "you" }
 ,{ "should" }
 ,{ "not" }
 ,{ "assume" }
 ,{ "any" }
 ,{ "specific" }
 ,{ "order" }
 ,{ "of" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "RangeMatch()" , & fmt_text_b }
 ,{ "compares" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "two" }
 ,{ "ranges." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "equals" }
 ,{ "pairs." }
 ,{ "In" }
 ,{ "other" }
 ,{ "words," }
 ,{ "if" }
 ,{ "the" }
 ,{ "RangeMatch()" , & fmt_text_b }
 ,{ "returned" }
 ,{ "len" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "dst[0]==src[0]," , & fmt_text_b }
 ,{ "...," , & fmt_text_b }
 ,{ "dst[len-1]==src[len-1]" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "len==count" , & fmt_text_b }
 ,{ "or" }
 ,{ "dst[len]!=src[len]" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "compare" }
 ,{ "elements" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "PtrLen" }
} , & fmt_h2 , & align_h2 } ;

Text b14 = { {
 { "PtrLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "representation" }
 ,{ "type." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "range" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "PtrLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "widely" }
 ,{ "used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "to" }
 ,{ "pass" }
 ,{ "ranges" }
 ,{ "as" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "to" }
 ,{ "do" }
 ,{ "native" }
 ,{ "operations" }
 ,{ "with" }
 ,{ "ranges." }
 ,{ "This" }
 ,{ "type" }
 ,{ "has" }
 ,{ "a" }
 ,{ "bunch" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "do" }
 ,{ "so." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "constructors" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "more" }
 ,{ "often" }
 ,{ "you" }
 ,{ "should" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Range()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "const" , & fmt_text_b }
 ,{ "version." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Cursor" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "iterated" }
 ,{ "through" }
 ,{ "range" }
 ,{ "elements." }
 ,{ "When" }
 ,{ "you" }
 ,{ "use" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "as" }
 ,{ "a" }
 ,{ "cursor," }
 ,{ "it" }
 ,{ "advances" }
 ,{ "in" }
 ,{ "the" }
 ,{ "ascending" }
 ,{ "order." }
 ,{ "I.e." }
 ,{ "after" }
 ,{ "(ptr,len)" , & fmt_text_b }
 ,{ "the" }
 ,{ "(ptr+1,len-1)" , & fmt_text_b }
 ,{ "follows." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "typical" }
 ,{ "usage:" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "operator" , & fmt_text_b }
 ,{ "+=" , & fmt_text_b }
 ,{ "advances" }
 ,{ "on" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "these" }
 ,{ "elements." }
 ,{ "You" }
 ,{ "must" }
 ,{ "be" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "number" }
 ,{ "does" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "takeup()" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar," }
 ,{ "but" }
 ,{ "it" }
 ,{ "checks" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length" }
 ,{ "and" }
 ,{ "advances" }
 ,{ "up" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Loop" }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { ",in" }
 ,{ "fact," }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "So" }
 ,{ "it" }
 ,{ "is" }
 ,{ "count-down" , & fmt_text_b }
 ,{ "n-times" , & fmt_text_b }
 ,{ "loop." }
 ,{ "There" }
 ,{ "is" }
 ,{ "another" }
 ,{ "popular" }
 ,{ "way" }
 ,{ "of" }
 ,{ "a" }
 ,{ "range" }
 ,{ "iteration:" }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Compilers," }
 ,{ "however," }
 ,{ "often" }
 ,{ "turn" }
 ,{ "this" }
 ,{ "loop" }
 ,{ "into" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "one." }
 ,{ "It" }
 ,{ "leads" }
 ,{ "to:" }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Many" }
 ,{ "embedded" }
 ,{ "CPU" }
 ,{ "has" }
 ,{ "no" }
 ,{ "hardware" }
 ,{ "division." }
 ,{ "So" }
 ,{ "it" }
 ,{ "leads" }
 ,{ "to" }
 ,{ "an" }
 ,{ "expensive" }
 ,{ "hidden" }
 ,{ "operation," }
 ,{ "that" }
 ,{ "may" }
 ,{ "kill" }
 ,{ "performance" }
 ,{ "for" }
 ,{ "short" }
 ,{ "tight" }
 ,{ "loops." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Reverse" }
 ,{ "iteration" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "with" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getFinal()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Methods" }
 ,{ "fit()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "The" }
 ,{ "first" }
 ,{ "checks" }
 ,{ "is" }
 ,{ "there" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "length" , & fmt_text_b }
 ,{ "elements." }
 ,{ "The" }
 ,{ "second" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "off(set)" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "begin" }
 ,{ "and" }
 ,{ "length" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "selected." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "You" }
 ,{ "can" }
 ,{ "select" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "using" }
 ,{ "parts" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "safe_part()" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "method" }
 ,{ "part()" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "safe" }
 ,{ "to" }
 ,{ "use." }
 ,{ "It" }
 ,{ "checks" }
 ,{ "boundaries" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "available" }
 ,{ "part" }
 ,{ "from" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "You" }
 ,{ "can" }
 ,{ "pick" }
 ,{ "an" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "based" }
 ,{ "on" }
 ,{ "its" }
 ,{ "index:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "The" }
 ,{ "following" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "performs" }
 ,{ "basic" }
 ,{ "range" }
 ,{ "operations:" }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "last" }
 ,{ "method" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "support" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "StrLen" }
} , & fmt_h2 , & align_h2 } ;

Text b36 = { {
 { "StrLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "PtrLen<const" , & fmt_text_b }
 ,{ "char>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "StrLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "widely" }
 ,{ "used" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "to" }
 ,{ "pass" }
 ,{ "string" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "strings." }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "the" }
 ,{ "string" }
 ,{ "is" }
 ,{ "zero-terminated." }
 ,{ "Instead," }
 ,{ "we" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "string" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "StrLen" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "several" }
 ,{ "implicit" }
 ,{ "constructors," }
 ,{ "so" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "silently" }
 ,{ "converted" }
 ,{ "from" }
 ,{ "different" }
 ,{ "string-like" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "The" }
 ,{ "implicit" }
 ,{ "encoding" }
 ,{ "string" }
 ,{ "length" }
 ,{ "with" }
 ,{ "zero" }
 ,{ "termination" }
 ,{ "was" }
 ,{ "a" }
 ,{ "language" }
 ,{ "design" }
 ,{ "mistake." }
 ,{ "To" }
 ,{ "perform" }
 ,{ "string" }
 ,{ "operations" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "know" }
 ,{ "its" }
 ,{ "length." }
 ,{ "So" }
 ,{ "each" }
 ,{ "time" }
 ,{ "you" }
 ,{ "will" }
 ,{ "have" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "it." }
 ,{ "It" }
 ,{ "may" }
 ,{ "lead" }
 ,{ "to" }
 ,{ "quadratic" }
 ,{ "time" }
 ,{ "algorithms" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "linear" }
 ,{ "time" }
 ,{ "if" }
 ,{ "you" }
 ,{ "are" }
 ,{ "not" }
 ,{ "steady" }
 ,{ "enough." }
 ,{ "But" }
 ,{ "the" }
 ,{ "most" }
 ,{ "goodless" }
 ,{ "thing" }
 ,{ "is" }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "select" }
 ,{ "a" }
 ,{ "substring" }
 ,{ "from" }
 ,{ "a" }
 ,{ "zero-terminated" }
 ,{ "string:" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "zero-terminated!" }
 ,{ "So" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "memory" }
 ,{ "and" }
 ,{ "do" }
 ,{ "copy!" }
 ,{ "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "avoid" }
 ,{ "it" }
 ,{ "converting" }
 ,{ "zero-terminated" }
 ,{ "strings" }
 ,{ "into" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "." }
 ,{ "So" }
 ,{ "we" }
 ,{ "calculate" }
 ,{ "zero-terminated" }
 ,{ "string" }
 ,{ "length" }
 ,{ "only" }
 ,{ "one" }
 ,{ "time" }
 ,{ "and" }
 ,{ "then" }
 ,{ "use" }
 ,{ "it" }
 ,{ "everywhere." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "string" }
 ,{ "literal" }
 ,{ "with" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "_c" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "it" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "object" }
 ,{ "with" }
 ,{ "zero" }
 ,{ "overhead:" }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Single()" }
} , & fmt_h2 , & align_h2 } ;

Text b43 = { {
 { "Single()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "single" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "Range()" }
 ,{ "and" }
 ,{ "Range_const()" }
} , & fmt_h2 , & align_h2 } ;

Text b45 = { {
 { "Range()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Range_const()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "s" }
 ,{ "for" }
 ,{ "the" }
 ,{ "range" }
 ,{ "creation." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "And" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "const-variants." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "You" }
 ,{ "can" }
 ,{ "create" }
 ,{ "a" }
 ,{ "range" }
 ,{ "from" }
 ,{ "a" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "," }
 ,{ "from" }
 ,{ "an" }
 ,{ "array," }
 ,{ "from" }
 ,{ "a" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "length" }
 ,{ "and" }
 ,{ "from" }
 ,{ "a" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "a" }
 ,{ "limit" }
 ,{ "pointer." }
 ,{ "Limit" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "past-the-end" }
 ,{ "element." }
 ,{ "It" }
 ,{ "may" }
 ,{ "not" }
 ,{ "refer" }
 ,{ "to" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "object." }
 ,{ "The" }
 ,{ "advantage" }
 ,{ "of" }
 ,{ "using" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Range()" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "implicit" }
 ,{ "type" }
 ,{ "inference." }
 ,{ "Consider:" }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Finally," }
 ,{ "there" }
 ,{ "exists" }
 ,{ "two" }
 ,{ "generic" }
 ,{ "functions" }
 ,{ "Range()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Range_const()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "They" }
 ,{ "are" }
 ,{ "applicable" }
 ,{ "to" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "types" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Range" , & fmt_text_b }
 ,{ "Access" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "The" }
 ,{ "following" }
 ,{ "four" }
 ,{ "concepts" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "select" }
 ,{ "types" }
 ,{ "â€”" }
 ,{ "range" }
 ,{ "providers." }
 ,{ "I.e." }
 ,{ "arguments" }
 ,{ "of" }
 ,{ "these" }
 ,{ "types" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Range()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "RangeableType" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Range()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "TypeRangeableType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "RangeableType" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "Range()" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PtrLen<S>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "ConstRangeableType" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "const" , & fmt_text_b }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Range_const()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "ConstTypeRangeableType" , & fmt_text_b }
 ,{ "=>" }
 ,{ "ConstRangeableType" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "Range_const()" , & fmt_text_b }
 ,{ "is" }
 ,{ "implicitly" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PtrLen<const" , & fmt_text_b }
 ,{ "S>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "Range" }
 ,{ "and" }
 ,{ "range-based" }
 ,{ "for" }
} , & fmt_h2 , & align_h2 } ;

Text b56 = { {
 { "CCore" , & fmt_text_b }
 ,{ "defines" }
 ,{ "in" }
 ,{ "its" }
 ,{ "namespace" }
 ,{ "global" }
 ,{ "functions" }
 ,{ "begin()" , & fmt_text_b }
 ,{ "and" }
 ,{ "end()" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "applicable" }
 ,{ "to" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "types" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Range" , & fmt_text_b }
 ,{ "Access" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "and" }
 ,{ "to" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "type." }
 ,{ "So" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "This" }
 ,{ "loop" }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as:" }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "Or:" }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "Instead" }
 ,{ "of:" }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "Sometimes" }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "do" }
 ,{ "something" }
 ,{ "more" }
 ,{ "complicated" }
 ,{ "than" }
 ,{ "merely" }
 ,{ "run" }
 ,{ "through" }
 ,{ "a" }
 ,{ "range." }
 ,{ "In" }
 ,{ "such" }
 ,{ "cases" }
 ,{ "use" }
 ,{ "range" }
 ,{ "loops" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "Mutate...()" }
} , & fmt_h2 , & align_h2 } ;

Text b62 = { {
 { "Mutate...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "three" }
 ,{ "functions" }
 ,{ "family" }
 ,{ "to" }
 ,{ "cast" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "or" }
 ,{ "a" }
 ,{ "range" }
 ,{ "to" }
 ,{ "the" }
 ,{ "byte" }
 ,{ "pointer" }
 ,{ "or" }
 ,{ "the" }
 ,{ "byte" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "The" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "(" }
 ,{ "const" , & fmt_text_b }
 ,{ ")" }
 ,{ "char" , & fmt_text_b }
 ,{ "or" }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
 ,{ "Mutate()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "over" }
 ,{ "all" }
 ,{ "bytes," }
 ,{ "occupied" }
 ,{ "by" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "source" }
 ,{ "range." }
 ,{ "C++" }
 ,{ "standard" }
 ,{ "allows" }
 ,{ "aliasing" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "these" }
 ,{ "types." }
 ,{ "Mutate...()" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "caution" }
 ,{ "in" }
 ,{ "special" }
 ,{ "cases" }
 ,{ "for" }
 ,{ "the" }
 ,{ "sake" }
 ,{ "of" }
 ,{ "performance" }
 ,{ "or" }
 ,{ "to" }
 ,{ "do" }
 ,{ "some" }
 ,{ "low-level" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Page page = { "page_PtrLen" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PtrLenReverse {

Text b0 = { {
 { "PtrLenReverse" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/PtrLenReverse.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/PtrLenReverse.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PtrLenReverse" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "PtrLenReverse" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "range" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order." }
 ,{ "It" }
 ,{ "have" }
 ,{ "a" }
 ,{ "bunch" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "a" }
 ,{ "range" }
 ,{ "in" }
 ,{ "its" }
 ,{ "reverse" }
 ,{ "representation." }
 ,{ "They" }
 ,{ "are" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "PtrLen" , & fmt_text_a }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ptr" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "past-the-last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "So" }
 ,{ "the" }
 ,{ "range" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "(ptr-len,len)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "A" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "can" }
 ,{ "be" }
 ,{ "constructed" }
 ,{ "from" }
 ,{ "the" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "length" }
 ,{ "using" }
 ,{ "a" }
 ,{ "constructor." }
 ,{ "But" }
 ,{ "it's" }
 ,{ "better" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "RangeReverse()" , & fmt_text_b }
 ,{ "and" }
 ,{ "RangeReverse_const()" , & fmt_text_b }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ptr_" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "can" }
 ,{ "cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "const" , & fmt_text_b }
 ,{ "version." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "method" }
 ,{ "reverse()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "(i.e." }
 ,{ "the" }
 ,{ "usual" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "object)." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "set" }
 ,{ "of" }
 ,{ "cursor" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "\"First" }
 ,{ "element\"" }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "last" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "operator" , & fmt_text_b }
 ,{ "+=" , & fmt_text_b }
 ,{ "advances" }
 ,{ "on" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "of" }
 ,{ "these" }
 ,{ "elements." }
 ,{ "You" }
 ,{ "must" }
 ,{ "be" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "number" }
 ,{ "does" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "takeup()" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar," }
 ,{ "but" }
 ,{ "it" }
 ,{ "checks" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length" }
 ,{ "and" }
 ,{ "advances" }
 ,{ "up" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getFinal()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "\"final\"" }
 ,{ "(past" }
 ,{ "the" }
 ,{ "last)" }
 ,{ "cursor" }
 ,{ "over" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Methods" }
 ,{ "fit()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "first" }
 ,{ "checks" }
 ,{ "is" }
 ,{ "there" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "length" , & fmt_text_b }
 ,{ "elements." }
 ,{ "The" }
 ,{ "second" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "off(set)" , & fmt_text_b }
 ,{ "and" }
 ,{ "length" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "selected." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "You" }
 ,{ "can" }
 ,{ "select" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "using" }
 ,{ "parts" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Parts" }
 ,{ "are" }
 ,{ "selected" }
 ,{ "using" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order." }
 ,{ "I.e." }
 ,{ "\"prefix\"" }
 ,{ "is," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "the" }
 ,{ "last" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "MakeFrom()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "past-the-last" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "You" }
 ,{ "can" }
 ,{ "pick" }
 ,{ "an" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "based" }
 ,{ "on" }
 ,{ "its" }
 ,{ "index:" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Again," }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "order" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "arrange" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "The" }
 ,{ "last" }
 ,{ "method" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "support" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "PtrLenReverse" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "RangeReverse()" }
 ,{ "and" }
 ,{ "RangeReverse_const()" }
} , & fmt_h3 , & align_h3 } ;

Text b25 = { {
 { "RangeReverse()" , & fmt_text_b }
 ,{ "and" }
 ,{ "RangeReverse_const()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "s" }
 ,{ "for" }
 ,{ "the" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "creation." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "And" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "const-variants." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "The" }
 ,{ "following" }
 ,{ "generic" }
 ,{ "functions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "types" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Range" , & fmt_text_b }
 ,{ "Access" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_PtrLenReverse" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_PtrStepLen {

Text b0 = { {
 { "PtrStepLen" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/PtrStepLen.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/PtrStepLen.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "PtrStepLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "PtrLen" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "represents" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Three" }
 ,{ "members" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "range:" }
 ,{ "ptr" , & fmt_text_b }
 ,{ "," }
 ,{ "step" , & fmt_text_b }
 ,{ "and" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "ptr" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "range" }
 ,{ "element." }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
 ,{ "step" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "from" }
 ,{ "any" }
 ,{ "range" }
 ,{ "element" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next." }
 ,{ "I.e." }
 ,{ "the" }
 ,{ "range" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "the" }
 ,{ "elements" }
 ,{ "{" , & fmt_text_b }
 ,{ "ptr[0]" , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "ptr[step]" , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "ptr[index*step]" , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "ptr[(len-1)*step]" , & fmt_text_b }
 ,{ "}" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Three" }
 ,{ "constructors" }
 ,{ "are" }
 ,{ "provided:" }
 ,{ "two" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "null" }
 ,{ "range" }
 ,{ "and" }
 ,{ "third" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "ptr" , & fmt_text_b }
 ,{ "," }
 ,{ "step" , & fmt_text_b }
 ,{ "and" }
 ,{ "len" , & fmt_text_b }
 ,{ "values." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "const" , & fmt_text_b }
 ,{ "version." }
 ,{ "All" }
 ,{ "other" }
 ,{ "methods" }
 ,{ "have" }
 ,{ "direct" }
 ,{ "equivalents" }
 ,{ "and" }
 ,{ "the" }
 ,{ "same" }
 ,{ "behavior" }
 ,{ "as" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PtrLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Cursor" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Methods" }
 ,{ "fit()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "first" }
 ,{ "checks" }
 ,{ "is" }
 ,{ "there" }
 ,{ "at" }
 ,{ "least" }
 ,{ "the" }
 ,{ "length" , & fmt_text_b }
 ,{ "elements." }
 ,{ "The" }
 ,{ "second" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check" }
 ,{ "if" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "off(set)" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "begin" }
 ,{ "and" }
 ,{ "length" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "selected." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "You" }
 ,{ "can" }
 ,{ "select" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "using" }
 ,{ "parts" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "can" }
 ,{ "pick" }
 ,{ "an" }
 ,{ "element" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range" }
 ,{ "based" }
 ,{ "on" }
 ,{ "its" }
 ,{ "index:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "last" }
 ,{ "method" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "support" }
 ,{ "range-based" , & fmt_text_b }
 ,{ "for" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "PtrStepLen" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_PtrStepLen" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_RadixHeap {

Text b0 = { {
 { "RadixHeap" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/RadixHeap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RadixHeap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "heart" }
 ,{ "of" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "heaps." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "complicated" }
 ,{ "class," }
 ,{ "built" }
 ,{ "from" }
 ,{ "several" }
 ,{ "parts." }
 ,{ "The" }
 ,{ "primary" }
 ,{ "part" }
 ,{ "is" }
 ,{ "the" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "Mem" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "allocation." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocated" }
 ,{ "large" }
 ,{ "memory" }
 ,{ "blocks," }
 ,{ "then" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "splits" }
 ,{ "them" }
 ,{ "into" }
 ,{ "smaller" }
 ,{ "parts" }
 ,{ "(aka" }
 ,{ "blocks)" }
 ,{ "and" }
 ,{ "manages" }
 ,{ "these" }
 ,{ "parts." }
 ,{ "Each" }
 ,{ "such" }
 ,{ "block" }
 ,{ "starts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "header" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "RadixHeapBlock" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "part" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "or" }
 ,{ "free." }
 ,{ "The" }
 ,{ "space" }
 ,{ "after" }
 ,{ "the" }
 ,{ "header" }
 ,{ "in" }
 ,{ "a" }
 ,{ "free" }
 ,{ "block" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "special" }
 ,{ "control" }
 ,{ "object," }
 ,{ "these" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "manage" }
 ,{ "the" }
 ,{ "free" }
 ,{ "blocks" }
 ,{ "set" }
 ,{ "by" }
 ,{ "the" }
 ,{ "RadixHeapStore" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "used" }
 ,{ "blocks" }
 ,{ "this" }
 ,{ "space" }
 ,{ "is" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory." }
 ,{ "There" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "no" , & fmt_text_Alert }
 ,{ "two" , & fmt_text_Alert }
 ,{ "free" , & fmt_text_Alert }
 ,{ "consecutive" , & fmt_text_Alert }
 ,{ "blocks" , & fmt_text_Alert }
 ,{ "." }
 ,{ "If" }
 ,{ "such" }
 ,{ "blocks" }
 ,{ "appear" }
 ,{ "during" }
 ,{ "the" }
 ,{ "free()" , & fmt_text_b }
 ,{ "operation," }
 ,{ "they" }
 ,{ "are" }
 ,{ "immediately" }
 ,{ "merged" }
 ,{ "into" }
 ,{ "the" }
 ,{ "single" }
 ,{ "free" }
 ,{ "block." }
 ,{ "When" }
 ,{ "a" }
 ,{ "block" }
 ,{ "is" }
 ,{ "allocated," }
 ,{ "it" }
 ,{ "is" }
 ,{ "stamped" }
 ,{ "by" }
 ,{ "the" }
 ,{ "\"magic" }
 ,{ "number\"." }
 ,{ "This" }
 ,{ "stamp" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "detect" }
 ,{ "incorrect" }
 ,{ "block" }
 ,{ "pointers." }
 ,{ "It" }
 ,{ "makes" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "protected" }
 ,{ "from" }
 ,{ "incorrect" }
 ,{ "operations" }
 ,{ "(not" }
 ,{ "100%)." }
} , & fmt_text , & align_text } ;

Bitmap b3 = { "RadixHeap.zipmap" } ;

Text b4 = { {
 { "RadixHeapStore" , & fmt_text_b }
 ,{ "manages" }
 ,{ "free" }
 ,{ "heap" }
 ,{ "blocks." }
 ,{ "The" }
 ,{ "efficiency" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "key" }
 ,{ "to" }
 ,{ "the" }
 ,{ "efficiency" }
 ,{ "of" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "operations." }
 ,{ "This" }
 ,{ "class" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "lists" }
 ,{ "to" }
 ,{ "store" }
 ,{ "small" }
 ,{ "blocks" }
 ,{ "and" }
 ,{ "the" }
 ,{ "radix" }
 ,{ "tree" }
 ,{ "to" }
 ,{ "store" }
 ,{ "larger" }
 ,{ "blocks." }
 ,{ "That" }
 ,{ "is" }
 ,{ "how" }
 ,{ "we" }
 ,{ "provides" }
 ,{ "constant" }
 ,{ "operation" }
 ,{ "time" }
 ,{ "limits." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Constructor" }
 ,{ "forwards" }
 ,{ "its" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Mem" , & fmt_text_b }
 ,{ "object" }
 ,{ "(" }
 ,{ "large_mem" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "isEmpty()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true," }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "from" }
 ,{ "the" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "memory." }
 ,{ "On" }
 ,{ "failure" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "null" }
 ,{ "Space" , & fmt_text_a }
 ,{ "object." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "resulting" }
 ,{ "Space" , & fmt_text_b }
 ,{ "object" }
 ,{ "contains" }
 ,{ "non-zero" }
 ,{ "memory" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "non-zero" }
 ,{ "memory" }
 ,{ "length," }
 ,{ "which" }
 ,{ "is" }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "require" }
 ,{ "a" }
 ,{ "valid" }
 ,{ "non-null" }
 ,{ "pointer" }
 ,{ "mem" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "free()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "this" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "extend()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "len" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "possible." }
 ,{ "If" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful," }
 ,{ "but" }
 ,{ "change" }
 ,{ "nothing." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "DeltaLen" , & fmt_text_a }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "ok" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "indicates" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation," }
 ,{ "and" }
 ,{ "the" }
 ,{ "field" }
 ,{ "delta" , & fmt_text_b }
 ,{ "," }
 ,{ "equals" }
 ,{ "the" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "new" }
 ,{ "block" }
 ,{ "and" }
 ,{ "the" }
 ,{ "old" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "shrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "down" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "successful" }
 ,{ "only" }
 ,{ "if" }
 ,{ "the" }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "DeltaLen" , & fmt_text_b }
 ,{ "object" }
 ,{ "has" }
 ,{ "the" }
 ,{ "field" }
 ,{ "ok" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "indicates" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation," }
 ,{ "and" }
 ,{ "the" }
 ,{ "field" }
 ,{ "delta" , & fmt_text_b }
 ,{ "," }
 ,{ "equals" }
 ,{ "the" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "old" }
 ,{ "block" }
 ,{ "and" }
 ,{ "the" }
 ,{ "new" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Link link_Primary = { & page , { 13 } } ;

Text b13 = { {
 { "Primary" }
 ,{ "memory" }
 ,{ "provider" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "A" }
 ,{ "primary" }
 ,{ "memory" }
 ,{ "provider" }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "\"prototype\":" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Mem" , & fmt_text_b }
 ,{ "constructor(s)" }
 ,{ "is" }
 ,{ "custom." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Instead" }
 ,{ "of" }
 ,{ "destructor," }
 ,{ "Mem" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "method" }
 ,{ "cleanup()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "clean" , & fmt_text_b }
 ,{ "is" }
 ,{ "true," }
 ,{ "if" }
 ,{ "all" }
 ,{ "memory" }
 ,{ "blocks" }
 ,{ "have" }
 ,{ "been" }
 ,{ "released," }
 ,{ "if" }
 ,{ "not" }
 ,{ "the" }
 ,{ "method" }
 ,{ "must" }
 ,{ "fail." }
 ,{ "If" }
 ,{ "the" }
 ,{ "method" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "it" }
 ,{ "is" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "is" }
 ,{ "because" }
 ,{ "some" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "still" }
 ,{ "in" }
 ,{ "use," }
 ,{ "but" }
 ,{ "we" }
 ,{ "are" }
 ,{ "going" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "heap." }
 ,{ "Continuing" }
 ,{ "execution" }
 ,{ "under" }
 ,{ "such" }
 ,{ "circumstances" }
 ,{ "likely" }
 ,{ "leads" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "destruction." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "max_store_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "block" }
 ,{ "length," }
 ,{ "which" }
 ,{ "is" }
 ,{ "allowed" }
 ,{ "to" }
 ,{ "be" }
 ,{ "split" }
 ,{ "and" }
 ,{ "stored." }
 ,{ "If" }
 ,{ "the" }
 ,{ "block" }
 ,{ "length" }
 ,{ "is" }
 ,{ "greater," }
 ,{ "then" }
 ,{ "such" }
 ,{ "blocks" }
 ,{ "are" }
 ,{ "allocated" }
 ,{ "and" }
 ,{ "released" }
 ,{ "as" }
 ,{ "whole." }
 ,{ "This" }
 ,{ "value" }
 ,{ "must" }
 ,{ "be" }
 ,{ "large" }
 ,{ "enough," }
 ,{ "for" }
 ,{ "example," }
 ,{ "in" }
 ,{ "PageMem" , & fmt_text_b }
 ,{ "it" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "16*1024*Sys::MemPageLen" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "The" }
 ,{ "method" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "large" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "blen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "total" }
 ,{ "block" }
 ,{ "length," }
 ,{ "it" }
 ,{ "is" }
 ,{ "an" }
 ,{ "aligned" }
 ,{ "value." }
 ,{ "The" }
 ,{ "method" }
 ,{ "must" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory" }
 ,{ "at" }
 ,{ "least" }
 ,{ "required" }
 ,{ "length," }
 ,{ "create" }
 ,{ "the" }
 ,{ "RadixHeapBlock" , & fmt_text_b }
 ,{ "object" }
 ,{ "at" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of" }
 ,{ "this" }
 ,{ "block," }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "this" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "allocated," }
 ,{ "the" }
 ,{ "null" }
 ,{ "pointer" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "blen" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "greater," }
 ,{ "than" }
 ,{ "the" }
 ,{ "max_store_len" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "block" }
 ,{ "length" }
 ,{ "also" }
 ,{ "must" }
 ,{ "not" }
 ,{ "exceed" }
 ,{ "this" }
 ,{ "value." }
 ,{ "RadixHeapBlock" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "initialized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "init(total_block_length)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "The" }
 ,{ "method" }
 ,{ "free()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "release" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "once" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "in" }
 ,{ "use." }
 ,{ "The" }
 ,{ "block" , & fmt_text_b }
 ,{ "is" }
 ,{ "always" }
 ,{ "non-null." }
 ,{ "If" }
 ,{ "you" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "by" }
 ,{ "the" }
 ,{ "RadixHeap" , & fmt_text_b }
 ,{ "and" }
 ,{ "then" }
 ,{ "release" }
 ,{ "it," }
 ,{ "then" }
 ,{ "the" }
 ,{ "large" }
 ,{ "blocks" }
 ,{ "will" }
 ,{ "be" }
 ,{ "freed" }
 ,{ "as" }
 ,{ "well." }
 ,{ "So," }
 ,{ "to" }
 ,{ "prevent" }
 ,{ "the" }
 ,{ "last" }
 ,{ "block" }
 ,{ "from" }
 ,{ "fluffing," }
 ,{ "Mem" , & fmt_text_b }
 ,{ "must" }
 ,{ "implement" }
 ,{ "a" }
 ,{ "caching" }
 ,{ "to" }
 ,{ "avoid" }
 ,{ "unnecessary" }
 ,{ "extra" }
 ,{ "expensive" }
 ,{ "allocation/deallocation." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "extend()" , & fmt_text_b }
 ,{ "extends" }
 ,{ "the" }
 ,{ "large" }
 ,{ "block." }
 ,{ "The" }
 ,{ "block" , & fmt_text_b }
 ,{ "is" }
 ,{ "always" }
 ,{ "non-null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "blen" , & fmt_text_b }
 ,{ "is" }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "block" }
 ,{ "length." }
 ,{ "The" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "on" }
 ,{ "success." }
 ,{ "It" }
 ,{ "must" }
 ,{ "reinitialize" }
 ,{ "the" }
 ,{ "block" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "shrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "large" }
 ,{ "block." }
 ,{ "The" }
 ,{ "block" , & fmt_text_b }
 ,{ "is" }
 ,{ "always" }
 ,{ "non-null" }
 ,{ "and" }
 ,{ "the" }
 ,{ "blen" , & fmt_text_b }
 ,{ "is" }
 ,{ "aligned" }
 ,{ "and" }
 ,{ "not" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "block" }
 ,{ "length." }
 ,{ "The" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "delta" }
 ,{ "length." }
 ,{ "It" }
 ,{ "must" }
 ,{ "reinitialize" }
 ,{ "the" }
 ,{ "block" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "This" }
 ,{ "POD" }
 ,{ "structure" }
 ,{ "has" }
 ,{ "number" }
 ,{ "of" }
 ,{ "members," }
 ,{ "but" }
 ,{ "you" }
 ,{ "need" }
 ,{ "only" }
 ,{ "one:" }
 ,{ "init()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "total" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "the" }
 ,{ "RadixHeapBlock" , & fmt_text_b }
 ,{ "is" }
 ,{ "created" }
 ,{ "at" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "of." }
} , & fmt_text , & align_text } ;

Page page = { "page_RadixHeap" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_img , outer_img , back_img }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Random {

Text b0 = { {
 { "Random" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Random.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Random.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/PlatformRandom.h" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Random" }
 ,{ "numbers" }
 ,{ "have" }
 ,{ "many" }
 ,{ "use" }
 ,{ "in" }
 ,{ "applications." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "quality" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generator" }
 ,{ "implementation," }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "Mersenne" , & fmt_text_a }
 ,{ "Twister" , & fmt_text_a }
 ,{ "algorithm" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "reasons" }
 ,{ "why" }
 ,{ "we" }
 ,{ "use" }
 ,{ "our" }
 ,{ "own" }
 ,{ "RNG." }
 ,{ "First," }
 ,{ "we" }
 ,{ "need" }
 ,{ "quality." }
 ,{ "Second," }
 ,{ "we" }
 ,{ "need" }
 ,{ "some" }
 ,{ "properties" }
 ,{ "from" }
 ,{ "RNG:" }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "lightweight" }
 ,{ "and" }
 ,{ "generate" }
 ,{ "unique" }
 ,{ "and" }
 ,{ "non-periodical" }
 ,{ "random" }
 ,{ "number" }
 ,{ "sequence." }
 ,{ "Finally," }
 ,{ "RNG" }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "object," }
 ,{ "not" }
 ,{ "a" }
 ,{ "global" }
 ,{ "function." }
 ,{ "Because" }
 ,{ "it" }
 ,{ "requires" }
 ,{ "some" }
 ,{ "state" }
 ,{ "to" }
 ,{ "work," }
 ,{ "using" }
 ,{ "a" }
 ,{ "global" }
 ,{ "function" }
 ,{ "introduces" }
 ,{ "a" }
 ,{ "global" }
 ,{ "variable," }
 ,{ "the" }
 ,{ "access" }
 ,{ "to" }
 ,{ "this" }
 ,{ "variable" }
 ,{ "must" }
 ,{ "be" }
 ,{ "synchronized" }
 ,{ "in" }
 ,{ "multithreaded" }
 ,{ "applications." }
 ,{ "That" }
 ,{ "implies" }
 ,{ "an" }
 ,{ "excessive" }
 ,{ "bottleneck" }
 ,{ "and" }
 ,{ "a" }
 ,{ "performance" }
 ,{ "penalty." }
 ,{ "That" }
 ,{ "is" }
 ,{ "why" }
 ,{ "we" }
 ,{ "abstain" }
 ,{ "from" }
 ,{ "the" }
 ,{ "using" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "C" }
 ,{ "function" }
 ,{ "rand()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "class" }
 ,{ "Random" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generator." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "MT19937" }
 ,{ "Mersenne" }
 ,{ "Twister" }
 ,{ "state" }
 ,{ "machine." }
 ,{ "To" }
 ,{ "make" }
 ,{ "the" }
 ,{ "random" }
 ,{ "sequence" }
 ,{ "unique" }
 ,{ "and" }
 ,{ "non-periodical," }
 ,{ "the" }
 ,{ "state" }
 ,{ "is" }
 ,{ "altered" }
 ,{ "by" }
 ,{ "the" }
 ,{ "clock" }
 ,{ "timer" }
 ,{ "at" }
 ,{ "the" }
 ,{ "beginning" }
 ,{ "and" }
 ,{ "periodically" }
 ,{ "during" }
 ,{ "the" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generation" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "There" }
 ,{ "is" }
 ,{ "not" }
 ,{ "destructor," }
 ,{ "only" }
 ,{ "default" }
 ,{ "constructor." }
 ,{ "Multiple" }
 ,{ "Random" , & fmt_text_b }
 ,{ "objects" }
 ,{ "generates" }
 ,{ "different" }
 ,{ "random" }
 ,{ "numbers." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "warp()" , & fmt_text_b }
 ,{ "alters" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "state." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "method" }
 ,{ "to" }
 ,{ "improve" }
 ,{ "the" }
 ,{ "random" }
 ,{ "seeding" }
 ,{ "using" }
 ,{ "some" }
 ,{ "entropy" }
 ,{ "source" }
 ,{ "to" }
 ,{ "produce" }
 ,{ "a" }
 ,{ "block" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "and" }
 ,{ "supply" }
 ,{ "it" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "next8()" , & fmt_text_b }
 ,{ "," }
 ,{ "next16()" , & fmt_text_b }
 ,{ "," }
 ,{ "next32()" , & fmt_text_b }
 ,{ "and" }
 ,{ "next64()" , & fmt_text_b }
 ,{ "return" }
 ,{ "a" }
 ,{ "random" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "size" }
 ,{ "defined" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "next_uint<UInt>()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "random" }
 ,{ "unsigned" }
 ,{ "integer," }
 ,{ "the" }
 ,{ "type" }
 ,{ "is" }
 ,{ "specified" }
 ,{ "as" }
 ,{ "a" }
 ,{ "template" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "fill()" , & fmt_text_b }
 ,{ "fills" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "of" }
 ,{ "unsigned" }
 ,{ "integers" }
 ,{ "by" }
 ,{ "random" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "select(uint32" , & fmt_text_b }
 ,{ "lim)" , & fmt_text_b }
 ,{ "generates" }
 ,{ "a" }
 ,{ "random" }
 ,{ "number" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,lim)" , & fmt_text_b }
 ,{ "," }
 ,{ "almost" }
 ,{ "uniformly" }
 ,{ "distributed." }
 ,{ "If" }
 ,{ "the" }
 ,{ "lim" , & fmt_text_b }
 ,{ "is" }
 ,{ "zero," }
 ,{ "then" }
 ,{ "the" }
 ,{ "value" }
 ,{ "range" }
 ,{ "is" }
 ,{ "all" }
 ,{ "uint32" , & fmt_text_b }
 ,{ "values." }
 ,{ "The" }
 ,{ "non-uniformness" }
 ,{ "is" }
 ,{ "negligible" }
 ,{ "for" }
 ,{ "casual" }
 ,{ "applications." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "select(uint32" , & fmt_text_b }
 ,{ "a,uint32" , & fmt_text_b }
 ,{ "b)" , & fmt_text_b }
 ,{ "generates" }
 ,{ "a" }
 ,{ "random" }
 ,{ "number" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[a,b]" , & fmt_text_b }
 ,{ "," }
 ,{ "almost" }
 ,{ "uniformly" }
 ,{ "distributed." }
 ,{ "a" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "than" }
 ,{ "b" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "select_uint(UInt" , & fmt_text_b }
 ,{ "lim)" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "select(uint32" , & fmt_text_b }
 ,{ "lim)" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "works" }
 ,{ "for" }
 ,{ "the" }
 ,{ "any" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type," }
 ,{ "specified" }
 ,{ "as" }
 ,{ "the" }
 ,{ "template" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "select_uint(UInt" , & fmt_text_b }
 ,{ "a,UInt" , & fmt_text_b }
 ,{ "b)" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "select(uint32" , & fmt_text_b }
 ,{ "a,uint32" , & fmt_text_b }
 ,{ "b)" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "works" }
 ,{ "for" }
 ,{ "the" }
 ,{ "any" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type," }
 ,{ "specified" }
 ,{ "as" }
 ,{ "the" }
 ,{ "template" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "RandomType" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "RandomType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "concept" }
 ,{ "for" }
 ,{ "Random" , & fmt_text_b }
 ,{ "kind" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "RandomBase" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "Random" , & fmt_text_b }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "with" }
 ,{ "help" }
 ,{ "of" }
 ,{ "the" }
 ,{ "RandomBase" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "to" }
 ,{ "build" }
 ,{ "you" }
 ,{ "custom" }
 ,{ "random" }
 ,{ "class" }
 ,{ "using" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "only" }
 ,{ "four" }
 ,{ "base" }
 ,{ "methods" }
 ,{ "and" }
 ,{ "warp()" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "derive" }
 ,{ "them" }
 ,{ "from" }
 ,{ "the" }
 ,{ "one" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Mersenne" }
 ,{ "Twister" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "Files" }
 ,{ "CCore/inc/MersenneTwister.h" , & fmt_text_Files_b }
 ,{ "CCore/src/MersenneTwister.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b23 = { {
 { "Mersenne" }
 ,{ "Twister" }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "algorithm," }
 ,{ "MT19937" }
 ,{ "â€”" }
 ,{ "it's" }
 ,{ "particular" }
 ,{ "version." }
 ,{ "Implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Mersenne" }
 ,{ "Twister" }
 ,{ "is" }
 ,{ "enclose" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "MersenneTwister" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "The" }
 ,{ "structure" }
 ,{ "MT19937" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "MT19937" }
 ,{ "version" }
 ,{ "parameters." }
 ,{ "It" }
 ,{ "includes" }
 ,{ "initial" }
 ,{ "random" }
 ,{ "state" }
 ,{ "bits" }
 ,{ "from" }
 ,{ "HotBits" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "The" }
 ,{ "class" }
 ,{ "Gen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "generator" }
 ,{ "itself." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "Class" , & fmt_text_b }
 ,{ "," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "parameter" }
 ,{ "structure." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "main" }
 ,{ "public" }
 ,{ "method" }
 ,{ "is" }
 ,{ "the" }
 ,{ "next()" , & fmt_text_b }
 ,{ ":" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "a" }
 ,{ "next" }
 ,{ "random" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "UnitType" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "before" }
 ,{ "using" }
 ,{ "this" }
 ,{ "class," }
 ,{ "its" }
 ,{ "internal" }
 ,{ "state" }
 ,{ "must" }
 ,{ "be" }
 ,{ "initialized." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "First," }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "state" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "initialized." }
 ,{ "You" }
 ,{ "can" }
 ,{ "do" }
 ,{ "it" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class," }
 ,{ "getState()" , & fmt_text_b }
 ,{ "gives" }
 ,{ "access" }
 ,{ "to" }
 ,{ "this" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "method" }
 ,{ "hotbits()" , & fmt_text_b }
 ,{ "fills" }
 ,{ "this" }
 ,{ "buffer" }
 ,{ "with" }
 ,{ "some" }
 ,{ "predefined" }
 ,{ "random" }
 ,{ "bits." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Second," }
 ,{ "use" }
 ,{ "messup()" , & fmt_text_b }
 ,{ "method" }
 ,{ "to" }
 ,{ "\"mess-up\"" }
 ,{ "the" }
 ,{ "state" }
 ,{ "and" }
 ,{ "add" }
 ,{ "to" }
 ,{ "it" }
 ,{ "some" }
 ,{ "clock" }
 ,{ "input." }
 ,{ "It" }
 ,{ "makes" }
 ,{ "the" }
 ,{ "state" }
 ,{ "unprobably" }
 ,{ "repeatable." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "pure_init()" , & fmt_text_b }
 ,{ "to" }
 ,{ "skip" }
 ,{ "this" }
 ,{ "mess" }
 ,{ "and" }
 ,{ "start" }
 ,{ "the" }
 ,{ "generator" }
 ,{ "as" }
 ,{ "the" }
 ,{ "pure" }
 ,{ "Mersenne" }
 ,{ "Twister" }
 ,{ "generator." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "to" }
 ,{ "continue" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "pure_next()" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generation." }
 ,{ "These" }
 ,{ "\"pure\"" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "included" }
 ,{ "for" }
 ,{ "the" }
 ,{ "testing" }
 ,{ "purpose" }
 ,{ "mostly." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Finally," }
 ,{ "the" }
 ,{ "public" }
 ,{ "method" }
 ,{ "warp()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "update" }
 ,{ "the" }
 ,{ "state" }
 ,{ "buffer." }
 ,{ "The" }
 ,{ "provided" }
 ,{ "value" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "XOR" }
 ,{ "the" }
 ,{ "state" }
 ,{ "buffer." }
} , & fmt_text , & align_text } ;

Link link_PlatformRandom = { & page , { 30 } } ;

Text b30 = { {
 { "PlatformRandom" }
} , & fmt_h2 , & align_h2 } ;

Text b31 = { {
 { "The" }
 ,{ "header" }
 ,{ "PlatformRandom.h" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "stub" }
 ,{ "header." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "PlatformRandom" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "header" }
 ,{ "defines" }
 ,{ "this" }
 ,{ "type" }
 ,{ "as" }
 ,{ "Random" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "target" }
 ,{ "may" }
 ,{ "define" }
 ,{ "its" }
 ,{ "own" }
 ,{ "header" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "same" }
 ,{ "name" }
 ,{ "and" }
 ,{ "override" }
 ,{ "this" }
 ,{ "stub." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "the" }
 ,{ "defined" }
 ,{ "type" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "same" }
 ,{ "functionality" }
 ,{ "as" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Random" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "target" }
 ,{ "WIN64" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "type" }
 ,{ "PlatformRandom" , & fmt_text_b }
 ,{ "as" }
 ,{ "IntelRandom" , & fmt_text_b }
 ,{ "to" }
 ,{ "utilize" }
 ,{ "the" }
 ,{ "Intel" }
 ,{ "hardware" }
 ,{ "RNG." }
} , & fmt_text , & align_text } ;

Page page = { "page_Random" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_RangeDel {

Text b0 = { {
 { "RangeDel" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/RangeDel.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RangeDel.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "generic" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "a" }
 ,{ "deletion" }
 ,{ "of" }
 ,{ "object" }
 ,{ "from" }
 ,{ "the" }
 ,{ "continuous" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "One-element" }
 ,{ "deletion" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "These" }
 ,{ "functions" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
 ,{ "Range" }
 ,{ "elements" }
 ,{ "must" }
 ,{ "be" }
 ,{ "nothrow-copyable." }
 ,{ "If" }
 ,{ "the" }
 ,{ "index" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "range," }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "elements" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "down" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "hole," }
 ,{ "true" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "These" }
 ,{ "functions" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
 ,{ "Range" }
 ,{ "elements" }
 ,{ "must" }
 ,{ "be" }
 ,{ "swappable" , & fmt_text_a }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "index" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "range," }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise" }
 ,{ "elements" }
 ,{ "are" }
 ,{ "swapped" }
 ,{ "down" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "hole," }
 ,{ "true" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "These" }
 ,{ "four" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "guarded" }
 ,{ "variants," }
 ,{ "they" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "the" }
 ,{ "index" }
 ,{ "is" }
 ,{ "out" }
 ,{ "of" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Range" }
 ,{ "deletion" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "These" }
 ,{ "functions" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "given" }
 ,{ "subrange" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range." }
 ,{ "Subrange" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "and" }
 ,{ "the" }
 ,{ "element" }
 ,{ "count." }
 ,{ "If" }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "fit" }
 ,{ "the" }
 ,{ "range," }
 ,{ "it's" }
 ,{ "truncated." }
 ,{ "The" }
 ,{ "count" }
 ,{ "of" }
 ,{ "deleted" }
 ,{ "elements" }
 ,{ "is" }
 ,{ "retuned." }
 ,{ "Elements" }
 ,{ "are" }
 ,{ "copied" }
 ,{ "down" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "hole." }
 ,{ "Range" }
 ,{ "elements" }
 ,{ "must" }
 ,{ "be" }
 ,{ "nothrow-copyable." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "These" }
 ,{ "functions" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "given" }
 ,{ "subrange" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range." }
 ,{ "Subrange" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "element" }
 ,{ "and" }
 ,{ "the" }
 ,{ "element" }
 ,{ "count." }
 ,{ "If" }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "fit" }
 ,{ "the" }
 ,{ "range," }
 ,{ "it's" }
 ,{ "truncated." }
 ,{ "The" }
 ,{ "count" }
 ,{ "of" }
 ,{ "deleted" }
 ,{ "elements" }
 ,{ "is" }
 ,{ "retuned." }
 ,{ "Elements" }
 ,{ "are" }
 ,{ "swapped" }
 ,{ "down" }
 ,{ "to" }
 ,{ "fill" }
 ,{ "the" }
 ,{ "hole." }
 ,{ "Range" }
 ,{ "elements" }
 ,{ "must" }
 ,{ "be" }
 ,{ "swappable" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "These" }
 ,{ "four" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "guarded" }
 ,{ "variants," }
 ,{ "they" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "if" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "does" }
 ,{ "not" }
 ,{ "fit" }
 ,{ "the" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "fit" }
 ,{ "the" }
 ,{ "subrange." }
 ,{ "It" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "if" }
 ,{ "count" , & fmt_text_b }
 ,{ "is" }
 ,{ "zero." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "following" }
 ,{ "condition" }
 ,{ "must" }
 ,{ "be" }
 ,{ "satisfied:" }
 ,{ "ind" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "count" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "not," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "If" }
 ,{ "yes," }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_RangeDel" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_RawFileToRead {

Text b0 = { {
 { "RawFileToRead" }
 ,{ "and" }
 ,{ "AltFileToRead" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/RawFileToRead.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RawFileToRead.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "RawFileToRead" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "The" }
 ,{ "RawFileToRead" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "read" }
 ,{ "data" }
 ,{ "from" }
 ,{ "a" }
 ,{ "file." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "wrapped" }
 ,{ "over" }
 ,{ "the" }
 ,{ "Sys::File" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "FileToMem" , & fmt_text_a }
 ,{ "constructor." }
 ,{ "See" }
 ,{ "also" }
 ,{ "PrintFile" , & fmt_text_a }
 ,{ "about" }
 ,{ "file" }
 ,{ "writing" }
 ,{ "and" }
 ,{ "printing" }
 ,{ "and" }
 ,{ "about" }
 ,{ "Sys::File" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Constructor" }
 ,{ "opens" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name" }
 ,{ "and" }
 ,{ "open" }
 ,{ "flags." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Destructor" }
 ,{ "closes" }
 ,{ "the" }
 ,{ "file." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Methods" }
 ,{ "throw" }
 ,{ "exceptions" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "file" }
 ,{ "length." }
 ,{ "The" }
 ,{ "open" }
 ,{ "flag" }
 ,{ "Open_Pos" , & fmt_text_b }
 ,{ "is" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "read()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "file" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes" }
 ,{ "read" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "read_all()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "the" }
 ,{ "file" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
 ,{ "The" }
 ,{ "whole" }
 ,{ "buffer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "read" }
 ,{ "for" }
 ,{ "success." }
} , & fmt_text , & align_text } ;

Link link_AltFileToRead = { & page , { 10 } } ;

Text b10 = { {
 { "AltFileToRead" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "AltFileToRead" , & fmt_text_b }
 ,{ "is" }
 ,{ "simalar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "RawFileToRead" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "alternative" }
 ,{ "read" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "This" }
 ,{ "object" }
 ,{ "does" }
 ,{ "not" }
 ,{ "have" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "file" }
 ,{ "read" }
 ,{ "position," }
 ,{ "the" }
 ,{ "read" }
 ,{ "position" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "as" }
 ,{ "the" }
 ,{ "operaion" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Page page = { "page_RawFileToRead" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_RefObjectBase {

Text b0 = { {
 { "RefObjectBase" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/RefObjectBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RefObjectBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "RefObjectBase" , & fmt_text_b }
 ,{ "appends" }
 ,{ "the" }
 ,{ "atomic" }
 ,{ "reference" }
 ,{ "counter" }
 ,{ "and" }
 ,{ "reference" }
 ,{ "counting" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "the" }
 ,{ "family" }
 ,{ "of" }
 ,{ "types." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "with" }
 ,{ "the" }
 ,{ "class" }
 ,{ "RefPtr" , & fmt_text_a }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "reference-counting" }
 ,{ "smart" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "RefObjectHook" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "such" }
 ,{ "smart" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Base" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "base," }
 ,{ "built" }
 ,{ "using" }
 ,{ "the" }
 ,{ "RefObjectBase" , & fmt_text_b }
 ,{ "template." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "F" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "interface" }
 ,{ "type," }
 ,{ "usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "template" }
 ,{ "parameters" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Base" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "NullObjectPtr()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "function," }
 ,{ "used" }
 ,{ "to" }
 ,{ "obtain" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "static" }
 ,{ "\"null\"" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Page page = { "page_RefObjectBase" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_RefPtr {

Text b0 = { {
 { "RefPtr" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/RefPtr.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RefPtr.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "RefPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "intrusive" }
 ,{ "smart-pointer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "counting." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "RefPtr" , & fmt_text_b }
 ,{ "has" }
 ,{ "only" }
 ,{ "one" }
 ,{ "data" }
 ,{ "member" }
 ,{ "â€”" }
 ,{ "non-null" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "comes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "argument." }
 ,{ "RefPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "copyable," }
 ,{ "multiple" }
 ,{ "RefPtr" , & fmt_text_b }
 ,{ "s" }
 ,{ "may" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "same" }
 ,{ "object." }
 ,{ "To" }
 ,{ "determine" }
 ,{ "the" }
 ,{ "moment" }
 ,{ "the" }
 ,{ "object" }
 ,{ "should" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "counting" }
 ,{ "is" }
 ,{ "used." }
 ,{ "It" }
 ,{ "assumes," }
 ,{ "that" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "has" }
 ,{ "an" }
 ,{ "embedded" }
 ,{ "reference" }
 ,{ "counter" }
 ,{ "of" }
 ,{ "some" }
 ,{ "nature" }
 ,{ "and" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "manipulate" }
 ,{ "the" }
 ,{ "one." }
 ,{ "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "Algo" , & fmt_text_b }
 ,{ "allows" }
 ,{ "customization" }
 ,{ "of" }
 ,{ "these" }
 ,{ "methods." }
 ,{ "By" }
 ,{ "default," }
 ,{ "to" }
 ,{ "increment" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "counter" }
 ,{ "the" }
 ,{ "method" }
 ,{ "incRef()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called," }
 ,{ "to" }
 ,{ "decrement" }
 ,{ "â€”" }
 ,{ "decRef()" , & fmt_text_b }
 ,{ "and" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "method" }
 ,{ "destroy()" , & fmt_text_b }
 ,{ "." }
 ,{ "decRef()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "counter" }
 ,{ "became" }
 ,{ "zero," }
 ,{ "i.e." }
 ,{ "it's" }
 ,{ "time" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "the" }
 ,{ "object." }
 ,{ "To" }
 ,{ "create" }
 ,{ "RefPtr" , & fmt_text_b }
 ,{ "a" }
 ,{ "non-null" }
 ,{ "pointer" }
 ,{ "with" }
 ,{ "reference" }
 ,{ "counter" }
 ,{ "1" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "RefPtr" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "reduced" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "," }
 ,{ "because" }
 ,{ "it" }
 ,{ "always" }
 ,{ "points" }
 ,{ "to" }
 ,{ "an" }
 ,{ "object." }
 ,{ "It" }
 ,{ "also" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Two" }
 ,{ "additional" }
 ,{ "\"unsafe\"" }
 ,{ "methods" }
 ,{ "set()" , & fmt_text_b }
 ,{ "and" }
 ,{ "update()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "manipulate" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "pointer." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "set()" , & fmt_text_b }
 ,{ "setup" }
 ,{ "a" }
 ,{ "new" }
 ,{ "pointer" }
 ,{ "and" }
 ,{ "\"decrement\"" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "one." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "plus" }
 ,{ "the" }
 ,{ "following" }
 ,{ "constructor" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "update()" , & fmt_text_b }
 ,{ "updates" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor." }
 ,{ "The" }
 ,{ "correctness" }
 ,{ "of" }
 ,{ "this" }
 ,{ "operation" }
 ,{ "must" }
 ,{ "be" }
 ,{ "ensured" }
 ,{ "by" }
 ,{ "the" }
 ,{ "functor." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "RefPtr" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "\"as" }
 ,{ "is\"." }
 ,{ "Normally" }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "outer" }
 ,{ "class." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "RefArray" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_RefPtr" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Regen {

Text b0 = { {
 { "Regen" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Regen" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "code" }
 ,{ "generator." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "register" }
 ,{ "set" }
 ,{ "description" }
 ,{ "and" }
 ,{ "generates" }
 ,{ "a" }
 ,{ "C++" }
 ,{ "code" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "register" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sample" }
 ,{ "description:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "It" }
 ,{ "defines" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "registers" }
 ,{ "and" }
 ,{ "a" }
 ,{ "register" }
 ,{ "bar." }
 ,{ "Register" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "as:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "keyword" }
 ,{ "reg" , & fmt_text_b }
 ,{ "is" }
 ,{ "followed" }
 ,{ "by" }
 ,{ "a" }
 ,{ "register" }
 ,{ "name" }
 ,{ "and" }
 ,{ "a" }
 ,{ "register" }
 ,{ "bit" }
 ,{ "length." }
 ,{ "Bit" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "8," }
 ,{ "16" }
 ,{ "or" }
 ,{ "32." }
 ,{ "Then" }
 ,{ "bits" }
 ,{ "description" }
 ,{ "follows" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "figure" }
 ,{ "brackets." }
 ,{ "A" }
 ,{ "bits" }
 ,{ "description" }
 ,{ "defines" }
 ,{ "single" }
 ,{ "bits" }
 ,{ "and" }
 ,{ "bit" }
 ,{ "fields." }
 ,{ "A" }
 ,{ "single" }
 ,{ "bit" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "a" }
 ,{ "bit" }
 ,{ "number" }
 ,{ "(from" }
 ,{ "LSB" }
 ,{ "to" }
 ,{ "MSB)." }
 ,{ "A" }
 ,{ "bit" }
 ,{ "number" }
 ,{ "may" }
 ,{ "be" }
 ,{ "given" }
 ,{ "as" }
 ,{ "the" }
 ,{ "dot." }
 ,{ "The" }
 ,{ "dot" }
 ,{ "denotes" }
 ,{ "the" }
 ,{ "current" }
 ,{ "bit." }
 ,{ "A" }
 ,{ "bit" }
 ,{ "field" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given" }
 ,{ "in" }
 ,{ "the" }
 ,{ "following" }
 ,{ "forms:" }
 ,{ "as" }
 ,{ "first-last" , & fmt_text_b }
 ,{ "bits," }
 ,{ "as" }
 ,{ "bit+length" , & fmt_text_b }
 ,{ "or" }
 ,{ "as" }
 ,{ ".+length" , & fmt_text_b }
 ,{ "bits." }
 ,{ "In" }
 ,{ "the" }
 ,{ "last" }
 ,{ "two" }
 ,{ "forms" }
 ,{ "length" }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "field" }
 ,{ "in" }
 ,{ "bits." }
 ,{ "The" }
 ,{ "asterisk" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "name" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "insert" }
 ,{ "unused" }
 ,{ "bits." }
 ,{ "A" }
 ,{ "bit" }
 ,{ "field" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "named" }
 ,{ "value" }
 ,{ "list." }
 ,{ "Values" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given" }
 ,{ "in" }
 ,{ "the" }
 ,{ "decimal," }
 ,{ "hexadecimal" }
 ,{ "(with" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "h" , & fmt_text_b }
 ,{ ")" }
 ,{ "or" }
 ,{ "binary" }
 ,{ "(with" }
 ,{ "the" }
 ,{ "suffix" }
 ,{ "b" , & fmt_text_b }
 ,{ ")" }
 ,{ "forms." }
 ,{ "If" }
 ,{ "the" }
 ,{ "bits" }
 ,{ "description" }
 ,{ "is" }
 ,{ "empty," }
 ,{ "the" }
 ,{ "register" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "untyped." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "A" }
 ,{ "register" }
 ,{ "bar" }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "registers" }
 ,{ "as" }
 ,{ "a" }
 ,{ "unit." }
 ,{ "Hardware" }
 ,{ "units" }
 ,{ "are" }
 ,{ "usually" }
 ,{ "controlled" }
 ,{ "using" }
 ,{ "register" }
 ,{ "bars." }
 ,{ "Methods" }
 ,{ "of" }
 ,{ "reading" }
 ,{ "and" }
 ,{ "writing" }
 ,{ "registers" }
 ,{ "may" }
 ,{ "vary." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "memory-mapped" }
 ,{ "registers," }
 ,{ "or" }
 ,{ "the" }
 ,{ "register" }
 ,{ "access" }
 ,{ "may" }
 ,{ "involve" }
 ,{ "some" }
 ,{ "function" }
 ,{ "calls" }
 ,{ "and," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "can" }
 ,{ "be" }
 ,{ "quite" }
 ,{ "expensive." }
 ,{ "Regen" , & fmt_text_b }
 ,{ "generates" }
 ,{ "a" }
 ,{ "helper" }
 ,{ "class" }
 ,{ "to" }
 ,{ "abstract" }
 ,{ "from" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "register" }
 ,{ "access" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Register" }
 ,{ "bar" }
 ,{ "has" }
 ,{ "a" }
 ,{ "register" }
 ,{ "refer" }
 ,{ "mode:" }
 ,{ "address" }
 ,{ "or" }
 ,{ "index." }
 ,{ "Dot" }
 ,{ "denotes" }
 ,{ "the" }
 ,{ "current" }
 ,{ "address" }
 ,{ "or" }
 ,{ "index." }
 ,{ "Bar" }
 ,{ "description" }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "registers" }
 ,{ "or" }
 ,{ "register" }
 ,{ "blocks" }
 ,{ "with" }
 ,{ "its" }
 ,{ "properties." }
 ,{ "The" }
 ,{ "first" }
 ,{ "property" }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "(or" }
 ,{ "index)." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given" }
 ,{ "explicitly" }
 ,{ "or" }
 ,{ "implicitly." }
 ,{ "If" }
 ,{ "the" }
 ,{ "address" }
 ,{ "mode" }
 ,{ "is" }
 ,{ "used," }
 ,{ "then" }
 ,{ "the" }
 ,{ "next" }
 ,{ "address" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "using" }
 ,{ "the" }
 ,{ "register" }
 ,{ "byte" }
 ,{ "length." }
 ,{ "The" }
 ,{ "next" }
 ,{ "attribute" }
 ,{ "is" }
 ,{ "the" }
 ,{ "access" }
 ,{ "mode." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "RO" , & fmt_text_b }
 ,{ "," }
 ,{ "WO" , & fmt_text_b }
 ,{ "," }
 ,{ "RW" , & fmt_text_b }
 ,{ "or" }
 ,{ "hidden" , & fmt_text_b }
 ,{ "," }
 ,{ "RW" , & fmt_text_b }
 ,{ "by" }
 ,{ "default." }
 ,{ "Finally," }
 ,{ "a" }
 ,{ "register" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given" }
 ,{ "using" }
 ,{ "the" }
 ,{ "directive" }
 ,{ "as" , & fmt_text_b }
 ,{ "." }
 ,{ "Multiple" }
 ,{ "registers" }
 ,{ "can" }
 ,{ "share" }
 ,{ "the" }
 ,{ "same" }
 ,{ "register" }
 ,{ "structure." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Regen" , & fmt_text_b }
 ,{ "generates" }
 ,{ "the" }
 ,{ "header" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "For" }
 ,{ "the" }
 ,{ "register" }
 ,{ "CTRL" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "generated:" }
 ,{ "enum" , & fmt_text_b }
 ,{ "Bits_CTRL" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "register" }
 ,{ "bits," }
 ,{ "enum" , & fmt_text_b }
 ,{ "Field_CTRL_MODE" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "values" }
 ,{ "for" }
 ,{ "the" }
 ,{ "field" }
 ,{ "MODE" , & fmt_text_b }
 ,{ "." }
 ,{ "Finally," }
 ,{ "the" }
 ,{ "type" }
 ,{ "Type_CTRL" , & fmt_text_b }
 ,{ "to" }
 ,{ "represent" }
 ,{ "and" }
 ,{ "manipulate" }
 ,{ "the" }
 ,{ "register" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "type" }
 ,{ "is" }
 ,{ "a" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "group" }
 ,{ "of" }
 ,{ "set" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "set" }
 ,{ "the" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "register" }
 ,{ "bar" }
 ,{ "or" }
 ,{ "to" }
 ,{ "some" }
 ,{ "\"setter\"." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "group" }
 ,{ "of" }
 ,{ "bit-manipulation" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "change" }
 ,{ "bits" }
 ,{ "or" }
 ,{ "bit" }
 ,{ "testing." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Another" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "get" }
 ,{ "or" }
 ,{ "set" }
 ,{ "register" }
 ,{ "bit" }
 ,{ "fields." }
 ,{ "Bit" }
 ,{ "and" }
 ,{ "field" }
 ,{ "change" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "self-modifying" }
 ,{ "and" }
 ,{ "return" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object," }
 ,{ "so" }
 ,{ "they" }
 ,{ "can" }
 ,{ "be" }
 ,{ "chained." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Finally," }
 ,{ "the" }
 ,{ "print" }
 ,{ "method" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "to" }
 ,{ "print" }
 ,{ "the" }
 ,{ "value" }
 ,{ "in" }
 ,{ "a" }
 ,{ "verbose" }
 ,{ "manner." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Untyped" }
 ,{ "register" }
 ,{ "generates" }
 ,{ "only" }
 ,{ "a" }
 ,{ "typedef." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Register" }
 ,{ "bar" }
 ,{ "generates" }
 ,{ "a" }
 ,{ "register" }
 ,{ "bar" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "inner" }
 ,{ "object" }
 ,{ "rw" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "mean" }
 ,{ "to" }
 ,{ "read" }
 ,{ "or" }
 ,{ "write" }
 ,{ "a" }
 ,{ "register." }
 ,{ "It" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Methods" }
 ,{ "get()" , & fmt_text_b }
 ,{ "and" }
 ,{ "set()" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "with" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "uint16" , & fmt_text_b }
 ,{ "," }
 ,{ "uint32" , & fmt_text_b }
 ,{ "template" }
 ,{ "parameters." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Setter" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "set" }
 ,{ "a" }
 ,{ "register" }
 ,{ "value." }
 ,{ "They" }
 ,{ "bind" }
 ,{ "the" }
 ,{ "read-writer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "register" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "get_CTRL()" , & fmt_text_b }
 ,{ "reads" }
 ,{ "a" }
 ,{ "register" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "set_CTRL()" , & fmt_text_b }
 ,{ "writes" }
 ,{ "a" }
 ,{ "register" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "to_CTRL()" , & fmt_text_b }
 ,{ "binds" }
 ,{ "the" }
 ,{ "read-writer" }
 ,{ "and" }
 ,{ "the" }
 ,{ "register" }
 ,{ "address" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "register" }
 ,{ "setter." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Static" }
 ,{ "methods" }
 ,{ "null_CTRL()" , & fmt_text_b }
 ,{ "and" }
 ,{ "ones_CTRL()" , & fmt_text_b }
 ,{ "create" }
 ,{ "a" }
 ,{ "register" }
 ,{ "value" }
 ,{ "with" }
 ,{ "all" }
 ,{ "bits" }
 ,{ "equals" }
 ,{ "null" }
 ,{ "or" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Block" }
 ,{ "register" }
 ,{ "methods" }
 ,{ "have" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "argument" }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "register" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Read-only" }
 ,{ "registers" }
 ,{ "have" }
 ,{ "no" }
 ,{ "set" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Write-only" }
 ,{ "registers" }
 ,{ "have" }
 ,{ "no" }
 ,{ "get" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Hidden" }
 ,{ "registers" }
 ,{ "have" }
 ,{ "no" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Page page = { "page_Regen" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Replace {

Text b0 = { {
 { "Replace" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Replace.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Replace.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Replace...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions," }
 ,{ "they" }
 ,{ "set" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "to" }
 ,{ "a" }
 ,{ "new" }
 ,{ "value" }
 ,{ "and" }
 ,{ "return" }
 ,{ "the" }
 ,{ "old" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "basic" }
 ,{ "of" }
 ,{ "them" }
 ,{ "is" }
 ,{ "the" }
 ,{ "simple" }
 ,{ "Replace()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "is" }
 ,{ "also" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "variants:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "final" }
 ,{ "one" }
 ,{ "is" }
 ,{ "generic," }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "it" }
 ,{ "with" }
 ,{ "lambdas:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "T" , & fmt_text_b }
 ,{ "(T)" , & fmt_text_b }
 ,{ "function," }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "new" }
 ,{ "value" }
 ,{ "from" }
 ,{ "the" }
 ,{ "old." }
} , & fmt_text , & align_text } ;

Page page = { "page_Replace" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ResSem {

Text b0 = { {
 { "ResSem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/ResSem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/ResSem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ResSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "a" }
 ,{ "resource" }
 ,{ "usage." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "hybrid" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "and" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "has" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "counter," }
 ,{ "which" }
 ,{ "remains" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,max_count]" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "max_count" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "ResSem" , & fmt_text_b }
 ,{ "counter" }
 ,{ "limit." }
 ,{ "Initially" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "equals" }
 ,{ "max_count" , & fmt_text_b }
 ,{ "." }
 ,{ "Like" }
 ,{ "a" }
 ,{ "usual" }
 ,{ "semaphore," }
 ,{ "ResSem" , & fmt_text_b }
 ,{ "has" }
 ,{ "take()" , & fmt_text_b }
 ,{ "and" }
 ,{ "give()" , & fmt_text_b }
 ,{ "operations," }
 ,{ "but" }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "\"gateway\"" }
 ,{ "operation" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "blocks" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "until" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "gets" }
 ,{ "back" }
 ,{ "to" }
 ,{ "its" }
 ,{ "maximum" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Return" }
 ,{ "back" }
 ,{ "to" }
 ,{ "the" }
 ,{ "basket" }
 ,{ "with" }
 ,{ "apples." }
 ,{ "Initially" }
 ,{ "basket" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "apples." }
 ,{ "When" }
 ,{ "somebody" }
 ,{ "takes" }
 ,{ "an" }
 ,{ "apple," }
 ,{ "it" }
 ,{ "must" }
 ,{ "give" }
 ,{ "it" }
 ,{ "back" }
 ,{ "after" }
 ,{ "time." }
 ,{ "I.e." }
 ,{ "an" }
 ,{ "apple" }
 ,{ "is" }
 ,{ "not" }
 ,{ "consumed," }
 ,{ "but" }
 ,{ "is" }
 ,{ "borrowed." }
 ,{ "Basket" }
 ,{ "host" }
 ,{ "is" }
 ,{ "waiting" }
 ,{ "until" }
 ,{ "all" }
 ,{ "apples" }
 ,{ "are" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "max_count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "ResSem" , & fmt_text_b }
 ,{ "counter." }
 ,{ "It" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "zero." }
 ,{ "Initially" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "at" }
 ,{ "that" }
 ,{ "maximum." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "give()" , & fmt_text_b }
 ,{ "increments" }
 ,{ "the" }
 ,{ "counter." }
 ,{ "If" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "at" }
 ,{ "maximum," }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "This" }
 ,{ "method" }
 ,{ "may" }
 ,{ "release" }
 ,{ "threads," }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "also" }
 ,{ "may" }
 ,{ "release" }
 ,{ "a" }
 ,{ "thread," }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "take()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "two" }
 ,{ "situations" }
 ,{ "cannot" }
 ,{ "happens" }
 ,{ "simultaneously." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "try_take()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "decrement" }
 ,{ "the" }
 ,{ "counter." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "take()" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "counter." }
 ,{ "It" }
 ,{ "may" }
 ,{ "block" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "indefinitely," }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "becomes" }
 ,{ "possible." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "take(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "take(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "take()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "try_wait()" , & fmt_text_b }
 ,{ "checks," }
 ,{ "if" }
 ,{ "the" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "at" }
 ,{ "maximum." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "wait()" , & fmt_text_b }
 ,{ "blocks" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "indefinitely" }
 ,{ "until" }
 ,{ "the" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "gets" }
 ,{ "at" }
 ,{ "maximum." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "wait(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "wait(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "HCore" }
 ,{ "ResSem" }
} , & fmt_h4 , & align_h4 } ;

Text b13 = { {
 { "HCore" , & fmt_text_b }
 ,{ "ResSem" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "common" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "XCore" }
 ,{ "ResSem" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "XCore" , & fmt_text_b }
 ,{ "ResSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "has" }
 ,{ "give()" , & fmt_text_b }
 ,{ "method" }
 ,{ "variants" }
 ,{ "for" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts." }
} , & fmt_text , & align_text } ;

Page page = { "page_ResSem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Rot {

Text b0 = { {
 { "Rot" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/Rot.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/Rot.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "rotation" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "RorN()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "right" }
 ,{ "rotation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "N" , & fmt_text_b }
 ,{ "-bit" }
 ,{ "argument" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second" }
 ,{ "argument." }
 ,{ "This" }
 ,{ "value" }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "less" }
 ,{ "than" }
 ,{ "N" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "RolN()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "left" }
 ,{ "rotation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "N" , & fmt_text_b }
 ,{ "-bit" }
 ,{ "argument" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits." }
 ,{ "The" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second" }
 ,{ "argument." }
 ,{ "This" }
 ,{ "value" }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "less" }
 ,{ "than" }
 ,{ "N" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Ror_gen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "right" }
 ,{ "rotation" }
 ,{ "function." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "value." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "to" }
 ,{ "rotate" }
 ,{ "by." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "less" }
 ,{ "than" }
 ,{ "UIntBits" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Rol_gen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "left" }
 ,{ "rotation" }
 ,{ "function." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "value." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "to" }
 ,{ "rotate" }
 ,{ "by." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "less" }
 ,{ "than" }
 ,{ "UIntBits" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Rot" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SafeBuf {

Text b0 = { {
 { "SafeBuf" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/SafeBuf.h" , & fmt_text_Files_b }
 ,{ "CCore/src/SafeBuf.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "file" }
 ,{ "buffers." }
 ,{ "It" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "required" }
 ,{ "length," }
 ,{ "but" }
 ,{ "if" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "allocated," }
 ,{ "the" }
 ,{ "small" }
 ,{ "safeguard" }
 ,{ "internal" }
 ,{ "buffer" }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Page page = { "page_SafeBuf" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SaveLoad {

Text b0 = { {
 { "SaveLoad" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/SaveLoad.h" , & fmt_text_Files_b }
 ,{ "CCore/src/SaveLoad.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Serialization" }
 ,{ "basics" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "Serialization" }
 ,{ "is" }
 ,{ "a" }
 ,{ "process" }
 ,{ "of" }
 ,{ "converting" }
 ,{ "an" }
 ,{ "object" }
 ,{ "state" }
 ,{ "into" }
 ,{ "a" }
 ,{ "byte" }
 ,{ "sequence" }
 ,{ "and" }
 ,{ "inversely." }
 ,{ "We" }
 ,{ "use" }
 ,{ "the" }
 ,{ "word" }
 ,{ "\"save\"" }
 ,{ "for" }
 ,{ "the" }
 ,{ "first" }
 ,{ "operation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "\"load\"" }
 ,{ "for" }
 ,{ "the" }
 ,{ "inverse." }
 ,{ "The" }
 ,{ "header" }
 ,{ "SaveLoad.h" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "basic" }
 ,{ "binary" }
 ,{ "serialization" }
 ,{ "framework." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "the" }
 ,{ "save/load" }
 ,{ "process" }
 ,{ "a" }
 ,{ "class" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "a" }
 ,{ "save/load" }
 ,{ "methods." }
 ,{ "The" }
 ,{ "simple" }
 ,{ "example," }
 ,{ "how" }
 ,{ "to" }
 ,{ "serialize" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "data" }
 ,{ "structure:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Four" }
 ,{ "basic" }
 ,{ "types" }
 ,{ "uint8" , & fmt_text_b }
 ,{ "," }
 ,{ "uint16" , & fmt_text_b }
 ,{ "," }
 ,{ "uint32" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "uint64" , & fmt_text_b }
 ,{ "are" }
 ,{ "serializable," }
 ,{ "either" }
 ,{ "in" }
 ,{ "the" }
 ,{ "big-endian" }
 ,{ "or" }
 ,{ "in" }
 ,{ "the" }
 ,{ "little-endian" }
 ,{ "format." }
 ,{ "An" }
 ,{ "order" }
 ,{ "specifier" }
 ,{ "(" }
 ,{ "BeOrder" , & fmt_text_b }
 ,{ "or" }
 ,{ "LeOrder" , & fmt_text_b }
 ,{ ")" }
 ,{ "affects" }
 ,{ "only" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "type" }
 ,{ "argument's" }
 ,{ "serialization" }
 ,{ "(t1,t2,t3)" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "none" }
 ,{ "of" }
 ,{ "them" }
 ,{ "has" }
 ,{ "a" }
 ,{ "basic" }
 ,{ "type," }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Type" }
 ,{ "may" }
 ,{ "not" }
 ,{ "define" }
 ,{ "the" }
 ,{ "constant" }
 ,{ "SaveLoadLen" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "defined," }
 ,{ "the" }
 ,{ "type" }
 ,{ "must" }
 ,{ "serialize" }
 ,{ "itself" }
 ,{ "in" }
 ,{ "exact" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes." }
 ,{ "This" }
 ,{ "constant" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "optimize" }
 ,{ "a" }
 ,{ "serialization" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "A" }
 ,{ "serialization" }
 ,{ "device" }
 ,{ "does" }
 ,{ "its" }
 ,{ "job" }
 ,{ "with" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "()" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "accepts" }
 ,{ "any" }
 ,{ "number" }
 ,{ "of" }
 ,{ "arguments." }
 ,{ "If" }
 ,{ "an" }
 ,{ "Order" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "specified," }
 ,{ "then" }
 ,{ "the" }
 ,{ "method" }
 ,{ "use<Order>" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "instead." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "To" }
 ,{ "calculate" }
 ,{ "a" }
 ,{ "save" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "the" }
 ,{ "function" }
 ,{ "SaveLen()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Or" }
 ,{ "the" }
 ,{ "meta-function" }
 ,{ "SaveLenCounter" , & fmt_text_b }
 ,{ "for" }
 ,{ "fixed" }
 ,{ "serialization" }
 ,{ "length" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "ProxyLoad()" , & fmt_text_b }
 ,{ "loads" }
 ,{ "the" }
 ,{ "object" }
 ,{ "using" }
 ,{ "a" }
 ,{ "proxy" }
 ,{ "class." }
 ,{ "The" }
 ,{ "proxy" }
 ,{ "class" }
 ,{ "type" }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "class." }
 ,{ "Proxy" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "loadable" }
 ,{ "and" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "to" }
 ,{ "extract" }
 ,{ "a" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "from" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "following" }
 ,{ "function" }
 ,{ "family" }
 ,{ "is" }
 ,{ "a" }
 ,{ "range" }
 ,{ "serialization" }
 ,{ "helpers." }
 ,{ "You" }
 ,{ "may" }
 ,{ "load" }
 ,{ "or" }
 ,{ "save" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "using" }
 ,{ "them." }
 ,{ "Range" }
 ,{ "can" }
 ,{ "be" }
 ,{ "given" }
 ,{ "as" }
 ,{ "an" }
 ,{ "abstract" }
 ,{ "range" }
 ,{ "cursor" }
 ,{ "class" }
 ,{ "or" }
 ,{ "as" }
 ,{ "the" }
 ,{ "(pointer,length)" }
 ,{ "couple." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "following" }
 ,{ "simple" }
 ,{ "structure" }
 ,{ "family" }
 ,{ "is," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "a" }
 ,{ "proxy" }
 ,{ "class" }
 ,{ "family" }
 ,{ "for" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "type" }
 ,{ "serialization." }
} , & fmt_text , & align_text } ;

Link link_Devices = { & page , { 14 } } ;

Text b14 = { {
 { "Serialization" }
 ,{ "devices" }
} , & fmt_h3 , & align_h3 } ;

Text b15 = { {
 { "A" }
 ,{ "serialization" }
 ,{ "output" }
 ,{ "device" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "putRange()" , & fmt_text_b }
 ,{ "method" }
 ,{ "may" }
 ,{ "return" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "range." }
 ,{ "The" }
 ,{ "return" }
 ,{ "range" }
 ,{ "is" }
 ,{ "reserved" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "filled" }
 ,{ "by" }
 ,{ "an" }
 ,{ "object" }
 ,{ "being" }
 ,{ "serialized." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "default" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "save" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "below:" }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "A" }
 ,{ "serialization" }
 ,{ "input" }
 ,{ "device" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "If" }
 ,{ "the" }
 ,{ "next" }
 ,{ "byte" }
 ,{ "is" }
 ,{ "not" }
 ,{ "available," }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "should" }
 ,{ "return" }
 ,{ "zero," }
 ,{ "get(<range>)" , & fmt_text_b }
 ,{ "may" }
 ,{ "leave" }
 ,{ "the" }
 ,{ "range" }
 ,{ "partially" }
 ,{ "filled." }
 ,{ "getRange()" , & fmt_text_b }
 ,{ "may" }
 ,{ "return" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "range." }
 ,{ "RangeGetDev" , & fmt_text_b }
 ,{ "provides" }
 ,{ "additional" }
 ,{ "load" }
 ,{ "methods" }
 ,{ "(see" }
 ,{ "below)." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "The" }
 ,{ "default" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "load" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "below:" }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "PutDevBase/GetDevBase" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "These" }
 ,{ "two" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "to" }
 ,{ "simplify" }
 ,{ "a" }
 ,{ "serialization" }
 ,{ "device's" }
 ,{ "implementation." }
 ,{ "They" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "save/load" }
 ,{ "operation" }
 ,{ "sets." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "To" }
 ,{ "use" }
 ,{ "these" }
 ,{ "classes" }
 ,{ "you" }
 ,{ "must" }
 ,{ "derive" }
 ,{ "a" }
 ,{ "class" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "BufPutDev" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "BufPutDev" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "serialization" }
 ,{ "output" }
 ,{ "device." }
 ,{ "It" }
 ,{ "is" }
 ,{ "lightweight," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "the" }
 ,{ "output" }
 ,{ "buffer" }
 ,{ "pointer." }
 ,{ "It" }
 ,{ "does" }
 ,{ "not" }
 ,{ "check" }
 ,{ "the" }
 ,{ "output" }
 ,{ "overflow," }
 ,{ "so" }
 ,{ "make" }
 ,{ "sure" }
 ,{ "the" }
 ,{ "output" }
 ,{ "buffer" }
 ,{ "has" }
 ,{ "enough" }
 ,{ "room" }
 ,{ "before" }
 ,{ "serialization." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "output" }
 ,{ "buffer." }
 ,{ "Serialization" }
 ,{ "bytes" }
 ,{ "will" }
 ,{ "be" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "this" }
 ,{ "buffer." }
 ,{ "You" }
 ,{ "can" }
 ,{ "make" }
 ,{ "a" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "getRest()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "output" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Remaining" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "serialization" }
 ,{ "output" }
 ,{ "device" }
 ,{ "methods." }
 ,{ "Put" }
 ,{ "methods" }
 ,{ "just" }
 ,{ "put" }
 ,{ "bytes" }
 ,{ "and" }
 ,{ "adjust" }
 ,{ "the" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "CountPutDev" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "This" }
 ,{ "device" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "count" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "output" }
 ,{ "bytes" }
 ,{ "with" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "control." }
 ,{ "Data" }
 ,{ "itself" }
 ,{ "goes" }
 ,{ "nowhere." }
 ,{ "To" }
 ,{ "represent" }
 ,{ "the" }
 ,{ "byte" }
 ,{ "number" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ULenSat" , & fmt_text_a }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "BufGetDev" }
} , & fmt_h4 , & align_h4 } ;

Text b32 = { {
 { "BufGetDev" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "serialization" }
 ,{ "input" }
 ,{ "device." }
 ,{ "It" }
 ,{ "is" }
 ,{ "lightweight," }
 ,{ "in" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "the" }
 ,{ "input" }
 ,{ "buffer" }
 ,{ "pointer." }
 ,{ "It" }
 ,{ "does" }
 ,{ "not" }
 ,{ "check" }
 ,{ "the" }
 ,{ "input" }
 ,{ "underflow." }
 ,{ "So" }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "mostly" }
 ,{ "with" }
 ,{ "fixed" }
 ,{ "serialization" }
 ,{ "length" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "input" }
 ,{ "buffer." }
 ,{ "Serialization" }
 ,{ "bytes" }
 ,{ "will" }
 ,{ "be" }
 ,{ "taken" }
 ,{ "from" }
 ,{ "this" }
 ,{ "buffer." }
 ,{ "You" }
 ,{ "can" }
 ,{ "make" }
 ,{ "a" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "getRest()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "input" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Remaining" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "serialization" }
 ,{ "input" }
 ,{ "device" }
 ,{ "methods." }
 ,{ "Get" }
 ,{ "methods" }
 ,{ "just" }
 ,{ "get" }
 ,{ "bytes" }
 ,{ "and" }
 ,{ "adjust" }
 ,{ "the" }
 ,{ "position." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "RangeGetDev" }
} , & fmt_h4 , & align_h4 } ;

Text b37 = { {
 { "RangeGetDev" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "serialization" }
 ,{ "input" }
 ,{ "device." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "bytes" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "byte" }
 ,{ "range." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "error" }
 ,{ "flag." }
 ,{ "This" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "underflow" }
 ,{ "or" }
 ,{ "manually" }
 ,{ "by" }
 ,{ "the" }
 ,{ "object" }
 ,{ "being" }
 ,{ "serialized." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "input" }
 ,{ "byte" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "error" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "getRest()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "input" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "The" }
 ,{ "next" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "serialization" }
 ,{ "input" }
 ,{ "device" }
 ,{ "methods." }
 ,{ "They" }
 ,{ "set" }
 ,{ "the" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "underflow." }
 ,{ "Load" , & fmt_text_Alert }
 ,{ "methods" , & fmt_text_Alert }
 ,{ "are" , & fmt_text_Alert }
 ,{ "optimized" , & fmt_text_Alert }
 ,{ "if" , & fmt_text_Alert }
 ,{ "a" , & fmt_text_Alert }
 ,{ "sequence" , & fmt_text_Alert }
 ,{ "of" , & fmt_text_Alert }
 ,{ "fixed" , & fmt_text_Alert }
 ,{ "serialization" , & fmt_text_Alert }
 ,{ "length" , & fmt_text_Alert }
 ,{ "objects" , & fmt_text_Alert }
 ,{ "are" , & fmt_text_Alert }
 ,{ "loaded." , & fmt_text_Alert }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "The" }
 ,{ "final" }
 ,{ "group" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "extra" }
 ,{ "load" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "getFinalRange()" , & fmt_text_b }
 ,{ "pops" }
 ,{ "the" }
 ,{ "current" }
 ,{ "input" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "getFinalRange(ulen" , & fmt_text_b }
 ,{ "len)" , & fmt_text_b }
 ,{ "pops" }
 ,{ "the" }
 ,{ "current" }
 ,{ "input" }
 ,{ "range," }
 ,{ "if" }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length." }
 ,{ "Otherwise" }
 ,{ "it" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "error" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "fail()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "error" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "finish()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "if" }
 ,{ "the" }
 ,{ "current" }
 ,{ "input" }
 ,{ "range" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty." }
 ,{ "The" }
 ,{ "error" }
 ,{ "flags" }
 ,{ "in" }
 ,{ "form" }
 ,{ "of" }
 ,{ "NegBool" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_SaveLoad" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ScanBit {

Text b0 = { {
 { "ScanBit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ScanBit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ScanBit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ScanBit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"bit-array\"" }
 ,{ "class," }
 ,{ "designed" }
 ,{ "for" }
 ,{ "the" }
 ,{ "quick" }
 ,{ "bit" }
 ,{ "scanning." }
 ,{ "It" }
 ,{ "stores" }
 ,{ "a" }
 ,{ "bit" }
 ,{ "array" }
 ,{ "in" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "buffer," }
 ,{ "packed" }
 ,{ "in" }
 ,{ "some" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "units." }
 ,{ "Logically," }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "array" }
 ,{ "of" }
 ,{ "bits." }
 ,{ "The" }
 ,{ "length" }
 ,{ "is" }
 ,{ "determined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second" }
 ,{ "template" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "functions" }
 ,{ "for" }
 ,{ "the" }
 ,{ "efficient" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ScanBit" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "default" }
 ,{ "constructor" }
 ,{ "clears" }
 ,{ "all" }
 ,{ "bits." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "inner" }
 ,{ "constant" }
 ,{ "IndexLim" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "array" }
 ,{ "bit" }
 ,{ "length." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "ind" , & fmt_text_b }
 ,{ "in" }
 ,{ "all" }
 ,{ "methods" }
 ,{ "must" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "IndexLim" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "set()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "clear()" , & fmt_text_b }
 ,{ "clears" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "test()" , & fmt_text_b }
 ,{ "tests" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "non-zero" }
 ,{ "iff" }
 ,{ "the" }
 ,{ "bit" }
 ,{ "is" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "findMin()" , & fmt_text_b }
 ,{ "scans" }
 ,{ "bits" }
 ,{ "starting" }
 ,{ "form" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "up" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "found" }
 ,{ "set" }
 ,{ "bit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "one," }
 ,{ "IndexLim" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "efficiency" }
 ,{ "of" }
 ,{ "this" }
 ,{ "method" }
 ,{ "depends" }
 ,{ "on" }
 ,{ "the" }
 ,{ "efficiency" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "Algo::ScanUp()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "findMax()" , & fmt_text_b }
 ,{ "scans" }
 ,{ "bits" }
 ,{ "starting" }
 ,{ "form" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index" }
 ,{ "down" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "found" }
 ,{ "set" }
 ,{ "bit" }
 ,{ "is" }
 ,{ "returned." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "one," }
 ,{ "IndexLim" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "efficiency" }
 ,{ "of" }
 ,{ "this" }
 ,{ "method" }
 ,{ "depends" }
 ,{ "on" }
 ,{ "the" }
 ,{ "efficiency" }
 ,{ "of" }
 ,{ "the" }
 ,{ "method" }
 ,{ "Algo::ScanDown()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "ScanMSBitAlgo" }
 ,{ "and" }
 ,{ "ScanLSBitAlgo" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "Two" }
 ,{ "prepared" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s" }
 ,{ "for" }
 ,{ "the" }
 ,{ "ScanBit" , & fmt_text_b }
 ,{ "are" }
 ,{ "provided:" }
 ,{ "ScanMSBitAlgo" , & fmt_text_b }
 ,{ "and" }
 ,{ "ScanLSBitAlgo" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "built," }
 ,{ "based" }
 ,{ "on" }
 ,{ "\"quick\"" }
 ,{ "functions," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
 ,{ "They" }
 ,{ "use" }
 ,{ "different" }
 ,{ "order" }
 ,{ "of" }
 ,{ "numbering" }
 ,{ "bits" }
 ,{ "in" }
 ,{ "the" }
 ,{ "unit." }
 ,{ "They" }
 ,{ "ScanUp/ScanDown()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "use" }
 ,{ "the" }
 ,{ "opposite" }
 ,{ "Quick::ScanMSBit/ScanLSBit()" , & fmt_text_b }
 ,{ "function" }
 ,{ "calls," }
 ,{ "as" }
 ,{ "shown" }
 ,{ "below." }
} , & fmt_text , & align_text } ;

Page page = { "page_ScanBit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ScanDevice {

Text b0 = { {
 { "Scannig" }
 ,{ "devices" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Scan.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Scan.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/scan" , & fmt_text_Files_b }
 ,{ "CCore/src/scan" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "classes" }
 ,{ "for" }
 ,{ "the" }
 ,{ "scanning" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ScanAsyncFile" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "The" }
 ,{ "class" }
 ,{ "ScanAsyncFile" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "scan" }
 ,{ "async" , & fmt_text_a }
 ,{ "files" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ScanAsyncFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "or" }
 ,{ "closed." }
 ,{ "To" }
 ,{ "scan" }
 ,{ "from" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "file," }
 ,{ "the" }
 ,{ "ScanAsyncFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "closed" }
 ,{ "state." }
 ,{ "Non-default" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "file." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "The" }
 ,{ "file" }
 ,{ "may" }
 ,{ "be" }
 ,{ "also" }
 ,{ "specified" }
 ,{ "using" }
 ,{ "the" }
 ,{ "device" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "device" }
 ,{ "file" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "timeout" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "as" }
 ,{ "timeout" }
 ,{ "on" }
 ,{ "file" }
 ,{ "read" }
 ,{ "operations." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "max_packets" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "number" }
 ,{ "of" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "simultaneously" }
 ,{ "used" }
 ,{ "to" }
 ,{ "read" }
 ,{ "the" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Destructor" }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "closed" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "and" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pending" }
 ,{ "read" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "instead" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "the" }
 ,{ "FileMultiError" , & fmt_text_a }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "setFinalTimeout()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "set" }
 ,{ "the" }
 ,{ "\"final" }
 ,{ "timeout\"." }
 ,{ "This" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "used" }
 ,{ "during" }
 ,{ "close" }
 ,{ "operations" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "all" }
 ,{ "pending" }
 ,{ "read" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "finished." }
 ,{ "By" }
 ,{ "default," }
 ,{ "this" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "triple" }
 ,{ "times" }
 ,{ "of" }
 ,{ "the" }
 ,{ "timeout" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "(HCore)" }
 ,{ "ScanFile" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "ScanFile" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "scan" }
 ,{ "a" }
 ,{ "file." }
 ,{ "On" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "targets" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "OS" }
 ,{ "native" }
 ,{ "file" }
 ,{ "input-output" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "ScanFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "can" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "or" }
 ,{ "closed." }
 ,{ "To" }
 ,{ "scan" }
 ,{ "from" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "file," }
 ,{ "the" }
 ,{ "ScanFile" , & fmt_text_b }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "opened" }
 ,{ "and" }
 ,{ "the" }
 ,{ "file" }
 ,{ "name" }
 ,{ "must" }
 ,{ "be" }
 ,{ "provided." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "closed" }
 ,{ "state." }
 ,{ "Non-default" }
 ,{ "opens" }
 ,{ "a" }
 ,{ "file." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Destructor" }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "Errors" }
 ,{ "are" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "isOpened()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "file" }
 ,{ "is" }
 ,{ "opened," }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "open()" , & fmt_text_b }
 ,{ "opens" }
 ,{ "a" }
 ,{ "closed" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "file" }
 ,{ "name." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "close()" , & fmt_text_b }
 ,{ "closes" }
 ,{ "an" }
 ,{ "opened" }
 ,{ "object." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "and" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pending" }
 ,{ "read" }
 ,{ "error" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "soft_close()" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "instead" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "errors" }
 ,{ "using" }
 ,{ "the" }
 ,{ "FileMultiError" , & fmt_text_a }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "disableExceptions()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "exceptions" }
 ,{ "produced" }
 ,{ "by" }
 ,{ "the" }
 ,{ "file" }
 ,{ "reading" }
 ,{ "operations." }
 ,{ "You" }
 ,{ "may" }
 ,{ "call" }
 ,{ "this" }
 ,{ "method" }
 ,{ "after" }
 ,{ "the" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Or" }
 ,{ "you" }
 ,{ "may" }
 ,{ "set" }
 ,{ "the" }
 ,{ "disable_exceptions" , & fmt_text_b }
 ,{ "argument" }
 ,{ "to" }
 ,{ "true" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "does" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "read," }
 ,{ "so" }
 ,{ "it" }
 ,{ "may" }
 ,{ "throw" }
 ,{ "a" }
 ,{ "\"reading\"" }
 ,{ "exception." }
 ,{ "If" }
 ,{ "exceptions" }
 ,{ "are" }
 ,{ "disabled," }
 ,{ "then" }
 ,{ "the" }
 ,{ "special" }
 ,{ "internal" }
 ,{ "error" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "set" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "reading" }
 ,{ "error." }
 ,{ "This" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "added" }
 ,{ "in" }
 ,{ "the" }
 ,{ "error" }
 ,{ "list" }
 ,{ "by" }
 ,{ "the" }
 ,{ "close" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Page page = { "page_ScanDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Scanning {

Text b0 = { {
 { "Scanning" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Scanf.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Scanf.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/DetectProxy.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DetectProxy.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Subfolders" }
 ,{ "CCore/inc/scanf" , & fmt_text_Files_b }
 ,{ "CCore/src/scanf" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b4 = { {
 { "Scanning" }
 ,{ "is" }
 ,{ "a" }
 ,{ "process," }
 ,{ "inverse" }
 ,{ "to" }
 ,{ "the" }
 ,{ "printing." }
 ,{ "I.e." }
 ,{ "scanning" }
 ,{ "is" }
 ,{ "a" }
 ,{ "creation" }
 ,{ "of" }
 ,{ "an" }
 ,{ "object" }
 ,{ "state" }
 ,{ "from" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "characters." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "actors" }
 ,{ "in" }
 ,{ "a" }
 ,{ "scanning" }
 ,{ "process:" }
 ,{ "the" }
 ,{ "object," }
 ,{ "the" }
 ,{ "input" }
 ,{ "device" }
 ,{ "and" }
 ,{ "scanning" }
 ,{ "options." }
 ,{ "The" }
 ,{ "input" }
 ,{ "device" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "character" }
 ,{ "sequence," }
 ,{ "scanning" }
 ,{ "options" }
 ,{ "determines" }
 ,{ "how" }
 ,{ "the" }
 ,{ "object" }
 ,{ "state" }
 ,{ "is" }
 ,{ "encoded." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "scanning" }
 ,{ "implementation." }
 ,{ "There" }
 ,{ "are" }
 ,{ "default" }
 ,{ "implementations" }
 ,{ "for" }
 ,{ "integral" }
 ,{ "and" }
 ,{ "string" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Scanning" }
 ,{ "functions" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "Scanning" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "scanning" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Scanf()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "format" }
 ,{ "string" }
 ,{ "to" }
 ,{ "scan." }
 ,{ "Format" }
 ,{ "string" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "options" }
 ,{ "for" }
 ,{ "each" }
 ,{ "object" }
 ,{ "to" }
 ,{ "scan." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Scanobj()" , & fmt_text_b }
 ,{ "scans" }
 ,{ "the" }
 ,{ "input" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "default" }
 ,{ "scan" }
 ,{ "options." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Format" }
 ,{ "string" }
 ,{ "contains" }
 ,{ "embedded" }
 ,{ "format" }
 ,{ "specifiers." }
 ,{ "Each" }
 ,{ "character" }
 ,{ "not" }
 ,{ "in" }
 ,{ "a" }
 ,{ "format" }
 ,{ "specifier" }
 ,{ "causes" }
 ,{ "Scanf()" , & fmt_text_b }
 ,{ "to" }
 ,{ "read" }
 ,{ "a" }
 ,{ "single" }
 ,{ "character" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "and" }
 ,{ "match" }
 ,{ "it" }
 ,{ "with" }
 ,{ "the" }
 ,{ "format" }
 ,{ "character." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "input" }
 ,{ "characters" }
 ,{ "or" }
 ,{ "characters" }
 ,{ "are" }
 ,{ "different" }
 ,{ "then" }
 ,{ "the" }
 ,{ "scanning" }
 ,{ "is" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "character" }
 ,{ "'" , & fmt_text_b }
 ,{ "'(space)" , & fmt_text_b }
 ,{ "is" }
 ,{ "treated" }
 ,{ "especially:" }
 ,{ "it" }
 ,{ "extracts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "device" }
 ,{ "space-like" }
 ,{ "characters" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "or" }
 ,{ "a" }
 ,{ "non-space" }
 ,{ "character." }
 ,{ "Format" }
 ,{ "specifier" }
 ,{ "has" }
 ,{ "a" }
 ,{ "form" }
 ,{ "\"#<options>;\"" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "<options>" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "option" }
 ,{ "string." }
 ,{ "It" }
 ,{ "is" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "object" }
 ,{ "scan" }
 ,{ "options." }
 ,{ "To" }
 ,{ "scan" }
 ,{ "the" }
 ,{ "character" }
 ,{ "'#'" , & fmt_text_b }
 ,{ "use" }
 ,{ "\"##\"" , & fmt_text_b }
 ,{ "as" }
 ,{ "a" }
 ,{ "format" }
 ,{ "specifier." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "How" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "type" }
 ,{ "scanable" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "ways" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "type" }
 ,{ "scanable." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "most" }
 ,{ "direct" }
 ,{ "way:" }
 ,{ "define" }
 ,{ "in" }
 ,{ "the" }
 ,{ "class" }
 ,{ "definition" }
 ,{ "the" }
 ,{ "method" }
 ,{ "template" }
 ,{ "scan()" , & fmt_text_b }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "If" }
 ,{ "you" }
 ,{ "need" }
 ,{ "scanning" }
 ,{ "options" }
 ,{ "do" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "second" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "scan" }
 ,{ "proxy" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "In" }
 ,{ "this" }
 ,{ "case" }
 ,{ "the" }
 ,{ "SomeClass::ScanProxyType" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "castable" }
 ,{ "from" }
 ,{ "the" }
 ,{ "type" }
 ,{ "SomeClass" , & fmt_text_b }
 ,{ "." }
 ,{ "For" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "specialize" }
 ,{ "the" }
 ,{ "template" }
 ,{ "CCore::ScanProxy<T>" , & fmt_text_b }
 ,{ "to" }
 ,{ "define" }
 ,{ "the" }
 ,{ "scan" }
 ,{ "proxy" }
 ,{ "type" }
 ,{ "and" }
 ,{ "optionally" }
 ,{ "the" }
 ,{ "scan" }
 ,{ "option" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "You" }
 ,{ "can" }
 ,{ "determine" }
 ,{ "the" }
 ,{ "scan" }
 ,{ "option" }
 ,{ "type" }
 ,{ "using" }
 ,{ "the" }
 ,{ "ScanOptAdapter<T>" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "has" }
 ,{ "a" }
 ,{ "scan" }
 ,{ "option" }
 ,{ "type" }
 ,{ "(even" }
 ,{ "through" }
 ,{ "proxy)," }
 ,{ "then" }
 ,{ "ScanOptAdapter<T>::ScanOptType" , & fmt_text_b }
 ,{ "is" }
 ,{ "that" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Sometimes" }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "scan" }
 ,{ "options" }
 ,{ "using" }
 ,{ "the" }
 ,{ "object," }
 ,{ "not" }
 ,{ "the" }
 ,{ "format" }
 ,{ "string." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "BindScanOpt()" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Input" }
 ,{ "devices" }
} , & fmt_h3 , & align_h3 } ;

Text b20 = { {
 { "An" }
 ,{ "input" }
 ,{ "device" }
 ,{ "for" }
 ,{ "scanning" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "sequential" }
 ,{ "access" }
 ,{ "to" }
 ,{ "a" }
 ,{ "character" }
 ,{ "sequence." }
 ,{ "An" }
 ,{ "input" }
 ,{ "device" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "either" }
 ,{ "an" }
 ,{ "actual" }
 ,{ "input" }
 ,{ "device" }
 ,{ "type" }
 ,{ "or" }
 ,{ "redirect" }
 ,{ "the" }
 ,{ "input" }
 ,{ "functionality" }
 ,{ "to" }
 ,{ "another" }
 ,{ "type" }
 ,{ "using" }
 ,{ "a" }
 ,{ "specialization" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ScanInpAdapter" , & fmt_text_b }
 ,{ "." }
 ,{ "By" }
 ,{ "default," }
 ,{ "the" }
 ,{ "actual" }
 ,{ "input" }
 ,{ "device" }
 ,{ "type" }
 ,{ "is" }
 ,{ "declared" }
 ,{ "as" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "type" }
 ,{ "ScanInpType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "The" }
 ,{ "input" }
 ,{ "device" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "It" }
 ,{ "behaves" }
 ,{ "like" }
 ,{ "a" }
 ,{ "character" }
 ,{ "cursor" }
 ,{ "plus" }
 ,{ "internal" }
 ,{ "fail" }
 ,{ "flag" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "to" }
 ,{ "signal" }
 ,{ "about" }
 ,{ "scanning" }
 ,{ "errors" }
 ,{ "or" }
 ,{ "input" }
 ,{ "errors." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "The" }
 ,{ "simplest" }
 ,{ "way" }
 ,{ "of" }
 ,{ "the" }
 ,{ "building" }
 ,{ "input" }
 ,{ "object" }
 ,{ "classes" }
 ,{ "is" }
 ,{ "to" }
 ,{ "derive" }
 ,{ "them" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ScanBase" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "This" }
 ,{ "class" }
 ,{ "counts" }
 ,{ "the" }
 ,{ "current" }
 ,{ "text" }
 ,{ "position." }
 ,{ "You" }
 ,{ "can" }
 ,{ "retrieve" }
 ,{ "it" }
 ,{ "with" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getTextPos()" , & fmt_text_b }
 ,{ "." }
 ,{ "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "virtual" }
 ,{ "method" }
 ,{ "underflow()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "input" }
 ,{ "character" }
 ,{ "frame" }
 ,{ "is" }
 ,{ "consumed." }
 ,{ "It" }
 ,{ "must" }
 ,{ "return" }
 ,{ "a" }
 ,{ "character" }
 ,{ "range." }
 ,{ "This" }
 ,{ "range" }
 ,{ "can" }
 ,{ "be" }
 ,{ "empty," }
 ,{ "if" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "input" }
 ,{ "is" }
 ,{ "reached." }
 ,{ "It" }
 ,{ "must" }
 ,{ "remains" }
 ,{ "valid" }
 ,{ "until" }
 ,{ "the" }
 ,{ "next" }
 ,{ "call" }
 ,{ "of" }
 ,{ "underflow()" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "the" }
 ,{ "method" }
 ,{ "fail()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "and" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "may" }
 ,{ "be" }
 ,{ "thrown." }
 ,{ "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "protected" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
 ,{ "pump()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "character" }
 ,{ "pumping," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "constructor" }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "action." }
 ,{ "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "base" }
 ,{ "to" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "such" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "methods" }
 ,{ "like" }
 ,{ "open()" , & fmt_text_b }
 ,{ "or" }
 ,{ "close()" , & fmt_text_b }
 ,{ "when" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "changed." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "To" }
 ,{ "scan" }
 ,{ "a" }
 ,{ "given" }
 ,{ "string" }
 ,{ "the" }
 ,{ "class" }
 ,{ "ScanString" , & fmt_text_b }
 ,{ "exists:" }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "String" }
 ,{ "scanning" }
} , & fmt_h3 , & align_h3 } ;

Text b27 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "string" }
 ,{ "scanning." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "String" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "following" }
 ,{ "scan" }
 ,{ "options" }
 ,{ "are" }
 ,{ "supported:" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "string" }
 ,{ "scanning," }
 ,{ "they" }
 ,{ "are" }
 ,{ "selected" }
 ,{ "by" }
 ,{ "options." }
 ,{ "Options" }
 ,{ "\".q\"" , & fmt_text_b }
 ,{ "and" }
 ,{ "\".Q\"" , & fmt_text_b }
 ,{ "means" }
 ,{ "scan" }
 ,{ "a" }
 ,{ "quoted" }
 ,{ "string" }
 ,{ "(" }
 ,{ "StringScanQuote" , & fmt_text_b }
 ,{ ")," }
 ,{ "\".s\"" , & fmt_text_b }
 ,{ "and" }
 ,{ "\".S\"" , & fmt_text_b }
 ,{ "means" }
 ,{ "scan" }
 ,{ "up" }
 ,{ "to" }
 ,{ "a" }
 ,{ "space" }
 ,{ "character" }
 ,{ "(" }
 ,{ "StringScanToSpace" , & fmt_text_b }
 ,{ ")," }
 ,{ "and" }
 ,{ "\".p\"" , & fmt_text_b }
 ,{ "and" }
 ,{ "\".P\"" , & fmt_text_b }
 ,{ "means" }
 ,{ "scan" }
 ,{ "up" }
 ,{ "to" }
 ,{ "a" }
 ,{ "space" }
 ,{ "or" }
 ,{ "punctuation" }
 ,{ "character" }
 ,{ "(" }
 ,{ "StringScanToPunct" , & fmt_text_b }
 ,{ ")." }
 ,{ "The" }
 ,{ "last" }
 ,{ "mode" }
 ,{ "is" }
 ,{ "default," }
 ,{ "punctuation" }
 ,{ "characters" }
 ,{ "are:" }
 ,{ "!" , & fmt_text_b }
 ,{ "\"" , & fmt_text_b }
 ,{ "#" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "%" , & fmt_text_b }
 ,{ "&" , & fmt_text_b }
 ,{ "'" , & fmt_text_b }
 ,{ "(" , & fmt_text_b }
 ,{ ")" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "-" , & fmt_text_b }
 ,{ "." , & fmt_text_b }
 ,{ "/" , & fmt_text_b }
 ,{ ":" , & fmt_text_b }
 ,{ ";" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "=" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "?" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "[" , & fmt_text_b }
 ,{ "\\" , & fmt_text_b }
 ,{ "]" , & fmt_text_b }
 ,{ "^" , & fmt_text_b }
 ,{ "`" , & fmt_text_b }
 ,{ "{" , & fmt_text_b }
 ,{ "|" , & fmt_text_b }
 ,{ "}" , & fmt_text_b }
 ,{ "~" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "When" }
 ,{ "scanning" }
 ,{ "a" }
 ,{ "quoted" }
 ,{ "string" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "scanned" }
 ,{ "for" }
 ,{ "a" }
 ,{ "string" }
 ,{ "of" }
 ,{ "characters," }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "double" }
 ,{ "quotes." }
 ,{ "Quotes" }
 ,{ "are" }
 ,{ "not" }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "result." }
 ,{ "If" }
 ,{ "the" }
 ,{ "input" }
 ,{ "does" }
 ,{ "not" }
 ,{ "begin" }
 ,{ "with" }
 ,{ "a" }
 ,{ "quoted" }
 ,{ "string," }
 ,{ "it" }
 ,{ "is" }
 ,{ "failed." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "When" }
 ,{ "scanning" }
 ,{ "up" }
 ,{ "to" }
 ,{ "a" }
 ,{ "some" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "character" }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "scanned" }
 ,{ "for" }
 ,{ "a" }
 ,{ "string" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "character" }
 ,{ "of" }
 ,{ "that" }
 ,{ "kind." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "StringSetScan" }
} , & fmt_h3 , & align_h3 } ;

Text b32 = { {
 { "The" }
 ,{ "class" }
 ,{ "StringSetScan" , & fmt_text_b }
 ,{ "scans" }
 ,{ "the" }
 ,{ "input" }
 ,{ "for" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "strings" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "string" }
 ,{ "index." }
 ,{ "Index" }
 ,{ "is" }
 ,{ "1-based." }
 ,{ "If" }
 ,{ "the" }
 ,{ "input" }
 ,{ "does" }
 ,{ "not" }
 ,{ "begin" }
 ,{ "with" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "strings," }
 ,{ "the" }
 ,{ "input" }
 ,{ "is" }
 ,{ "failed" }
 ,{ "and" }
 ,{ "the" }
 ,{ "index" }
 ,{ "is" }
 ,{ "set" }
 ,{ "to" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "braced" }
 ,{ "list" }
 ,{ "of" }
 ,{ "zero-terminated" }
 ,{ "strings." }
 ,{ "These" }
 ,{ "strings" }
 ,{ "must" }
 ,{ "persist" }
 ,{ "over" }
 ,{ "the" }
 ,{ "object" }
 ,{ "life-time." }
 ,{ "Usually," }
 ,{ "they" }
 ,{ "are" }
 ,{ "string" }
 ,{ "literals." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "The" }
 ,{ "cast" }
 ,{ "operator" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "1-based" }
 ,{ "index" }
 ,{ "of" }
 ,{ "the" }
 ,{ "found" }
 ,{ "string" }
 ,{ "or" }
 ,{ "null" }
 ,{ "if" }
 ,{ "the" }
 ,{ "scan" }
 ,{ "has" }
 ,{ "failed." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Integer" }
 ,{ "scanning" }
} , & fmt_h3 , & align_h3 } ;

Text b36 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "integral" }
 ,{ "types" }
 ,{ "scanning." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "The" }
 ,{ "following" }
 ,{ "scan" }
 ,{ "options" }
 ,{ "are" }
 ,{ "supported:" }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "forms" }
 ,{ "of" }
 ,{ "the" }
 ,{ "integer" }
 ,{ "representation." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Binary" }
 ,{ "form:" }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "Hex" }
 ,{ "form:" }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "0x" }
 ,{ "form:" }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "And" }
 ,{ "base" , & fmt_text_b }
 ,{ "form," }
 ,{ "where" }
 ,{ "base" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "representation" }
 ,{ "base" }
 ,{ "from" }
 ,{ "2" }
 ,{ "to" }
 ,{ "16:" }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "By" }
 ,{ "default" }
 ,{ "the" }
 ,{ "integer" }
 ,{ "scanner" }
 ,{ "accepts" }
 ,{ "all" }
 ,{ "form" }
 ,{ "of" }
 ,{ "the" }
 ,{ "integer" }
 ,{ "representation," }
 ,{ "base" , & fmt_text_b }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "10." }
 ,{ "But" }
 ,{ "using" }
 ,{ "options" }
 ,{ "you" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "form." }
 ,{ "Use" }
 ,{ ".b" , & fmt_text_b }
 ,{ "or" }
 ,{ ".B" , & fmt_text_b }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "binary" }
 ,{ "form," }
 ,{ ".h" , & fmt_text_b }
 ,{ "or" }
 ,{ ".H" , & fmt_text_b }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "hex" }
 ,{ "form," }
 ,{ ".x" , & fmt_text_b }
 ,{ "or" }
 ,{ ".X" , & fmt_text_b }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "0x" }
 ,{ "form" }
 ,{ "and" }
 ,{ ".base" , & fmt_text_b }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "base" , & fmt_text_b }
 ,{ "form." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "Utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b44 = { {
 { "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "scan" }
 ,{ "utility" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "CharStreamType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "character" }
 ,{ "stream" }
 ,{ "type," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "cursor" }
 ,{ "over" }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "CharFailStreamType" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "CharStreamType" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "method" }
 ,{ "fail()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "This" }
 ,{ "function" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "digit" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "or" }
 ,{ "-1," }
 ,{ "if" }
 ,{ "the" }
 ,{ "character" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "digit," }
 ,{ "where" }
 ,{ "base" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "representation" }
 ,{ "base." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[2,16]." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "This" }
 ,{ "function" }
 ,{ "extracts" }
 ,{ "space-like" }
 ,{ "characters" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "or" }
 ,{ "a" }
 ,{ "first" }
 ,{ "non-space" }
 ,{ "character." }
 ,{ "Can" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "any" }
 ,{ "char" , & fmt_text_b }
 ,{ "cursor." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "This" }
 ,{ "function" }
 ,{ "extracts" }
 ,{ "non-space" }
 ,{ "characters" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "or" }
 ,{ "a" }
 ,{ "first" }
 ,{ "space-like" }
 ,{ "character." }
 ,{ "Can" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "any" }
 ,{ "char" , & fmt_text_b }
 ,{ "cursor." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "This" }
 ,{ "function" }
 ,{ "tries" }
 ,{ "to" }
 ,{ "move" }
 ,{ "over" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
 ,{ "On" }
 ,{ "success" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "false" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "cursor" }
 ,{ "remains" }
 ,{ "at" }
 ,{ "the" }
 ,{ "current" }
 ,{ "position." }
 ,{ "Can" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "any" }
 ,{ "char" , & fmt_text_b }
 ,{ "cursor." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "This" }
 ,{ "function" }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "or" }
 ,{ "fail" }
 ,{ "the" }
 ,{ "input." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "This" }
 ,{ "function" }
 ,{ "extracts" }
 ,{ "one" }
 ,{ "character," }
 ,{ "which" }
 ,{ "satisfies" }
 ,{ "the" }
 ,{ "given" }
 ,{ "condition," }
 ,{ "or" }
 ,{ "fail" }
 ,{ "the" }
 ,{ "input." }
 ,{ "func" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "signature" }
 ,{ "boolable" , & fmt_text_b }
 ,{ "(char" , & fmt_text_b }
 ,{ "ch)" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "condition." }
} , & fmt_text , & align_text } ;

Text b53 = { {
 { "This" }
 ,{ "function" }
 ,{ "extracts" }
 ,{ "characters," }
 ,{ "which" }
 ,{ "satisfies" }
 ,{ "the" }
 ,{ "given" }
 ,{ "condition," }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "or" }
 ,{ "a" }
 ,{ "first" }
 ,{ "character," }
 ,{ "which" }
 ,{ "does" }
 ,{ "not" }
 ,{ "satisfy" }
 ,{ "the" }
 ,{ "condition." }
 ,{ "Can" }
 ,{ "be" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "any" }
 ,{ "char" , & fmt_text_b }
 ,{ "cursor." }
 ,{ "func" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "signature" }
 ,{ "boolable" , & fmt_text_b }
 ,{ "(char" , & fmt_text_b }
 ,{ "ch)" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "condition." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "This" }
 ,{ "word" }
 ,{ "can" }
 ,{ "be" }
 ,{ "scanned." }
 ,{ "It" }
 ,{ "fails" }
 ,{ "the" }
 ,{ "scanner" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specialize" }
 ,{ "the" }
 ,{ "template" }
 ,{ "ScanProxy<T>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "The" }
 ,{ "class" }
 ,{ "SetType" , & fmt_text_b }
 ,{ "will" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "scan" }
 ,{ "instead" }
 ,{ "the" }
 ,{ "type" }
 ,{ "SomeType" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "map()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Scanning" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_text , outer_text , back_text }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Scope {

Text b0 = { {
 { "Scope" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Scope.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Scope.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Scope" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "scope-marker." }
 ,{ "A" }
 ,{ "local" }
 ,{ "variable" }
 ,{ "of" }
 ,{ "this" }
 ,{ "type" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "name" }
 ,{ "to" }
 ,{ "the" }
 ,{ "current" }
 ,{ "scope." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Print()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "scope" }
 ,{ "names" }
 ,{ "from" }
 ,{ "the" }
 ,{ "most" }
 ,{ "recent," }
 ,{ "separated" }
 ,{ "by" }
 ,{ "the" }
 ,{ "space." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "iff" }
 ,{ "at" }
 ,{ "least" }
 ,{ "one" }
 ,{ "scope" }
 ,{ "name" }
 ,{ "is" }
 ,{ "defined." }
} , & fmt_text , & align_text } ;

Page page = { "page_Scope" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ScopeGuard {

Text b0 = { {
 { "ScopeGuard" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/ScopeGuard.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/ScopeGuard.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "provides" }
 ,{ "two" }
 ,{ "\"scope" }
 ,{ "guard\"" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "DefaultGuard" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ScopeGuard" , & fmt_text_b }
 ,{ "calls" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Page page = { "page_ScopeGuard" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Sem {

Text b0 = { {
 { "Sem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/Sem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/Sem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Sem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "semaphore," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "second" }
 ,{ "of" }
 ,{ "the" }
 ,{ "most" }
 ,{ "important" }
 ,{ "synchronization" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Sem" , & fmt_text_b }
 ,{ "has" }
 ,{ "an" }
 ,{ "internal" }
 ,{ "semaphore" }
 ,{ "counter." }
 ,{ "give...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "increase" }
 ,{ "this" }
 ,{ "counter." }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "overflow." }
 ,{ "take...()" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "zero." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "zero," }
 ,{ "the" }
 ,{ "method" }
 ,{ "blocks" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "until" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "becomes" }
 ,{ "non-zero." }
 ,{ "Then" }
 ,{ "it" }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Consider" }
 ,{ "a" }
 ,{ "basket" }
 ,{ "with" }
 ,{ "apples." }
 ,{ "Somebody" }
 ,{ "may" }
 ,{ "put" }
 ,{ "an" }
 ,{ "apple" }
 ,{ "to" }
 ,{ "the" }
 ,{ "basket," }
 ,{ "and" }
 ,{ "somebody" }
 ,{ "may" }
 ,{ "take" }
 ,{ "it," }
 ,{ "but" }
 ,{ "nobody" }
 ,{ "can" }
 ,{ "take" }
 ,{ "an" }
 ,{ "apple" }
 ,{ "from" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "basket," }
 ,{ "so" }
 ,{ "he" }
 ,{ "has" }
 ,{ "to" }
 ,{ "wait" }
 ,{ "until" }
 ,{ "the" }
 ,{ "basket" }
 ,{ "becomes" }
 ,{ "non-empty." }
 ,{ "That" }
 ,{ "is" }
 ,{ "how" }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "is" }
 ,{ "working," }
 ,{ "it" }
 ,{ "counts" }
 ,{ "apples" }
 ,{ "in" }
 ,{ "the" }
 ,{ "basket." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "semaphore" }
 ,{ "counter" }
 ,{ "value." }
 ,{ "It" }
 ,{ "is" }
 ,{ "zero," }
 ,{ "by" }
 ,{ "default." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "give()" , & fmt_text_b }
 ,{ "increments" }
 ,{ "the" }
 ,{ "counter." }
 ,{ "If" }
 ,{ "there" }
 ,{ "are" }
 ,{ "waiting" }
 ,{ "threads" }
 ,{ "on" }
 ,{ "the" }
 ,{ "semaphore," }
 ,{ "the" }
 ,{ "counter" }
 ,{ "is" }
 ,{ "zero" }
 ,{ "and" }
 ,{ "remains" }
 ,{ "zero" }
 ,{ "after" }
 ,{ "operation," }
 ,{ "but" }
 ,{ "one" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "released." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "give_many()" , & fmt_text_b }
 ,{ "increases" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counter" }
 ,{ "by" }
 ,{ "a" }
 ,{ "given" }
 ,{ "value." }
 ,{ "It" }
 ,{ "may" }
 ,{ "release" }
 ,{ "several" }
 ,{ "threads," }
 ,{ "waiting" }
 ,{ "the" }
 ,{ "semaphore." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "try_take()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "decrement" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counter." }
 ,{ "This" }
 ,{ "method" }
 ,{ "never" }
 ,{ "blocks." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "take()" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "counter." }
 ,{ "It" }
 ,{ "may" }
 ,{ "block" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread" }
 ,{ "indefinitely," }
 ,{ "until" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "becomes" }
 ,{ "possible." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "take(MSec)" , & fmt_text_b }
 ,{ "and" }
 ,{ "take(TimeScope)" , & fmt_text_b }
 ,{ "are" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "take()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "wait" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "specified" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "operation" }
 ,{ "failed." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "of" }
 ,{ "a" }
 ,{ "typical" }
 ,{ "Sem" , & fmt_text_b }
 ,{ "usage:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "HCore" }
 ,{ "Sem" }
} , & fmt_h4 , & align_h4 } ;

Text b13 = { {
 { "HCore" , & fmt_text_b }
 ,{ "Sem" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "common" }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "XCore" }
 ,{ "Sem" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "XCore" , & fmt_text_b }
 ,{ "Sem" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "has" }
 ,{ "give...()" , & fmt_text_b }
 ,{ "method" }
 ,{ "variants" }
 ,{ "for" }
 ,{ "different" }
 ,{ "execution" }
 ,{ "contexts." }
} , & fmt_text , & align_text } ;

Page page = { "page_Sem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SHA {

Text b0 = { {
 { "SHA" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/SHA.h" , & fmt_text_Files_b }
 ,{ "CCore/src/crypton/SHA.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Files" }
 ,{ "CCore/inc/crypton/PlatformSHA.h" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Software" }
 ,{ "SHA" }
 ,{ "implementation" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "The" }
 ,{ "following" }
 ,{ "HashFunction<....>" , & fmt_text_a }
 ,{ "classes" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "SHA" }
 ,{ "hash" }
 ,{ "algorithms:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "SHAnnn" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "SHA-nnn" }
 ,{ "algorithm." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "KeyedHashFunction<....>" , & fmt_text_a }
 ,{ "classes" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "HMAC" }
 ,{ "hash" }
 ,{ "functions" }
 ,{ "based" }
 ,{ "on" }
 ,{ "SHA" }
 ,{ "algorithms:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "KeyedSHAnnn" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "HMAC" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "SHA-nnn" }
 ,{ "algorithm." }
} , & fmt_text , & align_text } ;

Link link_PlatformSHA = { & page , { 8 } } ;

Text b8 = { {
 { "Platform" }
 ,{ "SHA" }
} , & fmt_h3 , & align_h3 } ;

Text b9 = { {
 { "The" }
 ,{ "file" }
 ,{ "PlatformSHA.h" , & fmt_text_b }
 ,{ "contains" }
 ,{ "stub" }
 ,{ "definitions" }
 ,{ "for" }
 ,{ "the" }
 ,{ "PlatformSHA" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "A" }
 ,{ "target" }
 ,{ "may" }
 ,{ "override" }
 ,{ "this" }
 ,{ "header" }
 ,{ "file" }
 ,{ "and" }
 ,{ "provide" }
 ,{ "its" }
 ,{ "own" }
 ,{ "definitions" }
 ,{ "with" }
 ,{ "efficient" }
 ,{ "platform-dependent" }
 ,{ "SHA" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Page page = { "page_SHA" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Signal {

Text b0 = { {
 { "Signals" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Signal.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Signal.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "A" }
 ,{ "signal" }
 ,{ "represents" }
 ,{ "some" }
 ,{ "event." }
 ,{ "Anybody" }
 ,{ "interested" }
 ,{ "in" }
 ,{ "a" }
 ,{ "reacting" }
 ,{ "on" }
 ,{ "the" }
 ,{ "event" }
 ,{ "may" }
 ,{ "subscribe" }
 ,{ "to" }
 ,{ "receive" }
 ,{ "a" }
 ,{ "signal." }
 ,{ "Technically," }
 ,{ "signal" }
 ,{ "is" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "subscribers." }
 ,{ "A" }
 ,{ "signal" }
 ,{ "assertion" }
 ,{ "calls" }
 ,{ "subscribers" }
 ,{ "reaction" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Signal" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "Signal" , & fmt_text_b }
 ,{ "itself" }
 ,{ "is" }
 ,{ "very" }
 ,{ "simple." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getConnectedCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "subscribers." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "assert()" , & fmt_text_b }
 ,{ "asserts" }
 ,{ "the" }
 ,{ "signal." }
 ,{ "All" }
 ,{ "subscribers" }
 ,{ "are" }
 ,{ "called." }
 ,{ "Subscriber" }
 ,{ "may" }
 ,{ "disconnect" }
 ,{ "itself" }
 ,{ "during" }
 ,{ "the" }
 ,{ "call." }
 ,{ "But" }
 ,{ "the" }
 ,{ "signal" }
 ,{ "itself" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "destroyed," }
 ,{ "in" }
 ,{ "such" }
 ,{ "case" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "ConnectorBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "connector" }
 ,{ "classes." }
 ,{ "A" }
 ,{ "connector" }
 ,{ "class" }
 ,{ "manages" }
 ,{ "connection" }
 ,{ "and" }
 ,{ "disconnection" }
 ,{ "to" }
 ,{ "a" }
 ,{ "signal." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "call" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "method" }
 ,{ "of" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "ConnectorBase" , & fmt_text_b }
 ,{ "class." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "a" }
 ,{ "connected" }
 ,{ "signal" }
 ,{ "is" }
 ,{ "asserted." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "isConnected()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "connector" }
 ,{ "is" }
 ,{ "connected" }
 ,{ "to" }
 ,{ "a" }
 ,{ "signal." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "connect()" , & fmt_text_b }
 ,{ "connects" }
 ,{ "to" }
 ,{ "a" }
 ,{ "signal." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "indicates" }
 ,{ "success." }
 ,{ "Connector" }
 ,{ "must" }
 ,{ "be" }
 ,{ "disconnected." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "disconnect()" , & fmt_text_b }
 ,{ "disconnects" }
 ,{ "a" }
 ,{ "signal." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "indicates" }
 ,{ "success." }
 ,{ "Connector" }
 ,{ "must" }
 ,{ "be" }
 ,{ "connected." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Connector" }
 ,{ "can" }
 ,{ "be" }
 ,{ "connected" }
 ,{ "only" }
 ,{ "to" }
 ,{ "one" }
 ,{ "signal." }
 ,{ "Derived" }
 ,{ "class" }
 ,{ "must" }
 ,{ "call" }
 ,{ "disconnect()" , & fmt_text_b }
 ,{ "in" }
 ,{ "its" }
 ,{ "destructor." }
 ,{ "When" }
 ,{ "a" }
 ,{ "signal" }
 ,{ "dies," }
 ,{ "it's" }
 ,{ "automatically" }
 ,{ "disconnected" }
 ,{ "from" }
 ,{ "all" }
 ,{ "subscribers." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "SignalConnector" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "The" }
 ,{ "class" }
 ,{ "SignalConnector" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "connector" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "It" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "and" }
 ,{ "its" }
 ,{ "method" }
 ,{ "to" }
 ,{ "react" }
 ,{ "on" }
 ,{ "a" }
 ,{ "signal." }
 ,{ "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "also" }
 ,{ "connects" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "signal." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Normally," }
 ,{ "you" }
 ,{ "should" }
 ,{ "include" }
 ,{ "the" }
 ,{ "connector" }
 ,{ "object" }
 ,{ "in" }
 ,{ "the" }
 ,{ "subscribers" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "SignalInterface" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "The" }
 ,{ "class" }
 ,{ "SignalInterface" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Signal" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "alternative" }
 ,{ "way" }
 ,{ "of" }
 ,{ "the" }
 ,{ "signal" }
 ,{ "assertion." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "assert()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "functor," }
 ,{ "using" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "Pattern" , & fmt_text_a }
 ,{ "," }
 ,{ "and" }
 ,{ "applies" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "interface," }
 ,{ "supplied" }
 ,{ "by" }
 ,{ "a" }
 ,{ "subscriber." }
 ,{ "The" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "interface" }
 ,{ "is" }
 ,{ "recorded" }
 ,{ "by" }
 ,{ "the" }
 ,{ "ConnectorBase" , & fmt_text_b }
 ,{ "class" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "SignalInterfaceConnector" }
} , & fmt_h4 , & align_h4 } ;

Text b21 = { {
 { "The" }
 ,{ "class" }
 ,{ "SignalInterfaceConnector" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "connector" }
 ,{ "class" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "the" }
 ,{ "SignalInterface" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Signal" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SimpleRotate {

Text b0 = { {
 { "SimpleRotate" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/SimpleRotate.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/SimpleRotate.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Two" }
 ,{ "simple" }
 ,{ "range" }
 ,{ "rotation" }
 ,{ "algorithms" }
 ,{ "are" }
 ,{ "presented" }
 ,{ "here." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "RangeRotateLeft()" , & fmt_text_b }
 ,{ "and" }
 ,{ "RangeRotateRight()" , & fmt_text_b }
 ,{ "permutate" }
 ,{ "the" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range." }
 ,{ "Permutation" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "swapping" }
 ,{ "elements." }
 ,{ "RangeRotateLeft()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "them" }
 ,{ "by" }
 ,{ "the" }
 ,{ "one" }
 ,{ "element" }
 ,{ "left," }
 ,{ "RangeRotateRight()" , & fmt_text_b }
 ,{ "rotates" }
 ,{ "them" }
 ,{ "by" }
 ,{ "the" }
 ,{ "one" }
 ,{ "element" }
 ,{ "right." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "SimpleRotateAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "two" }
 ,{ "rotation" }
 ,{ "algorithms." }
} , & fmt_text , & align_text } ;

Page page = { "page_SimpleRotate" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SingleBridge {

Text b0 = { {
 { "SingleBridge" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/SingleBridge.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/SingleBridge.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Bridge" , & fmt_text_a }
 ,{ "," }
 ,{ "but" }
 ,{ "implements" }
 ,{ "point-to-point" }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Once" }
 ,{ "a" }
 ,{ "SingleBridge" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "created," }
 ,{ "it" }
 ,{ "creates" }
 ,{ "and" }
 ,{ "registers" }
 ,{ "a" }
 ,{ "server" }
 ,{ "device" }
 ,{ "and" }
 ,{ "a" }
 ,{ "client" }
 ,{ "device." }
 ,{ "The" }
 ,{ "server" }
 ,{ "device" }
 ,{ "has" }
 ,{ "the" }
 ,{ "name" }
 ,{ "ServerName()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "client" }
 ,{ "device" }
 ,{ "has" }
 ,{ "the" }
 ,{ "name" }
 ,{ "ClientName()" , & fmt_text_b }
 ,{ "." }
 ,{ "Both" }
 ,{ "server" }
 ,{ "and" }
 ,{ "client" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "co-interface." }
 ,{ "The" }
 ,{ "port" }
 ,{ "numbering" }
 ,{ "is" }
 ,{ "trivial:" }
 ,{ "all" }
 ,{ "addresses" }
 ,{ "ports" }
 ,{ "are" }
 ,{ "zero." }
 ,{ "So" }
 ,{ "you" }
 ,{ "can" }
 ,{ "attach" }
 ,{ "to" }
 ,{ "these" }
 ,{ "devices" }
 ,{ "another" }
 ,{ "protocol" }
 ,{ "devices." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "allows" }
 ,{ "you" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "packet" }
 ,{ "formats" }
 ,{ "to" }
 ,{ "and" }
 ,{ "from" }
 ,{ "server." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "set" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "drop" }
 ,{ "rate" }
 ,{ "to" }
 ,{ "simulate" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "loss." }
 ,{ "Use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "setDropRate()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "drop" }
 ,{ "probability" }
 ,{ "is" }
 ,{ "drop_rate/drop_den" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "some" }
 ,{ "predefined" }
 ,{ "packet" }
 ,{ "formats." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "To" }
 ,{ "drive" }
 ,{ "the" }
 ,{ "SingleBridge" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "start" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_SingleBridge" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SingleEchoDevice {

Text b0 = { {
 { "SingleEchoDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/SingleEchoDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/SingleEchoDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "EchoDevice" , & fmt_text_a }
 ,{ "." }
 ,{ "But" }
 ,{ "it" }
 ,{ "is" }
 ,{ "working" }
 ,{ "with" }
 ,{ "an" }
 ,{ "endpoint" }
 ,{ "device," }
 ,{ "not" }
 ,{ "multipoint." }
 ,{ "It" }
 ,{ "also" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "ConnectionProc" , & fmt_text_b }
 ,{ "interface" }
 ,{ "to" }
 ,{ "count" }
 ,{ "connection" }
 ,{ "lost" }
 ,{ "events." }
 ,{ "Been" }
 ,{ "attached" }
 ,{ "this" }
 ,{ "device" }
 ,{ "simply" }
 ,{ "reflects" }
 ,{ "incoming" }
 ,{ "packets." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "useful" }
 ,{ "in" }
 ,{ "a" }
 ,{ "net" }
 ,{ "testing." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Constructor" }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "endpoint" }
 ,{ "device," }
 ,{ "registered" }
 ,{ "under" }
 ,{ "the" }
 ,{ "given" }
 ,{ "name." }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "usage." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getTraffic()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "traffic" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Page page = { "page_SingleEchoDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SingleHost {

Text b0 = { {
 { "SingleHost" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/SingleHost.h" , & fmt_text_Files_b }
 ,{ "CCore/src/SingleHost.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "SingleHost" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "SingleHost" , & fmt_text_b }
 ,{ "is" }
 ,{ "working" }
 ,{ "as" }
 ,{ "a" }
 ,{ "global" }
 ,{ "variable," }
 ,{ "it" }
 ,{ "points" }
 ,{ "to" }
 ,{ "some" }
 ,{ "object," }
 ,{ "required" }
 ,{ "as" }
 ,{ "a" }
 ,{ "global" }
 ,{ "resource." }
 ,{ "SingleHost" , & fmt_text_b }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "global" }
 ,{ "object." }
 ,{ "It" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "attach" }
 ,{ "and" }
 ,{ "detach" }
 ,{ "this" }
 ,{ "object" }
 ,{ "classes" }
 ,{ "SingleMaster" , & fmt_text_b }
 ,{ "and" }
 ,{ "SingleMaster_delete" , & fmt_text_b }
 ,{ "are" }
 ,{ "used." }
 ,{ "To" }
 ,{ "access" }
 ,{ "this" }
 ,{ "object" }
 ,{ "the" }
 ,{ "class" }
 ,{ "SingleHook" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "mutex." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "SingleHook" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "SingleHook" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"hook\"" }
 ,{ "an" }
 ,{ "object" }
 ,{ "from" }
 ,{ "a" }
 ,{ "SingleHost" , & fmt_text_b }
 ,{ "." }
 ,{ "Been" }
 ,{ "hooked," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "counted" }
 ,{ "as" }
 ,{ "used." }
 ,{ "The" }
 ,{ "object" }
 ,{ "life-time" }
 ,{ "is" }
 ,{ "extended" }
 ,{ "until" }
 ,{ "it" }
 ,{ "gets" }
 ,{ "out" }
 ,{ "of" }
 ,{ "use." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Constructor" }
 ,{ "does" }
 ,{ "hook," }
 ,{ "destructor" }
 ,{ "releases" }
 ,{ "the" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "host" }
 ,{ "does" }
 ,{ "not" }
 ,{ "have" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "object," }
 ,{ "the" }
 ,{ "hook" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "object" }
 ,{ "is" }
 ,{ "accessed" }
 ,{ "through" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Copy" }
 ,{ "constructor" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "duplicate" }
 ,{ "the" }
 ,{ "hook." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "hook" }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "same" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "SingleMaster" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "SingleMaster" , & fmt_text_b }
 ,{ "controls" }
 ,{ "a" }
 ,{ "SingleHost" , & fmt_text_b }
 ,{ "object." }
 ,{ "In" }
 ,{ "constructor" }
 ,{ "it" }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host." }
 ,{ "In" }
 ,{ "destructor" }
 ,{ "it" }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "object." }
 ,{ "Destructor" }
 ,{ "is" }
 ,{ "waiting" }
 ,{ "until" }
 ,{ "the" }
 ,{ "object" }
 ,{ "gets" }
 ,{ "out" }
 ,{ "of" }
 ,{ "use." }
 ,{ "The" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "constructed" }
 ,{ "before" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "call" }
 ,{ "and" }
 ,{ "be" }
 ,{ "destructed" }
 ,{ "after" }
 ,{ "the" }
 ,{ "SingleMaster" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "is" }
 ,{ "finished." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Constructor" }
 ,{ "tries" }
 ,{ "to" }
 ,{ "attach" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "host." }
 ,{ "The" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "name" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "AntiSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "host" }
 ,{ "has" }
 ,{ "already" }
 ,{ "an" }
 ,{ "attached" }
 ,{ "object," }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "then" }
 ,{ "destructor" }
 ,{ "does" }
 ,{ "nothing." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "method" }
 ,{ "guard()" , & fmt_text_b }
 ,{ "to" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "if" }
 ,{ "this" }
 ,{ "happens." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "SingleMaster_delete" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "SingleMaster_delete" , & fmt_text_b }
 ,{ "is" }
 ,{ "working" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SingleMaster" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "is:" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "using" }
 ,{ "a" }
 ,{ "pointer," }
 ,{ "not" }
 ,{ "a" }
 ,{ "reference." }
 ,{ "And" }
 ,{ "the" }
 ,{ "destructor" }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "object." }
 ,{ "So" }
 ,{ "the" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "created" }
 ,{ "using" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "new" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_SingleHost" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SIntFunc {

Text b0 = { {
 { "SIntFunc" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/SIntFunc.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/SIntFunc.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "SIntFunc" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "Currently" , & fmt_text_Alert }
 ,{ "it" , & fmt_text_Alert }
 ,{ "is" , & fmt_text_Alert }
 ,{ "assumed," , & fmt_text_Alert }
 ,{ "that" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "type" , & fmt_text_Alert }
 ,{ "uses" , & fmt_text_Alert }
 ,{ "2's" , & fmt_text_Alert }
 ,{ "complement" , & fmt_text_Alert }
 ,{ "representation." , & fmt_text_Alert }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "UInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "MaxPositiveAbs" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "absolute" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "(positive)" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "," }
 ,{ "represented" }
 ,{ "as" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "MinNegativeAbs" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "absolute" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "(negative)" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "," }
 ,{ "represented" }
 ,{ "as" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "MaxPositive" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "(positive)" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "MinNegative" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "(negative)" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "PosAbs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "+abs" , & fmt_text_b }
 ,{ "as" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "value." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "abs<=MaxPositiveAbs" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "NegAbs()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "-abs" , & fmt_text_b }
 ,{ "as" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "value." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "abs<=MinNegativeAbs" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "LShift()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "arithmetic" }
 ,{ "shift" }
 ,{ "left." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "a*2" , & fmt_text_b }
 ,{ "shift" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "no" }
 ,{ "overflow" }
 ,{ "occurred." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "RShift()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "arithmetic" }
 ,{ "shift" }
 ,{ "right." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "a/2" , & fmt_text_b }
 ,{ "shift" , & fmt_text_b }
 ,{ "rounded" }
 ,{ "down." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Mask()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "bitwise" }
 ,{ "AND." }
 ,{ "The" }
 ,{ "following" }
 ,{ "is" }
 ,{ "true:" }
 ,{ "(UInt)Mask(a,mask)" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "UInt(a)&mask" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "no" }
 ,{ "overflow" }
 ,{ "occurred." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "All" , & fmt_text_Alert }
 ,{ "these" , & fmt_text_Alert }
 ,{ "functions" , & fmt_text_Alert }
 ,{ "expect" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "proper" , & fmt_text_Alert }
 ,{ "compiler" , & fmt_text_Alert }
 ,{ "behavior" , & fmt_text_Alert }
 ,{ "on" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "target" , & fmt_text_Alert }
 ,{ "type." , & fmt_text_Alert }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Dist()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "from" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "b" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "MovePos()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "positive" }
 ,{ "direction" }
 ,{ "by" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "delta" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "the" }
 ,{ "upper" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "value" }
 ,{ "bound" }
 ,{ "is" }
 ,{ "not" }
 ,{ "crossed." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "a" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "MovePos(a,Dist(a,b))" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "MoveNeg()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "negative" }
 ,{ "direction" }
 ,{ "by" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "delta" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "SInt" , & fmt_text_b }
 ,{ "value" }
 ,{ "bound" }
 ,{ "is" }
 ,{ "not" }
 ,{ "crossed." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "a" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "," }
 ,{ "then" }
 ,{ "MoveNeg(b,Dist(a,b))" , & fmt_text_b }
 ,{ "==" , & fmt_text_b }
 ,{ "a" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Move()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "positive" }
 ,{ "direction" }
 ,{ "by" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "delta" , & fmt_text_b }
 ,{ "if" }
 ,{ "e" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "moves" }
 ,{ "a" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "negative" }
 ,{ "direction" }
 ,{ "by" }
 ,{ "the" }
 ,{ "distance" }
 ,{ "delta" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_SIntFunc" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SlowSem {

Text b0 = { {
 { "SlowSem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/SlowSem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/SlowSem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "SlowSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "semaphore." }
 ,{ "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "necessary" }
 ,{ "\"slow\"." }
 ,{ "This" }
 ,{ "variant" }
 ,{ "is" }
 ,{ "a" }
 ,{ "lightweight" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "the" }
 ,{ "OS" }
 ,{ "semaphore." }
 ,{ "This" }
 ,{ "semaphore" }
 ,{ "is" }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "building" }
 ,{ "block" }
 ,{ "in" }
 ,{ "implementations" }
 ,{ "of" }
 ,{ "other" }
 ,{ "synchronization" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SlowSem" , & fmt_text_b }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target-provided" }
 ,{ "Sys::Sem" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_SlowSem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SmallPrimes {

Text b0 = { {
 { "SmallPrimes" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/SmallPrimes.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/SmallPrimes.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "SmallPrimes" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "array" }
 ,{ "of" }
 ,{ "all" }
 ,{ "prime" }
 ,{ "numbers" }
 ,{ "below" }
 ,{ "SmallPrimesCap" , & fmt_text_b }
 ,{ "equals" }
 ,{ "1'000'000" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_SmallPrimes" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Sort {

Text b0 = { {
 { "Sort" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Sort.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Sort.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/sort" , & fmt_text_Files_b }
 ,{ "CCore/src/sort" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "For" }
 ,{ "the" }
 ,{ "theory" }
 ,{ "and" }
 ,{ "algorithm" }
 ,{ "descriptions" }
 ,{ "go" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Knuth" , & fmt_text_a }
 ,{ "." }
 ,{ "But" }
 ,{ "programming" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "theory." }
 ,{ "Mostly" }
 ,{ "it's" }
 ,{ "about" }
 ,{ "a" }
 ,{ "theory" }
 ,{ "implementation." }
 ,{ "And" }
 ,{ "a" }
 ,{ "good" }
 ,{ "theory" }
 ,{ "can" }
 ,{ "be" }
 ,{ "ruined" }
 ,{ "by" }
 ,{ "a" }
 ,{ "stupid" }
 ,{ "realization." }
 ,{ "That" }
 ,{ "is" }
 ,{ "why" }
 ,{ "we" }
 ,{ "use" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "our" }
 ,{ "own" }
 ,{ "sort" }
 ,{ "algorithms" }
 ,{ "implementations." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Sorting" }
 ,{ "is" }
 ,{ "a" }
 ,{ "permutating" }
 ,{ "a" }
 ,{ "given" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "to" }
 ,{ "arrange" }
 ,{ "them" }
 ,{ "in" }
 ,{ "the" }
 ,{ "ascending" }
 ,{ "order" }
 ,{ "relative" }
 ,{ "the" }
 ,{ "given" }
 ,{ "linear" }
 ,{ "order" }
 ,{ "relation." }
 ,{ "Any" }
 ,{ "permutation" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "by" }
 ,{ "a" }
 ,{ "series" }
 ,{ "of" }
 ,{ "transpositions" }
 ,{ "of" }
 ,{ "elements." }
 ,{ "So" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "implements" }
 ,{ "sorting" }
 ,{ "on" }
 ,{ "the" }
 ,{ "swap-based" }
 ,{ "basis." }
 ,{ "I.e." }
 ,{ "a" }
 ,{ "sorting" }
 ,{ "process" }
 ,{ "includes" }
 ,{ "the" }
 ,{ "performing" }
 ,{ "two" }
 ,{ "operations:" }
 ,{ "comparison" }
 ,{ "of" }
 ,{ "elements" }
 ,{ "and" }
 ,{ "swapping" }
 ,{ "them." }
 ,{ "That" }
 ,{ "is" }
 ,{ "a" }
 ,{ "difference" }
 ,{ "from" }
 ,{ "other" }
 ,{ "implementations," }
 ,{ "where" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "copied," }
 ,{ "not" }
 ,{ "swapped." }
 ,{ "As" }
 ,{ "was" }
 ,{ "mentioned" }
 ,{ "before," }
 ,{ "swap" }
 ,{ "is" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "copying" }
 ,{ "is" }
 ,{ "expensive," }
 ,{ "not" }
 ,{ "safe" }
 ,{ "and" }
 ,{ "not" }
 ,{ "always" }
 ,{ "possible." }
 ,{ "The" }
 ,{ "second" }
 ,{ "feature" }
 ,{ "of" }
 ,{ "our" }
 ,{ "sorts" }
 ,{ "is" }
 ,{ "they" }
 ,{ "takes" }
 ,{ "a" }
 ,{ "less" }
 ,{ "comparison" }
 ,{ "operations." }
 ,{ "This" }
 ,{ "is" }
 ,{ "important," }
 ,{ "because" }
 ,{ "in" }
 ,{ "real" }
 ,{ "applications" }
 ,{ "this" }
 ,{ "operation" }
 ,{ "can" }
 ,{ "be" }
 ,{ "quit" }
 ,{ "expensive." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "We" }
 ,{ "use" }
 ,{ "the" }
 ,{ "term" }
 ,{ "ran" , & fmt_text_b }
 ,{ "for" }
 ,{ "a" }
 ,{ "random" }
 ,{ "access" }
 ,{ "iterator." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "just" }
 ,{ "an" }
 ,{ "ordinary" }
 ,{ "pointer." }
 ,{ "Ran" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "access" }
 ,{ "sort" }
 ,{ "range" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "There" }
 ,{ "are" }
 ,{ "following" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s:" }
 ,{ "ShortSort" , & fmt_text_b }
 ,{ "," }
 ,{ "HeapSort" , & fmt_text_b }
 ,{ "," }
 ,{ "QuickSort" , & fmt_text_b }
 ,{ "," }
 ,{ "MergeSort" , & fmt_text_b }
 ,{ "," }
 ,{ "and" }
 ,{ "ParaQuickSort" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Sort" }
 ,{ "contexts" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "All" }
 ,{ "sort" }
 ,{ "algorithms" }
 ,{ "are" }
 ,{ "performed" }
 ,{ "in" }
 ,{ "a" }
 ,{ "sort" }
 ,{ "context." }
 ,{ "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "common" }
 ,{ "sort" }
 ,{ "contexts:" }
 ,{ "SortCtx" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "range" }
 ,{ "sorting" }
 ,{ "and" }
 ,{ "SortIndexCtx" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "index" }
 ,{ "sorting." }
 ,{ "An" }
 ,{ "object" }
 ,{ "of" }
 ,{ "a" }
 ,{ "sort" }
 ,{ "context" }
 ,{ "type" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "a" }
 ,{ "sort." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "SortCtx" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "common" }
 ,{ "sort" }
 ,{ "context." }
 ,{ "It" }
 ,{ "defines" }
 ,{ "two" }
 ,{ "methods:" }
 ,{ "swap()" , & fmt_text_b }
 ,{ "to" }
 ,{ "swap" }
 ,{ "objects" }
 ,{ "and" }
 ,{ "less()" , & fmt_text_b }
 ,{ "to" }
 ,{ "compare" }
 ,{ "objects," }
 ,{ "pointed" }
 ,{ "by" }
 ,{ "two" }
 ,{ "ran" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "SortIndexCtx" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "sort" }
 ,{ "context" }
 ,{ "for" }
 ,{ "index" }
 ,{ "sorting." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "range." }
 ,{ "In" }
 ,{ "index" }
 ,{ "sort" }
 ,{ "we" }
 ,{ "don't" }
 ,{ "modify" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "range," }
 ,{ "we" }
 ,{ "create" }
 ,{ "an" }
 ,{ "array" }
 ,{ "of" }
 ,{ "indexes" }
 ,{ "and" }
 ,{ "sort" }
 ,{ "it" }
 ,{ "instead." }
 ,{ "To" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "comparison" }
 ,{ "we" }
 ,{ "need" }
 ,{ "the" }
 ,{ "base" }
 ,{ "pointer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "range." }
 ,{ "The" }
 ,{ "ran" , & fmt_text_b }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Ind" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Sort" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Ran" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "ran" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "Ctx" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "sort" }
 ,{ "context" }
 ,{ "type," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SortCtx<Ran>" , & fmt_text_b }
 ,{ "." }
 ,{ "ptr" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "begin" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object" }
 ,{ "range," }
 ,{ "len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "range" }
 ,{ "length." }
 ,{ "ctx" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "sort" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "ShortSort" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "ShortSort" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "to" }
 ,{ "sort" }
 ,{ "short" }
 ,{ "ranges." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Currently" }
 ,{ "ShortSort" , & fmt_text_b }
 ,{ "provides" }
 ,{ "algorithms" }
 ,{ "to" }
 ,{ "sort" }
 ,{ "2," }
 ,{ "3," }
 ,{ "4" }
 ,{ "and" }
 ,{ "5" }
 ,{ "elements" }
 ,{ "sets." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "General" }
 ,{ "SortX()" , & fmt_text_b }
 ,{ "sorts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "set" }
 ,{ "of" }
 ,{ "objects," }
 ,{ "pointed" }
 ,{ "by" }
 ,{ "ran" , & fmt_text_b }
 ,{ "s" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "sort" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "(Default)" }
 ,{ "array" }
 ,{ "SortX()" , & fmt_text_b }
 ,{ "sorts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "range" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "X" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "(default)" }
 ,{ "sort" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Finally," }
 ,{ "the" }
 ,{ "algorithm" }
 ,{ "Sort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "combination" }
 ,{ "off" }
 ,{ "all" }
 ,{ "above." }
 ,{ "It" }
 ,{ "sorts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "short" }
 ,{ "array" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "or" }
 ,{ "default" }
 ,{ "sort" }
 ,{ "context." }
 ,{ "Sort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "length" }
 ,{ "is" }
 ,{ "too" }
 ,{ "large," }
 ,{ "and" }
 ,{ "true" , & fmt_text_b }
 ,{ "if" }
 ,{ "the" }
 ,{ "length" }
 ,{ "is" }
 ,{ "allowed." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "HeapSort" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "HeapSort" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "sort" }
 ,{ "algorithm." }
 ,{ "This" }
 ,{ "algorithm" }
 ,{ "has" }
 ,{ "a" }
 ,{ "guaranteed" }
 ,{ "O(N*log(N))" , & fmt_text_b }
 ,{ "complexity," }
 ,{ "but" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "the" }
 ,{ "fastest" }
 ,{ "in" }
 ,{ "a" }
 ,{ "common" }
 ,{ "case" }
 ,{ "and" }
 ,{ "it" }
 ,{ "is" }
 ,{ "CPU" }
 ,{ "cache" }
 ,{ "unfriendly." }
 ,{ "So" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "sort" }
 ,{ "usually" }
 ,{ "is" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "last" }
 ,{ "resort" }
 ,{ "to" }
 ,{ "speed" }
 ,{ "up" }
 ,{ "the" }
 ,{ "quick" }
 ,{ "sort" }
 ,{ "algorithm," }
 ,{ "which" }
 ,{ "is" }
 ,{ "faster" }
 ,{ "in" }
 ,{ "a" }
 ,{ "common" }
 ,{ "case," }
 ,{ "but" }
 ,{ "has" }
 ,{ "a" }
 ,{ "bigger" }
 ,{ "run" }
 ,{ "time" }
 ,{ "in" }
 ,{ "special" }
 ,{ "cases." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "QuickSort" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "QuickSort" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "quick" }
 ,{ "sort" }
 ,{ "algorithm." }
 ,{ "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "sort" }
 ,{ "algorithm," }
 ,{ "because" }
 ,{ "it" }
 ,{ "has" }
 ,{ "the" }
 ,{ "best" }
 ,{ "speed" }
 ,{ "in" }
 ,{ "a" }
 ,{ "common" }
 ,{ "case." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "CPU" }
 ,{ "cache" }
 ,{ "friendly," }
 ,{ "that" }
 ,{ "is" }
 ,{ "important" }
 ,{ "when" }
 ,{ "sorting" }
 ,{ "large" }
 ,{ "arrays." }
 ,{ "To" }
 ,{ "ensure" }
 ,{ "O(N*log(N))" , & fmt_text_b }
 ,{ "complexity," }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "switches" }
 ,{ "to" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "sort," }
 ,{ "if" }
 ,{ "the" }
 ,{ "quick" }
 ,{ "sort" }
 ,{ "goes" }
 ,{ "badly." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "MergeSort" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "MergeSort" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "merge" }
 ,{ "sort" }
 ,{ "algorithm." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "less" }
 ,{ "comparison" }
 ,{ "operations" }
 ,{ "than" }
 ,{ "the" }
 ,{ "quick" }
 ,{ "sort" }
 ,{ "in" }
 ,{ "common" }
 ,{ "case," }
 ,{ "but" }
 ,{ "more" }
 ,{ "swap" }
 ,{ "operations." }
 ,{ "So" }
 ,{ "in" }
 ,{ "general" }
 ,{ "QuickSort" , & fmt_text_b }
 ,{ "is" }
 ,{ "faster." }
 ,{ "However," }
 ,{ "in" }
 ,{ "some" }
 ,{ "cases" }
 ,{ "when" }
 ,{ "the" }
 ,{ "comparison" }
 ,{ "is" }
 ,{ "an" }
 ,{ "expensive," }
 ,{ "MergeSort" , & fmt_text_b }
 ,{ "is" }
 ,{ "preferred." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "MergeSort" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "index" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "twice," }
 ,{ "than" }
 ,{ "the" }
 ,{ "original" }
 ,{ "range" }
 ,{ "length." }
 ,{ "It" }
 ,{ "allocates" }
 ,{ "this" }
 ,{ "buffer" }
 ,{ "in" }
 ,{ "the" }
 ,{ "stack," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "short" }
 ,{ "enough," }
 ,{ "or" }
 ,{ "in" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "otherwise." }
 ,{ "If" }
 ,{ "the" }
 ,{ "allocation" }
 ,{ "has" }
 ,{ "failed," }
 ,{ "the" }
 ,{ "quick" }
 ,{ "sort" }
 ,{ "is" }
 ,{ "performed." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "methods" }
 ,{ "MedSort" , & fmt_text_b }
 ,{ "to" }
 ,{ "sort" }
 ,{ "with" }
 ,{ "a" }
 ,{ "stack" }
 ,{ "buffer." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "perform" }
 ,{ "sort" }
 ,{ "and" }
 ,{ "return" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "length" }
 ,{ "is" }
 ,{ "acceptable." }
 ,{ "Otherwise," }
 ,{ "they" }
 ,{ "return" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "ParaQuickSort" }
} , & fmt_h4 , & align_h4 } ;

Text b27 = { {
 { "ParaQuickSort" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "parallel" }
 ,{ "version" }
 ,{ "of" }
 ,{ "the" }
 ,{ "QuickSort" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "requires" }
 ,{ "multiple" }
 ,{ "core" }
 ,{ "CPU" }
 ,{ "to" }
 ,{ "be" }
 ,{ "faster." }
 ,{ "ParaQuickSort" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "working" , & fmt_text_a }
 ,{ "thread" , & fmt_text_a }
 ,{ "pool" , & fmt_text_a }
 ,{ "." }
 ,{ "To" }
 ,{ "get" }
 ,{ "a" }
 ,{ "speed" }
 ,{ "benefit" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "start" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Sort" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b29 = { {
 { "Finally," }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "common" }
 ,{ "sort" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "IncrSort" , & fmt_text_b }
 ,{ "sorts" }
 ,{ "in" }
 ,{ "increasing" }
 ,{ "order" }
 ,{ "relative" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "less" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "DecrSort" , & fmt_text_b }
 ,{ "sorts" }
 ,{ "in" }
 ,{ "decreasing" }
 ,{ "order" }
 ,{ "relative" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "less" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "The" }
 ,{ "following" }
 ,{ "functions" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "sort" }
 ,{ "a" }
 ,{ "reverse" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "The" }
 ,{ "order" }
 ,{ "of" }
 ,{ "sorting" }
 ,{ "is" }
 ,{ "a" }
 ,{ "native" }
 ,{ "reverse" }
 ,{ "range" }
 ,{ "order." }
 ,{ "I.e." }
 ,{ "after" }
 ,{ "the" }
 ,{ "Sort()" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "is" }
 ,{ "true:" }
 ,{ "range[0]" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "range[1]" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "range[2]" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "..." , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "special" }
 ,{ "sort" }
 ,{ "contexts" }
 ,{ "to" }
 ,{ "sort" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "less" , & fmt_text_b }
 ,{ "functor:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Sort" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SortUnique {

Text b0 = { {
 { "SortUnique" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/algon/SortUnique.h" , & fmt_text_Files_b }
 ,{ "CCore/src/algon/SortUnique.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "algorithms" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "operations" }
 ,{ "on" }
 ,{ "unique" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "some" }
 ,{ "range." }
 ,{ "When" }
 ,{ "you" }
 ,{ "have" }
 ,{ "some" }
 ,{ "range" }
 ,{ "of" }
 ,{ "elements," }
 ,{ "you" }
 ,{ "may" }
 ,{ "group" }
 ,{ "adjacent" }
 ,{ "elements," }
 ,{ "equals" }
 ,{ "in" }
 ,{ "some" }
 ,{ "sense," }
 ,{ "in" }
 ,{ "groups." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "may" }
 ,{ "process" }
 ,{ "either" }
 ,{ "first" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "each" }
 ,{ "groups," }
 ,{ "or" }
 ,{ "the" }
 ,{ "\"range\"" }
 ,{ "of" }
 ,{ "group" }
 ,{ "subranges." }
 ,{ "Usually," }
 ,{ "the" }
 ,{ "initial" }
 ,{ "range" }
 ,{ "is" }
 ,{ "sorted" }
 ,{ "first" }
 ,{ "to" }
 ,{ "make" }
 ,{ "equal" }
 ,{ "elements" }
 ,{ "adjacent." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ApplyUniqueAlgo" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "generalized" }
 ,{ "range" }
 ,{ "type." }
 ,{ "The" }
 ,{ "second" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "range" }
 ,{ "algorithm" }
 ,{ "package," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "BaseRangeAlgo<R>" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "Pattern" , & fmt_text_a }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "apply" }
 ,{ "functors." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ApplyUnique()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "first" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "unique" }
 ,{ "subranges." }
 ,{ "To" }
 ,{ "compare" }
 ,{ "elements" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ApplyUniqueBy()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "first" }
 ,{ "elements" }
 ,{ "of" }
 ,{ "unique" }
 ,{ "subranges." }
 ,{ "To" }
 ,{ "compare" }
 ,{ "elements" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "by" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "elements" }
 ,{ "and" }
 ,{ "results" }
 ,{ "are" }
 ,{ "compared" }
 ,{ "using" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ApplyUniqueRange()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "unique" }
 ,{ "subranges." }
 ,{ "To" }
 ,{ "compare" }
 ,{ "elements" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "ApplyUniqueRangeBy()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "unique" }
 ,{ "subranges." }
 ,{ "To" }
 ,{ "compare" }
 ,{ "elements" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "by" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "It" }
 ,{ "is" }
 ,{ "applied" }
 ,{ "to" }
 ,{ "elements" }
 ,{ "and" }
 ,{ "results" }
 ,{ "are" }
 ,{ "compared" }
 ,{ "using" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!=" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "In" }
 ,{ "these" }
 ,{ "algorithms" }
 ,{ "by" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor," }
 ,{ "but" }
 ,{ "func_init" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "initializer." }
 ,{ "In" }
 ,{ "per-element" }
 ,{ "algorithms" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "called" }
 ,{ "with" }
 ,{ "an" }
 ,{ "element" }
 ,{ "reference" }
 ,{ "argument," }
 ,{ "but" }
 ,{ "in" }
 ,{ "per-range" }
 ,{ "algorithms" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "is" }
 ,{ "called" }
 ,{ "with" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "type" }
 ,{ "R" , & fmt_text_b }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "There" }
 ,{ "are" }
 ,{ "number" }
 ,{ "of" }
 ,{ "\"stand-alone\"" }
 ,{ "derived" }
 ,{ "algorithms," }
 ,{ "including" }
 ,{ "variants," }
 ,{ "combined" }
 ,{ "with" }
 ,{ "a" }
 ,{ "sorting." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "first" }
 ,{ "group" }
 ,{ "is" }
 ,{ "sort" }
 ,{ "algorithms" }
 ,{ "with" }
 ,{ "a" }
 ,{ "\"by\"" }
 ,{ "functor." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Base" }
 ,{ "variants." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "\"By\"" }
 ,{ "variants." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Base" }
 ,{ "range" }
 ,{ "variants." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "\"By\"" }
 ,{ "range" }
 ,{ "variants." }
} , & fmt_text , & align_text } ;

Page page = { "page_SortUnique" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Space {

Text b0 = { {
 { "Space" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/Space.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/Space.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Page page = { "page_Space" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
} , NoColor , NoColor , null , null , null };

}

scope page_StartStop {

Text b0 = { {
 { "StartStop" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/StartStop.h" , & fmt_text_Files_b }
 ,{ "CCore/src/StartStop.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "StartStopObject" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "start" }
 ,{ "and" }
 ,{ "stop" }
 ,{ "active" }
 ,{ "objects." }
 ,{ "An" }
 ,{ "active" , & fmt_text_b }
 ,{ "object" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "one" }
 ,{ "or" }
 ,{ "several" }
 ,{ "associated" }
 ,{ "working" }
 ,{ "thread." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "working" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "started" }
 ,{ "by" }
 ,{ "the" }
 ,{ "constructor," }
 ,{ "and" }
 ,{ "destructor" }
 ,{ "ensures" }
 ,{ "it" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "An" }
 ,{ "additional" }
 ,{ "arguments" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "thread" }
 ,{ "properties" }
 ,{ "(see" }
 ,{ "Task" , & fmt_text_a }
 ,{ "constructor" , & fmt_text_a }
 ,{ "arguments" , & fmt_text_a }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "following" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "prepareRun()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "before" }
 ,{ "starting" }
 ,{ "a" }
 ,{ "thread." }
 ,{ "It" }
 ,{ "may" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "started." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "objRun()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "working" }
 ,{ "method," }
 ,{ "it" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "working" }
 ,{ "thread." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "completeRun()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "after" }
 ,{ "successful" }
 ,{ "start" }
 ,{ "of" }
 ,{ "the" }
 ,{ "thread." }
 ,{ "It" }
 ,{ "must" }
 ,{ "not" }
 ,{ "throw" }
 ,{ "exceptions." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "signalStop()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "signal" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "to" }
 ,{ "stop" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "completeStop()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "after" }
 ,{ "the" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "stopped." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "shown" }
 ,{ "order" }
 ,{ "(except" }
 ,{ "objRun()" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Page page = { "page_StartStop" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_StepEval {

Text b0 = { {
 { "StepEval" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/StepEval.h" , & fmt_text_Files_b }
 ,{ "CCore/src/StepEval.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "StepEval" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "execution" }
 ,{ "machine." }
 ,{ "It" }
 ,{ "executes" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "functional" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "some" }
 ,{ "undetermined" }
 ,{ "order." }
 ,{ "But" }
 ,{ "you" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "dependencies" }
 ,{ "between" }
 ,{ "these" }
 ,{ "functors," }
 ,{ "aka" }
 ,{ "evaluation" }
 ,{ "steps." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "dynamically" }
 ,{ "create" }
 ,{ "new" }
 ,{ "ones" }
 ,{ "during" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "StepEval" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "template," }
 ,{ "it" }
 ,{ "inherits" }
 ,{ "its" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "â€”" }
 ,{ "Ctx" , & fmt_text_b }
 ,{ "," }
 ,{ "which" }
 ,{ "is" }
 ,{ "some" }
 ,{ "execution" }
 ,{ "context." }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "forwards" }
 ,{ "its" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Ctx" , & fmt_text_b }
 ,{ "constructor." }
 ,{ "The" }
 ,{ "only" }
 ,{ "requirement" }
 ,{ "for" }
 ,{ "Ctx" , & fmt_text_b }
 ,{ "is" }
 ,{ "it" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getAlloc()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "method" }
 ,{ "must" }
 ,{ "return" }
 ,{ "some" }
 ,{ "alloc" , & fmt_text_a }
 ,{ "class" , & fmt_text_a }
 ,{ "object" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "functor" }
 ,{ "space" }
 ,{ "allocation/deallocation." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "default" }
 ,{ "class" }
 ,{ "DefaultHeapAlloc" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Once" }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "instance" }
 ,{ "of" }
 ,{ "the" }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "class," }
 ,{ "you" }
 ,{ "may" }
 ,{ "create" }
 ,{ "some" }
 ,{ "steps" }
 ,{ "for" }
 ,{ "execution" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "createStep()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "functor" , & fmt_text_a }
 ,{ "init" , & fmt_text_a }
 ,{ "object." }
 ,{ "The" }
 ,{ "optional" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "an" }
 ,{ "id" }
 ,{ "of" }
 ,{ "the" }
 ,{ "dependent" }
 ,{ "step." }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "ensures," }
 ,{ "that" }
 ,{ "the" }
 ,{ "dependent" }
 ,{ "step" }
 ,{ "is" }
 ,{ "executed" }
 ,{ "after," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "functor" }
 ,{ "exists" }
 ,{ "during" }
 ,{ "the" }
 ,{ "call" }
 ,{ "of" }
 ,{ "the" }
 ,{ "prerequisite" }
 ,{ "step." }
 ,{ "Each" }
 ,{ "step" }
 ,{ "has" }
 ,{ "an" }
 ,{ "id" }
 ,{ "of" }
 ,{ "the" }
 ,{ "transparent" }
 ,{ "type" }
 ,{ "StepId" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "method" }
 ,{ "createStep()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "RetStep" , & fmt_text_b }
 ,{ "with" }
 ,{ "two" }
 ,{ "fields:" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "created" }
 ,{ "functor" }
 ,{ "obj" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "step" }
 ,{ "id" }
 ,{ "id" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "this" }
 ,{ "id" }
 ,{ "in" }
 ,{ "further" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "createStep()" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "may" }
 ,{ "also" }
 ,{ "use" }
 ,{ "the" }
 ,{ "reference" }
 ,{ "to" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "in" }
 ,{ "prerequisite" }
 ,{ "steps" }
 ,{ "to" }
 ,{ "supply" }
 ,{ "some" }
 ,{ "arguments," }
 ,{ "for" }
 ,{ "example." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "method" }
 ,{ "run()" , & fmt_text_b }
 ,{ "executes" }
 ,{ "steps." }
 ,{ "Some" }
 ,{ "steps" }
 ,{ "may" }
 ,{ "remain" }
 ,{ "not" }
 ,{ "executed" }
 ,{ "due" }
 ,{ "to" }
 ,{ "cyclic" }
 ,{ "dependencies" }
 ,{ "on" }
 ,{ "gates." }
 ,{ "A" }
 ,{ "step" }
 ,{ "execution" }
 ,{ "is" }
 ,{ "the" }
 ,{ "call" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "functor." }
 ,{ "The" }
 ,{ "functor" }
 ,{ "may" }
 ,{ "have" }
 ,{ "one" }
 ,{ "of" }
 ,{ "three" }
 ,{ "forms:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "In" }
 ,{ "the" }
 ,{ "third" }
 ,{ "case" }
 ,{ "the" }
 ,{ "id" }
 ,{ "of" }
 ,{ "the" }
 ,{ "dependent" }
 ,{ "step" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "as" }
 ,{ "the" }
 ,{ "second" }
 ,{ "argument." }
 ,{ "You" }
 ,{ "may" }
 ,{ "create" }
 ,{ "additional" }
 ,{ "steps" }
 ,{ "with" }
 ,{ "this" }
 ,{ "id" }
 ,{ "and" }
 ,{ "these" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "executed" }
 ,{ "before" }
 ,{ "the" }
 ,{ "dependent" }
 ,{ "step." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Once" }
 ,{ "step" }
 ,{ "is" }
 ,{ "executed" }
 ,{ "it" }
 ,{ "is" }
 ,{ "destroyed." }
 ,{ "All" }
 ,{ "remaining" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "destroyed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "destructor." }
 ,{ "For" }
 ,{ "such" }
 ,{ "steps" }
 ,{ "the" }
 ,{ "special" }
 ,{ "method" }
 ,{ "final()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "run()" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "class:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Gate" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "obstacle" }
 ,{ "for" }
 ,{ "the" }
 ,{ "step" }
 ,{ "execution." }
 ,{ "You" }
 ,{ "may" }
 ,{ "create" }
 ,{ "a" }
 ,{ "gate" }
 ,{ "using" }
 ,{ "methods" }
 ,{ "createGate()" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "are" }
 ,{ "destroyed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "the" }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "destructor." }
 ,{ "The" }
 ,{ "gate" }
 ,{ "is" }
 ,{ "closed" }
 ,{ "right" }
 ,{ "after" }
 ,{ "the" }
 ,{ "creation." }
 ,{ "You" }
 ,{ "may" }
 ,{ "open" }
 ,{ "it" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "open()" , & fmt_text_b }
 ,{ "." }
 ,{ "Any" }
 ,{ "gated" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "not" }
 ,{ "executed" }
 ,{ "while" }
 ,{ "the" }
 ,{ "gate" }
 ,{ "is" }
 ,{ "closed." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "may" }
 ,{ "create" }
 ,{ "a" }
 ,{ "gated" }
 ,{ "step" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "createStep()" , & fmt_text_b }
 ,{ "of" , & fmt_text_u }
 ,{ "the" , & fmt_text_u }
 ,{ "gate" , & fmt_text_u }
 ,{ "." }
 ,{ "You" }
 ,{ "may" }
 ,{ "also" }
 ,{ "delay" }
 ,{ "execution" }
 ,{ "of" }
 ,{ "the" }
 ,{ "existing" }
 ,{ "step" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "delay()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "methods" }
 ,{ "createGate()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "of" }
 ,{ "them" }
 ,{ "has" }
 ,{ "no" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "normal" }
 ,{ "gate." }
 ,{ "The" }
 ,{ "second" }
 ,{ "has" }
 ,{ "two" }
 ,{ "arguments." }
 ,{ "Both" }
 ,{ "are" }
 ,{ "functor" }
 ,{ "initializers." }
 ,{ "This" }
 ,{ "gate" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "step," }
 ,{ "which" }
 ,{ "automatically" }
 ,{ "opens" }
 ,{ "the" }
 ,{ "gate" }
 ,{ "after" }
 ,{ "been" }
 ,{ "executed." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "initialize" }
 ,{ "this" }
 ,{ "step." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "initializes" }
 ,{ "a" }
 ,{ "prerequisite" }
 ,{ "step." }
 ,{ "This" }
 ,{ "prerequisite" }
 ,{ "can" }
 ,{ "be" }
 ,{ "\"boosted\"" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "boost()" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "gate." }
 ,{ "Normally" }
 ,{ "you" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "do" }
 ,{ "it" }
 ,{ "manually." }
 ,{ "Gate" }
 ,{ "is" }
 ,{ "boosted" }
 ,{ "automatically" }
 ,{ "once" }
 ,{ "it" }
 ,{ "is" }
 ,{ "closed" }
 ,{ "and" }
 ,{ "a" }
 ,{ "gated" }
 ,{ "step" }
 ,{ "is" }
 ,{ "created." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "An" }
 ,{ "example" }
} , & fmt_h2 , & align_h2 } ;

Text b12 = { {
 { "The" }
 ,{ "test" }
 ,{ "test2053.StepEval.cpp" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "better" }
 ,{ "understand" }
 ,{ "how" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "and" }
 ,{ "what" }
 ,{ "is" }
 ,{ "it" }
 ,{ "good" }
 ,{ "for." }
 ,{ "In" }
 ,{ "this" }
 ,{ "test" }
 ,{ "we" }
 ,{ "create" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "variables" }
 ,{ "and" }
 ,{ "associated" }
 ,{ "expressions" }
 ,{ "and" }
 ,{ "evaluate" }
 ,{ "them." }
 ,{ "An" }
 ,{ "expression" }
 ,{ "can" }
 ,{ "refer" }
 ,{ "to" }
 ,{ "another" }
 ,{ "variable," }
 ,{ "so" }
 ,{ "the" }
 ,{ "order" }
 ,{ "of" }
 ,{ "evaluation" }
 ,{ "is" }
 ,{ "hardly" }
 ,{ "determined" }
 ,{ "in" }
 ,{ "general" }
 ,{ "case." }
 ,{ "And" }
 ,{ "cyclic" }
 ,{ "dependencies" }
 ,{ "can" }
 ,{ "make" }
 ,{ "this" }
 ,{ "task" }
 ,{ "impossible." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "An" }
 ,{ "expression" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Expr" , & fmt_text_b }
 ,{ "," }
 ,{ "these" }
 ,{ "structures" }
 ,{ "forms" }
 ,{ "a" }
 ,{ "polymorphic" }
 ,{ "linked" }
 ,{ "set" }
 ,{ "using" }
 ,{ "the" }
 ,{ "AnyPtr" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "field" }
 ,{ "ptr" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "inner" }
 ,{ "structures:" }
 ,{ "Const" , & fmt_text_b }
 ,{ "," }
 ,{ "Var" , & fmt_text_b }
 ,{ "," }
 ,{ "Neg" , & fmt_text_b }
 ,{ "," }
 ,{ "Add" , & fmt_text_b }
 ,{ "and" }
 ,{ "Mul" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "structures" }
 ,{ "represents" }
 ,{ "correspondent" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "contains" }
 ,{ "arguments." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "The" }
 ,{ "variable" }
 ,{ "set" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "an" }
 ,{ "array" }
 ,{ "in" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Context" , & fmt_text_b }
 ,{ "." }
 ,{ "Elements" }
 ,{ "of" }
 ,{ "this" }
 ,{ "array" }
 ,{ "are" }
 ,{ "structure." }
 ,{ "The" }
 ,{ "field" }
 ,{ "value" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "variable" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "evaluated" }
 ,{ "from" }
 ,{ "the" }
 ,{ "expression," }
 ,{ "pointed" }
 ,{ "by" }
 ,{ "another" }
 ,{ "field" }
 ,{ "expr" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "third" }
 ,{ "field" }
 ,{ "gate" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "gate," }
 ,{ "this" }
 ,{ "gate" }
 ,{ "is" }
 ,{ "opened" }
 ,{ "once" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "variable" }
 ,{ "is" }
 ,{ "evaluated" }
 ,{ "and" }
 ,{ "the" }
 ,{ "value" }
 ,{ "is" }
 ,{ "recorded." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "family" }
 ,{ "of" }
 ,{ "inner" }
 ,{ "structures" }
 ,{ "NegStep" , & fmt_text_b }
 ,{ "," }
 ,{ "..." }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "evaluation" }
 ,{ "steps." }
 ,{ "Each" }
 ,{ "of" }
 ,{ "them" }
 ,{ "contains" }
 ,{ "fields" }
 ,{ "for" }
 ,{ "operation" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "reference" }
 ,{ "where" }
 ,{ "the" }
 ,{ "result" }
 ,{ "will" }
 ,{ "be" }
 ,{ "stored." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "These" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "simple:" }
 ,{ "they" }
 ,{ "take" }
 ,{ "arguments," }
 ,{ "perform" }
 ,{ "the" }
 ,{ "required" }
 ,{ "arithmetic" }
 ,{ "operation" }
 ,{ "and" }
 ,{ "store" }
 ,{ "the" }
 ,{ "result" }
 ,{ "(plus" }
 ,{ "some" }
 ,{ "extra" }
 ,{ "actions)." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "This" }
 ,{ "step" }
 ,{ "is" }
 ,{ "more" }
 ,{ "complicated." }
 ,{ "It" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "given" }
 ,{ "expression," }
 ,{ "determines" }
 ,{ "the" }
 ,{ "exact" }
 ,{ "type" }
 ,{ "of" }
 ,{ "it" }
 ,{ "and" }
 ,{ "creates" }
 ,{ "required" }
 ,{ "substeps" }
 ,{ "to" }
 ,{ "evaluate" }
 ,{ "it." }
 ,{ "For" }
 ,{ "example," }
 ,{ "to" }
 ,{ "evaluate" }
 ,{ "the" }
 ,{ "Add" , & fmt_text_b }
 ,{ "expression" }
 ,{ "three" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "created:" }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "First," }
 ,{ "the" }
 ,{ "step" }
 ,{ "AddStep" , & fmt_text_b }
 ,{ "is" }
 ,{ "created." }
 ,{ "The" }
 ,{ "dependent" }
 ,{ "step" }
 ,{ "is" }
 ,{ "propagated" }
 ,{ "to" }
 ,{ "it." }
 ,{ "Then" }
 ,{ "two" }
 ,{ "steps" }
 ,{ "are" }
 ,{ "created" }
 ,{ "to" }
 ,{ "evaluate" }
 ,{ "arguments." }
 ,{ "These" }
 ,{ "steps" }
 ,{ "have" }
 ,{ "the" }
 ,{ "AddStep" , & fmt_text_b }
 ,{ "as" }
 ,{ "the" }
 ,{ "dependent" }
 ,{ "step," }
 ,{ "so" }
 ,{ "they" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "functor" }
 ,{ "object" }
 ,{ "to" }
 ,{ "store" }
 ,{ "their" }
 ,{ "results." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "The" }
 ,{ "GetVarStep" , & fmt_text_b }
 ,{ "step" }
 ,{ "is" }
 ,{ "created" }
 ,{ "gated" }
 ,{ "for" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "variable" }
 ,{ "gate," }
 ,{ "so" }
 ,{ "it" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "after" }
 ,{ "this" }
 ,{ "variable" }
 ,{ "gets" }
 ,{ "a" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "This" }
 ,{ "step" }
 ,{ "is" }
 ,{ "created" }
 ,{ "per" }
 ,{ "each" }
 ,{ "variable" }
 ,{ "as" }
 ,{ "the" }
 ,{ "opening" }
 ,{ "gate" }
 ,{ "step." }
 ,{ "It" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "particular" }
 ,{ "and" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "method" }
 ,{ "final()" , & fmt_text_b }
 ,{ "to" }
 ,{ "report" }
 ,{ "about" }
 ,{ "cyclic" }
 ,{ "dependency." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "And" }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "evaluation" }
 ,{ "process." }
 ,{ "This" }
 ,{ "method" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "StepEval" , & fmt_text_b }
 ,{ "object," }
 ,{ "then" }
 ,{ "per" }
 ,{ "each" }
 ,{ "variable" }
 ,{ "the" }
 ,{ "gate" }
 ,{ "is" }
 ,{ "created" }
 ,{ "with" }
 ,{ "two" }
 ,{ "associated" }
 ,{ "steps:" }
 ,{ "expression" }
 ,{ "step" }
 ,{ "to" }
 ,{ "evaluate" }
 ,{ "the" }
 ,{ "variable" }
 ,{ "and" }
 ,{ "the" }
 ,{ "GateFinalStep" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "method" }
 ,{ "run()" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Page page = { "page_StepEval" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_String {

Text b0 = { {
 { "Strings" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/String.h" , & fmt_text_Files_b }
 ,{ "CCore/src/String.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "The" }
 ,{ "class" }
 ,{ "String" , & fmt_text_b }
 ,{ "implements" }
 ,{ "immutable," }
 ,{ "atomically" }
 ,{ "reference" }
 ,{ "counted" }
 ,{ "string." }
 ,{ "The" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "very" }
 ,{ "simple," }
 ,{ "because" }
 ,{ "it" }
 ,{ "uses" }
 ,{ "AtomicRefArray" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "String" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "zero-terminated." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "String" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "constructed" }
 ,{ "from" }
 ,{ "a" }
 ,{ "character" }
 ,{ "range." }
 ,{ "It" }
 ,{ "also" }
 ,{ "has" }
 ,{ "a" }
 ,{ "custom" }
 ,{ "Builder" , & fmt_text_b }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "String" , & fmt_text_b }
 ,{ "is" }
 ,{ "copyable," }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
 ,{ "These" }
 ,{ "operations" }
 ,{ "are" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "String" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "read-only" }
 ,{ "Range" , & fmt_text_b }
 ,{ "Access" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "modify()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "the" }
 ,{ "string" }
 ,{ "modifiable" }
 ,{ "providing" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "string" }
 ,{ "buffer" }
 ,{ "(buf" }
 ,{ "you" }
 ,{ "cannot" }
 ,{ "change" }
 ,{ "the" }
 ,{ "string" }
 ,{ "length)." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "String" , & fmt_text_b }
 ,{ "is" }
 ,{ "printable," }
 ,{ "usual" }
 ,{ "string" }
 ,{ "print" }
 ,{ "options" }
 ,{ "are" }
 ,{ "accepted." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "String::StaticObject<CC>" , & fmt_text_b }
 ,{ "makes" }
 ,{ "a" }
 ,{ "static" }
 ,{ "object," }
 ,{ "identified" }
 ,{ "by" }
 ,{ "the" }
 ,{ "character" }
 ,{ "sequence" }
 ,{ "CC" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "sequence" }
 ,{ "determines" }
 ,{ "the" }
 ,{ "string" }
 ,{ "text." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "You" }
 ,{ "can" }
 ,{ "get" }
 ,{ "a" }
 ,{ "reference" }
 ,{ "on" }
 ,{ "the" }
 ,{ "static" }
 ,{ "string" }
 ,{ "using" }
 ,{ "the" }
 ,{ "user-defined" }
 ,{ "literal" }
 ,{ "\"\"_str" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "PrintString" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "PrintString" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "print" }
 ,{ "into" }
 ,{ "\"string\"." }
 ,{ "Printed" }
 ,{ "characters" }
 ,{ "are" }
 ,{ "accumulated" }
 ,{ "in" }
 ,{ "some" }
 ,{ "internal" }
 ,{ "memory" }
 ,{ "storage," }
 ,{ "once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "finished," }
 ,{ "you" }
 ,{ "can" }
 ,{ "build" }
 ,{ "a" }
 ,{ "string" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "close()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "In" }
 ,{ "a" }
 ,{ "constructor" }
 ,{ "call" }
 ,{ "you" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "string" }
 ,{ "length" }
 ,{ "and" }
 ,{ "the" }
 ,{ "frame" }
 ,{ "length" }
 ,{ "(printed" }
 ,{ "characters" }
 ,{ "are" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "a" }
 ,{ "list" }
 ,{ "of" }
 ,{ "frames" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "length)." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "cleanup()" , & fmt_text_b }
 ,{ "erases" }
 ,{ "all" }
 ,{ "printed" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "close()" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "string" }
 ,{ "from" }
 ,{ "printed" }
 ,{ "characters." }
 ,{ "You" }
 ,{ "may" }
 ,{ "continue" }
 ,{ "printing" }
 ,{ "after" }
 ,{ "a" }
 ,{ "call" }
 ,{ "of" }
 ,{ "this" }
 ,{ "method," }
 ,{ "extending" }
 ,{ "the" }
 ,{ "printed" }
 ,{ "sequence." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Stringf()" }
 ,{ "and" }
 ,{ "StringCat()" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "Stringf()" , & fmt_text_b }
 ,{ "and" }
 ,{ "StringCat()" , & fmt_text_b }
 ,{ "are" }
 ,{ "convenient" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "string," }
 ,{ "using" }
 ,{ "printing:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "They" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "PrintString" , & fmt_text_b }
 ,{ "." }
 ,{ "Stringf()" , & fmt_text_b }
 ,{ "does" }
 ,{ "usual" }
 ,{ "formatted" }
 ,{ "printing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "as" }
 ,{ "a" }
 ,{ "String" , & fmt_text_b }
 ,{ "." }
 ,{ "StringCat()" , & fmt_text_b }
 ,{ "concatenates" }
 ,{ "printed" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Concatenation" }
 ,{ "of" }
 ,{ "string-like" }
 ,{ "objects" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "You" }
 ,{ "can" }
 ,{ "add" }
 ,{ "an" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "string," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "castable" }
 ,{ "to" }
 ,{ "const" , & fmt_text_b }
 ,{ "char" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "," }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "or" }
 ,{ "the" }
 ,{ "Range_const()" , & fmt_text_b }
 ,{ "is" }
 ,{ "applied" }
 ,{ "and" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "PtrLen<const" , & fmt_text_b }
 ,{ "char>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "To" }
 ,{ "sum" }
 ,{ "more" }
 ,{ "than" }
 ,{ "two" }
 ,{ "such" }
 ,{ "objects," }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "StringSum()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_String" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_StrKey {

Text b0 = { {
 { "StrKey" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/StrKey.h" , & fmt_text_Files_b }
 ,{ "CCore/src/StrKey.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "StrKey" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "class." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "combination" }
 ,{ "of" }
 ,{ "the" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "class" }
 ,{ "and" }
 ,{ "the" }
 ,{ "32-bit" }
 ,{ "hash" }
 ,{ "code." }
 ,{ "This" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "key" }
 ,{ "type" }
 ,{ "to" }
 ,{ "build" }
 ,{ "maps." }
 ,{ "It" }
 ,{ "speeds-up" }
 ,{ "string" }
 ,{ "comparison." }
 ,{ "The" }
 ,{ "constructor" }
 ,{ "calculates" }
 ,{ "and" }
 ,{ "stores" }
 ,{ "the" }
 ,{ "hash" }
 ,{ "code" }
 ,{ "of" }
 ,{ "the" }
 ,{ "string." }
 ,{ "The" }
 ,{ "comparison" }
 ,{ "method" }
 ,{ "compares" }
 ,{ "hash" }
 ,{ "codes" }
 ,{ "first" }
 ,{ "and" }
 ,{ "strings" }
 ,{ "after." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "StringKey" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "String" , & fmt_text_b }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "StrKey" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "holds" }
 ,{ "not" }
 ,{ "a" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "a" }
 ,{ "String" , & fmt_text_b }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "both" }
 ,{ "these" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "string" }
 ,{ "keyed" }
 ,{ "map." }
} , & fmt_text , & align_text } ;

Page page = { "page_StrKey" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_StrMap {

Text b0 = { {
 { "StrMap" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/StrMap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/StrMap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "StrMap" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "static" }
 ,{ "string" }
 ,{ "indexed" }
 ,{ "map." }
 ,{ "The" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "must" }
 ,{ "have" }
 ,{ "a" }
 ,{ "nothrow" }
 ,{ "destructor" }
 ,{ "and" }
 ,{ "be" }
 ,{ "swappable." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "then" }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Constructor" }
 ,{ "of" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "building" }
 ,{ "the" }
 ,{ "map." }
 ,{ "It" }
 ,{ "may" }
 ,{ "add" }
 ,{ "map" }
 ,{ "elements" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "add()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "key," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "persistent" }
 ,{ "for" }
 ,{ "the" }
 ,{ "map" }
 ,{ "life-time" }
 ,{ "duration." }
 ,{ "Other" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "T" , & fmt_text_b }
 ,{ "constructor." }
 ,{ "To" }
 ,{ "finish" }
 ,{ "the" }
 ,{ "map" }
 ,{ "building" }
 ,{ "the" }
 ,{ "method" }
 ,{ "complete()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Utilities" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "common" }
 ,{ "algorithms" }
 ,{ "of" }
 ,{ "incremental" }
 ,{ "search" }
 ,{ "a" }
 ,{ "given" }
 ,{ "string" }
 ,{ "in" }
 ,{ "a" }
 ,{ "sorted" }
 ,{ "range" }
 ,{ "of" }
 ,{ "strings." }
 ,{ "Both" }
 ,{ "operates" }
 ,{ "on" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "each" }
 ,{ "object" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "property" }
 ,{ "and" }
 ,{ "the" }
 ,{ "range" }
 ,{ "is" }
 ,{ "sorted" }
 ,{ "in" }
 ,{ "respect" }
 ,{ "to" }
 ,{ "this" }
 ,{ "property." }
 ,{ "To" }
 ,{ "extract" }
 ,{ "this" }
 ,{ "property" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "by" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "StrNextFrame()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "of" }
 ,{ "objects," }
 ,{ "which" }
 ,{ "string" }
 ,{ "has" }
 ,{ "the" }
 ,{ "ind" , & fmt_text_b }
 ,{ "-th" }
 ,{ "character" }
 ,{ "equals" }
 ,{ "ch" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "ind" , & fmt_text_b }
 ,{ "-length" }
 ,{ "prefix" }
 ,{ "of" }
 ,{ "all" }
 ,{ "strings" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same." }
 ,{ "The" }
 ,{ "resulting" }
 ,{ "subrange" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "objects" }
 ,{ "with" }
 ,{ "ind+1" , & fmt_text_b }
 ,{ "-length" }
 ,{ "prefix" }
 ,{ "of" }
 ,{ "all" }
 ,{ "strings" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "StrLastFrame()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "subrange" }
 ,{ "of" }
 ,{ "objects," }
 ,{ "which" }
 ,{ "string" }
 ,{ "has" }
 ,{ "the" }
 ,{ "length" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "len" , & fmt_text_b }
 ,{ "-length" }
 ,{ "prefix" }
 ,{ "of" }
 ,{ "all" }
 ,{ "strings" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same." }
} , & fmt_text , & align_text } ;

Page page = { "page_StrMap" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_StrParse {

Text b0 = { {
 { "Simple" }
 ,{ "string" }
 ,{ "parsing" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/StrParse.h" , & fmt_text_Files_b }
 ,{ "CCore/src/StrParse.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "for" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "string" }
 ,{ "parsing." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used," }
 ,{ "for" }
 ,{ "example," }
 ,{ "in" }
 ,{ "the" }
 ,{ "parsing" }
 ,{ "of" }
 ,{ "format" }
 ,{ "strings." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "DecValue" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "DecValue" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "calculates" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "a" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "nok" , & fmt_text_b }
 ,{ "is" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "character" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "value" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "decimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character" }
 ,{ "or" }
 ,{ "0." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "is" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "character" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "operator" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "decimal" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character" }
 ,{ "or" }
 ,{ "0." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "StrParse" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "StrParse" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "string-based" }
 ,{ "\"character" }
 ,{ "stream\"" }
 ,{ "class." }
 ,{ "Its" }
 ,{ "interface" }
 ,{ "matches" }
 ,{ "parser" }
 ,{ "functions" }
 ,{ "requirements," }
 ,{ "so" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "them." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "stream" }
 ,{ "from" }
 ,{ "the" }
 ,{ "pair" }
 ,{ "ptr" , & fmt_text_b }
 ,{ "," }
 ,{ "lim" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "stream" }
 ,{ "from" }
 ,{ "a" }
 ,{ "StrLen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "return" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "failed." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Peek" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "see" }
 ,{ "the" }
 ,{ "current" }
 ,{ "stream" }
 ,{ "character," }
 ,{ "if" }
 ,{ "any." }
 ,{ "Failed" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "operator" , & fmt_text_b }
 ,{ "++" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "fail()" , & fmt_text_b }
 ,{ "fails" }
 ,{ "the" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "finish()" , & fmt_text_b }
 ,{ "fails" }
 ,{ "the" }
 ,{ "stream," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "empty," }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "fail" }
 ,{ "flag" }
 ,{ "as" }
 ,{ "a" }
 ,{ "NegBool" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Parse" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "Parse" }
 ,{ "functions" }
 ,{ "work" }
 ,{ "with" }
 ,{ "some" }
 ,{ "\"character" }
 ,{ "stream" }
 ,{ "device\":" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "CharPeekType" , & fmt_text_b }
 ,{ "covers" }
 ,{ "such" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Peek" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "see" }
 ,{ "the" }
 ,{ "current" }
 ,{ "stream" }
 ,{ "character," }
 ,{ "if" }
 ,{ "any." }
 ,{ "Failed" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "empty." }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "is" }
 ,{ "true," }
 ,{ "if" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "is" }
 ,{ "empty." }
 ,{ "Otherwise," }
 ,{ "operator" , & fmt_text_b }
 ,{ "*" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "current" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "operator" , & fmt_text_b }
 ,{ "++" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "fail()" , & fmt_text_b }
 ,{ "fails" }
 ,{ "the" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "ParseChar()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "from" }
 ,{ "the" }
 ,{ "stream," }
 ,{ "or" }
 ,{ "fails" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "ParseChar_try()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "extract" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character" }
 ,{ "from" }
 ,{ "the" }
 ,{ "stream," }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "the" }
 ,{ "success" }
 ,{ "of" }
 ,{ "the" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "ParseChar_empty()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "next" }
 ,{ "character" }
 ,{ "from" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "and" }
 ,{ "puts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ret" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "available." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "defval" , & fmt_text_b }
 ,{ "is" }
 ,{ "put." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "ParseUInt()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "unsigned" }
 ,{ "number" }
 ,{ "from" }
 ,{ "the" }
 ,{ "stream," }
 ,{ "converts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "puts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ret" , & fmt_text_b }
 ,{ "." }
 ,{ "Stream" }
 ,{ "is" }
 ,{ "failed" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "The" }
 ,{ "number" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "range," }
 ,{ "which" }
 ,{ "is" }
 ,{ "a" }
 ,{ "subset" }
 ,{ "of" }
 ,{ "the" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "value" }
 ,{ "range." }
 ,{ "Types" }
 ,{ "UInt1" , & fmt_text_b }
 ,{ "and" }
 ,{ "UInt2" , & fmt_text_b }
 ,{ "are" }
 ,{ "not" }
 ,{ "necessary" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "types," }
 ,{ "but" }
 ,{ "values" }
 ,{ "minval" , & fmt_text_b }
 ,{ "and" }
 ,{ "maxval" , & fmt_text_b }
 ,{ "are" }
 ,{ "implicitly" }
 ,{ "converted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "UInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "ParseUInt_empty()" , & fmt_text_b }
 ,{ "works" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "ParseUInt()" , & fmt_text_b }
 ,{ ".The" }
 ,{ "difference" }
 ,{ "is" }
 ,{ "if" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "does" }
 ,{ "not" }
 ,{ "begin" }
 ,{ "with" }
 ,{ "a" }
 ,{ "digit," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "defval" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "ParseSpace()" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "Files" }
 ,{ "CCore/inc/CharProp.h" , & fmt_text_Files_b }
 ,{ "CCore/src/CharProp.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b31 = { {
 { "This" }
 ,{ "function" }
 ,{ "extracts" }
 ,{ "space" , & fmt_text_a }
 ,{ "characters" , & fmt_text_a }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "end" }
 ,{ "of" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "or" }
 ,{ "the" }
 ,{ "first" }
 ,{ "non-space" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Page page = { "page_StrParse" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b31 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_StrToChar {

Text b0 = { {
 { "StrToChar" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/StrToChar.h" , & fmt_text_Files_b }
 ,{ "CCore/src/StrToChar.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "two" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "convert" }
 ,{ "Char" , & fmt_text_b }
 ,{ "text" }
 ,{ "into" }
 ,{ "char" , & fmt_text_b }
 ,{ "text" }
 ,{ "and" }
 ,{ "vise" }
 ,{ "versa." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "these" }
 ,{ "classes" }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "and" }
 ,{ "performes" }
 ,{ "the" }
 ,{ "required" }
 ,{ "conversion" }
 ,{ "between" }
 ,{ "Unicode" }
 ,{ "and" }
 ,{ "UTF8" }
 ,{ "representations." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "throwns" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "broken" }
 ,{ "UTF8" }
 ,{ "sequence." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "In" }
 ,{ "ASCII" }
 ,{ "mode" }
 ,{ "these" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "trivial." }
} , & fmt_text , & align_text } ;

Page page = { "page_StrToChar" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Swap {

Text b0 = { {
 { "The" }
 ,{ "Swap" }
 ,{ "idiom" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Swap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Swap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Swap" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "just" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "functions" }
 ,{ "and" }
 ,{ "classes," }
 ,{ "but" }
 ,{ "a" }
 ,{ "fundamental" }
 ,{ "idiom." }
 ,{ "Swapping" }
 ,{ "means" }
 ,{ "an" }
 ,{ "exchanging" }
 ,{ "object" }
 ,{ "states" }
 ,{ "as" }
 ,{ "the" }
 ,{ "one" }
 ,{ "operation." }
 ,{ "Objects" }
 ,{ "of" }
 ,{ "a" }
 ,{ "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Types" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "copied" }
 ,{ "efficiently." }
 ,{ "In" }
 ,{ "fact," }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "generalized" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "such" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "types." }
 ,{ "Efficiency" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "another" }
 ,{ "terms" }
 ,{ "as" }
 ,{ "the" }
 ,{ "O(1)-nothrow" , & fmt_text_Att }
 ,{ "property" , & fmt_text_Att }
 ,{ "." }
 ,{ "But" }
 ,{ "for" }
 ,{ "many" }
 ,{ "types" }
 ,{ "(actually," }
 ,{ "for" }
 ,{ "most" }
 ,{ "of" }
 ,{ "them)" }
 ,{ "copying" }
 ,{ "is" }
 ,{ "either" }
 ,{ "not" }
 ,{ "logically" }
 ,{ "possible," }
 ,{ "or" }
 ,{ "not" }
 ,{ "efficient," }
 ,{ "because" }
 ,{ "requires" }
 ,{ "duplication" }
 ,{ "of" }
 ,{ "a" }
 ,{ "large" }
 ,{ "state," }
 ,{ "and" }
 ,{ "that" }
 ,{ "is" }
 ,{ "time" }
 ,{ "and" }
 ,{ "space" }
 ,{ "expensive" }
 ,{ "and" }
 ,{ "may" }
 ,{ "fail." }
 ,{ "So" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "copying" }
 ,{ "we" }
 ,{ "should" }
 ,{ "use" }
 ,{ "moving" }
 ,{ "or" }
 ,{ "swapping" }
 ,{ "whenever" }
 ,{ "possible." }
 ,{ "For" }
 ,{ "example," }
 ,{ "to" }
 ,{ "return" }
 ,{ "a" }
 ,{ "result" }
 ,{ "from" }
 ,{ "a" }
 ,{ "function:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Swap" , & fmt_text_b }
 ,{ "is" }
 ,{ "derivable" , & fmt_text_b }
 ,{ ":" }
 ,{ "if" }
 ,{ "the" }
 ,{ "state" }
 ,{ "is" }
 ,{ "a" }
 ,{ "composition" }
 ,{ "of" }
 ,{ "states" }
 ,{ "and" }
 ,{ "each" }
 ,{ "of" }
 ,{ "them" }
 ,{ "is" }
 ,{ "swappable," }
 ,{ "then" }
 ,{ "the" }
 ,{ "whole" }
 ,{ "state" }
 ,{ "is" }
 ,{ "swappable:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "But" }
 ,{ "what" }
 ,{ "the" }
 ,{ "most" }
 ,{ "important," }
 ,{ "Resource" , & fmt_text_b }
 ,{ "Host" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "swappable." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "That" }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "cause" }
 ,{ "why" }
 ,{ "Swap" , & fmt_text_b }
 ,{ "is" }
 ,{ "applicable" }
 ,{ "to" }
 ,{ "the" }
 ,{ "wide" }
 ,{ "range" }
 ,{ "of" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "How" }
 ,{ "to" }
 ,{ "use" }
} , & fmt_h2 , & align_h2 } ;

Text b7 = { {
 { "Well," }
 ,{ "you" }
 ,{ "already" }
 ,{ "known" }
 ,{ "how" }
 ,{ "to" }
 ,{ "use" }
 ,{ "Swap" , & fmt_text_b }
 ,{ "(see" }
 ,{ "the" }
 ,{ "code" }
 ,{ "above)." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "some" }
 ,{ "implementation" }
 ,{ "details." }
 ,{ "The" }
 ,{ "function" }
 ,{ "Swap()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "method" }
 ,{ "objSwap()" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "destined" }
 ,{ "type" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "So" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "class" }
 ,{ "swappable" }
 ,{ "just" }
 ,{ "define" }
 ,{ "this" }
 ,{ "method" }
 ,{ "in" }
 ,{ "the" }
 ,{ "class." }
 ,{ "If" }
 ,{ "a" }
 ,{ "type" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "class" }
 ,{ "type" }
 ,{ "or" }
 ,{ "the" }
 ,{ "class" }
 ,{ "has" }
 ,{ "no" }
 ,{ "this" }
 ,{ "method," }
 ,{ "Swap()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "MoveSwap()" , & fmt_text_b }
 ,{ "or" }
 ,{ "CopySwap()" , & fmt_text_b }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
 ,{ "If" }
 ,{ "the" }
 ,{ "type" }
 ,{ "has" }
 ,{ "the" }
 ,{ "move" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "move" }
 ,{ "assign" }
 ,{ "operator," }
 ,{ "then" }
 ,{ "MoveSwap()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "move" }
 ,{ "operations" }
 ,{ "do" }
 ,{ "not" }
 ,{ "throw." }
 ,{ "If" }
 ,{ "the" }
 ,{ "moving" }
 ,{ "is" }
 ,{ "not" }
 ,{ "available" }
 ,{ "CopySwap()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
 ,{ "In" }
 ,{ "such" }
 ,{ "case" }
 ,{ "the" }
 ,{ "type" }
 ,{ "must" }
 ,{ "be" }
 ,{ "copyable." }
 ,{ "Again," }
 ,{ "it" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "copy" }
 ,{ "operations" }
 ,{ "do" }
 ,{ "not" }
 ,{ "throw." }
 ,{ "Otherwise" }
 ,{ "a" }
 ,{ "warning" }
 ,{ "is" }
 ,{ "emitted." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Utilities" }
} , & fmt_h2 , & align_h2 } ;

Text b9 = { {
 { "These" }
 ,{ "two" }
 ,{ "helper" }
 ,{ "functions" }
 ,{ "uses" }
 ,{ "Swap()" , & fmt_text_b }
 ,{ "to" }
 ,{ "nullify" }
 ,{ "and" }
 ,{ "move" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "object" }
 ,{ "must" }
 ,{ "be" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "admit" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Page page = { "page_Swap" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Symbol {

Text b0 = { {
 { "Symbol" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Symbol.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Symbol.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Symbol" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Symbol" , & fmt_text_b }
 ,{ "is" }
 ,{ "defined" }
 ,{ "as" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Utf8Code" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "as" }
 ,{ "the" }
 ,{ "type" }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "represents" }
 ,{ "a" }
 ,{ "single" }
 ,{ "symbol," }
 ,{ "single-char" }
 ,{ "or" }
 ,{ "multi-char." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Utilities" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "MaxSymbolLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "symbol" }
 ,{ "length" }
 ,{ "in" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ToChar()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "a" }
 ,{ "Symbol" , & fmt_text_b }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "char" , & fmt_text_b }
 ,{ "value" }
 ,{ "(represented" }
 ,{ "using" }
 ,{ "int" , & fmt_text_b }
 ,{ "type)." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "-1," }
 ,{ "if" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "not" }
 ,{ "single" }
 ,{ "character" }
 ,{ "length" }
 ,{ "(i.e." }
 ,{ "not" }
 ,{ "a" }
 ,{ "basic" }
 ,{ "ASCII" }
 ,{ "symbol)." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "SymbolLen()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "a" }
 ,{ "symbol" }
 ,{ "length" }
 ,{ "in" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "SymbolRange()" , & fmt_text_b }
 ,{ "gets" }
 ,{ "a" }
 ,{ "character" }
 ,{ "range" }
 ,{ "from" }
 ,{ "the" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "PeekSymbol()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "first" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "character" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "PeekSymbol_guarded()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "first" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "character" }
 ,{ "range." }
 ,{ "It" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "TrimText()" , & fmt_text_b }
 ,{ "removes" }
 ,{ "the" }
 ,{ "last" }
 ,{ "incomplete" }
 ,{ "code" }
 ,{ "sequence" }
 ,{ "in" }
 ,{ "UTF8-compatible" }
 ,{ "mode." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "There" }
 ,{ "are" }
 ,{ "also" }
 ,{ "char" , & fmt_text_b }
 ,{ "variants" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Char" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Char" , & fmt_text_b }
 ,{ "is" }
 ,{ "defined" }
 ,{ "as" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Unicode" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "as" }
 ,{ "the" }
 ,{ "type" }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "represents" }
 ,{ "a" }
 ,{ "single" }
 ,{ "symbol" }
 ,{ "as" }
 ,{ "an" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "ToChar()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "a" }
 ,{ "Char" , & fmt_text_b }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "char" , & fmt_text_b }
 ,{ "value" }
 ,{ "(represented" }
 ,{ "using" }
 ,{ "int" , & fmt_text_b }
 ,{ "type)." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "-1," }
 ,{ "if" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "not" }
 ,{ "single" }
 ,{ "character" }
 ,{ "length" }
 ,{ "(i.e." }
 ,{ "not" }
 ,{ "a" }
 ,{ "basic" }
 ,{ "ASCII" }
 ,{ "symbol)." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "PeekChar()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "next" }
 ,{ "Char" , & fmt_text_b }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "the" }
 ,{ "value" }
 ,{ "Unicode(-1)" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(only" }
 ,{ "in" }
 ,{ "UTF8-compatible" }
 ,{ "mode)." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "CutChar()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "next" }
 ,{ "Char" , & fmt_text_b }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "(argument" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "the" }
 ,{ "value" }
 ,{ "Unicode(-1)" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "(only" }
 ,{ "in" }
 ,{ "UTF8-compatible" }
 ,{ "mode)" }
 ,{ "and" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "moved" }
 ,{ "by" }
 ,{ "1" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "PeekChar_guarded()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "next" }
 ,{ "Char" , & fmt_text_b }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text." }
 ,{ "It" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "CutChar_guarded()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "next" }
 ,{ "Char" , & fmt_text_b }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "(argument" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)." }
 ,{ "It" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "These" }
 ,{ "functions" }
 ,{ "retrieve" }
 ,{ "various" }
 ,{ "properties" }
 ,{ "of" }
 ,{ "the" }
 ,{ "symbol," }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "Char" , & fmt_text_b }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Page page = { "page_Symbol" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SymCount {

Text b0 = { {
 { "SymCount" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/SymCount.h" , & fmt_text_Files_b }
 ,{ "CCore/src/SymCount.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "provides" }
 ,{ "simple" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "count" }
 ,{ "symbols" }
 ,{ "in" }
 ,{ "a" }
 ,{ "text." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "SymCount()" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "SymCount()" , & fmt_text_b }
 ,{ "counts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "in" }
 ,{ "a" }
 ,{ "text" }
 ,{ "string." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "it" }
 ,{ "differs" }
 ,{ "than" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "SymDetector" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "SymDetector" , & fmt_text_b }
 ,{ "detects" }
 ,{ "symbols" }
 ,{ "in" }
 ,{ "a" }
 ,{ "character" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "detector" }
 ,{ "to" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "put()" , & fmt_text_b }
 ,{ "puts" }
 ,{ "the" }
 ,{ "character" }
 ,{ "into" }
 ,{ "the" }
 ,{ "detector," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "character" }
 ,{ "completes" }
 ,{ "the" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "SymCounter" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "SymCounter" , & fmt_text_b }
 ,{ "counts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "over" }
 ,{ "the" }
 ,{ "character" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "put()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "feed" }
 ,{ "the" }
 ,{ "counter" }
 ,{ "by" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "To" }
 ,{ "get" }
 ,{ "the" }
 ,{ "current" }
 ,{ "number" }
 ,{ "of" }
 ,{ "complete" }
 ,{ "symbols" }
 ,{ "of" }
 ,{ "the" }
 ,{ "stream" }
 ,{ "cast" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_SymCount" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SymPart {

Text b0 = { {
 { "SymPart" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/SymPart.h" , & fmt_text_Files_b }
 ,{ "CCore/src/SymPart.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "contains" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "cut" }
 ,{ "string" }
 ,{ "parts," }
 ,{ "based" }
 ,{ "on" }
 ,{ "symbol" }
 ,{ "(not" }
 ,{ "character!)" }
 ,{ "counts." }
 ,{ "All" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "safe," }
 ,{ "i.e." }
 ,{ "return" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "possible" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "SymPrefix()" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "string" }
 ,{ "prefix" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "symbol" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "SymPart(ulen)" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "string" }
 ,{ "part," }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "SymPart(ulen,ulen)" , & fmt_text_b }
 ,{ "cuts" }
 ,{ "the" }
 ,{ "string" }
 ,{ "part," }
 ,{ "starting" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "symbol" }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "symbol" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Page page = { "page_SymPart" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Sync {

Text b0 = { {
 { "Synchronization" }
 ,{ "objects" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Multi-threaded" }
 ,{ "applications" }
 ,{ "are" }
 ,{ "impossible" }
 ,{ "without" }
 ,{ "a" }
 ,{ "thread" }
 ,{ "execution" }
 ,{ "coordination." }
 ,{ "This" }
 ,{ "is" }
 ,{ "achieved" }
 ,{ "with" }
 ,{ "help" }
 ,{ "of" }
 ,{ "synchronization" }
 ,{ "objects." }
 ,{ "Synchronization" }
 ,{ "class" }
 ,{ "has" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "methods," }
 ,{ "some" }
 ,{ "of" }
 ,{ "them" }
 ,{ "may" }
 ,{ "block" }
 ,{ "execution" }
 ,{ "of" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread," }
 ,{ "until" }
 ,{ "some" }
 ,{ "condition" }
 ,{ "is" }
 ,{ "met." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Most" }
 ,{ "of" }
 ,{ "synchronization" }
 ,{ "objects" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "named" }
 ,{ "in" }
 ,{ "constructor," }
 ,{ "using" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_a }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "name" }
 ,{ "is" }
 ,{ "not" }
 ,{ "given" }
 ,{ "explicitly," }
 ,{ "then" }
 ,{ "some" }
 ,{ "auto-generated" }
 ,{ "name" }
 ,{ "is" }
 ,{ "used." }
 ,{ "In" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "the" }
 ,{ "provided" }
 ,{ "name" }
 ,{ "is" }
 ,{ "ignored," }
 ,{ "but" }
 ,{ "in" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "system" }
 ,{ "log" }
 ,{ "and" }
 ,{ "an" }
 ,{ "event" }
 ,{ "recorder." }
 ,{ "You" }
 ,{ "can" }
 ,{ "get" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "a" }
 ,{ "synchronization" }
 ,{ "object" }
 ,{ "in" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getName()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Blocking" }
 ,{ "methods" }
 ,{ "usually" }
 ,{ "have" }
 ,{ "four" }
 ,{ "variants:" }
 ,{ "try-variant" }
 ,{ "which" }
 ,{ "don't" }
 ,{ "block," }
 ,{ "main" }
 ,{ "variant" }
 ,{ "without" }
 ,{ "timeout," }
 ,{ "and" }
 ,{ "timed" }
 ,{ "variants" }
 ,{ "with" }
 ,{ "the" }
 ,{ "MSec" , & fmt_text_a }
 ,{ "timeout" }
 ,{ "and" }
 ,{ "with" }
 ,{ "the" }
 ,{ "TimeScope" , & fmt_text_a }
 ,{ "timeout." }
 ,{ "The" }
 ,{ "variant" }
 ,{ "without" }
 ,{ "timeout" }
 ,{ "always" }
 ,{ "successful" }
 ,{ "(but" }
 ,{ "may" }
 ,{ "block" }
 ,{ "indefinitely)." }
 ,{ "Other" }
 ,{ "variants" }
 ,{ "return" }
 ,{ "the" }
 ,{ "bool" , & fmt_text_b }
 ,{ "return" }
 ,{ "value," }
 ,{ "which" }
 ,{ "indicates" }
 ,{ "if" }
 ,{ "the" }
 ,{ "method" }
 ,{ "was" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Releasing" }
 ,{ "methods" }
 ,{ "in" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "usually" }
 ,{ "have" }
 ,{ "three" }
 ,{ "variants:" }
 ,{ "common" }
 ,{ "variant" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "only" }
 ,{ "in" }
 ,{ "a" }
 ,{ "task" }
 ,{ "context," }
 ,{ "\"_int\"" }
 ,{ "variant" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "only" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "\"_any\"" }
 ,{ "variant" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Releasing" }
 ,{ "methods" }
 ,{ "often" }
 ,{ "have" }
 ,{ "associated" }
 ,{ "methods," }
 ,{ "which" }
 ,{ "return" }
 ,{ "a" }
 ,{ "Function" , & fmt_text_a }
 ,{ "object," }
 ,{ "bound" }
 ,{ "with" }
 ,{ "the" }
 ,{ "call" }
 ,{ "of" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "releasing" }
 ,{ "method." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "If" }
 ,{ "several" }
 ,{ "threads" }
 ,{ "are" }
 ,{ "blocked" }
 ,{ "on" }
 ,{ "a" }
 ,{ "synchronization" }
 ,{ "object," }
 ,{ "then" }
 ,{ "they" }
 ,{ "are" }
 ,{ "organized" }
 ,{ "in" }
 ,{ "a" }
 ,{ "priority" }
 ,{ "queue." }
 ,{ "When" }
 ,{ "one" }
 ,{ "thread" }
 ,{ "should" }
 ,{ "be" }
 ,{ "released," }
 ,{ "the" }
 ,{ "most" }
 ,{ "prioritized" }
 ,{ "thread" }
 ,{ "is" }
 ,{ "picked" }
 ,{ "up." }
 ,{ "The" }
 ,{ "thread" }
 ,{ "priority" }
 ,{ "counts" }
 ,{ "first," }
 ,{ "the" }
 ,{ "order" }
 ,{ "of" }
 ,{ "putting" }
 ,{ "into" }
 ,{ "the" }
 ,{ "queue" }
 ,{ "counts" }
 ,{ "last." }
 ,{ "If" }
 ,{ "the" }
 ,{ "priority" }
 ,{ "of" }
 ,{ "the" }
 ,{ "released" }
 ,{ "task" }
 ,{ "is" }
 ,{ "higher," }
 ,{ "than" }
 ,{ "the" }
 ,{ "priority" }
 ,{ "of" }
 ,{ "the" }
 ,{ "running" }
 ,{ "task," }
 ,{ "task" }
 ,{ "switch" }
 ,{ "happens" }
 ,{ "immediately." }
} , & fmt_text , & align_text } ;

Page page = { "page_Sync" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_SysLog {

Text b0 = { {
 { "(XCore)" }
 ,{ "SysLog" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysLog.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysLog.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "to" }
 ,{ "log" }
 ,{ "some" }
 ,{ "operations," }
 ,{ "like" }
 ,{ "synchronization" }
 ,{ "object" }
 ,{ "operations." }
 ,{ "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "it" }
 ,{ "to" }
 ,{ "log" }
 ,{ "your" }
 ,{ "own" }
 ,{ "messages." }
 ,{ "By" }
 ,{ "default," }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "is" }
 ,{ "disabled." }
 ,{ "To" }
 ,{ "enable" }
 ,{ "it" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "uncomment" }
 ,{ "the" }
 ,{ "following" }
 ,{ "line" }
 ,{ "in" }
 ,{ "the" }
 ,{ "SysLog.h" , & fmt_text_b }
 ,{ "files" }
 ,{ "and" }
 ,{ "rebuild" }
 ,{ "CCore" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "SysLog" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context," }
 ,{ "including" }
 ,{ "interrupt" }
 ,{ "context," }
 ,{ "but" }
 ,{ "you" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aware" }
 ,{ "of" }
 ,{ "the" }
 ,{ "log" }
 ,{ "message" }
 ,{ "argument" }
 ,{ "types:" }
 ,{ "they" }
 ,{ "must" }
 ,{ "be" }
 ,{ "lightweight" }
 ,{ "types," }
 ,{ "there" }
 ,{ "should" }
 ,{ "be" }
 ,{ "no" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "or" }
 ,{ "other" }
 ,{ "resource" }
 ,{ "allocation" }
 ,{ "operations" }
 ,{ "in" }
 ,{ "constructors," }
 ,{ "destructors," }
 ,{ "copy" }
 ,{ "constructors," }
 ,{ "etc." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "log" }
 ,{ "a" }
 ,{ "message" }
 ,{ "use" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Sys::Log" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "This" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing," }
 ,{ "if" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "is" }
 ,{ "disabled." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "software" }
 ,{ "entities" }
 ,{ "are" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "Sys" , & fmt_text_b }
 ,{ "namespace." }
 ,{ "You" }
 ,{ "can" }
 ,{ "use" }
 ,{ "them" }
 ,{ "to" }
 ,{ "access" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "features," }
 ,{ "even" }
 ,{ "if" }
 ,{ "you" }
 ,{ "disable" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "." }
 ,{ "\"Disabling\"" }
 ,{ "does" }
 ,{ "not" }
 ,{ "mean" }
 ,{ "the" }
 ,{ "complete" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "removal," }
 ,{ "it" }
 ,{ "just" }
 ,{ "make" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Sys::Log" , & fmt_text_b }
 ,{ "doing" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "LogSource" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "This" }
 ,{ "enum" }
 ,{ "describe" }
 ,{ "a" }
 ,{ "log" }
 ,{ "message" }
 ,{ "source." }
 ,{ "There" }
 ,{ "are" }
 ,{ "reserved" }
 ,{ "values" }
 ,{ "for" }
 ,{ "system" }
 ,{ "sources" }
 ,{ "and" }
 ,{ "other" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "user." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "LogType" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "This" }
 ,{ "enum" }
 ,{ "describe" }
 ,{ "a" }
 ,{ "log" }
 ,{ "message" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "common" }
 ,{ "types:" }
 ,{ "LogDebug" , & fmt_text_b }
 ,{ "," }
 ,{ "LogEvent" , & fmt_text_b }
 ,{ "," }
 ,{ "LogError" , & fmt_text_b }
 ,{ "," }
 ,{ "LogAlert" , & fmt_text_b }
 ,{ "." }
 ,{ "Other" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "by" }
 ,{ "user." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "LogCategory" }
 ,{ "and" }
 ,{ "LogFilter" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "LogCategory" , & fmt_text_b }
 ,{ "and" }
 ,{ "LogFilter" , & fmt_text_b }
 ,{ "are" }
 ,{ "built" }
 ,{ "on" }
 ,{ "LogSource" , & fmt_text_b }
 ,{ "and" }
 ,{ "LogType" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "create" }
 ,{ "a" }
 ,{ "LogCategory" , & fmt_text_b }
 ,{ "value" }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "operator" , & fmt_text_b }
 ,{ "|" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "LogAccess" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "LogAccess" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "add" }
 ,{ "a" }
 ,{ "new" }
 ,{ "message" }
 ,{ "to" }
 ,{ "the" }
 ,{ "log." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Below" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example" }
 ,{ "how" }
 ,{ "to" }
 ,{ "add" }
 ,{ "a" }
 ,{ "message." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "LogFilterAccess" }
} , & fmt_h4 , & align_h4 } ;

Text b17 = { {
 { "LogFilterAccess" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "access" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "input" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "message" }
 ,{ "filter." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "The" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "local" }
 ,{ "object" }
 ,{ "with" }
 ,{ "a" }
 ,{ "short" }
 ,{ "life-time." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "LogCursor" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "LogCursor" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "iterate" }
 ,{ "over" }
 ,{ "the" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "content." }
 ,{ "It" }
 ,{ "iterates" }
 ,{ "the" , & fmt_text_b }
 ,{ "last" , & fmt_text_b }
 ,{ "count" , & fmt_text_b }
 ,{ "messages." }
 ,{ "LogCursor" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "Cursor" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "PrintLog" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "PrintLog" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "print" }
 ,{ "the" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "content." }
 ,{ "It" }
 ,{ "prints" }
 ,{ "the" , & fmt_text_b }
 ,{ "last" , & fmt_text_b }
 ,{ "count" , & fmt_text_b }
 ,{ "messages." }
 ,{ "You" }
 ,{ "can" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "filter" }
 ,{ "to" }
 ,{ "exclude" }
 ,{ "messages" }
 ,{ "from" }
 ,{ "the" }
 ,{ "printing." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Target" }
 ,{ "support" }
 ,{ "for" }
 ,{ "SysLog" }
} , & fmt_h2 , & align_h2 } ;

Text b24 = { {
 { "SysLog" , & fmt_text_b }
 ,{ "is" }
 ,{ "created" }
 ,{ "on" }
 ,{ "an" }
 ,{ "earlier" }
 ,{ "stage" }
 ,{ "of" }
 ,{ "the" }
 ,{ "system" }
 ,{ "initialization." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "to" }
 ,{ "serialize" }
 ,{ "the" }
 ,{ "log" }
 ,{ "access." }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "stores" }
 ,{ "messages" }
 ,{ "in" }
 ,{ "the" }
 ,{ "reserved" }
 ,{ "memory" }
 ,{ "region," }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
 ,{ "The" }
 ,{ "function" }
 ,{ "AllocLogSpace()" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "header" }
 ,{ "SysMemSpace.h" , & fmt_text_b }
 ,{ "," }
 ,{ "is" }
 ,{ "called" }
 ,{ "once" }
 ,{ "during" }
 ,{ "the" }
 ,{ "SysLog" , & fmt_text_b }
 ,{ "initialization." }
} , & fmt_text , & align_text } ;

Page page = { "page_SysLog" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Task {

Text b0 = { {
 { "Tasks" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Task.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Task.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/task" , & fmt_text_Files_b }
 ,{ "CCore/src/task" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b3 = { {
 { "Tasks" }
 ,{ "and" }
 ,{ "synchronization" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "the" }
 ,{ "heart" }
 ,{ "of" }
 ,{ "any" }
 ,{ "real-time" }
 ,{ "system" }
 ,{ "platform." }
 ,{ "The" }
 ,{ "word" }
 ,{ "\"task\"" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "tradition" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "thread." }
 ,{ "A" }
 ,{ "typical" }
 ,{ "embedded" }
 ,{ "application" }
 ,{ "may" }
 ,{ "be" }
 ,{ "regarded" }
 ,{ "as" }
 ,{ "a" }
 ,{ "multi-threaded" }
 ,{ "process," }
 ,{ "running" }
 ,{ "in" }
 ,{ "a" }
 ,{ "single" }
 ,{ "memory" }
 ,{ "space." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "direct" }
 ,{ "access" }
 ,{ "to" }
 ,{ "all" }
 ,{ "hardware" }
 ,{ "features." }
 ,{ "The" }
 ,{ "functionality" }
 ,{ "of" }
 ,{ "the" }
 ,{ "application" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "a" }
 ,{ "series" }
 ,{ "of" }
 ,{ "tasks." }
 ,{ "The" }
 ,{ "board" }
 ,{ "starts" }
 ,{ "after" }
 ,{ "reset," }
 ,{ "performs" }
 ,{ "a" }
 ,{ "core" }
 ,{ "initialization" }
 ,{ "and" }
 ,{ "runs" }
 ,{ "the" }
 ,{ "main" }
 ,{ "task." }
 ,{ "At" }
 ,{ "start" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "working" }
 ,{ "RAM," }
 ,{ "CPU," }
 ,{ "timers," }
 ,{ "interrupt" }
 ,{ "controller," }
 ,{ "serial" }
 ,{ "port" }
 ,{ "and" }
 ,{ "may" }
 ,{ "be" }
 ,{ "some" }
 ,{ "extra" }
 ,{ "peripherals." }
 ,{ "Main" }
 ,{ "task" }
 ,{ "performs" }
 ,{ "additional" }
 ,{ "working" }
 ,{ "hardware" }
 ,{ "initialization," }
 ,{ "prepares" }
 ,{ "and" }
 ,{ "runs" }
 ,{ "tasks." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "\"interrupt" }
 ,{ "context\"," }
 ,{ "this" }
 ,{ "execution" }
 ,{ "context" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "hardware" }
 ,{ "interrupts." }
 ,{ "All" }
 ,{ "actions" }
 ,{ "in" }
 ,{ "this" }
 ,{ "context" }
 ,{ "are" }
 ,{ "limited:" }
 ,{ "they" }
 ,{ "must" }
 ,{ "be" }
 ,{ "\"quick\"," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "it" }
 ,{ "is" }
 ,{ "forbidden" }
 ,{ "to" }
 ,{ "use" }
 ,{ "any" }
 ,{ "\"blocking\"" }
 ,{ "calls." }
 ,{ "XCore" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "support" }
 ,{ "nested" }
 ,{ "interrupts," }
 ,{ "so" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "is" }
 ,{ "multi-task" }
 ,{ "safe." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "In" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "the" }
 ,{ "entry" }
 ,{ "point" }
 ,{ "to" }
 ,{ "the" }
 ,{ "main" }
 ,{ "task" }
 ,{ "is" }
 ,{ "the" }
 ,{ "usual" }
 ,{ "function" }
 ,{ "main()" , & fmt_text_b }
 ,{ "." }
 ,{ "Global" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "constructed" }
 ,{ "before" }
 ,{ "the" }
 ,{ "main()" , & fmt_text_b }
 ,{ "and" }
 ,{ "destructed" }
 ,{ "after." }
 ,{ "During" }
 ,{ "this" }
 ,{ "phase" }
 ,{ "interrupts" }
 ,{ "are" }
 ,{ "disabled" }
 ,{ "and" }
 ,{ "the" }
 ,{ "running" }
 ,{ "extra" }
 ,{ "tasks" }
 ,{ "is" }
 ,{ "not" }
 ,{ "permitted." }
 ,{ "When" }
 ,{ "main()" , & fmt_text_b }
 ,{ "is" }
 ,{ "finished," }
 ,{ "the" }
 ,{ "main" }
 ,{ "task" }
 ,{ "is" }
 ,{ "blocked" }
 ,{ "until" }
 ,{ "all" }
 ,{ "extra" }
 ,{ "tasks" }
 ,{ "are" }
 ,{ "completed" }
 ,{ "and" }
 ,{ "then" }
 ,{ "global" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "header" }
 ,{ "Task.h" , & fmt_text_b }
 ,{ "includes" }
 ,{ "all" }
 ,{ "task" }
 ,{ "related" }
 ,{ "entities." }
 ,{ "XCore" , & fmt_text_b }
 ,{ "variants" }
 ,{ "of" }
 ,{ "the" }
 ,{ "same" }
 ,{ "classes" }
 ,{ "have" }
 ,{ "extra" }
 ,{ "features" }
 ,{ "than" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "task" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Task" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "HCore" }
 ,{ "Task" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "The" }
 ,{ "class" }
 ,{ "Task" , & fmt_text_b }
 ,{ "is" }
 ,{ "polymorphic," }
 ,{ "with" }
 ,{ "a" }
 ,{ "virtual" }
 ,{ "destructor" }
 ,{ "and" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "MemBase_nocopy" , & fmt_text_b }
 ,{ "." }
 ,{ "A" }
 ,{ "task" }
 ,{ "object" }
 ,{ "must" }
 ,{ "not" }
 ,{ "be" }
 ,{ "destroyed" }
 ,{ "until" }
 ,{ "the" }
 ,{ "associated" }
 ,{ "thread" }
 ,{ "of" }
 ,{ "execution" }
 ,{ "is" }
 ,{ "running." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "virtual" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "to" }
 ,{ "be" }
 ,{ "overloaded" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class:" }
 ,{ "entry()" , & fmt_text_b }
 ,{ "and" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "implements" }
 ,{ "a" }
 ,{ "task" }
 ,{ "functionality." }
 ,{ "The" }
 ,{ "second" }
 ,{ "is" }
 ,{ "called" }
 ,{ "to" }
 ,{ "complete" }
 ,{ "the" }
 ,{ "task" }
 ,{ "execution." }
 ,{ "You" }
 ,{ "may" }
 ,{ "assume" }
 ,{ "the" }
 ,{ "task" }
 ,{ "is" }
 ,{ "logically" }
 ,{ "finished" }
 ,{ "when" }
 ,{ "this" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "run_or_exit()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "\"run" }
 ,{ "or" }
 ,{ "exit\"" }
 ,{ "operation." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "tries" }
 ,{ "to" }
 ,{ "start" }
 ,{ "a" }
 ,{ "task." }
 ,{ "If" }
 ,{ "the" }
 ,{ "task" }
 ,{ "is" }
 ,{ "started," }
 ,{ "true" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "run" }
 ,{ "the" }
 ,{ "same" }
 ,{ "task" }
 ,{ "twice." }
 ,{ "So" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "either" }
 ,{ "way:" }
 ,{ "as" }
 ,{ "the" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "run_or_exit()" , & fmt_text_b }
 ,{ "call" }
 ,{ "or" }
 ,{ "after" }
 ,{ "the" }
 ,{ "task" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "This" }
 ,{ "method" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "destroy" }
 ,{ "a" }
 ,{ "dynamically" }
 ,{ "allocated" }
 ,{ "task" }
 ,{ "object," }
 ,{ "to" }
 ,{ "signal" }
 ,{ "about" }
 ,{ "task" }
 ,{ "completion" }
 ,{ "or" }
 ,{ "to" }
 ,{ "do" }
 ,{ "another" }
 ,{ "completion" }
 ,{ "quick" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Yield()" , & fmt_text_b }
 ,{ "rolls" }
 ,{ "the" }
 ,{ "CPU" }
 ,{ "to" }
 ,{ "another" }
 ,{ "running" }
 ,{ "task," }
 ,{ "if" }
 ,{ "any." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Sleep()" , & fmt_text_b }
 ,{ "sleeps" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "period" }
 ,{ "of" }
 ,{ "time" }
 ,{ "in" }
 ,{ "milliseconds." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "GetCurrent()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "current" }
 ,{ "running" }
 ,{ "task" }
 ,{ "object." }
 ,{ "If" }
 ,{ "the" }
 ,{ "current" }
 ,{ "thread" }
 ,{ "was" }
 ,{ "not" }
 ,{ "spawned" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_b }
 ,{ "class," }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "XCore" }
 ,{ "Task" }
} , & fmt_h3 , & align_h3 } ;

Text b15 = { {
 { "XCore" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "class" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "," }
 ,{ "but" }
 ,{ "has" }
 ,{ "some" }
 ,{ "extra" }
 ,{ "features." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "XCore" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "constructors" }
 ,{ "have" }
 ,{ "additional" }
 ,{ "task" }
 ,{ "parameters." }
 ,{ "Task" }
 ,{ "can" }
 ,{ "be" }
 ,{ "explicitly" }
 ,{ "named." }
 ,{ "If" }
 ,{ "the" }
 ,{ "name" }
 ,{ "is" }
 ,{ "not" }
 ,{ "provided," }
 ,{ "some" }
 ,{ "auto-generated" }
 ,{ "name" }
 ,{ "is" }
 ,{ "used." }
 ,{ "This" }
 ,{ "name" }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "system" }
 ,{ "logging" }
 ,{ "and" }
 ,{ "the" }
 ,{ "event" }
 ,{ "recording." }
 ,{ "The" }
 ,{ "TaskPriority" , & fmt_text_b }
 ,{ "value" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "task." }
 ,{ "Task" }
 ,{ "priorities" }
 ,{ "determine" }
 ,{ "tasks" }
 ,{ "run" }
 ,{ "sequence:" }
 ,{ "a" }
 ,{ "task" }
 ,{ "with" }
 ,{ "higher" }
 ,{ "priority" }
 ,{ "preempts" }
 ,{ "an" }
 ,{ "execution" }
 ,{ "of" }
 ,{ "tasks" }
 ,{ "with" }
 ,{ "lower" }
 ,{ "priorities." }
 ,{ "The" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "changed," }
 ,{ "but" }
 ,{ "can" }
 ,{ "be" }
 ,{ "temporary" }
 ,{ "raised" }
 ,{ "automatically" }
 ,{ "by" }
 ,{ "synchronization" }
 ,{ "objects." }
 ,{ "Finally," }
 ,{ "the" }
 ,{ "task" }
 ,{ "stack_len" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "specified." }
 ,{ "The" }
 ,{ "minimum" }
 ,{ "and" }
 ,{ "the" }
 ,{ "default" }
 ,{ "task" }
 ,{ "stack" }
 ,{ "length" }
 ,{ "are" }
 ,{ "defined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Task" }
 ,{ "priority" }
 ,{ "counts" }
 ,{ "down:" }
 ,{ "the" }
 ,{ "less" }
 ,{ "value" }
 ,{ "means" }
 ,{ "the" }
 ,{ "higher" }
 ,{ "priority." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "special" }
 ,{ "tasks" }
 ,{ "in" }
 ,{ "the" }
 ,{ "system:" }
 ,{ "Exit" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "," }
 ,{ "Complete" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "and" }
 ,{ "Idle" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Idle" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "runs" }
 ,{ "while" }
 ,{ "other" }
 ,{ "tasks" }
 ,{ "are" }
 ,{ "blocked." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "lowest" }
 ,{ "priority." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Exit" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "exit()" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "task" }
 ,{ "can" }
 ,{ "safely" }
 ,{ "destroy" }
 ,{ "another" }
 ,{ "task" }
 ,{ "object." }
 ,{ "Exit" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "highest" }
 ,{ "priority." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Complete" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "completion." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "next" }
 ,{ "highest" }
 ,{ "priority" }
 ,{ "after" }
 ,{ "the" }
 ,{ "Exit" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "." }
 ,{ "Normally" }
 ,{ "packets" }
 ,{ "are" }
 ,{ "completed" }
 ,{ "by" }
 ,{ "processing" }
 ,{ "tasks," }
 ,{ "but" }
 ,{ "in" }
 ,{ "some" }
 ,{ "cases" }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "completed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "possible," }
 ,{ "so" }
 ,{ "the" }
 ,{ "special" }
 ,{ "task" }
 ,{ "is" }
 ,{ "provided" }
 ,{ "for" }
 ,{ "such" }
 ,{ "packet" }
 ,{ "completion." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "run" }
 ,{ "a" }
 ,{ "task" }
 ,{ "with" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "special" }
 ,{ "task" }
 ,{ "priorities." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "XCore" , & fmt_text_b }
 ,{ "performs" }
 ,{ "tick" }
 ,{ "task" }
 ,{ "switch." }
 ,{ "The" }
 ,{ "internal" }
 ,{ "system" }
 ,{ "tick" }
 ,{ "is" }
 ,{ "driven" }
 ,{ "by" }
 ,{ "a" }
 ,{ "timer" }
 ,{ "interrupt." }
 ,{ "This" }
 ,{ "tick" }
 ,{ "runs" }
 ,{ "on" }
 ,{ "a" }
 ,{ "high" }
 ,{ "frequency" }
 ,{ "(like" }
 ,{ "10" }
 ,{ "kHz)." }
 ,{ "Tick" }
 ,{ "switches" }
 ,{ "ready-to-run" }
 ,{ "tasks" }
 ,{ "and" }
 ,{ "performs" }
 ,{ "timed" }
 ,{ "jobs," }
 ,{ "like" }
 ,{ "timeout" }
 ,{ "processing." }
 ,{ "Without" }
 ,{ "the" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "relaxation" }
 ,{ "only" }
 ,{ "a" }
 ,{ "task" }
 ,{ "with" }
 ,{ "the" }
 ,{ "highest" }
 ,{ "priority" }
 ,{ "gains" }
 ,{ "CPU" }
 ,{ "time." }
 ,{ "If" }
 ,{ "there" }
 ,{ "are" }
 ,{ "several" }
 ,{ "such" }
 ,{ "tasks" }
 ,{ "they" }
 ,{ "are" }
 ,{ "switched" }
 ,{ "in" }
 ,{ "a" }
 ,{ "round-robin" }
 ,{ "order." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "The" }
 ,{ "static" }
 ,{ "method" }
 ,{ "Task::RelaxPriority()" , & fmt_text_b }
 ,{ "enables" }
 ,{ "the" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "relaxation." }
 ,{ "It" }
 ,{ "means" }
 ,{ "that" }
 ,{ "during" }
 ,{ "some" }
 ,{ "ticks" }
 ,{ "task" }
 ,{ "priorities" }
 ,{ "are" }
 ,{ "ignored." }
 ,{ "The" }
 ,{ "period_tick" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "period" }
 ,{ "of" }
 ,{ "the" }
 ,{ "relaxed" }
 ,{ "ticks." }
 ,{ "The" }
 ,{ "value" }
 ,{ "0" }
 ,{ "means" }
 ,{ "the" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "relaxation" }
 ,{ "is" }
 ,{ "disabled." }
 ,{ "The" }
 ,{ "value" }
 ,{ "1" }
 ,{ "means" }
 ,{ "that" }
 ,{ "all" }
 ,{ "ticks" }
 ,{ "are" }
 ,{ "relaxed." }
 ,{ "The" }
 ,{ "value" }
 ,{ "2" }
 ,{ "means" }
 ,{ "that" }
 ,{ "each" }
 ,{ "second" }
 ,{ "tick" }
 ,{ "is" }
 ,{ "relaxed," }
 ,{ "and" }
 ,{ "so" }
 ,{ "on." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "priority" , & fmt_text_b }
 ,{ "determines" }
 ,{ "the" }
 ,{ "cut" }
 ,{ "of" }
 ,{ "priority" }
 ,{ "for" }
 ,{ "the" }
 ,{ "task" }
 ,{ "relaxation." }
 ,{ "If" }
 ,{ "the" }
 ,{ "task" }
 ,{ "has" }
 ,{ "this" }
 ,{ "priority" }
 ,{ "or" }
 ,{ "less," }
 ,{ "it" }
 ,{ "does" }
 ,{ "not" }
 ,{ "participate" }
 ,{ "in" }
 ,{ "the" }
 ,{ "relaxation." }
 ,{ "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "Idle" , & fmt_text_b }
 ,{ "Task" , & fmt_text_b }
 ,{ "never" }
 ,{ "gains" }
 ,{ "CPU" }
 ,{ "because" }
 ,{ "of" }
 ,{ "the" }
 ,{ "task" }
 ,{ "priority" }
 ,{ "relaxation." }
} , & fmt_text , & align_text } ;

Page page = { "page_Task" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TaskHeap {

Text b0 = { {
 { "TaskHeap" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TaskHeap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TaskHeap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TaskHeap" , & fmt_text_b }
 ,{ "provides" }
 ,{ "per-task" }
 ,{ "heap" }
 ,{ "feature." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "is" }
 ,{ "based" }
 ,{ "on" }
 ,{ "PerTask" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "control" }
 ,{ "class." }
 ,{ "It" }
 ,{ "assigns" }
 ,{ "per-task" }
 ,{ "object" }
 ,{ "builder." }
 ,{ "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "for" }
 ,{ "the" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "TaskHeap" , & fmt_text_b }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "page" }
 ,{ "allocation" }
 ,{ "length" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "static" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "to" }
 ,{ "access" }
 ,{ "the" }
 ,{ "per-task" }
 ,{ "heap" }
 ,{ "service," }
 ,{ "once" }
 ,{ "a" }
 ,{ "builder" }
 ,{ "is" }
 ,{ "active." }
 ,{ "Semantic" }
 ,{ "of" }
 ,{ "methods" }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "semantic" }
 ,{ "of" }
 ,{ "the" }
 ,{ "global" , & fmt_text_a }
 ,{ "heap" , & fmt_text_a }
 ,{ "functions" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "MemAlloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "of" }
 ,{ "required" }
 ,{ "length" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "its" }
 ,{ "address." }
 ,{ "The" }
 ,{ "block" }
 ,{ "is" }
 ,{ "always" }
 ,{ "MaxAlign" , & fmt_text_b }
 ,{ "ed," }
 ,{ "the" }
 ,{ "actual" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "a" }
 ,{ "slightly" }
 ,{ "greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "required" }
 ,{ "and" }
 ,{ "always" }
 ,{ "non-null." }
 ,{ "If" }
 ,{ "the" }
 ,{ "operation" }
 ,{ "is" }
 ,{ "failed," }
 ,{ "then" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown," }
 ,{ "using" }
 ,{ "the" }
 ,{ "GuardNoMem()" , & fmt_text_b }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "TryMemAlloc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar," }
 ,{ "but" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "failure" }
 ,{ "it" }
 ,{ "just" }
 ,{ "returns" }
 ,{ "null." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "In" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "functions" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "mem" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "either" }
 ,{ "an" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "or" }
 ,{ "null." }
 ,{ "Otherwise," }
 ,{ "the" }
 ,{ "memory" }
 ,{ "heap" }
 ,{ "protection" }
 ,{ "abort" }
 ,{ "is" }
 ,{ "called" }
 ,{ "(with" }
 ,{ "high" }
 ,{ "probability," }
 ,{ "the" }
 ,{ "detection" }
 ,{ "is" }
 ,{ "not" }
 ,{ "100%)." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "MemFree()" , & fmt_text_b }
 ,{ "releases" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "even" }
 ,{ "if" }
 ,{ "the" }
 ,{ "block" }
 ,{ "was" }
 ,{ "allocated" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "MemExtend()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "extend" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "If" }
 ,{ "the" }
 ,{ "block" }
 ,{ "was" }
 ,{ "allocated" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task," }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise," }
 ,{ "if" }
 ,{ "successful," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "new" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "block" }
 ,{ "is" }
 ,{ "at" }
 ,{ "least" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "MemShrink()" , & fmt_text_b }
 ,{ "shrinks" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
 ,{ "If" }
 ,{ "the" }
 ,{ "block" }
 ,{ "was" }
 ,{ "allocated" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task," }
 ,{ "the" }
 ,{ "method" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "Otherwise," }
 ,{ "if" }
 ,{ "successful," }
 ,{ "it" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "new" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "block" }
 ,{ "is" }
 ,{ "at" }
 ,{ "least" }
 ,{ "len" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "null," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "TaskHeapScope" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "the" }
 ,{ "per-task" }
 ,{ "object:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "XCore" , & fmt_text_b }
 ,{ "variant" }
 ,{ "is" }
 ,{ "slightly" }
 ,{ "different." }
 ,{ "The" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "per-task" }
 ,{ "heap" }
 ,{ "space" }
 ,{ "length," }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "1" }
 ,{ "MByte." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "You" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "TaskHeapArrayAlgo" , & fmt_text_b }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "to" }
 ,{ "build" }
 ,{ "arrays" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "ArrayAlgo" , & fmt_text_a }
 ,{ "to" }
 ,{ "utilize" }
 ,{ "the" }
 ,{ "task" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "To" }
 ,{ "use" }
 ,{ "this" }
 ,{ "package" }
 ,{ "with" }
 ,{ "the" }
 ,{ "DynArray" , & fmt_text_b }
 ,{ "you" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "type:" }
} , & fmt_text , & align_text } ;

Page page = { "page_TaskHeap" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TaskMemStack {

Text b0 = { {
 { "TaskMemStack" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TaskMemStack.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TaskMemStack.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TaskMemStack" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "work" }
 ,{ "area" }
 ,{ "in" }
 ,{ "a" }
 ,{ "stack-based" }
 ,{ "manner." }
 ,{ "Each" }
 ,{ "task" }
 ,{ "has" }
 ,{ "own" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Allocation" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "TryTaskMemStackAlloc()" , & fmt_text_b }
 ,{ "tries" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "from" }
 ,{ "the" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack." }
 ,{ "The" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "non-null" }
 ,{ "argument," }
 ,{ "the" }
 ,{ "block" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "Null" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "If" }
 ,{ "a" }
 ,{ "TaskMemStack" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "active" }
 ,{ "for" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "a" }
 ,{ "error" }
 ,{ "is" }
 ,{ "reported." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "TaskMemStackAlloc()" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "TaskMemStackFree()" , & fmt_text_b }
 ,{ "frees" }
 ,{ "a" }
 ,{ "previously" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block," }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "null." }
 ,{ "Memory" }
 ,{ "blocks" }
 ,{ "must" }
 ,{ "be" }
 ,{ "freed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "strict" }
 ,{ "reverse" }
 ,{ "order" }
 ,{ "as" }
 ,{ "they" }
 ,{ "was" }
 ,{ "allocated." }
 ,{ "I.e." }
 ,{ "mem" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "last" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "allocated." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Before" }
 ,{ "using" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "you" }
 ,{ "must" }
 ,{ "activate" }
 ,{ "a" }
 ,{ "TaskMemStack" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Allocation" }
 ,{ "guard" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "TaskMemStackAllocGuard" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "allocation" }
 ,{ "guard" }
 ,{ "class" }
 ,{ "for" }
 ,{ "the" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack" }
 ,{ "block" }
 ,{ "of" }
 ,{ "the" }
 ,{ "size_of" , & fmt_text_b }
 ,{ "length," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack" }
 ,{ "block" }
 ,{ "for" }
 ,{ "count" , & fmt_text_b }
 ,{ "items" }
 ,{ "of" }
 ,{ "the" }
 ,{ "size_of" , & fmt_text_b }
 ,{ "length," }
 ,{ "both" }
 ,{ "arguments" }
 ,{ "must" }
 ,{ "be" }
 ,{ "non-null." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Destructor" }
 ,{ "deallocates" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "disarmed." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block" }
 ,{ "can" }
 ,{ "be" }
 ,{ "obtained" }
 ,{ "by" }
 ,{ "the" }
 ,{ "casting" }
 ,{ "operator." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "disarm()" , & fmt_text_b }
 ,{ "disarms" }
 ,{ "the" }
 ,{ "guard" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "TaskMemStack" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "TaskMemStack" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "allocation/deallocation" }
 ,{ "operations." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "it" }
 ,{ "directly." }
 ,{ "Instead," }
 ,{ "you" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "in" }
 ,{ "some" }
 ,{ "task" }
 ,{ "as" }
 ,{ "an" }
 ,{ "automatic" }
 ,{ "variable." }
 ,{ "In" }
 ,{ "scope" }
 ,{ "of" }
 ,{ "this" }
 ,{ "object" }
 ,{ "you" }
 ,{ "may" }
 ,{ "use" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack" }
 ,{ "allocation/deallocation" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "only" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "big" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory." }
 ,{ "By" }
 ,{ "default" }
 ,{ "it" }
 ,{ "is" }
 ,{ "4" }
 ,{ "KBytes." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "StackObject" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "StackObject" , & fmt_text_b }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "using" }
 ,{ "the" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Constructor" }
 ,{ "creates" }
 ,{ "an" }
 ,{ "object" }
 ,{ "forwarding" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Destructor" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "The" }
 ,{ "class" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "reduced" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "to" }
 ,{ "provide" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "StackArray" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "StackArray" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "SimpleArray" , & fmt_text_a }
 ,{ "class." }
 ,{ "The" }
 ,{ "only" }
 ,{ "difference:" }
 ,{ "it" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "from" }
 ,{ "the" }
 ,{ "task" }
 ,{ "memory" }
 ,{ "stack." }
 ,{ "And" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "not" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
 ,{ "You" }
 ,{ "should" }
 ,{ "use" }
 ,{ "this" }
 ,{ "class" }
 ,{ "to" }
 ,{ "create" }
 ,{ "automatic" }
 ,{ "variables" }
 ,{ "when" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "work" }
 ,{ "array" }
 ,{ "of" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Page page = { "page_TaskMemStack" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TaskMonitor {

Text b0 = { {
 { "TaskMonitor" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/TaskMonitor.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/TaskMonitor.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TaskMonitor" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "TaskMonitor" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "monitor" }
 ,{ "task" }
 ,{ "switches." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "to" }
 ,{ "use" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "prepare()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "before" }
 ,{ "a" }
 ,{ "monitoring" }
 ,{ "is" }
 ,{ "started" }
 ,{ "as" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "start" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "complete()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "after" }
 ,{ "a" }
 ,{ "monitoring" }
 ,{ "is" }
 ,{ "stopped" }
 ,{ "as" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "stop" }
 ,{ "process." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "guardStopped()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "guard" }
 ,{ "method," }
 ,{ "it" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception," }
 ,{ "if" }
 ,{ "a" }
 ,{ "monitoring" }
 ,{ "is" }
 ,{ "in" }
 ,{ "progress." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "start/stop" }
 ,{ "a" }
 ,{ "monitoring." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "starts" }
 ,{ "a" }
 ,{ "monitoring" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "TaskMonitor" , & fmt_text_b }
 ,{ "object." }
 ,{ "The" }
 ,{ "destructor" }
 ,{ "or" }
 ,{ "the" }
 ,{ "method" }
 ,{ "stop()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "When" }
 ,{ "a" }
 ,{ "monitoring" }
 ,{ "is" }
 ,{ "started," }
 ,{ "record" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "monitor" }
 ,{ "task" }
 ,{ "context" }
 ,{ "switches." }
 ,{ "The" }
 ,{ "type" }
 ,{ "of" }
 ,{ "these" }
 ,{ "objects" }
 ,{ "is" }
 ,{ "derived" }
 ,{ "from" }
 ,{ "the" }
 ,{ "TaskMonitor::Record" , & fmt_text_b }
 ,{ "class." }
 ,{ "Each" }
 ,{ "task" }
 ,{ "and" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "uses" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "such" }
 ,{ "record." }
 ,{ "The" }
 ,{ "record" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "dynamically" }
 ,{ "by" }
 ,{ "the" }
 ,{ "methods" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "and" }
 ,{ "getInt()" , & fmt_text_b }
 ,{ "." }
 ,{ "Record" }
 ,{ "is" }
 ,{ "allocated" }
 ,{ "once" }
 ,{ "per" }
 ,{ "task." }
 ,{ "Allocation" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "under" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "protection," }
 ,{ "so" }
 ,{ "their" }
 ,{ "implementations" }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "must" }
 ,{ "be" }
 ,{ "\"quick\"," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "they" }
 ,{ "cannot" }
 ,{ "use" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "routines." }
 ,{ "Records" }
 ,{ "should" }
 ,{ "be" }
 ,{ "taken" }
 ,{ "from" }
 ,{ "some" }
 ,{ "preallocated" }
 ,{ "record" }
 ,{ "pool." }
 ,{ "One" }
 ,{ "record" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "multiple" }
 ,{ "tasks." }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "method" }
 ,{ "arguments" }
 ,{ "are:" }
 ,{ "the" }
 ,{ "task" }
 ,{ "name" }
 ,{ "and" }
 ,{ "the" }
 ,{ "task" }
 ,{ "priority." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "TaskMonitor::Record" , & fmt_text_b }
 ,{ "has" }
 ,{ "tree" }
 ,{ "methods" }
 ,{ "used" }
 ,{ "to" }
 ,{ "monitor" }
 ,{ "task" }
 ,{ "switches:" }
 ,{ "transit()" , & fmt_text_b }
 ,{ "," }
 ,{ "begin()" , & fmt_text_b }
 ,{ "," }
 ,{ "end()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "under" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "protection." }
 ,{ "The" }
 ,{ "transit()" , & fmt_text_b }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "always" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "the" }
 ,{ "object" }
 ,{ "(unless" }
 ,{ "it" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "begin()" , & fmt_text_b }
 ,{ "method)." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "a" }
 ,{ "context" }
 ,{ "switch" }
 ,{ "happens." }
 ,{ "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "called" }
 ,{ "once" }
 ,{ "when" }
 ,{ "a" }
 ,{ "monitoring" }
 ,{ "is" }
 ,{ "started" }
 ,{ "and" }
 ,{ "stopped." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "TaskMonitor_CPU" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "TaskMonitor_CPU" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "fully-functional" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "from" }
 ,{ "the" }
 ,{ "TaskMonitor" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "counts" }
 ,{ "CPU" }
 ,{ "time" }
 ,{ "usage." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "The" }
 ,{ "usage" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "very" }
 ,{ "simple:" }
 ,{ "run" }
 ,{ "it," }
 ,{ "stop" }
 ,{ "it" }
 ,{ "and" }
 ,{ "then" }
 ,{ "print" }
 ,{ "it." }
 ,{ "The" }
 ,{ "buf_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "record" }
 ,{ "buffer" }
 ,{ "length." }
 ,{ "Normally," }
 ,{ "100" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "enough." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Page page = { "page_TaskMonitor" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Taxonomy {

Text b0 = { {
 { "Taxonomy" }
 ,{ "of" }
 ,{ "classes" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "This" }
 ,{ "page" }
 ,{ "provides" }
 ,{ "the" }
 ,{ "list" }
 ,{ "of" }
 ,{ "common" }
 ,{ "terms" }
 ,{ "and" }
 ,{ "the" }
 ,{ "taxonomy" }
 ,{ "of" }
 ,{ "classes." }
 ,{ "Class" , & fmt_text_b }
 ,{ "in" }
 ,{ "C++" }
 ,{ "is" }
 ,{ "a" }
 ,{ "very" }
 ,{ "generic" }
 ,{ "and" }
 ,{ "powerful" }
 ,{ "entity," }
 ,{ "so" }
 ,{ "we" }
 ,{ "classify" }
 ,{ "them" }
 ,{ "by" }
 ,{ "their" }
 ,{ "purpose" }
 ,{ "and" }
 ,{ "nature." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Terms" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "Efficient" , & fmt_text_b }
 ,{ "means" }
 ,{ "O(1)-nothrow" , & fmt_text_b }
 ,{ "." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "of" }
 ,{ "operations," }
 ,{ "which" }
 ,{ "has" }
 ,{ "a" }
 ,{ "definite," }
 ,{ "reasonably" }
 ,{ "small" }
 ,{ "execution" }
 ,{ "time" }
 ,{ "limit" }
 ,{ "and" }
 ,{ "always" }
 ,{ "successful." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Derivability" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "ability" }
 ,{ "of" }
 ,{ "some" }
 ,{ "entity" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "building" }
 ,{ "block" }
 ,{ "of" }
 ,{ "the" }
 ,{ "whole." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "Swap" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Class" , & fmt_h3_i }
 ,{ "ification" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "Word" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "Word" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "enumerator," }
 ,{ "purposed" }
 ,{ "to" }
 ,{ "verbose" }
 ,{ "some" }
 ,{ "generic" }
 ,{ "action." }
 ,{ "In" }
 ,{ "C++" }
 ,{ "there" }
 ,{ "are" }
 ,{ "no" }
 ,{ "named" }
 ,{ "constructors." }
 ,{ "But" }
 ,{ "it" }
 ,{ "is" }
 ,{ "possible" }
 ,{ "to" }
 ,{ "add" }
 ,{ "an" }
 ,{ "unused" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "a" }
 ,{ "Word" , & fmt_text_b }
 ,{ "type" }
 ,{ "to" }
 ,{ "clearly" }
 ,{ "distinguish" }
 ,{ "between" }
 ,{ "different" }
 ,{ "overloaded" }
 ,{ "constructors." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "Nothing" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Guard" }
 ,{ "function" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "Guard" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "ensures" }
 ,{ "some" }
 ,{ "condition." }
 ,{ "If" }
 ,{ "the" }
 ,{ "required" }
 ,{ "condition" }
 ,{ "is" }
 ,{ "not" }
 ,{ "true," }
 ,{ "an" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "GuardIndex()" , & fmt_text_a }
 ,{ "." }
 ,{ "Usually," }
 ,{ "we" }
 ,{ "define" }
 ,{ "a" }
 ,{ "guard" }
 ,{ "function" }
 ,{ "by" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Class" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "also" }
 ,{ "be" }
 ,{ "guard" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Abort" }
 ,{ "function" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "Abort" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "aborts" }
 ,{ "execution" }
 ,{ "with" }
 ,{ "some" }
 ,{ "diagnostic" }
 ,{ "message." }
 ,{ "For" }
 ,{ "example," }
 ,{ "NoObjectAbort()" , & fmt_text_a }
 ,{ "is" }
 ,{ "called" }
 ,{ "when" }
 ,{ "the" }
 ,{ "requested" }
 ,{ "object" }
 ,{ "has" }
 ,{ "not" }
 ,{ "been" }
 ,{ "initialized." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Creator" }
 ,{ "function" }
} , & fmt_h4 , & align_h4 } ;

Text b14 = { {
 { "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "creates" }
 ,{ "some" }
 ,{ "object." }
 ,{ "Normally" }
 ,{ "we" }
 ,{ "create" }
 ,{ "an" }
 ,{ "object" }
 ,{ "using" }
 ,{ "its" }
 ,{ "class" }
 ,{ "constructor." }
 ,{ "But" }
 ,{ "if" }
 ,{ "we" }
 ,{ "are" }
 ,{ "using" }
 ,{ "class" }
 ,{ "templates," }
 ,{ "we" }
 ,{ "have" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "list." }
 ,{ "Using" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "allows" }
 ,{ "infer" }
 ,{ "this" }
 ,{ "list" }
 ,{ "from" }
 ,{ "the" }
 ,{ "function" }
 ,{ "argument" }
 ,{ "types." }
 ,{ "In" }
 ,{ "C++17" }
 ,{ "Creator" , & fmt_text_b }
 ,{ "function" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "obsolete," }
 ,{ "but" }
 ,{ "still" }
 ,{ "used" }
 ,{ "in" }
 ,{ "some" }
 ,{ "situations." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Partial" }
 ,{ "class" }
} , & fmt_h4 , & align_h4 } ;

Text b16 = { {
 { "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "not" }
 ,{ "intended" }
 ,{ "for" }
 ,{ "a" }
 ,{ "direct" }
 ,{ "usage," }
 ,{ "but" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "building" }
 ,{ "block" }
 ,{ "for" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
 ,{ "Like" }
 ,{ "a" }
 ,{ "sophisticated" }
 ,{ "machine," }
 ,{ "built" }
 ,{ "from" }
 ,{ "a" }
 ,{ "machine" }
 ,{ "parts," }
 ,{ "in" }
 ,{ "C++" }
 ,{ "a" }
 ,{ "complex" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "constructed" }
 ,{ "from" }
 ,{ "smaller" }
 ,{ "and" }
 ,{ "simpler" }
 ,{ "classes." }
 ,{ "Sometimes" }
 ,{ "such" }
 ,{ "parts" }
 ,{ "are" }
 ,{ "not" }
 ,{ "usable" }
 ,{ "alone." }
 ,{ "Hence" }
 ,{ "we" }
 ,{ "call" }
 ,{ "them" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "ToMemBase" , & fmt_text_a }
 ,{ "." }
 ,{ "Such" }
 ,{ "classes" }
 ,{ "often" }
 ,{ "have" }
 ,{ "names" }
 ,{ "ending" }
 ,{ "in" }
 ,{ "\"Base\"." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Small" }
 ,{ "Data" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b18 = { {
 { "Small" , & fmt_text_b }
 ,{ "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "type" }
 ,{ "like" }
 ,{ "basic" }
 ,{ "types" }
 ,{ "with" }
 ,{ "a" }
 ,{ "small" }
 ,{ "state" }
 ,{ "and" }
 ,{ "data" }
 ,{ "semantic." }
 ,{ "These" }
 ,{ "types" }
 ,{ "have" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "copy" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "assign" }
 ,{ "operator." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Data" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "Data" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "type" }
 ,{ "with" }
 ,{ "data" }
 ,{ "semantic," }
 ,{ "but" }
 ,{ "with" }
 ,{ "an" }
 ,{ "arbitrary" }
 ,{ "large" }
 ,{ "state." }
 ,{ "The" }
 ,{ "simplest" }
 ,{ "example" }
 ,{ "is" }
 ,{ "the" }
 ,{ "class" }
 ,{ "String" , & fmt_text_a }
 ,{ "." }
 ,{ "The" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "such" }
 ,{ "types" }
 ,{ "is" }
 ,{ "to" }
 ,{ "store" }
 ,{ "some" }
 ,{ "piece" }
 ,{ "of" }
 ,{ "data." }
 ,{ "The" }
 ,{ "data" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "some" }
 ,{ "owned" }
 ,{ "buffer." }
 ,{ "They" }
 ,{ "may" }
 ,{ "have" }
 ,{ "the" }
 ,{ "copy" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "assign" }
 ,{ "operator." }
 ,{ "These" }
 ,{ "operators" }
 ,{ "can" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "as" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "operations" }
 ,{ "using" }
 ,{ "reference" }
 ,{ "counting." }
 ,{ "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "don't" }
 ,{ "make" }
 ,{ "a" }
 ,{ "class" }
 ,{ "copyable" }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "way" }
 ,{ "to" }
 ,{ "make" }
 ,{ "it" }
 ,{ "efficient" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "such" }
 ,{ "situation" }
 ,{ "the" }
 ,{ "class" }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "usually" }
 ,{ "swappable/movable." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Resource" }
 ,{ "Host" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b22 = { {
 { "Resource" , & fmt_text_b }
 ,{ "Host" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "wrapper" }
 ,{ "over" }
 ,{ "some" }
 ,{ "resource" }
 ,{ "handle," }
 ,{ "like" }
 ,{ "a" }
 ,{ "file" }
 ,{ "descriptor," }
 ,{ "a" }
 ,{ "socket" }
 ,{ "descriptor," }
 ,{ "any" }
 ,{ "other" }
 ,{ "OS" }
 ,{ "object" }
 ,{ "descriptor," }
 ,{ "object" }
 ,{ "pointer," }
 ,{ "memory" }
 ,{ "block" }
 ,{ "pointer" }
 ,{ "etc." }
 ,{ "In" }
 ,{ "destructor" }
 ,{ "the" }
 ,{ "handle" }
 ,{ "is" }
 ,{ "released." }
 ,{ "The" }
 ,{ "purpose" }
 ,{ "of" }
 ,{ "such" }
 ,{ "types" }
 ,{ "is" }
 ,{ "to" }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "resource" }
 ,{ "will" }
 ,{ "be" }
 ,{ "eventually" }
 ,{ "released." }
 ,{ "It" }
 ,{ "also" }
 ,{ "provides" }
 ,{ "some" }
 ,{ "methods" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "resource." }
 ,{ "Resource" , & fmt_text_b }
 ,{ "Host" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "swappable/movable." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Scope" }
 ,{ "Lock" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b24 = { {
 { "Scope" , & fmt_text_b }
 ,{ "Lock" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "objects" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "\"lock\"" }
 ,{ "something" }
 ,{ "for" }
 ,{ "the" }
 ,{ "duration" }
 ,{ "of" }
 ,{ "a" }
 ,{ "scope." }
 ,{ "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "Mutex::Lock" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "lock" }
 ,{ "a" }
 ,{ "mutex:" }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "Scope" , & fmt_text_b }
 ,{ "Lock" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "performs" }
 ,{ "some" }
 ,{ "\"entry\"" }
 ,{ "operation" }
 ,{ "in" }
 ,{ "its" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "then" }
 ,{ "when" }
 ,{ "scope" }
 ,{ "is" }
 ,{ "exited" }
 ,{ "by" }
 ,{ "any" }
 ,{ "way" }
 ,{ "some" }
 ,{ "\"leave\"" }
 ,{ "operation" }
 ,{ "in" }
 ,{ "its" }
 ,{ "destructor." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Container" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b27 = { {
 { "Container" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "purposed" }
 ,{ "to" }
 ,{ "store" }
 ,{ "another" }
 ,{ "objects." }
 ,{ "Container" }
 ,{ "not" }
 ,{ "only" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "storage," }
 ,{ "but" }
 ,{ "also" }
 ,{ "controls" }
 ,{ "the" }
 ,{ "life-time" }
 ,{ "of" }
 ,{ "contained" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Resource" }
 ,{ "Provider" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b29 = { {
 { "Resource" , & fmt_text_b }
 ,{ "Provider" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "purposed" }
 ,{ "to" }
 ,{ "distribute" }
 ,{ "some" }
 ,{ "resource." }
 ,{ "For" }
 ,{ "example," }
 ,{ "the" }
 ,{ "memory." }
 ,{ "Usually," }
 ,{ "all" }
 ,{ "taken" }
 ,{ "resources" }
 ,{ "must" }
 ,{ "be" }
 ,{ "given" }
 ,{ "back" }
 ,{ "before" }
 ,{ "the" }
 ,{ "provider" }
 ,{ "object" }
 ,{ "is" }
 ,{ "destroyed." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Pointer" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b31 = { {
 { "Pointer" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "\"points\"" }
 ,{ "to" }
 ,{ "another" }
 ,{ "object." }
 ,{ "It" }
 ,{ "gives" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "functionality." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Cursor" }
} , & fmt_h4 , & align_h4 } ;

Text b33 = { {
 { "Cursor" , & fmt_text_b }
 ,{ "can" }
 ,{ "iterate" }
 ,{ "through" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "objects." }
 ,{ "In" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "interface" }
 ,{ "is" }
 ,{ "used" }
 ,{ "for" }
 ,{ "cursors:" }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "typical" }
 ,{ "cursor" }
 ,{ "loop:" }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "Range" }
 ,{ "Access" }
 ,{ "Interface" }
} , & fmt_h4 , & align_h4 } ;

Text b36 = { {
 { "Range" , & fmt_text_b }
 ,{ "Access" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "interface," }
 ,{ "used" }
 ,{ "to" }
 ,{ "present" }
 ,{ "a" }
 ,{ "range" }
 ,{ "of" }
 ,{ "objects:" }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "Usually," }
 ,{ "this" }
 ,{ "interface" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "by" }
 ,{ "Container" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s" }
 ,{ "or" }
 ,{ "some" }
 ,{ "Proxy" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Link link_ObjectPointerInterface = { & page , { 38 } } ;

Text b38 = { {
 { "Object" }
 ,{ "Pointer" }
 ,{ "Interface" }
} , & fmt_h4 , & align_h4 } ;

Text b39 = { {
 { "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "by" }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s" }
 ,{ "to" }
 ,{ "give" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "pointee" }
 ,{ "object:" }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "This" }
 ,{ "interface" }
 ,{ "can" }
 ,{ "be" }
 ,{ "reduced" }
 ,{ "to" }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "if" }
 ,{ "the" }
 ,{ "class" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "Property" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b43 = { {
 { "Property" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "classes," }
 ,{ "providing" }
 ,{ "some" }
 ,{ "properties" }
 ,{ "and" }
 ,{ "meant" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "as" }
 ,{ "the" }
 ,{ "base" }
 ,{ "to" }
 ,{ "inherit" }
 ,{ "these" }
 ,{ "properties" }
 ,{ "by" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
 ,{ "For" }
 ,{ "example," }
 ,{ "see" }
 ,{ "NoCopy" , & fmt_text_a }
 ,{ "or" }
 ,{ "MemBase" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "Helper" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b45 = { {
 { "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "type," }
 ,{ "designed" }
 ,{ "to" }
 ,{ "do" }
 ,{ "some" }
 ,{ "job," }
 ,{ "usually" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "such" }
 ,{ "types" }
 ,{ "are" }
 ,{ "temporary," }
 ,{ "or" }
 ,{ "local" }
 ,{ "objects." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "PrintSet" , & fmt_text_a }
 ,{ "." }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "s" }
 ,{ "are" }
 ,{ "used" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "functions," }
 ,{ "in" }
 ,{ "such" }
 ,{ "cases," }
 ,{ "where," }
 ,{ "for" }
 ,{ "instance," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "required," }
 ,{ "like" }
 ,{ "in" }
 ,{ "the" }
 ,{ "example" }
 ,{ "above." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "Proxy" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b47 = { {
 { "Proxy" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "is" }
 ,{ "close" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "Objects" }
 ,{ "of" }
 ,{ "such" }
 ,{ "types" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "do" }
 ,{ "some" }
 ,{ "job" }
 ,{ "on" }
 ,{ "behalf" }
 ,{ "of" }
 ,{ "another" }
 ,{ "type" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Device" }
 ,{ "Type" }
} , & fmt_h4 , & align_h4 } ;

Text b49 = { {
 { "It" }
 ,{ "is" }
 ,{ "not" }
 ,{ "easy" }
 ,{ "to" }
 ,{ "explain" }
 ,{ "the" }
 ,{ "term" }
 ,{ "Device" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "simplest" }
 ,{ "example" }
 ,{ "is" }
 ,{ "a" }
 ,{ "printing" }
 ,{ "device." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "putting" }
 ,{ "characters" }
 ,{ "into" }
 ,{ "some" }
 ,{ "output" }
 ,{ "storage" }
 ,{ "(for" }
 ,{ "example," }
 ,{ "a" }
 ,{ "file)." }
 ,{ "Or" }
 ,{ "serialization/deserialization" }
 ,{ "devices." }
 ,{ "Another" }
 ,{ "example" }
 ,{ "â€”" }
 ,{ "packet" }
 ,{ "processing" }
 ,{ "devices," }
 ,{ "like" }
 ,{ "PTP" , & fmt_text_b }
 ,{ "protocol" }
 ,{ "device" }
 ,{ "classes." }
 ,{ "You" }
 ,{ "can" }
 ,{ "image" }
 ,{ "some" }
 ,{ "mechanical" }
 ,{ "device," }
 ,{ "doing" }
 ,{ "some" }
 ,{ "job." }
 ,{ "If" }
 ,{ "you" }
 ,{ "can" }
 ,{ "think" }
 ,{ "about" }
 ,{ "some" }
 ,{ "class" }
 ,{ "like" }
 ,{ "about" }
 ,{ "such" }
 ,{ "device," }
 ,{ "it" }
 ,{ "is" }
 ,{ "likely" }
 ,{ "a" }
 ,{ "Device" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Algorithm" }
 ,{ "Package" }
} , & fmt_h4 , & align_h4 } ;

Text b51 = { {
 { "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "stateless" }
 ,{ "class," }
 ,{ "containing" }
 ,{ "definitions" }
 ,{ "of" }
 ,{ "constants," }
 ,{ "types," }
 ,{ "functions." }
 ,{ "It" }
 ,{ "is" }
 ,{ "purposed" }
 ,{ "to" }
 ,{ "serve" }
 ,{ "as" }
 ,{ "a" }
 ,{ "template" }
 ,{ "argument" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "something." }
 ,{ "It" }
 ,{ "allows" }
 ,{ "to" }
 ,{ "customize" }
 ,{ "templated" }
 ,{ "definitions" }
 ,{ "in" }
 ,{ "a" }
 ,{ "very" }
 ,{ "flexible" }
 ,{ "manner." }
 ,{ "Such" }
 ,{ "class" }
 ,{ "can" }
 ,{ "be" }
 ,{ "huge" }
 ,{ "or" }
 ,{ "small." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "OwnAlgo" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "Class-function" }
} , & fmt_h4 , & align_h4 } ;

Text b53 = { {
 { "Class-function" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "used" }
 ,{ "as" }
 ,{ "a" }
 ,{ "function." }
 ,{ "Its" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "a" }
 ,{ "function" }
 ,{ "body." }
 ,{ "The" }
 ,{ "constructed" }
 ,{ "object" }
 ,{ "is" }
 ,{ "a" }
 ,{ "return" }
 ,{ "value." }
 ,{ "Such" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "useful" }
 ,{ "if" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "return" }
 ,{ "a" }
 ,{ "large" }
 ,{ "or" }
 ,{ "non-copyable" }
 ,{ "object." }
 ,{ "See," }
 ,{ "for" }
 ,{ "example," }
 ,{ "MemStat" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "Meta-class" }
} , & fmt_h4 , & align_h4 } ;

Text b55 = { {
 { "Meta-class" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class," }
 ,{ "used" }
 ,{ "to" }
 ,{ "present" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "a" }
 ,{ "meta-calculation." }
 ,{ "It" }
 ,{ "contains" }
 ,{ "only" }
 ,{ "static" }
 ,{ "members," }
 ,{ "like" }
 ,{ "constants," }
 ,{ "types" }
 ,{ "or" }
 ,{ "static" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "Meta-function" }
} , & fmt_h4 , & align_h4 } ;

Text b57 = { {
 { "Meta-function" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "class" }
 ,{ "template," }
 ,{ "instantiation" }
 ,{ "of" }
 ,{ "meta-function" }
 ,{ "produces" }
 ,{ "a" }
 ,{ "meta-class." }
 ,{ "Usually," }
 ,{ "Meta-function" , & fmt_text_b }
 ,{ "are" }
 ,{ "defined" }
 ,{ "using" }
 ,{ "partial" }
 ,{ "or" }
 ,{ "complete" }
 ,{ "specialization." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Meta::SelectCtor" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "Meta-constant" }
} , & fmt_h4 , & align_h4 } ;

Text b59 = { {
 { "Meta-constant" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "template." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "MaxUInt" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "Meta-type" }
} , & fmt_h4 , & align_h4 } ;

Text b61 = { {
 { "Meta-type" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "type" }
 ,{ "template." }
 ,{ "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Meta::Select" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Taxonomy" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b61 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TextLabel {

Text b0 = { {
 { "TextLabel" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TextLabel.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TextLabel.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TextLabel" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "lightweight" }
 ,{ "text" }
 ,{ "representing" }
 ,{ "class." }
 ,{ "It" }
 ,{ "does" }
 ,{ "not" }
 ,{ "hold" }
 ,{ "any" }
 ,{ "resources" }
 ,{ "and" }
 ,{ "has" }
 ,{ "no" }
 ,{ "life-time" }
 ,{ "limit" }
 ,{ "(destructor" }
 ,{ "is" }
 ,{ "trivial)." }
 ,{ "We" }
 ,{ "need" }
 ,{ "such" }
 ,{ "class," }
 ,{ "because" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "such" }
 ,{ "context," }
 ,{ "where" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "is" }
 ,{ "impossible" }
 ,{ "(for" }
 ,{ "example," }
 ,{ "the" }
 ,{ "memory" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "not" }
 ,{ "initialized" }
 ,{ "yet)." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "If" }
 ,{ "you" }
 ,{ "have" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "object," }
 ,{ "you" }
 ,{ "can" }
 ,{ "build" }
 ,{ "its" }
 ,{ "string," }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getStr()" , & fmt_text_b }
 ,{ "," }
 ,{ "you" }
 ,{ "should" }
 ,{ "supply" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "buffer," }
 ,{ "where" }
 ,{ "the" }
 ,{ "string" }
 ,{ "will" }
 ,{ "possibly" }
 ,{ "be" }
 ,{ "constructed." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "print" }
 ,{ "the" }
 ,{ "string," }
 ,{ "string" }
 ,{ "print" }
 ,{ "attributes" }
 ,{ "are" }
 ,{ "supported." }
 ,{ "The" }
 ,{ "method" }
 ,{ "print()" , & fmt_text_b }
 ,{ "uses" }
 ,{ "a" }
 ,{ "temporary" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "TextBufLen" , & fmt_text_a }
 ,{ "." }
 ,{ "We" }
 ,{ "assume" }
 ,{ "that" }
 ,{ "the" }
 ,{ "string," }
 ,{ "represented" }
 ,{ "by" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "object," }
 ,{ "has" }
 ,{ "a" }
 ,{ "reasonably" }
 ,{ "small" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "There" }
 ,{ "are" }
 ,{ "four" }
 ,{ "ways" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "can" }
 ,{ "construct" }
 ,{ "an" }
 ,{ "empty" }
 ,{ "string" }
 ,{ "object" }
 ,{ "using" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "You" }
 ,{ "can" }
 ,{ "build" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "persistent" }
 ,{ "C" }
 ,{ "zero-terminated" }
 ,{ "string" }
 ,{ "(i.e." }
 ,{ "from" }
 ,{ "a" }
 ,{ "string" }
 ,{ "literal)." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "The" }
 ,{ "third" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "from" }
 ,{ "an" }
 ,{ "enum" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "enum" , & fmt_text_b }
 ,{ "value" }
 ,{ "range" }
 ,{ "must" }
 ,{ "fit" }
 ,{ "in" }
 ,{ "the" }
 ,{ "int" , & fmt_text_b }
 ,{ "value" }
 ,{ "range." }
 ,{ "The" }
 ,{ "function" }
 ,{ "GetTextDesc()" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "defined" }
 ,{ "for" }
 ,{ "this" }
 ,{ "enum" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Finally," }
 ,{ "the" }
 ,{ "more" }
 ,{ "general" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "TextLabel" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "TextLabelFunc" , & fmt_text_b }
 ,{ "and" }
 ,{ "the" }
 ,{ "Handle" , & fmt_text_b }
 ,{ "." }
 ,{ "Just" }
 ,{ "remember," }
 ,{ "the" }
 ,{ "handle" }
 ,{ "must" }
 ,{ "be" }
 ,{ "persistent," }
 ,{ "it" }
 ,{ "cannot" }
 ,{ "have" }
 ,{ "a" }
 ,{ "limited" }
 ,{ "life-time." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "next" }
 ,{ "class" }
 ,{ "is" }
 ,{ "NumTextLabel" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "It" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "generate" }
 ,{ "such" }
 ,{ "labels" }
 ,{ "like" }
 ,{ "\"Sem1\"," }
 ,{ "\"Sem2\"," }
 ,{ "..." }
 ,{ "." }
 ,{ "Use" }
 ,{ "it" }
 ,{ "as" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Page page = { "page_TextLabel" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TextTools {

Text b0 = { {
 { "Text" }
 ,{ "tools" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TextTools.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TextTools.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "header" }
 ,{ "contains" }
 ,{ "several" }
 ,{ "simple" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "text" }
 ,{ "and" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Character" }
 ,{ "property" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "CharIsEOL()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "end-of-line" }
 ,{ "character," }
 ,{ "one" }
 ,{ "of" }
 ,{ "'\\n'" }
 ,{ "or" }
 ,{ "'\\r'." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "CharIsBin()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "char" }
 ,{ "is" }
 ,{ "a" }
 ,{ "binary" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "CharIsDec()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "char" }
 ,{ "is" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "CharIsHex()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "char" }
 ,{ "is" }
 ,{ "a" }
 ,{ "hexadecimal" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "CharBinValue()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "binary" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character," }
 ,{ "or" }
 ,{ "-1" }
 ,{ "if" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "binary" }
 ,{ "digit." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "AllChars()" }
} , & fmt_h4 , & align_h4 } ;

Text b10 = { {
 { "AllChars()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "the" }
 ,{ "given" }
 ,{ "functor" }
 ,{ "for" }
 ,{ "all" }
 ,{ "256" }
 ,{ "values" }
 ,{ "of" }
 ,{ "char" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "TextPos" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "This" }
 ,{ "class" }
 ,{ "represents" }
 ,{ "a" }
 ,{ "text" }
 ,{ "position." }
 ,{ "It" }
 ,{ "also" }
 ,{ "counts" }
 ,{ "a" }
 ,{ "new" }
 ,{ "text" }
 ,{ "position" }
 ,{ "after" }
 ,{ "some" }
 ,{ "text" }
 ,{ "fragment." }
 ,{ "It" }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "calculate" }
 ,{ "text" }
 ,{ "positions" }
 ,{ "during" }
 ,{ "a" }
 ,{ "text" }
 ,{ "file" }
 ,{ "processing." }
 ,{ "This" }
 ,{ "class" }
 ,{ "counts" }
 ,{ "all" }
 ,{ "cases" }
 ,{ "\"\\r\"," }
 ,{ "\"\\n\"," }
 ,{ "\"\\r\\n\"" }
 ,{ "as" }
 ,{ "a" }
 ,{ "line" }
 ,{ "delimiters." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "sets" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "text" }
 ,{ "position:" }
 ,{ "line" , & fmt_text_b }
 ,{ "is" }
 ,{ "1" }
 ,{ "and" }
 ,{ "col" , & fmt_text_b }
 ,{ "is" }
 ,{ "1." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "nextPos()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "next" }
 ,{ "position" }
 ,{ "in" }
 ,{ "the" }
 ,{ "same" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "nextLine()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "to" }
 ,{ "the" }
 ,{ "begin" }
 ,{ "of" }
 ,{ "the" }
 ,{ "next" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "update()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "on" }
 ,{ "len" , & fmt_text_b }
 ,{ "positions" }
 ,{ "at" }
 ,{ "the" }
 ,{ "same" }
 ,{ "line." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "update()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "by" }
 ,{ "the" }
 ,{ "text" }
 ,{ "fragment." }
 ,{ "The" }
 ,{ "fragment" }
 ,{ "must" }
 ,{ "not" }
 ,{ "break" }
 ,{ "a" }
 ,{ "sequence" }
 ,{ "\"\\r\\n\"." }
 ,{ "In" }
 ,{ "UTF8-compatible" }
 ,{ "mode" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "symbols" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "determine" }
 ,{ "the" }
 ,{ "column," }
 ,{ "not" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "The" }
 ,{ "class" }
 ,{ "is" }
 ,{ "printable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "form" }
 ,{ "\"(line=<line>,col=<col>)\"" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "TextPosCounter" }
} , & fmt_h4 , & align_h4 } ;

Text b20 = { {
 { "This" }
 ,{ "class" }
 ,{ "counts" }
 ,{ "the" }
 ,{ "TextPos" , & fmt_text_b }
 ,{ "over" }
 ,{ "a" }
 ,{ "character" }
 ,{ "stream." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "reset()" , & fmt_text_b }
 ,{ "resets" }
 ,{ "the" }
 ,{ "class" }
 ,{ "to" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "state." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "Methods" }
 ,{ "put()" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "feed" }
 ,{ "the" }
 ,{ "class" }
 ,{ "by" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "You" }
 ,{ "may" }
 ,{ "retrieve" }
 ,{ "the" }
 ,{ "current" }
 ,{ "text" }
 ,{ "position" }
 ,{ "by" }
 ,{ "the" }
 ,{ "casting" }
 ,{ "to" }
 ,{ "the" }
 ,{ "TextPos" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "CharPropTable" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "CharPropTable" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "look-up" }
 ,{ "table," }
 ,{ "which" }
 ,{ "sets" }
 ,{ "a" }
 ,{ "value" }
 ,{ "(character" }
 ,{ "class)" }
 ,{ "to" }
 ,{ "each" }
 ,{ "character." }
 ,{ "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "must" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "table" }
 ,{ "using" }
 ,{ "protected" }
 ,{ "methods." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "CharClass" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "value" }
 ,{ "type," }
 ,{ "enum" , & fmt_text_b }
 ,{ "type" }
 ,{ "is" }
 ,{ "expected." }
 ,{ "DefaultClass" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "default" }
 ,{ "value," }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "each" }
 ,{ "character." }
 ,{ "Constructor" }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "table" }
 ,{ "assigning" }
 ,{ "the" }
 ,{ "DefaultClass" , & fmt_text_b }
 ,{ "to" }
 ,{ "each" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "value," }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "can" }
 ,{ "use" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "protected" }
 ,{ "members" }
 ,{ "to" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "table." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "set()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "setSet()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "to" }
 ,{ "the" }
 ,{ "set" }
 ,{ "of" }
 ,{ "characters" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "zero-terminated" }
 ,{ "string." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "setIf()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "to" }
 ,{ "characters," }
 ,{ "satisfied" }
 ,{ "the" }
 ,{ "condition," }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "functor-predicate." }
} , & fmt_text , & align_text } ;

Page page = { "page_TextTools" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Tick {

Text b0 = { {
 { "TickCount" }
 ,{ "and" }
 ,{ "TickJob" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/Tick.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/Tick.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TickJob" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "TickJob" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "do" }
 ,{ "some" }
 ,{ "processing" }
 ,{ "during" }
 ,{ "the" }
 ,{ "system" }
 ,{ "tick." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "the" }
 ,{ "TickJob" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "an" }
 ,{ "action" }
 ,{ "function." }
 ,{ "This" }
 ,{ "function" }
 ,{ "will" }
 ,{ "be" }
 ,{ "called" }
 ,{ "during" }
 ,{ "the" }
 ,{ "system" }
 ,{ "tick," }
 ,{ "if" }
 ,{ "the" }
 ,{ "TickJob" , & fmt_text_b }
 ,{ "object" }
 ,{ "is" }
 ,{ "activated." }
 ,{ "The" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "as" }
 ,{ "such" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "\"quick" }
 ,{ "function\"." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "TickJob" , & fmt_text_b }
 ,{ "destructor" }
 ,{ "calls" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "deactivated." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "All" }
 ,{ "other" }
 ,{ "TickJob" , & fmt_text_b }
 ,{ "methods" }
 ,{ "must" , & fmt_text_Alert }
 ,{ "be" , & fmt_text_Alert }
 ,{ "called" , & fmt_text_Alert }
 ,{ "under" , & fmt_text_Alert }
 ,{ "IntLock" , & fmt_text_Alert }
 ,{ "protection" , & fmt_text_Alert }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "isActive()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "activated." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "start()" , & fmt_text_b }
 ,{ "activates" }
 ,{ "the" }
 ,{ "object." }
 ,{ "It" }
 ,{ "does" }
 ,{ "nothing," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "already" }
 ,{ "active." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "stop()" , & fmt_text_b }
 ,{ "deactivates" }
 ,{ "the" }
 ,{ "object." }
 ,{ "It" }
 ,{ "does" }
 ,{ "nothing," }
 ,{ "if" }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "not" }
 ,{ "active." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "TickCount" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "The" }
 ,{ "class" }
 ,{ "TickCount" , & fmt_text_b }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "count" }
 ,{ "ticks" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "timeouts" }
 ,{ "and" }
 ,{ "periodic" }
 ,{ "time" }
 ,{ "events." }
 ,{ "It" }
 ,{ "is" }
 ,{ "built" }
 ,{ "using" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "class," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "a" }
 ,{ "tick" }
 ,{ "frequency." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Internally" }
 ,{ "TickCount" , & fmt_text_b }
 ,{ "stores" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "time" }
 ,{ "until" }
 ,{ "an" }
 ,{ "event." }
 ,{ "It" }
 ,{ "decrements" }
 ,{ "it" }
 ,{ "each" }
 ,{ "tick." }
 ,{ "The" }
 ,{ "initial" }
 ,{ "time" }
 ,{ "in" }
 ,{ "milliseconds" }
 ,{ "can" }
 ,{ "be" }
 ,{ "set" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "set()" , & fmt_text_b }
 ,{ "." }
 ,{ "Countdown" }
 ,{ "is" }
 ,{ "performed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "tick()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "method" }
 ,{ "without" }
 ,{ "parameter" }
 ,{ "is" }
 ,{ "used," }
 ,{ "if" }
 ,{ "the" }
 ,{ "only" }
 ,{ "one" }
 ,{ "event" }
 ,{ "is" }
 ,{ "required." }
 ,{ "If" }
 ,{ "the" }
 ,{ "periodic" }
 ,{ "tick" }
 ,{ "is" }
 ,{ "required," }
 ,{ "then" }
 ,{ "tick()" , & fmt_text_b }
 ,{ "with" }
 ,{ "the" }
 ,{ "required" }
 ,{ "period" }
 ,{ "in" }
 ,{ "milliseconds" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used." }
 ,{ "Both" }
 ,{ "methods" }
 ,{ "return" }
 ,{ "true" , & fmt_text_b }
 ,{ "to" }
 ,{ "signal" }
 ,{ "about" }
 ,{ "the" }
 ,{ "event." }
 ,{ "The" }
 ,{ "generated" }
 ,{ "event" }
 ,{ "period" }
 ,{ "is" }
 ,{ "statistically" }
 ,{ "precise," }
 ,{ "unless" }
 ,{ "it" }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "period" }
 ,{ "(more" }
 ,{ "precisely," }
 ,{ "the" }
 ,{ "inequality" }
 ,{ "period_msec" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "1000/TPS" , & fmt_text_b }
 ,{ "must" }
 ,{ "hold" }
 ,{ "true," }
 ,{ "this" }
 ,{ "is" }
 ,{ "satisfied," }
 ,{ "if" }
 ,{ "TPS" , & fmt_text_b }
 ,{ ">1000" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "constant" }
 ,{ "TicksPerSec" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "system" }
 ,{ "tick" }
 ,{ "frequency" }
 ,{ "and" }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target:" }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "in" }
 ,{ "the" }
 ,{ "file" }
 ,{ "dev/DevTick.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Tick" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Ticker {

Text b0 = { {
 { "Ticker" }
 ,{ "and" }
 ,{ "TimedTrigger" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/task/Ticker.h" , & fmt_text_Files_b }
 ,{ "CCore/src/task/Ticker.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Ticker" }
} , & fmt_h4 , & align_h4 } ;

Text b3 = { {
 { "The" }
 ,{ "class" }
 ,{ "Ticker" , & fmt_text_b }
 ,{ "is" }
 ,{ "built" }
 ,{ "upon" }
 ,{ "the" }
 ,{ "class" }
 ,{ "TickJob" , & fmt_text_a }
 ,{ "and" }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "schedule" }
 ,{ "a" }
 ,{ "timed" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "an" }
 ,{ "action" }
 ,{ "function" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "function" }
 ,{ "will" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "as" }
 ,{ "such" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "\"quick" }
 ,{ "function\"." }
 ,{ "The" }
 ,{ "second" }
 ,{ "constructor" }
 ,{ "also" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "parameters." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Destructor" }
 ,{ "stops" }
 ,{ "the" }
 ,{ "ticker," }
 ,{ "if" }
 ,{ "it" }
 ,{ "was" }
 ,{ "not" }
 ,{ "stopped." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "start()" , & fmt_text_b }
 ,{ "starts" }
 ,{ "or" }
 ,{ "restarts" }
 ,{ "the" }
 ,{ "object" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "parameters." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "delay" }
 ,{ "before" }
 ,{ "the" }
 ,{ "first" }
 ,{ "action." }
 ,{ "The" }
 ,{ "second," }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "zero," }
 ,{ "specifies" }
 ,{ "the" }
 ,{ "period," }
 ,{ "actions" }
 ,{ "will" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "periodicity." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "stop()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "the" }
 ,{ "ticker." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "TimedTrigger" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "TimedTrigger" , & fmt_text_b }
 ,{ "allows" }
 ,{ "delay" }
 ,{ "and" }
 ,{ "combine" }
 ,{ "actions" }
 ,{ "to" }
 ,{ "reduce" }
 ,{ "the" }
 ,{ "action" }
 ,{ "call" }
 ,{ "frequency." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Constructor" }
 ,{ "arguments" }
 ,{ "are:" }
 ,{ "an" }
 ,{ "action" }
 ,{ "function," }
 ,{ "which" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "delay" }
 ,{ "time." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Destructor" }
 ,{ "stops" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "trigger()" , & fmt_text_b }
 ,{ "\"triggers\"" }
 ,{ "the" }
 ,{ "action." }
 ,{ "It" }
 ,{ "will" }
 ,{ "be" }
 ,{ "performed" }
 ,{ "within" }
 ,{ "delay" , & fmt_text_b }
 ,{ "time" }
 ,{ "limit." }
 ,{ "But" }
 ,{ "if" }
 ,{ "the" }
 ,{ "action" }
 ,{ "was" }
 ,{ "already" }
 ,{ "triggered," }
 ,{ "the" }
 ,{ "function" }
 ,{ "does" }
 ,{ "nothing." }
 ,{ "So" }
 ,{ "multiple" }
 ,{ "triggers" }
 ,{ "during" }
 ,{ "a" }
 ,{ "short" }
 ,{ "time" }
 ,{ "period" }
 ,{ "are" }
 ,{ "combined" }
 ,{ "into" }
 ,{ "the" }
 ,{ "single" }
 ,{ "action." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "stop()" , & fmt_text_b }
 ,{ "stops" }
 ,{ "the" }
 ,{ "object." }
} , & fmt_text , & align_text } ;

Page page = { "page_Ticker" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Timer {

Text b0 = { {
 { "Timer" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Timer.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Timer.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "generic" }
 ,{ "timer" }
 ,{ "classes" }
 ,{ "and" }
 ,{ "six" }
 ,{ "instantiations." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Timer" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "Timer" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "get" }
 ,{ "a" }
 ,{ "time." }
 ,{ "We" }
 ,{ "need" }
 ,{ "a" }
 ,{ "class," }
 ,{ "because" }
 ,{ "we" }
 ,{ "have" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "start" }
 ,{ "time." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "parameterized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "time" }
 ,{ "value" }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "time" }
 ,{ "function." }
 ,{ "Constructor" }
 ,{ "and" }
 ,{ "the" }
 ,{ "method" }
 ,{ "reset()" , & fmt_text_b }
 ,{ "record" }
 ,{ "the" }
 ,{ "start" }
 ,{ "time." }
 ,{ "Once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "done" }
 ,{ "it," }
 ,{ "you" }
 ,{ "can" }
 ,{ "get" }
 ,{ "a" }
 ,{ "current" }
 ,{ "time" }
 ,{ "relative" }
 ,{ "to" }
 ,{ "the" }
 ,{ "start" }
 ,{ "time" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "." }
 ,{ "Methods" }
 ,{ "less()" , & fmt_text_b }
 ,{ "and" }
 ,{ "exceed()" , & fmt_text_b }
 ,{ "compare" }
 ,{ "the" }
 ,{ "current" }
 ,{ "time" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "limit." }
 ,{ "The" }
 ,{ "method" }
 ,{ "shift()" , & fmt_text_b }
 ,{ "adjusts" }
 ,{ "the" }
 ,{ "start" }
 ,{ "time." }
 ,{ "Static" }
 ,{ "members" }
 ,{ "ValueType" , & fmt_text_b }
 ,{ "and" }
 ,{ "Get()" , & fmt_text_b }
 ,{ "present" }
 ,{ "the" }
 ,{ "class" }
 ,{ "parameters." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "following" }
 ,{ "example" }
 ,{ "demonstrates" }
 ,{ "the" }
 ,{ "timed" }
 ,{ "loop:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "DiffTimer" }
} , & fmt_h4 , & align_h4 } ;

Text b8 = { {
 { "The" }
 ,{ "next" }
 ,{ "class" }
 ,{ "DiffTimer" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "differentiated" }
 ,{ "time," }
 ,{ "i.e." }
 ,{ "the" }
 ,{ "time" }
 ,{ "between" }
 ,{ "calls." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Timer" }
 ,{ "classes" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "There" }
 ,{ "are" }
 ,{ "six" }
 ,{ "timer" }
 ,{ "class" }
 ,{ "instantiations" }
 ,{ "for" }
 ,{ "different" }
 ,{ "time" }
 ,{ "resolutions" }
 ,{ "â€”" }
 ,{ "millisecond," }
 ,{ "second," }
 ,{ "and" }
 ,{ "clock:" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "These" }
 ,{ "instantiations" }
 ,{ "are" }
 ,{ "based" }
 ,{ "on" }
 ,{ "target" }
 ,{ "provided" }
 ,{ "functions." }
 ,{ "Clock" }
 ,{ "time" }
 ,{ "is" }
 ,{ "a" }
 ,{ "fastest" }
 ,{ "available" }
 ,{ "time" }
 ,{ "resolution" }
 ,{ "on" }
 ,{ "the" }
 ,{ "target," }
 ,{ "comparable" }
 ,{ "with" }
 ,{ "the" }
 ,{ "CPU" }
 ,{ "clock" }
 ,{ "speed." }
} , & fmt_text , & align_text } ;

Page page = { "page_Timer" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TimeScope {

Text b0 = { {
 { "TimeScope" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TimeScope.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TimeScope.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "There" }
 ,{ "are" }
 ,{ "timed" }
 ,{ "functions," }
 ,{ "i.e." }
 ,{ "functions" }
 ,{ "with" }
 ,{ "a" }
 ,{ "specified" }
 ,{ "execution" }
 ,{ "time" }
 ,{ "limit." }
 ,{ "For" }
 ,{ "example," }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "has" }
 ,{ "the" }
 ,{ "method" }
 ,{ "take()" , & fmt_text_b }
 ,{ "with" }
 ,{ "timeout." }
 ,{ "In" }
 ,{ "some" }
 ,{ "cases" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "call" }
 ,{ "several" }
 ,{ "such" }
 ,{ "functions." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "problem" }
 ,{ "arises," }
 ,{ "how" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "timeouts" }
 ,{ "to" }
 ,{ "them," }
 ,{ "if" }
 ,{ "we" }
 ,{ "want" }
 ,{ "to" }
 ,{ "fit" }
 ,{ "in" }
 ,{ "some" }
 ,{ "common" }
 ,{ "time" }
 ,{ "limit." }
 ,{ "The" }
 ,{ "class" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "solve" }
 ,{ "this" }
 ,{ "problem." }
 ,{ "It" }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "class," }
 ,{ "which" }
 ,{ "represents" }
 ,{ "some" }
 ,{ "time" }
 ,{ "interval:" }
} , & fmt_text , & align_text } ;

Bitmap b3 = { "TimeScope.zipmap" } ;

Text b4 = { {
 { "TimeScope" , & fmt_text_b }
 ,{ "contains" }
 ,{ "inside" }
 ,{ "a" }
 ,{ "millisecond" }
 ,{ "timer" }
 ,{ "and" }
 ,{ "a" }
 ,{ "millisecond" }
 ,{ "timeout." }
 ,{ "It" }
 ,{ "is" }
 ,{ "started" }
 ,{ "at" }
 ,{ "the" }
 ,{ "moment" }
 ,{ "of" }
 ,{ "construction," }
 ,{ "or" }
 ,{ "at" }
 ,{ "the" }
 ,{ "moment" }
 ,{ "when" }
 ,{ "the" }
 ,{ "method" }
 ,{ "start()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called." }
 ,{ "You" }
 ,{ "can" }
 ,{ "retrieve" }
 ,{ "the" }
 ,{ "remaining" }
 ,{ "time," }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "given" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "0." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Assume," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "make" }
 ,{ "an" }
 ,{ "aggregated" }
 ,{ "timed" }
 ,{ "operation." }
 ,{ "Using" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "you" }
 ,{ "can" }
 ,{ "do" }
 ,{ "it" }
 ,{ "simply" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "You" }
 ,{ "may" }
 ,{ "suggest" }
 ,{ "the" }
 ,{ "following" }
 ,{ "approach:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "But" }
 ,{ "this" }
 ,{ "way" }
 ,{ "does" }
 ,{ "not" }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "expected" }
 ,{ "behavior," }
 ,{ "because" }
 ,{ "from" }
 ,{ "the" }
 ,{ "point" }
 ,{ "you" }
 ,{ "call" }
 ,{ "the" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "point," }
 ,{ "where" }
 ,{ "this" }
 ,{ "value" }
 ,{ "is" }
 ,{ "consumed" }
 ,{ "inside" }
 ,{ "the" }
 ,{ "opx()" , & fmt_text_b }
 ,{ "a" }
 ,{ "task" }
 ,{ "switch" }
 ,{ "may" }
 ,{ "happens" }
 ,{ "and" }
 ,{ "it" }
 ,{ "increases" }
 ,{ "the" }
 ,{ "amount" }
 ,{ "of" }
 ,{ "time" }
 ,{ "by" }
 ,{ "an" }
 ,{ "unpredictable" }
 ,{ "value." }
 ,{ "That" }
 ,{ "is" }
 ,{ "why" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "we" }
 ,{ "provide" }
 ,{ "timed" }
 ,{ "functions" }
 ,{ "with" }
 ,{ "simple" }
 ,{ "timeouts" }
 ,{ "and" }
 ,{ "with" }
 ,{ "TimeScope" , & fmt_text_b }
 ,{ "timeouts," }
 ,{ "especially" }
 ,{ "for" }
 ,{ "all" }
 ,{ "synchronization" }
 ,{ "objects." }
 ,{ "In" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "is" }
 ,{ "not" }
 ,{ "precise" }
 ,{ "(but" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "does" }
 ,{ "not" }
 ,{ "pretend" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "true" }
 ,{ "real-time)," }
 ,{ "but" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "has" }
 ,{ "an" }
 ,{ "exact" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "next" }
 ,{ "method" }
 ,{ "is" }
 ,{ "nextScope()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "does" }
 ,{ "the" }
 ,{ "following:" }
 ,{ "if" }
 ,{ "the" }
 ,{ "timeout" }
 ,{ "is" }
 ,{ "expired," }
 ,{ "then" }
 ,{ "nextScope()" , & fmt_text_b }
 ,{ "shifts" }
 ,{ "the" }
 ,{ "time" }
 ,{ "period" }
 ,{ "to" }
 ,{ "the" }
 ,{ "following" }
 ,{ "scope" }
 ,{ "and" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "it" }
 ,{ "simply" }
 ,{ "returns" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "last" }
 ,{ "method" }
 ,{ "is" }
 ,{ "nextScope_skip()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "does" }
 ,{ "almost" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "nextScope()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "is:" }
 ,{ "if" }
 ,{ "we" }
 ,{ "are" }
 ,{ "already" }
 ,{ "past" }
 ,{ "the" }
 ,{ "next" }
 ,{ "scope," }
 ,{ "the" }
 ,{ "timer" }
 ,{ "is" }
 ,{ "reset" }
 ,{ "and" }
 ,{ "we" }
 ,{ "start" }
 ,{ "the" }
 ,{ "new" }
 ,{ "time" }
 ,{ "scope" }
 ,{ "from" }
 ,{ "the" }
 ,{ "current" }
 ,{ "moment." }
} , & fmt_text , & align_text } ;

Page page = { "page_TimeScope" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_img , outer_img , back_img }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TlsSlot {

Text b0 = { {
 { "TlsSlot" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TlsSlot.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TlsSlot.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TlsSlot" , & fmt_text_b }
 ,{ "is" }
 ,{ "designed" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "thread" }
 ,{ "local" }
 ,{ "variables." }
 ,{ "It" }
 ,{ "is" }
 ,{ "integrated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "subsystem." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Don't" }
 ,{ "use" }
 ,{ "objects" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "directly!" }
 ,{ "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "TlsSlot" , & fmt_text_b }
 ,{ "value" }
 ,{ "is" }
 ,{ "a" }
 ,{ "thread-specific," }
 ,{ "i.e." }
 ,{ "depends" }
 ,{ "on" }
 ,{ "the" }
 ,{ "calling" }
 ,{ "thread." }
 ,{ "Each" }
 ,{ "thread" }
 ,{ "has" }
 ,{ "own" }
 ,{ "private" }
 ,{ "copy" }
 ,{ "of" }
 ,{ "this" }
 ,{ "value." }
 ,{ "The" }
 ,{ "initial" }
 ,{ "value" }
 ,{ "is" }
 ,{ "0." }
 ,{ "If" }
 ,{ "the" }
 ,{ "TlsSlot" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "unable" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "TLS" }
 ,{ "slot," }
 ,{ "it" }
 ,{ "aborts" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "should" }
 ,{ "avoid" }
 ,{ "using" }
 ,{ "TlsSlot" , & fmt_text_b }
 ,{ "," }
 ,{ "leave" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "internals." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "better" }
 ,{ "way" }
 ,{ "to" }
 ,{ "define" }
 ,{ "a" }
 ,{ "thread-specific" }
 ,{ "variable:" }
 ,{ "when" }
 ,{ "you" }
 ,{ "start" }
 ,{ "a" }
 ,{ "thread," }
 ,{ "using" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_a }
 ,{ "object" }
 ,{ "and" }
 ,{ "functions," }
 ,{ "you" }
 ,{ "always" }
 ,{ "can" }
 ,{ "find" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "by" }
 ,{ "the" }
 ,{ "Task::GetCurrent()" , & fmt_text_b }
 ,{ "function." }
 ,{ "So" }
 ,{ "just" }
 ,{ "add" }
 ,{ "a" }
 ,{ "required" }
 ,{ "thread" }
 ,{ "context" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Task" , & fmt_text_b }
 ,{ "object." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "use" }
 ,{ "the" }
 ,{ "PerTask" , & fmt_text_a }
 ,{ "tool." }
} , & fmt_text , & align_text } ;

Page page = { "page_TlsSlot" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_ToMemBase {

Text b0 = { {
 { "ToMemBase" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/ToMemBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/ToMemBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "ToMemBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Partial" , & fmt_text_b }
 ,{ "class" , & fmt_text_b }
 ,{ "," }
 ,{ "designed" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "for" }
 ,{ "\"..." }
 ,{ "to" }
 ,{ "memory\"" }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "protected" }
 ,{ "method" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "no" , & fmt_text_Alert }
 ,{ "more" , & fmt_text_Alert }
 ,{ "than" , & fmt_text_Alert }
 ,{ "once" , & fmt_text_Alert }
 ,{ "in" }
 ,{ "a" }
 ,{ "derived" }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "class" }
 ,{ "in" }
 ,{ "the" }
 ,{ "null" }
 ,{ "state." }
 ,{ "Destructor" }
 ,{ "releases" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ToMemBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "class" }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Page page = { "page_ToMemBase" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_tool_MakeString {

Text b0 = { {
 { "MakeString" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "MakeString" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "utility," }
 ,{ "it" }
 ,{ "converts" }
 ,{ "a" }
 ,{ "text" }
 ,{ "file" }
 ,{ "into" }
 ,{ "a" }
 ,{ "file" }
 ,{ "with" }
 ,{ "C-string," }
 ,{ "which" }
 ,{ "match" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "the" }
 ,{ "original" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "If" }
 ,{ "you" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "option" }
 ,{ "-s" , & fmt_text_b }
 ,{ "," }
 ,{ "C-style" }
 ,{ "comments" }
 ,{ "will" }
 ,{ "be" }
 ,{ "stripped" }
 ,{ "from" }
 ,{ "the" }
 ,{ "result." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "output" }
 ,{ "looks" }
 ,{ "like" }
} , & fmt_text , & align_text } ;

Page page = { "page_tool_MakeString" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TreeMaps {

Text b0 = { {
 { "Tree" }
 ,{ "maps" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TreeMap.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TreeMap.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Here" }
 ,{ "are" }
 ,{ "two" }
 ,{ "maps," }
 ,{ "built" }
 ,{ "on" }
 ,{ "red-black" , & fmt_text_a }
 ,{ "tree" , & fmt_text_a }
 ,{ "and" , & fmt_text_a }
 ,{ "radix" , & fmt_text_a }
 ,{ "tree" , & fmt_text_a }
 ,{ "algorithms." }
 ,{ "They" }
 ,{ "are" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "the" }
 ,{ "key" }
 ,{ "type," }
 ,{ "object" }
 ,{ "type," }
 ,{ "node" , & fmt_text_a }
 ,{ "allocator" , & fmt_text_a }
 ,{ "type." }
 ,{ "Node" }
 ,{ "allocator" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "NodeAllocator" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "only" }
 ,{ "requirement" }
 ,{ "for" }
 ,{ "the" }
 ,{ "object" }
 ,{ "type" }
 ,{ "is" }
 ,{ "its" }
 ,{ "destructor" }
 ,{ "must" }
 ,{ "be" }
 ,{ "no-throw." }
 ,{ "There" }
 ,{ "are" }
 ,{ "also" }
 ,{ "compact" , & fmt_text_a }
 ,{ "variants" , & fmt_text_a }
 ,{ "of" }
 ,{ "these" }
 ,{ "maps." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Constant" }
 ,{ "maps" }
 ,{ "propagate" }
 ,{ "constantness" }
 ,{ "to" }
 ,{ "its" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Link link_RBTreeMap = { & page , { 4 } } ;

Text b4 = { {
 { "RBTreeMap" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "map," }
 ,{ "built" }
 ,{ "on" }
 ,{ "red-black" }
 ,{ "tree" }
 ,{ "algorithms." }
 ,{ "There" }
 ,{ "is" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "KRef" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "key" }
 ,{ "in" }
 ,{ "methods." }
 ,{ "It" }
 ,{ "is" }
 ,{ "defaulted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "K" , & fmt_text_b }
 ,{ "," }
 ,{ "another" }
 ,{ "typical" }
 ,{ "choice" }
 ,{ "would" }
 ,{ "be" }
 ,{ "the" }
 ,{ "const" , & fmt_text_b }
 ,{ "K" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Constructor" }
 ,{ "forwards" }
 ,{ "its" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "node" }
 ,{ "allocator." }
 ,{ "Destructor" }
 ,{ "destroys" }
 ,{ "the" }
 ,{ "map" }
 ,{ "with" }
 ,{ "all" }
 ,{ "its" }
 ,{ "elements." }
 ,{ "It's" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "the" }
 ,{ "allocator" }
 ,{ "constructor" }
 ,{ "does" }
 ,{ "not" }
 ,{ "throw." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "RBTreeMap" , & fmt_text_b }
 ,{ "is" }
 ,{ "not" }
 ,{ "copyable," }
 ,{ "but" }
 ,{ "std" }
 ,{ "movable." }
 ,{ "The" }
 ,{ "original" }
 ,{ "object" }
 ,{ "is" }
 ,{ "nullified" }
 ,{ "during" }
 ,{ "the" }
 ,{ "move." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "operator" , & fmt_text_b }
 ,{ "+" , & fmt_text_b }
 ,{ "and" }
 ,{ "operator" , & fmt_text_b }
 ,{ "!" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "check," }
 ,{ "if" }
 ,{ "the" }
 ,{ "list" }
 ,{ "is" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "list" }
 ,{ "elements." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "find...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "search" }
 ,{ "a" }
 ,{ "map" }
 ,{ "element" }
 ,{ "with" }
 ,{ "some" }
 ,{ "properties." }
 ,{ "A" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "the" }
 ,{ "found" }
 ,{ "element" }
 ,{ "is" }
 ,{ "returned," }
 ,{ "or" }
 ,{ "null" }
 ,{ "if" }
 ,{ "the" }
 ,{ "element" }
 ,{ "is" }
 ,{ "not" }
 ,{ "found." }
 ,{ "The" }
 ,{ "properties" }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "find(KRef" , & fmt_text_b }
 ,{ "key)" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "findMin()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "findMin(KRef" , & fmt_text_b }
 ,{ "key)" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "key," }
 ,{ "greater" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "the" }
 ,{ "key" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "findMax()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "findMin(KRef" , & fmt_text_b }
 ,{ "key)" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "key," }
 ,{ "less" }
 ,{ "or" }
 ,{ "equal" }
 ,{ "the" }
 ,{ "key" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "find_ptr...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "do" }
 ,{ "the" }
 ,{ "same," }
 ,{ "but" }
 ,{ "return" }
 ,{ "a" }
 ,{ "\"node" }
 ,{ "pointer\"." }
 ,{ "This" }
 ,{ "object" }
 ,{ "gives" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "found" }
 ,{ "element" }
 ,{ "through" }
 ,{ "the" }
 ,{ "Object" , & fmt_text_b }
 ,{ "Pointer" , & fmt_text_b }
 ,{ "Interface" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "key" }
 ,{ "is" }
 ,{ "also" }
 ,{ "can" }
 ,{ "be" }
 ,{ "retrieved" }
 ,{ "by" }
 ,{ "the" }
 ,{ "method" }
 ,{ "getKey()" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "also" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "delete" }
 ,{ "the" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "map." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "find_or_add()" , & fmt_text_b }
 ,{ "method" }
 ,{ "finds" }
 ,{ "or" }
 ,{ "adds" }
 ,{ "a" }
 ,{ "new" }
 ,{ "element" }
 ,{ "to" }
 ,{ "the" }
 ,{ "map." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "required" }
 ,{ "key." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "map" }
 ,{ "element" }
 ,{ "with" }
 ,{ "this" }
 ,{ "key," }
 ,{ "the" }
 ,{ "element" }
 ,{ "is" }
 ,{ "found" }
 ,{ "and" }
 ,{ "returned." }
 ,{ "The" }
 ,{ "field" }
 ,{ "new_flag" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "Result" , & fmt_text_b }
 ,{ "object" }
 ,{ "will" }
 ,{ "be" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "such" }
 ,{ "key" }
 ,{ "in" }
 ,{ "the" }
 ,{ "map," }
 ,{ "the" }
 ,{ "new" }
 ,{ "element" }
 ,{ "with" }
 ,{ "this" }
 ,{ "key" }
 ,{ "will" }
 ,{ "be" }
 ,{ "added." }
 ,{ "The" }
 ,{ "field" }
 ,{ "new_flag" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "Result" , & fmt_text_b }
 ,{ "object" }
 ,{ "will" }
 ,{ "be" }
 ,{ "true" , & fmt_text_b }
 ,{ "." }
 ,{ "Extra" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "forwarded" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "constructor." }
 ,{ "Exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "del...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "delete" }
 ,{ "an" }
 ,{ "element" }
 ,{ "from" }
 ,{ "the" }
 ,{ "map." }
 ,{ "If" }
 ,{ "an" }
 ,{ "element" }
 ,{ "is" }
 ,{ "deleted," }
 ,{ "true" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "del(KRef)" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "delMin()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "delMax()" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element" }
 ,{ "with" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "key." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "del(\"node" , & fmt_text_b }
 ,{ "pointer\")" , & fmt_text_b }
 ,{ "deletes" }
 ,{ "the" }
 ,{ "element," }
 ,{ "pointed" }
 ,{ "by" }
 ,{ "the" }
 ,{ "\"node" }
 ,{ "pointer\"." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "erase()" , & fmt_text_b }
 ,{ "destroys" }
 ,{ "all" }
 ,{ "elements," }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "destroyed" }
 ,{ "elements" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "apply...()" , & fmt_text_b }
 ,{ "methods" }
 ,{ "apply" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "to" }
 ,{ "map" }
 ,{ "elements." }
 ,{ "The" }
 ,{ "functor" }
 ,{ "signature" }
 ,{ "is" }
 ,{ "void" , & fmt_text_b }
 ,{ "(K" , & fmt_text_b }
 ,{ "key,T" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "for" }
 ,{ "non-constant" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "void" , & fmt_text_b }
 ,{ "(K" , & fmt_text_b }
 ,{ "key,const" , & fmt_text_b }
 ,{ "T" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "for" }
 ,{ "constant" }
 ,{ "ones." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "applyIncr()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "in" }
 ,{ "the" }
 ,{ "incremental" }
 ,{ "key" }
 ,{ "order." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "applyDecr()" , & fmt_text_b }
 ,{ "applies" }
 ,{ "the" }
 ,{ "functor" }
 ,{ "in" }
 ,{ "the" }
 ,{ "decremental" }
 ,{ "key" }
 ,{ "order." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "RBTreeMap" , & fmt_text_b }
 ,{ "is" }
 ,{ "swappable" }
 ,{ "and" }
 ,{ "movable." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "KeyRange" }
} , & fmt_h4 , & align_h4 } ;

Text b29 = { {
 { "This" }
 ,{ "class" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "key" }
 ,{ "value" }
 ,{ "range." }
 ,{ "The" }
 ,{ "K" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "key" }
 ,{ "range" }
 ,{ "for" }
 ,{ "a" }
 ,{ "radix" }
 ,{ "tree" }
 ,{ "map." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "kmin" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "key" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "kmax" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "key" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "KeyRange()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "constructor." }
 ,{ "It" }
 ,{ "creates" }
 ,{ "the" }
 ,{ "\"all" }
 ,{ "value\"" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "KeyRange(kmax)" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "key" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "maximum" }
 ,{ "key" }
 ,{ "value," }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "key" }
 ,{ "value" }
 ,{ "is" }
 ,{ "zero." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "KeyRange(kmin,kmax)" , & fmt_text_b }
 ,{ "creates" }
 ,{ "a" }
 ,{ "key" }
 ,{ "range" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "minimum" }
 ,{ "and" }
 ,{ "maximum" }
 ,{ "key" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "guard()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "guard" }
 ,{ "method." }
 ,{ "It" }
 ,{ "ensures" }
 ,{ "the" }
 ,{ "given" }
 ,{ "key" , & fmt_text_b }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "the" }
 ,{ "key" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Link link_RadixTreeMap = { & page , { 36 } } ;

Text b36 = { {
 { "RadixTreeMap" }
} , & fmt_h4 , & align_h4 } ;

Text b37 = { {
 { "This" }
 ,{ "is" }
 ,{ "the" }
 ,{ "second" }
 ,{ "map," }
 ,{ "built" }
 ,{ "on" }
 ,{ "radix" }
 ,{ "tree" }
 ,{ "algorithms." }
 ,{ "The" }
 ,{ "K" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
 ,{ "Methods" }
 ,{ "and" }
 ,{ "behavior" }
 ,{ "are" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "for" }
 ,{ "RBTreeMap" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "only" }
 ,{ "difference" }
 ,{ "is" }
 ,{ "there" }
 ,{ "is" }
 ,{ "the" }
 ,{ "additional" }
 ,{ "constructor." }
 ,{ "The" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "of" }
 ,{ "this" }
 ,{ "constructor" }
 ,{ "is" }
 ,{ "the" }
 ,{ "key" }
 ,{ "value" }
 ,{ "range." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "delIf()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "massive" }
 ,{ "delete" }
 ,{ "operation." }
 ,{ "The" }
 ,{ "functor" }
 ,{ "signature" }
 ,{ "is" }
 ,{ "boolable" , & fmt_text_b }
 ,{ "(K" , & fmt_text_b }
 ,{ "key,T" , & fmt_text_b }
 ,{ "$" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "it" }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "the" }
 ,{ "object" }
 ,{ "is" }
 ,{ "deleted." }
} , & fmt_text , & align_text } ;

Page page = { "page_TreeMaps" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Trees {

Text b0 = { {
 { "Trees" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Tree.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Tree.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Subfolders" }
 ,{ "CCore/inc/tree" , & fmt_text_Files_b }
 ,{ "CCore/src/tree" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Page page = { "page_Trees" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text_Files , outer_text_Files , back_text_Files }
} , NoColor , NoColor , null , null , null };

}

scope page_Tuple {

Text b0 = { {
 { "Tuple" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Tuple.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Tuple.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Classes" }
 ,{ "Tuple" , & fmt_text_b }
 ,{ "and" }
 ,{ "ForwardTuple" , & fmt_text_b }
 ,{ "have" }
 ,{ "a" }
 ,{ "spartan" }
 ,{ "design" }
 ,{ "in" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "," }
 ,{ "because" }
 ,{ "they" }
 ,{ "were" }
 ,{ "introduced" }
 ,{ "to" }
 ,{ "solve" }
 ,{ "some" }
 ,{ "particular" }
 ,{ "problems." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "main" }
 ,{ "problem" }
 ,{ "is" }
 ,{ "to" }
 ,{ "capture" }
 ,{ "an" }
 ,{ "argument" }
 ,{ "list" }
 ,{ "and" }
 ,{ "use" }
 ,{ "it" }
 ,{ "further" }
 ,{ "in" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "call." }
 ,{ "The" }
 ,{ "difference" }
 ,{ "between" }
 ,{ "Tuple" , & fmt_text_b }
 ,{ "and" }
 ,{ "ForwardTuple" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "makes" }
 ,{ "copies" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments," }
 ,{ "but" }
 ,{ "the" }
 ,{ "second" }
 ,{ "holds" }
 ,{ "rvalue" }
 ,{ "references." }
 ,{ "Tuple" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "when" }
 ,{ "you" }
 ,{ "need" }
 ,{ "to" }
 ,{ "store" }
 ,{ "the" }
 ,{ "arguments." }
 ,{ "If" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "capture" }
 ,{ "them" }
 ,{ "only" }
 ,{ "temporary" }
 ,{ "then" }
 ,{ "ForwardTuple" , & fmt_text_b }
 ,{ "may" }
 ,{ "be" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "method" }
 ,{ "ref()" , & fmt_text_b }
 ,{ "referes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "tuple" }
 ,{ "member" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "1-based" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Both" }
 ,{ "classes" }
 ,{ "use" }
 ,{ "the" }
 ,{ "Functor" , & fmt_text_a }
 ,{ "Init" , & fmt_text_a }
 ,{ "Pattern" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "method" }
 ,{ "call()" , & fmt_text_b }
 ,{ "builds" }
 ,{ "and" }
 ,{ "calls" }
 ,{ "a" }
 ,{ "functor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "list," }
 ,{ "captured" }
 ,{ "by" }
 ,{ "the" }
 ,{ "tuple." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Tuple" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "log" }
 ,{ "implementation:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ForwardTuple" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "in" }
 ,{ "the" }
 ,{ "array" }
 ,{ "algorithms" }
 ,{ "implementation:" }
} , & fmt_text , & align_text } ;

Page page = { "page_Tuple" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TypeNumber {

Text b0 = { {
 { "TypeNumber" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TypeNumber.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TypeNumber.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TypeNumber" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "tool" }
 ,{ "to" }
 ,{ "convert" }
 ,{ "a" }
 ,{ "type" }
 ,{ "into" }
 ,{ "a" }
 ,{ "number." }
 ,{ "Different" }
 ,{ "types" }
 ,{ "have" }
 ,{ "different" }
 ,{ "associated" }
 ,{ "numbers." }
 ,{ "This" }
 ,{ "feature" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "quick" }
 ,{ "type" }
 ,{ "comparison" }
 ,{ "and" }
 ,{ "the" }
 ,{ "type" }
 ,{ "reporting." }
 ,{ "To" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "this" }
 ,{ "feature" }
 ,{ "a" }
 ,{ "type" }
 ,{ "must" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "Unid" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "TypeNumber" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "lightweight" }
 ,{ "type" }
 ,{ "number" }
 ,{ "class." }
 ,{ "It" }
 ,{ "folds" }
 ,{ "the" }
 ,{ "type" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "get()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "type" }
 ,{ "number" }
 ,{ "itself." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "==" , & fmt_text_b }
 ,{ "and" }
 ,{ "!=" , & fmt_text_b }
 ,{ "operators" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "compare" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "oneOf()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "the" }
 ,{ "number" }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "one" }
 ,{ "of" }
 ,{ "types" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "list." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "And" }
 ,{ "this" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "type" }
 ,{ "number" }
 ,{ "constructor" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Page page = { "page_TypeNumber" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_TypeSwitch {

Text b0 = { {
 { "TypeSwitch" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/TypeSwitch.h" , & fmt_text_Files_b }
 ,{ "CCore/src/TypeSwitch.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "TypeSwitch" , & fmt_text_b }
 ,{ "lives" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Meta" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "an" }
 ,{ "advanced" }
 ,{ "meta-tool" }
 ,{ "to" }
 ,{ "build" }
 ,{ "switches" }
 ,{ "based" }
 ,{ "on" }
 ,{ "a" }
 ,{ "given" }
 ,{ "integer-to-type" }
 ,{ "mapping." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "specify" }
 ,{ "a" }
 ,{ "single" }
 ,{ "map" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Meta::Case" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "To" }
 ,{ "define" }
 ,{ "a" }
 ,{ "mapping" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Meta::CaseList" , & fmt_text_b }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "template" }
 ,{ "parameters" }
 ,{ "here" }
 ,{ "are" }
 ,{ "some" }
 ,{ "Meta::Case" , & fmt_text_b }
 ,{ "s" }
 ,{ "with" }
 ,{ "the" }
 ,{ "same" }
 ,{ "type" }
 ,{ "SUInt" , & fmt_text_b }
 ,{ "and" }
 ,{ "distinct" }
 ,{ "values" }
 ,{ "Val" , & fmt_text_b }
 ,{ "." }
 ,{ "For" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "some" }
 ,{ "case" }
 ,{ "list" }
 ,{ "you" }
 ,{ "may" }
 ,{ "generate" }
 ,{ "a" }
 ,{ "switch," }
 ,{ "using" }
 ,{ "the" }
 ,{ "type" }
 ,{ "Meta::TypeSwitch" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Namely:" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "SwType" , & fmt_text_b }
 ,{ "here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "common" }
 ,{ "SUInt" , & fmt_text_b }
 ,{ "type" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Meta::Case" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "template" }
 ,{ "parameter" }
 ,{ "Ctx" , & fmt_text_b }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Assume," }
 ,{ "the" }
 ,{ "input" }
 ,{ "case" }
 ,{ "list" }
 ,{ "is" }
 ,{ "Meta::CaseList<" , & fmt_text_b }
 ,{ "Meta::Case<int,1,T1>" , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "Meta::Case<int,2,T2>" , & fmt_text_b }
 ,{ "," , & fmt_text_b }
 ,{ "Meta::Case<int,3,T3>" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "generated" }
 ,{ "method" }
 ,{ "Switch" , & fmt_text_b }
 ,{ "does" }
 ,{ "the" }
 ,{ "following:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Utilities" }
} , & fmt_h3 , & align_h3 } ;

Text b12 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "utilities" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "case" }
 ,{ "lists." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "This" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "value," }
 ,{ "associated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "case-list." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "This" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "sizeof" }
 ,{ "of" }
 ,{ "types" }
 ,{ "in" }
 ,{ "the" }
 ,{ "given" }
 ,{ "case-list." }
} , & fmt_text , & align_text } ;

Page page = { "page_TypeSwitch" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UDPDevice {

Text b0 = { {
 { "(HCore)" }
 ,{ "UDPDevice" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/UDPDevice.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/UDPDevice.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "HCore" , & fmt_text_b }
 ,{ "has" }
 ,{ "two" }
 ,{ "UDP" }
 ,{ "endpoint" }
 ,{ "device" }
 ,{ "classes." }
 ,{ "They" }
 ,{ "are" }
 ,{ "built" }
 ,{ "on" }
 ,{ "OS" }
 ,{ "socket" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "devices" }
 ,{ "implement" }
 ,{ "packet" }
 ,{ "communication" }
 ,{ "using" }
 ,{ "UDP" }
 ,{ "protocol." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "UDPEndpointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "The" }
 ,{ "class" }
 ,{ "UDPEndpointDevice" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" }
 ,{ "port," }
 ,{ "the" }
 ,{ "second" }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "address" }
 ,{ "(IP" }
 ,{ "address+UDP" }
 ,{ "port)" }
 ,{ "of" }
 ,{ "the" }
 ,{ "communication" }
 ,{ "peer." }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "usage" }
 ,{ "for" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "local" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "getDst()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "peer" }
 ,{ "UDP" }
 ,{ "address." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "activate" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
 ,{ "You" }
 ,{ "cannot" }
 ,{ "attach" }
 ,{ "an" }
 ,{ "inbound" }
 ,{ "processor" }
 ,{ "(or" }
 ,{ "detach" }
 ,{ "it)" }
 ,{ "to" }
 ,{ "the" }
 ,{ "object" }
 ,{ "while" }
 ,{ "it" }
 ,{ "is" }
 ,{ "running." }
 ,{ "So" }
 ,{ "attach" }
 ,{ "first," }
 ,{ "then" }
 ,{ "start." }
 ,{ "Additional" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "not" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "UDPMultipointDevice" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "The" }
 ,{ "class" }
 ,{ "UDPMultipointDevice" , & fmt_text_b }
 ,{ "implements" }
 ,{ "the" }
 ,{ "PacketMultipointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "first" }
 ,{ "constructor" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "local" }
 ,{ "UDP" }
 ,{ "port." }
 ,{ "max_packets" , & fmt_text_b }
 ,{ "limits" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "usage" }
 ,{ "for" }
 ,{ "the" }
 ,{ "inbound" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "getPort()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "local" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "getStat()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "device" }
 ,{ "statistic." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "are" }
 ,{ "the" }
 ,{ "PacketEndpointDevice" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation" }
 ,{ "and" }
 ,{ "the" }
 ,{ "PortManager" , & fmt_text_b }
 ,{ "interface" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "The" }
 ,{ "inner" }
 ,{ "class" }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "should" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "activate" }
 ,{ "the" }
 ,{ "object" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class." }
 ,{ "Additional" }
 ,{ "constructor" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "not" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Sys::UDPSocket" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "Both" }
 ,{ "UDP" }
 ,{ "device" }
 ,{ "classes" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "class" }
 ,{ "Sys::UDPSocket" , & fmt_text_b }
 ,{ "," }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "header" }
 ,{ "sys/SysNet.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_UDPDevice" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UDPoint {

Text b0 = { {
 { "UDPoint" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/net/UDPoint.h" , & fmt_text_Files_b }
 ,{ "CCore/src/net/UDPoint.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "UDPoint" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "UDP" }
 ,{ "address," }
 ,{ "i.e." }
 ,{ "IP" }
 ,{ "address" }
 ,{ "+" }
 ,{ "UDP" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "method" }
 ,{ "get()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "UDPoint" , & fmt_text_b }
 ,{ "to" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "original" }
 ,{ "UDPoint" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "restored" }
 ,{ "by" }
 ,{ "the" }
 ,{ "constructor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "XPoint" , & fmt_text_b }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "This" }
 ,{ "type" }
 ,{ "is" }
 ,{ "printable" }
 ,{ "and" }
 ,{ "scannable" }
 ,{ "in" }
 ,{ "the" }
 ,{ "text" }
 ,{ "form" }
 ,{ "like" }
 ,{ "192.168.1.1:500" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "UDP" }
 ,{ "port" }
 ,{ "constants," }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "net/UDPoint.h" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "EchoUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "UDP" }
 ,{ "echo" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "PTPServerUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "PTP" }
 ,{ "over" }
 ,{ "UDP" }
 ,{ "server" }
 ,{ "port." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "PTPClientUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "PTP" }
 ,{ "over" }
 ,{ "UDP" }
 ,{ "client" }
 ,{ "port." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "PKEClientUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "PKE" }
 ,{ "over" }
 ,{ "UDP" }
 ,{ "client" }
 ,{ "port." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "PSecClientUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "PSec" }
 ,{ "over" }
 ,{ "UDP" }
 ,{ "client" }
 ,{ "port." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "PKEServerUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "PKE" }
 ,{ "over" }
 ,{ "UDP" }
 ,{ "server" }
 ,{ "port." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "PSecServerUDPort" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "PSec" }
 ,{ "over" }
 ,{ "UDP" }
 ,{ "server" }
 ,{ "port." }
 ,{ "This" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "standard" }
 ,{ "port." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "The" }
 ,{ "function" }
 ,{ "ParseUDPoint()" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "parse" }
 ,{ "a" }
 ,{ "UDPoint" , & fmt_text_b }
 ,{ "from" }
 ,{ "a" }
 ,{ "character" , & fmt_text_a }
 ,{ "stream" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_UDPoint" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UIntFunc {

Text b0 = { {
 { "UIntFunc" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/UIntFunc.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/UIntFunc.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "UIntFunc" }
} , & fmt_h3 , & align_h3 } ;

Text b3 = { {
 { "UIntFunc" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "," }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "MaxUnsigned" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "value," }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "type." }
 ,{ "All" }
 ,{ "bits" }
 ,{ "are" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "MSBit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "value" }
 ,{ "with" }
 ,{ "the" }
 ,{ "only" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "set." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "MaxPositive" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "maximum" }
 ,{ "positive" }
 ,{ "value," }
 ,{ "if" }
 ,{ "we" }
 ,{ "interpret" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "as" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "in" }
 ,{ "2's" }
 ,{ "complement" }
 ,{ "representation." }
 ,{ "All" }
 ,{ "bits" }
 ,{ "are" }
 ,{ "set," }
 ,{ "except" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "MinNegative" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "minimum" }
 ,{ "negative" }
 ,{ "value," }
 ,{ "if" }
 ,{ "we" }
 ,{ "interpret" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "as" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "in" }
 ,{ "2's" }
 ,{ "complement" }
 ,{ "representation." }
 ,{ "Only" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "is" }
 ,{ "set." }
 ,{ "It" }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "value," }
 ,{ "as" }
 ,{ "MSBit" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Neg()" , & fmt_text_b }
 ,{ "negates" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "IsNegative()," , & fmt_text_b }
 ,{ "NotNegative()," , & fmt_text_b }
 ,{ "IsPositive()," , & fmt_text_b }
 ,{ "NotPositive()" , & fmt_text_b }
 ,{ "interpret" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "as" }
 ,{ "a" }
 ,{ "signed" }
 ,{ "in" }
 ,{ "2's" }
 ,{ "complement" }
 ,{ "representation" }
 ,{ "and" }
 ,{ "return" }
 ,{ "its" }
 ,{ "signed" }
 ,{ "properties." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "CountZeroMSB()" , & fmt_text_b }
 ,{ "counts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "zero" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "CountZeroLSB()" , & fmt_text_b }
 ,{ "counts" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "zero" }
 ,{ "least" }
 ,{ "significant" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "BitsOf()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "minimum" }
 ,{ "number" }
 ,{ "n" , & fmt_text_b }
 ,{ "," }
 ,{ "such" }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "2" , & fmt_text_b }
 ,{ "n" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Both" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "calculate" }
 ,{ "the" }
 ,{ "square" }
 ,{ "root" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "S" , & fmt_text_b }
 ,{ "," }
 ,{ "rounded" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "nearest" }
 ,{ "integral" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "requires" }
 ,{ "that" }
 ,{ "S" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "and" }
 ,{ "x" , & fmt_text_b }
 ,{ ">" , & fmt_text_b }
 ,{ "0" , & fmt_text_b }
 ,{ "," }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "approximation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "result." }
 ,{ "The" }
 ,{ "better" }
 ,{ "this" }
 ,{ "approximation" }
 ,{ "the" }
 ,{ "faster" }
 ,{ "is" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Add" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "performing" }
 ,{ "the" }
 ,{ "addition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "with" }
 ,{ "carry." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Sub" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "performing" }
 ,{ "the" }
 ,{ "subtraction" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "with" }
 ,{ "borrow." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Inc" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "performing" }
 ,{ "the" }
 ,{ "increment" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "with" }
 ,{ "carry." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Dec" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "performing" }
 ,{ "the" }
 ,{ "decrement" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument" }
 ,{ "with" }
 ,{ "borrow." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "Mul" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "performing" }
 ,{ "the" }
 ,{ "multiplication" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments." }
 ,{ "The" }
 ,{ "result" }
 ,{ "has" }
 ,{ "double" }
 ,{ "length" }
 ,{ "and" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "two" }
 ,{ "fields" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "for" }
 ,{ "high" }
 ,{ "part" }
 ,{ "and" }
 ,{ "low" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "result" }
 ,{ "respectively." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Div()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double" }
 ,{ "length" }
 ,{ "value" }
 ,{ "by" }
 ,{ "the" }
 ,{ "single" }
 ,{ "length" }
 ,{ "divisor." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "two" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "den" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "divisor." }
 ,{ "The" }
 ,{ "hi" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "implies" }
 ,{ "that" }
 ,{ "the" }
 ,{ "result" }
 ,{ "has" }
 ,{ "the" }
 ,{ "single" }
 ,{ "length." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "Mod()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "reminder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double" }
 ,{ "length" }
 ,{ "value" }
 ,{ "by" }
 ,{ "the" }
 ,{ "single" }
 ,{ "length" }
 ,{ "divisor." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "two" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "den" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "divisor." }
 ,{ "The" }
 ,{ "hi" , & fmt_text_b }
 ,{ "must" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "DivMod" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double" }
 ,{ "length" }
 ,{ "value" }
 ,{ "by" }
 ,{ "the" }
 ,{ "single" }
 ,{ "length" }
 ,{ "divisor." }
 ,{ "The" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "two" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "den" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "divisor." }
 ,{ "The" }
 ,{ "div" , & fmt_text_b }
 ,{ "field" }
 ,{ "is" }
 ,{ "the" }
 ,{ "quotient" }
 ,{ "and" }
 ,{ "the" }
 ,{ "mod" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "reminder." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "MulDiv()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "two" }
 ,{ "arguments" }
 ,{ "and" }
 ,{ "divides" }
 ,{ "the" }
 ,{ "double" }
 ,{ "length" }
 ,{ "result" }
 ,{ "by" }
 ,{ "the" }
 ,{ "third" }
 ,{ "argument." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "a" }
 ,{ "single" }
 ,{ "length" }
 ,{ "value," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "undefined." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "ModMul()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "modular" }
 ,{ "multiplication." }
 ,{ "It" }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "reminder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product" }
 ,{ "of" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "are" }
 ,{ "less" }
 ,{ "than" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "ModMac()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "modular" }
 ,{ "multiplication-and-accumulation." }
 ,{ "It" }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "reminder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "s" , & fmt_text_b }
 ,{ "+" }
 ,{ "a" , & fmt_text_b }
 ,{ "*" }
 ,{ "b" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "s" , & fmt_text_b }
 ,{ "," }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "are" }
 ,{ "less" }
 ,{ "than" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "MaxUInt" }
} , & fmt_h3 , & align_h3 } ;

Text b27 = { {
 { "MaxUInt" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "equals" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Bit()" }
 ,{ "and" }
 ,{ "UIntBit()" }
} , & fmt_h3 , & align_h3 } ;

Text b29 = { {
 { "These" }
 ,{ "functions" }
 ,{ "make" }
 ,{ "a" }
 ,{ "one-bit" }
 ,{ "value" }
 ,{ "of" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "UInt...()" }
} , & fmt_h3 , & align_h3 } ;

Text b31 = { {
 { "UInt...()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "family" }
 ,{ "of" }
 ,{ "functions." }
 ,{ "They" }
 ,{ "do" }
 ,{ "direct" }
 ,{ "calls" }
 ,{ "of" }
 ,{ "the" }
 ,{ "functions" }
 ,{ "from" }
 ,{ "the" }
 ,{ "UIntFunc<UInt>" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "UIntNeg()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::Neg()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "UIntBitsOf()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::BitsOf()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "UIntAdd()" , & fmt_text_b }
 ,{ "adds" }
 ,{ "the" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "to" }
 ,{ "the" }
 ,{ "first" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "UIntSub()" , & fmt_text_b }
 ,{ "subtracts" }
 ,{ "the" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "from" }
 ,{ "the" }
 ,{ "first" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "UIntInc()" , & fmt_text_b }
 ,{ "increments" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "UIntDec()" , & fmt_text_b }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Each" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "carry/borrow" }
 ,{ "condition" }
 ,{ "flag." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "UIntMulDiv()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::UIntMulDiv()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "UIntDiv()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::UIntDiv()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "UIntMod()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::UIntMod()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "UIntModMul()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::UIntModMul()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "UIntModMac()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::UIntModMac()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "UIntSqRoot()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "UIntFunc<UInt>::UIntSqRoot()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "BitScanner<UInt>" }
} , & fmt_h3 , & align_h3 } ;

Text b46 = { {
 { "BitScanner" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "bit-scanning" }
 ,{ "class." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "scan" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "value" }
 ,{ "from" }
 ,{ "MSB" }
 ,{ "to" }
 ,{ "LSB." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "To" }
 ,{ "scan" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "use" }
 ,{ "the" }
 ,{ "following" }
 ,{ "cycle:" }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "Upon" }
 ,{ "construction" }
 ,{ "the" }
 ,{ "scanner" , & fmt_text_b }
 ,{ "points" }
 ,{ "to" }
 ,{ "the" }
 ,{ "most" }
 ,{ "significant" }
 ,{ "bit" }
 ,{ "of" }
 ,{ "the" }
 ,{ "value" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "the" }
 ,{ "value" , & fmt_text_b }
 ,{ "binary" }
 ,{ "representaion" }
 ,{ "is" }
 ,{ "b" }
 ,{ "0" }
 ,{ "=1b" }
 ,{ "1" }
 ,{ "b" }
 ,{ "2" }
 ,{ "...b" }
 ,{ "n" }
 ,{ "," }
 ,{ "then" }
 ,{ "the" }
 ,{ "scanner" , & fmt_text_b }
 ,{ "output" }
 ,{ "is" }
 ,{ "b" }
 ,{ "0" }
 ,{ "=1" }
 ,{ "," }
 ,{ "b" }
 ,{ "1" }
 ,{ "," }
 ,{ "b" }
 ,{ "2" }
 ,{ "," }
 ,{ "..." }
 ,{ "," }
 ,{ "b" }
 ,{ "n" }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_UIntFunc" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UIntSat {

Text b0 = { {
 { "UIntSat" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/UIntSat.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/UIntSat.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "These" }
 ,{ "files" }
 ,{ "contain" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "control" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integer" }
 ,{ "overflow." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "UIntSat" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "UIntSat" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "operations" }
 ,{ "with" }
 ,{ "the" }
 ,{ "overflow" }
 ,{ "control:" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Flag" }
 ,{ "overflow" , & fmt_text_b }
 ,{ "is" }
 ,{ "set" }
 ,{ "if" }
 ,{ "the" }
 ,{ "accumulated" }
 ,{ "value" }
 ,{ "is" }
 ,{ "not" }
 ,{ "representable" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "type." }
 ,{ "You" }
 ,{ "can" }
 ,{ "consider" }
 ,{ "such" }
 ,{ "value" }
 ,{ "as" }
 ,{ "\"greater" }
 ,{ "than" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "UInt" }
 ,{ "value\"." }
 ,{ "Further" }
 ,{ "additive" }
 ,{ "operations" }
 ,{ "with" }
 ,{ "such" }
 ,{ "value" }
 ,{ "produces" }
 ,{ "only" }
 ,{ "the" }
 ,{ "same" }
 ,{ "kind" }
 ,{ "of" }
 ,{ "value." }
 ,{ "You" }
 ,{ "can" }
 ,{ "sum," }
 ,{ "add" }
 ,{ "to" }
 ,{ "self" }
 ,{ "and" }
 ,{ "compare" }
 ,{ "with" }
 ,{ "a" }
 ,{ "limit" }
 ,{ "UIntSat" , & fmt_text_b }
 ,{ "s." }
 ,{ "You" }
 ,{ "can" }
 ,{ "also" }
 ,{ "use" }
 ,{ "it" }
 ,{ "in" }
 ,{ "constant" }
 ,{ "expressions." }
 ,{ "The" }
 ,{ "most" }
 ,{ "common" }
 ,{ "usage" }
 ,{ "is" }
 ,{ "a" }
 ,{ "buffer" }
 ,{ "length" }
 ,{ "calculation:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ULenSat" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "typedef" }
 ,{ "with" }
 ,{ "the" }
 ,{ "ulen" , & fmt_text_b }
 ,{ "parameter:" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "UIntConstAdd" }
 ,{ "," }
 ,{ "UIntConstSub" }
 ,{ "," }
 ,{ "UIntConstMul" }
} , & fmt_h3 , & align_h3 } ;

Text b8 = { {
 { "UIntConstAdd" , & fmt_text_b }
 ,{ "," }
 ,{ "UIntConstSub" , & fmt_text_b }
 ,{ "and" }
 ,{ "UIntConstMul" , & fmt_text_b }
 ,{ "are" }
 ,{ "Meta-constant" , & fmt_text_b }
 ,{ "s." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "UIntConstAdd" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "sum" }
 ,{ "of" }
 ,{ "all" }
 ,{ "CC" , & fmt_text_b }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "overflow," }
 ,{ "otherwise" }
 ,{ "not" }
 ,{ "defined." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "UIntConstSub" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "A-B" , & fmt_text_b }
 ,{ "if" }
 ,{ "A" , & fmt_text_b }
 ,{ ">=" , & fmt_text_b }
 ,{ "B" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "not" }
 ,{ "defined." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "UIntConstMul" , & fmt_text_b }
 ,{ "has" }
 ,{ "the" }
 ,{ "value" }
 ,{ "A*B" , & fmt_text_b }
 ,{ "if" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "overflow," }
 ,{ "otherwise" }
 ,{ "not" }
 ,{ "defined." }
} , & fmt_text , & align_text } ;

Page page = { "page_UIntSat" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UIntSlowMulAlgo {

Text b0 = { {
 { "Unsigned" }
 ,{ "multiplication" }
 ,{ "and" }
 ,{ "division" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/math/UIntSlowMulAlgo.h" , & fmt_text_Files_b }
 ,{ "CCore/src/math/UIntSlowMulAlgo.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "two" }
 ,{ "Algorithm" , & fmt_text_b }
 ,{ "Package" , & fmt_text_b }
 ,{ "s" }
 ,{ "with" }
 ,{ "unsigned" }
 ,{ "integer" }
 ,{ "algorithms." }
 ,{ "They" }
 ,{ "are" }
 ,{ "parametrized" }
 ,{ "by" }
 ,{ "some" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Bits" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "bits" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "MaxVal" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "DoubleUMul" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Class-function" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "performs" }
 ,{ "the" }
 ,{ "full" }
 ,{ "multiplication" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pair" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "hi" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "high" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product" }
 ,{ "and" }
 ,{ "the" }
 ,{ "lo" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "DoubleUDiv()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double-size" }
 ,{ "value," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "third" }
 ,{ "argument" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "hi" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "such" }
 ,{ "case" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "single-size" }
 ,{ "value." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Mul()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "full" }
 ,{ "multiplication" }
 ,{ "of" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "the" }
 ,{ "pair" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "where" }
 ,{ "hi" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "high" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product" }
 ,{ "and" }
 ,{ "the" }
 ,{ "lo" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Div()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double-size" }
 ,{ "value," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "third" }
 ,{ "argument" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "hi" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "in" }
 ,{ "such" }
 ,{ "case" }
 ,{ "the" }
 ,{ "result" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "single-size" }
 ,{ "value." }
 ,{ "Otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Mod()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "remainder" }
 ,{ "of" }
 ,{ "the" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "double-size" }
 ,{ "value," }
 ,{ "given" }
 ,{ "by" }
 ,{ "the" }
 ,{ "arguments" }
 ,{ "hi" , & fmt_text_b }
 ,{ "and" }
 ,{ "lo" , & fmt_text_b }
 ,{ "," }
 ,{ "by" }
 ,{ "the" }
 ,{ "third" }
 ,{ "argument" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "hi" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "MulDiv()" , & fmt_text_b }
 ,{ "multiplies" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "divides" }
 ,{ "the" }
 ,{ "full" }
 ,{ "double-size" }
 ,{ "product" }
 ,{ "by" }
 ,{ "den" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "high" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "product" }
 ,{ "must" }
 ,{ "be" }
 ,{ "less" }
 ,{ "than" }
 ,{ "den" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "DivMod()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "both" }
 ,{ "operations" }
 ,{ "Div()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Mod()" , & fmt_text_b }
 ,{ "and" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "in" }
 ,{ "the" }
 ,{ "fields" }
 ,{ "div" , & fmt_text_b }
 ,{ "and" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "ModMul()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "product" }
 ,{ "of" }
 ,{ "the" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "and" }
 ,{ "b" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "mod" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "ModMac()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "expression" }
 ,{ "s+a*b" , & fmt_text_b }
 ,{ "by" }
 ,{ "the" }
 ,{ "module" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed," }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "," }
 ,{ "b" , & fmt_text_b }
 ,{ "and" }
 ,{ "s" , & fmt_text_b }
 ,{ "<" , & fmt_text_b }
 ,{ "mod" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "the" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "unspecified." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "less" }
 ,{ "than" }
 ,{ "mod" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_UIntSlowMulAlgo" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UIntSplit {

Text b0 = { {
 { "UIntSplit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/UIntSplit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/UIntSplit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "UIntSplit" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Helper" , & fmt_text_b }
 ,{ "Type" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "can" }
 ,{ "split" }
 ,{ "a" }
 ,{ "bigger" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "value" }
 ,{ "into" }
 ,{ "an" }
 ,{ "array" }
 ,{ "of" }
 ,{ "smaller" }
 ,{ "ones" }
 ,{ "and" }
 ,{ "inverse." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "default" }
 ,{ "constructor," }
 ,{ "so" }
 ,{ "the" }
 ,{ "initial" }
 ,{ "value" }
 ,{ "of" }
 ,{ "this" }
 ,{ "class" }
 ,{ "is" }
 ,{ "indeterminate." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "\"big\"" }
 ,{ "integer" }
 ,{ "length" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "multiple" }
 ,{ "of" }
 ,{ "the" }
 ,{ "\"small\"" }
 ,{ "one." }
 ,{ "Internally" }
 ,{ "the" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "class" }
 ,{ "is" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "the" }
 ,{ "buffer" }
 ,{ "of" }
 ,{ "the" }
 ,{ "length" }
 ,{ "Len" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "can" }
 ,{ "access" }
 ,{ "this" }
 ,{ "buffer" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "ref()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "You" }
 ,{ "can" }
 ,{ "get" }
 ,{ "or" }
 ,{ "set" }
 ,{ "the" }
 ,{ "value" }
 ,{ "as" }
 ,{ "UIntBig" , & fmt_text_b }
 ,{ "type" }
 ,{ "value," }
 ,{ "using" }
 ,{ "the" }
 ,{ "methods" }
 ,{ "get()" , & fmt_text_b }
 ,{ "or" }
 ,{ "set()" , & fmt_text_b }
 ,{ "." }
 ,{ "But" }
 ,{ "you" }
 ,{ "can" }
 ,{ "get" }
 ,{ "or" }
 ,{ "set" }
 ,{ "UIntSmall" , & fmt_text_b }
 ,{ "parts" }
 ,{ "of" }
 ,{ "the" }
 ,{ "value" }
 ,{ "in" }
 ,{ "the" }
 ,{ "big-endian" }
 ,{ "order" }
 ,{ "using" }
 ,{ "the" }
 ,{ "overloaded" }
 ,{ "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "." }
 ,{ "An" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Page page = { "page_UIntSplit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Unid {

Text b0 = { {
 { "Unid" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Unid.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Unid.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Unid" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "unique" }
 ,{ "identity." }
 ,{ "It" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "structure" }
 ,{ "Unid" , & fmt_text_b }
 ,{ "." }
 ,{ "It's" }
 ,{ "a" }
 ,{ "POD" }
 ,{ "type" }
 ,{ "with" }
 ,{ "8" }
 ,{ "32-bit" }
 ,{ "values." }
 ,{ "To" }
 ,{ "build" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "Unid" , & fmt_text_b }
 ,{ "the" }
 ,{ "best" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "use" }
 ,{ "a" }
 ,{ "good" }
 ,{ "random" }
 ,{ "number" }
 ,{ "generator" }
 ,{ "like" }
 ,{ "HotBits" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "may" }
 ,{ "assign" }
 ,{ "a" }
 ,{ "Unid" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "like" }
 ,{ "this:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "and" }
 ,{ "then" }
 ,{ "get" }
 ,{ "it" }
 ,{ "using" }
 ,{ "the" }
 ,{ "helper" }
 ,{ "UnidOf" , & fmt_text_b }
 ,{ "(beware" }
 ,{ "inheritance!):" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "special" }
 ,{ "class" }
 ,{ "UnidRegister" , & fmt_text_b }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "a" }
 ,{ "global" }
 ,{ "mapping" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Unid" , & fmt_text_b }
 ,{ "to" }
 ,{ "number:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "The" }
 ,{ "method" }
 ,{ "getTypeId()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "a" }
 ,{ "number," }
 ,{ "associated" }
 ,{ "with" }
 ,{ "the" }
 ,{ "Unid" , & fmt_text_b }
 ,{ "of" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ "(and" }
 ,{ "therefor" }
 ,{ "with" }
 ,{ "the" }
 ,{ "type" }
 ,{ "T" , & fmt_text_b }
 ,{ ")." }
 ,{ "Numbers" }
 ,{ "are" }
 ,{ "assigned" }
 ,{ "sequentially" }
 ,{ "from" }
 ,{ "the" }
 ,{ "0." }
 ,{ "It" }
 ,{ "calls" }
 ,{ "abort" }
 ,{ "on" }
 ,{ "failure." }
} , & fmt_text , & align_text } ;

Page page = { "page_Unid" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Utf8 {

Text b0 = { {
 { "Utf8" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Utf8.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Utf8.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "file" }
 ,{ "contains" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "UTF8" }
 ,{ "encoding." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "type" }
 ,{ "Unicode" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "The" }
 ,{ "type" }
 ,{ "Unicode" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "32-bit" }
 ,{ "type," }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "symbol" }
 ,{ "using" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "encoding." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Utf8Code" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "Utf8Code" , & fmt_text_b }
 ,{ "represents" }
 ,{ "a" }
 ,{ "UTF8-encoded" }
 ,{ "symbol." }
 ,{ "It" }
 ,{ "consists" }
 ,{ "of" }
 ,{ "1-4" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Default" }
 ,{ "constructor" }
 ,{ "creates" }
 ,{ "a" }
 ,{ "null" }
 ,{ "symbol." }
 ,{ "Other" }
 ,{ "constructors" }
 ,{ "create" }
 ,{ "a" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "characters," }
 ,{ "these" }
 ,{ "characters" }
 ,{ "must" }
 ,{ "comply" }
 ,{ "with" }
 ,{ "UTF8" }
 ,{ "encoding" }
 ,{ "rules." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "getLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "getRange()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "range" }
 ,{ "of" }
 ,{ "characters." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "operator" , & fmt_text_b }
 ,{ "[]" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "octet" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "character" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "toUnicode()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "ToUnicode()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "a" }
 ,{ "UTF8" }
 ,{ "symbol," }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "set" }
 ,{ "of" }
 ,{ "octets," }
 ,{ "into" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Utf8Code" , & fmt_text_b }
 ,{ "is" }
 ,{ "printable." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Utilities" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "This" }
 ,{ "guard" }
 ,{ "function" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "throw" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "broken" }
 ,{ "UTF8" }
 ,{ "text." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "function" }
 ,{ "name." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "This" }
 ,{ "function" }
 ,{ "converts" }
 ,{ "a" }
 ,{ "Unicode" }
 ,{ "value" }
 ,{ "into" }
 ,{ "the" }
 ,{ "UTF8" }
 ,{ "symbol." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Utf8Len()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "length" }
 ,{ "from" }
 ,{ "the" }
 ,{ "leading" }
 ,{ "octet." }
 ,{ "If" }
 ,{ "the" }
 ,{ "given" }
 ,{ "octet" }
 ,{ "is" }
 ,{ "not" }
 ,{ "a" }
 ,{ "UTF8" }
 ,{ "leading" }
 ,{ "octet," }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "Utf8Ext()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "iff" }
 ,{ "the" }
 ,{ "octet" }
 ,{ "is" }
 ,{ "a" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "extension." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "PeekUtf8_gen()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "generic" }
 ,{ "peek" }
 ,{ "function." }
 ,{ "It" }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text." }
 ,{ "And" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "object" }
 ,{ "Ret" , & fmt_text_b }
 ,{ "," }
 ,{ "created" }
 ,{ "with" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "following" }
 ,{ "constructors:" }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "PeekUtf8()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "a" }
 ,{ "valid" }
 ,{ "UTF8" }
 ,{ "sequence" }
 ,{ "at" }
 ,{ "the" }
 ,{ "begining" }
 ,{ "of" }
 ,{ "the" }
 ,{ "text," }
 ,{ "the" }
 ,{ "null" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "CutUtf8()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "(argument" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "a" }
 ,{ "valid" }
 ,{ "UTF8" }
 ,{ "sequence" }
 ,{ "at" }
 ,{ "the" }
 ,{ "begining" }
 ,{ "of" }
 ,{ "the" }
 ,{ "text," }
 ,{ "the" }
 ,{ "null" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "returned" }
 ,{ "and" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "moved" }
 ,{ "by" }
 ,{ "1" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "PeekUtf8_guarded()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "gurded" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "PeekUtf8()" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "CutUtf8_guarded()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "guarded" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CutUtf8()" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "PeekUtf8_unicode()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "and" }
 ,{ "converts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "value." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "the" }
 ,{ "value" }
 ,{ "Unicode(-1)" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "CutUtf8_unicode()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "(argument" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)" }
 ,{ "and" }
 ,{ "converts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "value." }
 ,{ "In" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error" }
 ,{ "the" }
 ,{ "value" }
 ,{ "Unicode(-1)" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned" }
 ,{ "and" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "moved" }
 ,{ "by" }
 ,{ "1" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "PeekUtf8_unicode_guarded()" , & fmt_text_b }
 ,{ "peeks" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "and" }
 ,{ "converts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "value." }
 ,{ "It" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "CutUtf8_unicode_guarded()" , & fmt_text_b }
 ,{ "extracts" }
 ,{ "the" }
 ,{ "next" }
 ,{ "UTF8" }
 ,{ "symbol" }
 ,{ "from" }
 ,{ "the" }
 ,{ "non-empty" }
 ,{ "text" }
 ,{ "(argument" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)" }
 ,{ "and" }
 ,{ "converts" }
 ,{ "it" }
 ,{ "to" }
 ,{ "the" }
 ,{ "Unicode" }
 ,{ "value." }
 ,{ "It" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "TrimUtf8End()" , & fmt_text_b }
 ,{ "removes" }
 ,{ "the" }
 ,{ "trailing" }
 ,{ "non-complete" }
 ,{ "UTF8" }
 ,{ "sequence," }
 ,{ "if" }
 ,{ "any," }
 ,{ "from" }
 ,{ "the" }
 ,{ "text" }
 ,{ "(argument" }
 ,{ "text" , & fmt_text_b }
 ,{ "is" }
 ,{ "updated)." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Utf8Len()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "UTF8" }
 ,{ "text." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "Utf8Len_guarded" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "guarded" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Utf8Len()" , & fmt_text_b }
 ,{ "," }
 ,{ "it" }
 ,{ "throws" }
 ,{ "an" }
 ,{ "exception" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Utf8Move()" , & fmt_text_b }
 ,{ "moves" }
 ,{ "a" }
 ,{ "text" }
 ,{ "cursor" }
 ,{ "by" }
 ,{ "the" }
 ,{ "given" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "UTF8" }
 ,{ "symbols." }
 ,{ "The" }
 ,{ "result" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Page page = { "page_Utf8" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UtilFunc {

Text b0 = { {
 { "UtilFunc" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/gadget/UtilFunc.h" , & fmt_text_Files_b }
 ,{ "CCore/src/gadget/UtilFunc.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "some" }
 ,{ "popular" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ToConst()" }
} , & fmt_h3 , & align_h3 } ;

Text b4 = { {
 { "ToConst()" , & fmt_text_b }
 ,{ "makes" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "reference" }
 ,{ "from" }
 ,{ "a" }
 ,{ "reference." }
 ,{ "Sometimes" }
 ,{ "useful." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Min()/Max()" }
} , & fmt_h3 , & align_h3 } ;

Text b6 = { {
 { "Min()/Max()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "intended" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "with" }
 ,{ "simple" }
 ,{ "types" }
 ,{ "and" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "constant" }
 ,{ "expressions." }
 ,{ "They" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "a" }
 ,{ "straightforward" }
 ,{ "way." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Min_cast()/Max_cast()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "are" }
 ,{ "multi-argument" }
 ,{ "min/max" }
 ,{ "functions," }
 ,{ "they" }
 ,{ "also" }
 ,{ "cast" }
 ,{ "extra" }
 ,{ "arguments" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Cap()" }
} , & fmt_h3 , & align_h3 } ;

Text b9 = { {
 { "Cap()" , & fmt_text_b }
 ,{ "adjusts" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "x" , & fmt_text_b }
 ,{ "to" }
 ,{ "fit" }
 ,{ "it" }
 ,{ "into" }
 ,{ "the" }
 ,{ "given" }
 ,{ "interval" }
 ,{ "[a,b]" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "work" }
 ,{ "properly," }
 ,{ "make" }
 ,{ "sure" }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "." }
 ,{ "If" }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "too" }
 ,{ "low," }
 ,{ "a" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned," }
 ,{ "if" }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "too" }
 ,{ "large," }
 ,{ "b" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Otherwise," }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "returned." }
 ,{ "Pay" }
 ,{ "attention," }
 ,{ "that" }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "middle" }
 ,{ "argument!" }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Fit()" }
} , & fmt_h3 , & align_h3 } ;

Text b11 = { {
 { "Fit()" , & fmt_text_b }
 ,{ "checks" }
 ,{ "that" }
 ,{ "the" }
 ,{ "given" }
 ,{ "value" }
 ,{ "x" , & fmt_text_b }
 ,{ "belongs" }
 ,{ "to" }
 ,{ "the" }
 ,{ "interval" }
 ,{ "[a,b]" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "work" }
 ,{ "properly," }
 ,{ "make" }
 ,{ "sure" }
 ,{ "that" }
 ,{ "a" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "b" , & fmt_text_b }
 ,{ "." }
 ,{ "Pay" }
 ,{ "attention," }
 ,{ "that" }
 ,{ "x" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "middle" }
 ,{ "argument!" }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "Sq()" }
} , & fmt_h3 , & align_h3 } ;

Text b13 = { {
 { "Sq()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "square" }
 ,{ "of" }
 ,{ "the" }
 ,{ "argument." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Diff()" }
} , & fmt_h3 , & align_h3 } ;

Text b15 = { {
 { "Diff()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "differentiation," }
 ,{ "i.e." }
 ,{ "subtracts" }
 ,{ "a" }
 ,{ "value" }
 ,{ "from" }
 ,{ "the" }
 ,{ "previous" }
 ,{ "one" }
 ,{ "and" }
 ,{ "records" }
 ,{ "the" }
 ,{ "new" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Consider" }
 ,{ "an" }
 ,{ "example:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "Change()" }
} , & fmt_h3 , & align_h3 } ;

Text b18 = { {
 { "Change()" , & fmt_text_b }
 ,{ "assigns" }
 ,{ "a" }
 ,{ "new" }
 ,{ "value" }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "different" }
 ,{ "than" }
 ,{ "the" }
 ,{ "old" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "object." }
 ,{ "If" }
 ,{ "this" }
 ,{ "happens" }
 ,{ "the" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "otherwise" }
 ,{ "â€”" }
 ,{ "false" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "AddToCap()" }
} , & fmt_h3 , & align_h3 } ;

Text b20 = { {
 { "AddToCap()" , & fmt_text_b }
 ,{ "increases" }
 ,{ "a" }
 ,{ "value" }
 ,{ "up" }
 ,{ "to" }
 ,{ "the" }
 ,{ "cap." }
 ,{ "It" }
 ,{ "the" }
 ,{ "value" }
 ,{ "is" }
 ,{ "already" }
 ,{ "above" }
 ,{ "the" }
 ,{ "cap," }
 ,{ "it" }
 ,{ "is" }
 ,{ "not" }
 ,{ "changed." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "CapDown()" }
} , & fmt_h3 , & align_h3 } ;

Text b22 = { {
 { "CapDown()" , & fmt_text_b }
 ,{ "lowers" }
 ,{ "the" }
 ,{ "given" }
 ,{ "object" }
 ,{ "to" }
 ,{ "the" }
 ,{ "given" }
 ,{ "cap." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "RoundUpCount()/RoundUp()" }
} , & fmt_h3 , & align_h3 } ;

Text b24 = { {
 { "Two" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "round" }
 ,{ "up" }
 ,{ "integral" }
 ,{ "values." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "positive." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second," }
 ,{ "rounded" }
 ,{ "up." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "value" }
 ,{ "res" , & fmt_text_b }
 ,{ "," }
 ,{ "such" }
 ,{ "that" }
 ,{ "g*res" , & fmt_text_b }
 ,{ ">=" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "The" }
 ,{ "second" }
 ,{ "function" }
 ,{ "rounds" }
 ,{ "up" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "to" }
 ,{ "be" }
 ,{ "divisible" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "RoundDownCount()/RoundDown()" }
} , & fmt_h3 , & align_h3 } ;

Text b28 = { {
 { "Two" }
 ,{ "functions" }
 ,{ "to" }
 ,{ "round" }
 ,{ "down" }
 ,{ "integral" }
 ,{ "values." }
 ,{ "It" }
 ,{ "is" }
 ,{ "assumed" }
 ,{ "that" }
 ,{ "arguments" }
 ,{ "are" }
 ,{ "positive." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "The" }
 ,{ "first" }
 ,{ "function" }
 ,{ "returns" }
 ,{ "the" }
 ,{ "result" }
 ,{ "of" }
 ,{ "division" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second," }
 ,{ "rounded" }
 ,{ "down." }
 ,{ "I.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "value" }
 ,{ "res" , & fmt_text_b }
 ,{ "," }
 ,{ "such" }
 ,{ "that" }
 ,{ "g*res" , & fmt_text_b }
 ,{ "<=" , & fmt_text_b }
 ,{ "x" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "The" }
 ,{ "second" }
 ,{ "function" }
 ,{ "rounds" }
 ,{ "down" }
 ,{ "the" }
 ,{ "first" }
 ,{ "argument" }
 ,{ "to" }
 ,{ "be" }
 ,{ "divisible" }
 ,{ "by" }
 ,{ "the" }
 ,{ "second." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Bit...()" }
} , & fmt_h3 , & align_h3 } ;

Text b32 = { {
 { "Bit...()" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "four" }
 ,{ "bit" }
 ,{ "manipulation" }
 ,{ "functions:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "These" }
 ,{ "functions" }
 ,{ "make" }
 ,{ "bit" }
 ,{ "manipulation" }
 ,{ "expressions" }
 ,{ "more" }
 ,{ "simple" }
 ,{ "and" }
 ,{ "verbose" }
 ,{ "and" }
 ,{ "resolve" }
 ,{ "the" }
 ,{ "type" }
 ,{ "conversion" }
 ,{ "problem." }
 ,{ "The" }
 ,{ "second" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "explicitly" }
 ,{ "casted" }
 ,{ "to" }
 ,{ "the" }
 ,{ "type" }
 ,{ "of" }
 ,{ "the" }
 ,{ "first" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "Digit" }
 ,{ "functions" }
} , & fmt_h3 , & align_h3 } ;

Text b35 = { {
 { "The" }
 ,{ "following" }
 ,{ "three" }
 ,{ "functions" }
 ,{ "converts" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integer" }
 ,{ "into" }
 ,{ "a" }
 ,{ "digit" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "UpperHexDigit()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "upper" }
 ,{ "hex" }
 ,{ "digit" }
 ,{ "character," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,16)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "LowerHexDigit()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "lower" }
 ,{ "hex" }
 ,{ "digit" }
 ,{ "character," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,16)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "DecDigit()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "decimal" }
 ,{ "digit" }
 ,{ "character," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "must" }
 ,{ "be" }
 ,{ "in" }
 ,{ "the" }
 ,{ "range" }
 ,{ "[0,10)" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_UtilFunc" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_UtilVolume {

Text b0 = { {
 { "Volume" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Volume" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "simple" }
 ,{ "utility" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "volumes" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "First," }
 ,{ "you" }
 ,{ "can" }
 ,{ "create" }
 ,{ "a" }
 ,{ "volume." }
 ,{ "You" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "files." }
 ,{ "These" }
 ,{ "files" }
 ,{ "will" }
 ,{ "be" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "a" }
 ,{ "volume" }
 ,{ "file." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "each" }
 ,{ "file" }
 ,{ "is" }
 ,{ "\"/file\"" }
 ,{ "or" }
 ,{ "\"/dir/file\"." }
 ,{ "If" }
 ,{ "the" }
 ,{ "volume" }
 ,{ "file" }
 ,{ "name" }
 ,{ "is" }
 ,{ "not" }
 ,{ "given," }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "with" }
 ,{ "the" }
 ,{ "appended" }
 ,{ "extension" }
 ,{ "\".vol\"" }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "You" }
 ,{ "can" }
 ,{ "list" }
 ,{ "volume" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Finally," }
 ,{ "you" }
 ,{ "can" }
 ,{ "extract" }
 ,{ "files" }
 ,{ "from" }
 ,{ "a" }
 ,{ "volume" }
 ,{ "into" }
 ,{ "some" }
 ,{ "directory." }
 ,{ "If" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "name" }
 ,{ "is" }
 ,{ "not" }
 ,{ "given," }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "volume" }
 ,{ "file" }
 ,{ "is" }
 ,{ "used" }
 ,{ "with" }
 ,{ "skipped" }
 ,{ "extension." }
} , & fmt_text , & align_text } ;

Page page = { "page_UtilVolume" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_Volume {

Text b0 = { {
 { "Volume" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/Volume.h" , & fmt_text_Files_b }
 ,{ "CCore/src/Volume.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Volume" }
 ,{ "is" }
 ,{ "a" }
 ,{ "file," }
 ,{ "which" }
 ,{ "contains" }
 ,{ "several" }
 ,{ "files." }
 ,{ "Each" }
 ,{ "packed" }
 ,{ "file" }
 ,{ "is" }
 ,{ "identified" }
 ,{ "by" }
 ,{ "a" }
 ,{ "name." }
 ,{ "There" }
 ,{ "are" }
 ,{ "several" }
 ,{ "classes" }
 ,{ "to" }
 ,{ "read" }
 ,{ "a" }
 ,{ "volume" }
 ,{ "content." }
 ,{ "They" }
 ,{ "all" }
 ,{ "uses" }
 ,{ "some" }
 ,{ "base" }
 ,{ "class," }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "AltFileToRead" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "read" }
 ,{ "the" }
 ,{ "volume" }
 ,{ "file" }
 ,{ "data." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "a" }
 ,{ "template" }
 ,{ "parameter." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Volume" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "a" }
 ,{ "volume." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "getCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "packed" }
 ,{ "files." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "getName()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "file" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "open()" , & fmt_text_b }
 ,{ "\"opens\"" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packed" }
 ,{ "file." }
 ,{ "The" }
 ,{ "file" }
 ,{ "can" }
 ,{ "be" }
 ,{ "specified" }
 ,{ "using" }
 ,{ "its" }
 ,{ "name" }
 ,{ "or" }
 ,{ "index." }
 ,{ "An" }
 ,{ "exception" }
 ,{ "is" }
 ,{ "thrown" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "error." }
 ,{ "You" }
 ,{ "don't" }
 ,{ "need" }
 ,{ "to" }
 ,{ "use" }
 ,{ "this" }
 ,{ "method" }
 ,{ "directly." }
 ,{ "Use" }
 ,{ "the" }
 ,{ "class" }
 ,{ "VolumeFile" , & fmt_text_b }
 ,{ "instead." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "VolumeFile" }
} , & fmt_h4 , & align_h4 } ;

Text b9 = { {
 { "This" }
 ,{ "class" }
 ,{ "implements" }
 ,{ "a" }
 ,{ "read" }
 ,{ "file" }
 ,{ "interface," }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "AltFileToRead" , & fmt_text_a }
 ,{ "," }
 ,{ "to" }
 ,{ "read" }
 ,{ "data" }
 ,{ "from" }
 ,{ "a" }
 ,{ "volume" }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "VolumeFileToMem" }
} , & fmt_h4 , & align_h4 } ;

Text b11 = { {
 { "This" }
 ,{ "class" }
 ,{ "load" }
 ,{ "the" }
 ,{ "content" }
 ,{ "of" }
 ,{ "a" }
 ,{ "volume" }
 ,{ "file" }
 ,{ "to" }
 ,{ "the" }
 ,{ "memory," }
 ,{ "similar" }
 ,{ "to" }
 ,{ "the" }
 ,{ "FileToMem" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_Volume" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCoreConsole {

Text b0 = { {
 { "XCore" }
 ,{ "console" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysCon.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysCon_general.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "tools" }
 ,{ "to" }
 ,{ "work" }
 ,{ "with" }
 ,{ "console" }
 ,{ "input-output." }
 ,{ "A" }
 ,{ "Target" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "primary" }
 ,{ "console" }
 ,{ "class" }
 ,{ "to" }
 ,{ "support" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "GetPlanInitNode_SysCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "node" }
 ,{ "of" }
 ,{ "the" }
 ,{ "primary" }
 ,{ "console" }
 ,{ "object." }
 ,{ "It" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "Target." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "ConInputResult" , & fmt_text_b }
 ,{ "is" }
 ,{ "en" }
 ,{ "enum." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "designate" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "action" }
 ,{ "with" }
 ,{ "the" }
 ,{ "input" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "ConInputFunction" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Function" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "process" }
 ,{ "an" }
 ,{ "input" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "ConOutputFunction" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "Function" , & fmt_text_a }
 ,{ "." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "process" }
 ,{ "an" }
 ,{ "output" }
 ,{ "character" }
 ,{ "NanoPacket" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "AllocConPacket()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "a" }
 ,{ "NanoPacket" , & fmt_text_b }
 ,{ "to" }
 ,{ "use" }
 ,{ "it" }
 ,{ "for" }
 ,{ "console" }
 ,{ "output." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "the" }
 ,{ "timeout" }
 ,{ "for" }
 ,{ "the" }
 ,{ "operation." }
 ,{ "If" }
 ,{ "a" }
 ,{ "packet" }
 ,{ "cannot" }
 ,{ "be" }
 ,{ "allocated" }
 ,{ "withing" }
 ,{ "the" }
 ,{ "given" }
 ,{ "timeout" }
 ,{ "the" }
 ,{ "null" }
 ,{ "is" }
 ,{ "returned." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "ConWrite()" , & fmt_text_b }
 ,{ "writes" }
 ,{ "the" }
 ,{ "NanoPacket" , & fmt_text_b }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
 ,{ "The" }
 ,{ "null" }
 ,{ "value" }
 ,{ "is" }
 ,{ "allowed." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "EnablePacketCon()" , & fmt_text_b }
 ,{ "turns" }
 ,{ "on" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "console" }
 ,{ "mode." }
 ,{ "You" }
 ,{ "must" }
 ,{ "not" }
 ,{ "use" }
 ,{ "this" }
 ,{ "function" }
 ,{ "directly," }
 ,{ "it" }
 ,{ "is" }
 ,{ "only" }
 ,{ "for" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "DisablePacketCon()" , & fmt_text_b }
 ,{ "turns" }
 ,{ "off" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "console" }
 ,{ "mode." }
 ,{ "You" }
 ,{ "must" }
 ,{ "not" }
 ,{ "use" }
 ,{ "this" }
 ,{ "function" }
 ,{ "directly," }
 ,{ "it" }
 ,{ "is" }
 ,{ "only" }
 ,{ "for" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "ShowConStat()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "console" }
 ,{ "statistics." }
 ,{ "This" }
 ,{ "function" }
 ,{ "behavior" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "Target," }
 ,{ "it" }
 ,{ "may" }
 ,{ "do" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "install" }
 ,{ "the" }
 ,{ "input" }
 ,{ "processing" }
 ,{ "function." }
 ,{ "Constructor" }
 ,{ "installs" }
 ,{ "the" }
 ,{ "function" }
 ,{ "and" }
 ,{ "destructor" }
 ,{ "uninstalls" }
 ,{ "it." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "input_any" , & fmt_text_b }
 ,{ "is" }
 ,{ "some" }
 ,{ "input" }
 ,{ "processing" }
 ,{ "function." }
 ,{ "It" }
 ,{ "may" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "any" }
 ,{ "context." }
 ,{ "This" }
 ,{ "function" }
 ,{ "receives" }
 ,{ "an" }
 ,{ "input" }
 ,{ "character" }
 ,{ "and" }
 ,{ "must" }
 ,{ "return" }
 ,{ "a" }
 ,{ "value" }
 ,{ "to" }
 ,{ "indicate" }
 ,{ "a" }
 ,{ "desired" }
 ,{ "response:" }
 ,{ "Con_Drop" , & fmt_text_b }
 ,{ "to" }
 ,{ "inform" }
 ,{ "that" }
 ,{ "character" }
 ,{ "was" }
 ,{ "discarded," }
 ,{ "Con_Echo" , & fmt_text_b }
 ,{ "to" }
 ,{ "echo" }
 ,{ "the" }
 ,{ "character" }
 ,{ "back," }
 ,{ "Con_NoEcho" , & fmt_text_b }
 ,{ "to" }
 ,{ "suppress" }
 ,{ "the" }
 ,{ "echo" }
 ,{ "and" }
 ,{ "Con_EOL" , & fmt_text_b }
 ,{ "to" }
 ,{ "echo" }
 ,{ "end-of-line." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "temporary" }
 ,{ "hook" }
 ,{ "the" }
 ,{ "active" }
 ,{ "console" }
 ,{ "input" }
 ,{ "function." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "send" }
 ,{ "an" }
 ,{ "input" }
 ,{ "character." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "install" }
 ,{ "the" }
 ,{ "console" }
 ,{ "output" }
 ,{ "processing" }
 ,{ "function." }
 ,{ "Constructor" }
 ,{ "installs" }
 ,{ "the" }
 ,{ "function" }
 ,{ "and" }
 ,{ "destructor" }
 ,{ "uninstalls" }
 ,{ "it." }
 ,{ "Being" }
 ,{ "installed" }
 ,{ "this" }
 ,{ "function" }
 ,{ "receives" }
 ,{ "the" }
 ,{ "output" }
 ,{ "packets," }
 ,{ "instead" }
 ,{ "a" }
 ,{ "default" }
 ,{ "console" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "temporary" }
 ,{ "hook" }
 ,{ "the" }
 ,{ "console" }
 ,{ "output" }
 ,{ "and" }
 ,{ "send" }
 ,{ "the" }
 ,{ "given" }
 ,{ "packet(s)" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "base" }
 ,{ "class" }
 ,{ "for" }
 ,{ "the" }
 ,{ "Target-implemented" }
 ,{ "primary" }
 ,{ "console" }
 ,{ "class." }
 ,{ "Target" }
 ,{ "must" }
 ,{ "define" }
 ,{ "a" }
 ,{ "drived" }
 ,{ "class" }
 ,{ "from" }
 ,{ "ConBase" , & fmt_text_b }
 ,{ "and" }
 ,{ "provide" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "global" }
 ,{ "object" }
 ,{ "of" }
 ,{ "such" }
 ,{ "class" }
 ,{ "via" }
 ,{ "the" }
 ,{ "ConBase::GetObject()" , & fmt_text_b }
 ,{ "method." }
 ,{ "Here" , & fmt_text_a }
 ,{ "is" }
 ,{ "a" }
 ,{ "pattern" }
 ,{ "how" }
 ,{ "to" }
 ,{ "do" }
 ,{ "this." }
 ,{ "A" }
 ,{ "derived" }
 ,{ "class" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "following" }
 ,{ "pure" }
 ,{ "virtual" }
 ,{ "methods:" }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "attachDefaultInput()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "given" }
 ,{ "function" }
 ,{ "to" }
 ,{ "the" }
 ,{ "default" }
 ,{ "console" }
 ,{ "input." }
 ,{ "Each" }
 ,{ "time" }
 ,{ "the" }
 ,{ "user" }
 ,{ "hit" }
 ,{ "a" }
 ,{ "key" }
 ,{ "the" }
 ,{ "attached" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "with" }
 ,{ "the" }
 ,{ "appropriate" }
 ,{ "character" }
 ,{ "as" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "do" }
 ,{ "some" }
 ,{ "response." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "detachDefaultInput()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "default" }
 ,{ "console" }
 ,{ "input" }
 ,{ "from" }
 ,{ "the" }
 ,{ "input" }
 ,{ "processing" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "defaultOutput()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "console" }
 ,{ "output." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "may" }
 ,{ "be" }
 ,{ "null." }
 ,{ "This" }
 ,{ "function" }
 ,{ "send" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "payload" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console." }
 ,{ "It" }
 ,{ "may" }
 ,{ "do" }
 ,{ "it" }
 ,{ "immediately" }
 ,{ "or" }
 ,{ "put" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "into" }
 ,{ "some" }
 ,{ "packet" }
 ,{ "queue" }
 ,{ "for" }
 ,{ "a" }
 ,{ "further" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "enablePacket()" , & fmt_text_b }
 ,{ "enables" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "of" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "after" }
 ,{ "the" }
 ,{ "core" }
 ,{ "is" }
 ,{ "up." }
 ,{ "After" }
 ,{ "this" }
 ,{ "point" }
 ,{ "the" }
 ,{ "console" }
 ,{ "implementation" }
 ,{ "may" }
 ,{ "use" }
 ,{ "the" }
 ,{ "full" }
 ,{ "power" }
 ,{ "of" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
 ,{ "Before" }
 ,{ "this" }
 ,{ "point" }
 ,{ "only" }
 ,{ "polling" }
 ,{ "methods" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "operate" }
 ,{ "the" }
 ,{ "console." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "disablePacket()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "of" }
 ,{ "operation." }
 ,{ "This" }
 ,{ "method" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "before" }
 ,{ "the" }
 ,{ "shutdown" }
 ,{ "the" }
 ,{ "core." }
 ,{ "After" }
 ,{ "this" }
 ,{ "point" }
 ,{ "the" }
 ,{ "console" }
 ,{ "implementation" }
 ,{ "may" }
 ,{ "not" }
 ,{ "use" }
 ,{ "tasks," }
 ,{ "interrupts" }
 ,{ "and" }
 ,{ "other" }
 ,{ "core" }
 ,{ "stuff" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "showStat()" , & fmt_text_b }
 ,{ "prints" }
 ,{ "the" }
 ,{ "statistic" }
 ,{ "counters." }
 ,{ "The" }
 ,{ "meaning" }
 ,{ "of" }
 ,{ "the" }
 ,{ "printed" }
 ,{ "information" }
 ,{ "is" }
 ,{ "implementation-defined." }
 ,{ "This" }
 ,{ "method" }
 ,{ "may" }
 ,{ "do" }
 ,{ "nothing." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "Other" }
 ,{ "methods" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ConBase" , & fmt_text_b }
 ,{ "are:" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Constructor" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "following" }
 ,{ "arguments:" }
 ,{ "name" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "sync" }
 ,{ "object" }
 ,{ "name." }
 ,{ "mem" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "address" }
 ,{ "of" }
 ,{ "a" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned." }
 ,{ "This" }
 ,{ "block" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "construct" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "packet" }
 ,{ "pool." }
 ,{ "The" }
 ,{ "block" }
 ,{ "length" }
 ,{ "can" }
 ,{ "be" }
 ,{ "calculated" }
 ,{ "using" }
 ,{ "the" }
 ,{ "method" }
 ,{ "MemLen()" , & fmt_text_b }
 ,{ "." }
 ,{ "max_data_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "maximum" }
 ,{ "data" }
 ,{ "length" }
 ,{ "of" }
 ,{ "a" }
 ,{ "nano-packet." }
 ,{ "count" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "nano-packets" }
 ,{ "in" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "pool." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "MemLen()" , & fmt_text_b }
 ,{ "calculates" }
 ,{ "the" }
 ,{ "required" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "block." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "getNoPacketCount()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "no-packet" }
 ,{ "events." }
 ,{ "No-packet" }
 ,{ "event" }
 ,{ "happens" }
 ,{ "when" }
 ,{ "the" }
 ,{ "alloc()" , & fmt_text_b }
 ,{ "method" }
 ,{ "fails." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "alloc()" , & fmt_text_b }
 ,{ "allocates" }
 ,{ "the" }
 ,{ "nano-packet" }
 ,{ "from" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "packet" }
 ,{ "pool." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCoreConsole" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCoreTargets {

Text b0 = { {
 { "XCore" }
 ,{ "Targets" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "An" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "target" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "build" }
 ,{ "applications," }
 ,{ "running" }
 ,{ "on" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "board." }
 ,{ "Target" }
 ,{ "itself" }
 ,{ "is" }
 ,{ "a" }
 ,{ "collection" }
 ,{ "of" }
 ,{ "files," }
 ,{ "located" }
 ,{ "at" }
 ,{ "some" }
 ,{ "directory" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCore/Target" , & fmt_text_b }
 ,{ "directory." }
 ,{ "The" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "is" }
 ,{ "the" }
 ,{ "target" }
 ,{ "name." }
 ,{ "Plus" }
 ,{ "a" }
 ,{ "cross-toolchain" }
 ,{ "is" }
 ,{ "required" }
 ,{ "to" }
 ,{ "build" }
 ,{ "projects." }
 ,{ "The" , & fmt_text_Alert }
 ,{ "toolchain" , & fmt_text_Alert }
 ,{ "must" , & fmt_text_Alert }
 ,{ "be" , & fmt_text_Alert }
 ,{ "built" , & fmt_text_Alert }
 ,{ "according" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "XCore" , & fmt_text_Alert }
 ,{ "requirements" , & fmt_text_Alert }
 ,{ "to" , & fmt_text_Alert }
 ,{ "be" , & fmt_text_Alert }
 ,{ "aligned" , & fmt_text_Alert }
 ,{ "with" , & fmt_text_Alert }
 ,{ "the" , & fmt_text_Alert }
 ,{ "core" , & fmt_text_Alert }
 ,{ "." }
 ,{ "CCore" , & fmt_text_b }
 ,{ "uses" }
 ,{ "GNU-compatible" }
 ,{ "make-based" }
 ,{ "build" }
 ,{ "system." }
 ,{ "To" }
 ,{ "build" }
 ,{ "an" }
 ,{ "application" }
 ,{ "for" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "target" }
 ,{ "you" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "target" }
 ,{ "name" }
 ,{ "as" }
 ,{ "one" , & fmt_text_a }
 ,{ "of" , & fmt_text_a }
 ,{ "the" , & fmt_text_a }
 ,{ "build" , & fmt_text_a }
 ,{ "variable" , & fmt_text_a }
 ,{ "in" , & fmt_text_a }
 ,{ "a" , & fmt_text_a }
 ,{ "makefile" , & fmt_text_a }
 ,{ "." }
 ,{ "There" }
 ,{ "is" }
 ,{ "a" }
 ,{ "special" }
 ,{ "target" }
 ,{ "Vanilla-X" , & fmt_text_b }
 ,{ "." }
 ,{ "This" }
 ,{ "target" }
 ,{ "is" }
 ,{ "a" }
 ,{ "template" }
 ,{ "for" }
 ,{ "any" }
 ,{ "standalone" }
 ,{ "target." }
 ,{ "If" }
 ,{ "you" }
 ,{ "want" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "new" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "target," }
 ,{ "you" }
 ,{ "may" }
 ,{ "start" }
 ,{ "from" }
 ,{ "this" }
 ,{ "\"vanilla\"" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "layout" }
 ,{ "for" }
 ,{ "required" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "target" }
 ,{ "files." }
 ,{ "You" }
 ,{ "may" }
 ,{ "add" }
 ,{ "additional" }
 ,{ "features" }
 ,{ "to" }
 ,{ "your" }
 ,{ "target" }
 ,{ "by" }
 ,{ "adding" }
 ,{ "extra" }
 ,{ "source" }
 ,{ "files." }
 ,{ "In" }
 ,{ "general" }
 ,{ "case" }
 ,{ "you" }
 ,{ "should" }
 ,{ "add" }
 ,{ "a" }
 ,{ "lot" }
 ,{ "of" }
 ,{ "extra" }
 ,{ "code" }
 ,{ "to" }
 ,{ "be" }
 ,{ "able" }
 ,{ "to" }
 ,{ "use" }
 ,{ "the" }
 ,{ "platform" }
 ,{ "hardware." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Target" }
 ,{ "code" }
 ,{ "from" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "sys" , & fmt_text_b }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Sys" , & fmt_text_b }
 ,{ "(inside" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "CCore" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Target" }
 ,{ "code" }
 ,{ "from" }
 ,{ "the" }
 ,{ "file" }
 ,{ "Quick.h" , & fmt_text_b }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "Quick" , & fmt_text_b }
 ,{ "(inside" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "CCore" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Makefile" }
} , & fmt_h4 , & align_h4 } ;

Text b6 = { {
 { "Makefile" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "CCore.a" , & fmt_text_b }
 ,{ "library." }
 ,{ "It's" }
 ,{ "standard" }
 ,{ "and" }
 ,{ "looks" }
 ,{ "like" }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Makefile.tools" , & fmt_text_b }
 ,{ "defines" }
 ,{ "toolset" }
 ,{ "to" }
 ,{ "build" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "target" }
 ,{ "applications." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like" }
 ,{ "(" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "example)" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "You" }
 ,{ "define" }
 ,{ "here" }
 ,{ "the" }
 ,{ "following" }
 ,{ "variables:" }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "ECHO" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "echo" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "FIND" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "find" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "MKDIR" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "mkdir" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "CAT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "cat" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "TOUCH" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "Unix" }
 ,{ "touch" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "CC" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "C++" }
 ,{ "cross-compiler." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "LD" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "cross-linker." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "AS" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "cross-assembler." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "AR" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "cross-librarian." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "RM" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "file" }
 ,{ "delete" }
 ,{ "command." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "CCOPT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "compiler." }
 ,{ "Among" }
 ,{ "other" }
 ,{ "they" }
 ,{ "must" }
 ,{ "specify" }
 ,{ "directories" }
 ,{ "to" }
 ,{ "search" }
 ,{ "include" }
 ,{ "files." }
 ,{ "The" }
 ,{ "order" }
 ,{ "of" }
 ,{ "directories" }
 ,{ "is:" }
 ,{ "target" }
 ,{ "include" }
 ,{ "path," }
 ,{ "XCore" , & fmt_text_b }
 ,{ "include" }
 ,{ "path," }
 ,{ "CCore" , & fmt_text_b }
 ,{ "include" }
 ,{ "paths." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "ASOPT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "assembler." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "LDOPT" , & fmt_text_b }
 ,{ "â€”" }
 ,{ "options" }
 ,{ "for" }
 ,{ "the" }
 ,{ "linker." }
 ,{ "Linker" }
 ,{ "options" }
 ,{ "must" }
 ,{ "specify" }
 ,{ "the" }
 ,{ "CCore.a" , & fmt_text_b }
 ,{ "library" }
 ,{ "to" }
 ,{ "be" }
 ,{ "linked." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "To" }
 ,{ "give" }
 ,{ "a" }
 ,{ "path" }
 ,{ "from" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "file" }
 ,{ "tree," }
 ,{ "you" }
 ,{ "should" }
 ,{ "use" }
 ,{ "the" }
 ,{ "variable" }
 ,{ "CCORE_ROOT" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "To" }
 ,{ "compile" }
 ,{ "a" }
 ,{ ".cpp" , & fmt_text_b }
 ,{ "source" }
 ,{ "file" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "To" }
 ,{ "generate" }
 ,{ "a" }
 ,{ "dependency" }
 ,{ "file" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "To" }
 ,{ "compile" }
 ,{ "an" }
 ,{ ".asm" , & fmt_text_b }
 ,{ "source" }
 ,{ "file" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "To" }
 ,{ "generate" }
 ,{ "register" }
 ,{ "helpers" }
 ,{ "from" }
 ,{ "the" }
 ,{ "register" }
 ,{ "description" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "To" }
 ,{ "link" }
 ,{ "an" }
 ,{ "application" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "is" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "To" }
 ,{ "build" }
 ,{ "a" }
 ,{ "library" }
 ,{ "the" }
 ,{ "following" }
 ,{ "commands" }
 ,{ "are" }
 ,{ "used:" }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "Test" }
 ,{ "support" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "CCore/test" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "directory" }
 ,{ "for" }
 ,{ "target-specific" }
 ,{ "tests." }
 ,{ "The" }
 ,{ "file" }
 ,{ "names" }
 ,{ "here" }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "following" }
 ,{ "form:" }
 ,{ "test6XXX.NNN.cpp" , & fmt_text_b }
 ,{ "." }
 ,{ "6XXX" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "decimal" }
 ,{ "test" }
 ,{ "number," }
 ,{ "starts" }
 ,{ "from" }
 ,{ "6001" , & fmt_text_b }
 ,{ "." }
 ,{ "NNN" , & fmt_text_b }
 ,{ "is" }
 ,{ "some" }
 ,{ "name" }
 ,{ "of" }
 ,{ "the" }
 ,{ "test." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "Makefile" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "test" , & fmt_text_b }
 ,{ "directory" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "target" }
 ,{ "test" }
 ,{ "application." }
 ,{ "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "following" }
 ,{ "standard" }
 ,{ "form" }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "You" }
 ,{ "may" }
 ,{ "add" }
 ,{ "the" }
 ,{ "run" , & fmt_text_b }
 ,{ "target" }
 ,{ "to" }
 ,{ "use" }
 ,{ "a" }
 ,{ "boot" }
 ,{ "program" }
 ,{ "to" }
 ,{ "start" }
 ,{ "the" }
 ,{ "application" }
 ,{ "on" }
 ,{ "the" }
 ,{ "board:" }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "main.cpp" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "test" , & fmt_text_b }
 ,{ "directory" }
 ,{ "is" }
 ,{ "the" }
 ,{ "main" }
 ,{ "file" }
 ,{ "of" }
 ,{ "the" }
 ,{ "target" }
 ,{ "test" }
 ,{ "application." }
 ,{ "It" }
 ,{ "looks" }
 ,{ "like" }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "To" }
 ,{ "run" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "test" }
 ,{ "edit" }
 ,{ "the" }
 ,{ "test" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCoreTargets" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCoreTaskEvents {

Text b0 = { {
 { "XCore" }
 ,{ "task" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "XCore" }
 ,{ "generates" }
 ,{ "number" }
 ,{ "of" }
 ,{ "events" }
 ,{ "during" }
 ,{ "task" }
 ,{ "execution" }
 ,{ "from" }
 ,{ "synchronization" }
 ,{ "operations" }
 ,{ "and" }
 ,{ "task" }
 ,{ "switches." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Task" }
 ,{ "switch" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b3 = { {
 { "Task" }
 ,{ "switch" }
 ,{ "events" }
 ,{ "are" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "task" }
 ,{ "switch" }
 ,{ "occurs" }
 ,{ "or" }
 ,{ "interrupt" }
 ,{ "occurs." }
 ,{ "Task" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "TaskNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "task," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "task" }
 ,{ "number." }
 ,{ "Two" }
 ,{ "special" }
 ,{ "value:" }
 ,{ "EnterInt" , & fmt_text_b }
 ,{ "and" }
 ,{ "LeaveInt" , & fmt_text_b }
 ,{ "," }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "designate" }
 ,{ "entry" }
 ,{ "of" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "exit" }
 ,{ "of" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "Task" }
 ,{ "switch" }
 ,{ "generates" }
 ,{ "an" }
 ,{ "event" }
 ,{ "of" }
 ,{ "the" }
 ,{ "TaskSwitchEvent" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "the" }
 ,{ "task," }
 ,{ "which" }
 ,{ "become" }
 ,{ "active." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "for" }
 ,{ "EnterInt" , & fmt_text_b }
 ,{ "," }
 ,{ "Down" , & fmt_text_b }
 ,{ "for" }
 ,{ "LeaveInt" , & fmt_text_b }
 ,{ "and" }
 ,{ "Push" , & fmt_text_b }
 ,{ "for" }
 ,{ "tasks." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Mutex" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b6 = { {
 { "Mutex" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MutexNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "mutex," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "mutex" }
 ,{ "number." }
 ,{ "Mutex" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MutexEvent" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "mutex" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "mutex" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "five" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Lock" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "locks" }
 ,{ "the" }
 ,{ "mutex." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "maker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Unlock" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "unlocks" }
 ,{ "the" }
 ,{ "mutex." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "maker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "IncLock" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "increments" }
 ,{ "the" }
 ,{ "lock" }
 ,{ "count" }
 ,{ "of" }
 ,{ "the" }
 ,{ "mutex," }
 ,{ "which" }
 ,{ "is" }
 ,{ "already" }
 ,{ "locked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "maker" }
 ,{ "is" }
 ,{ "Inc" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "DecLock" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "decrements" }
 ,{ "the" }
 ,{ "lock" }
 ,{ "count" }
 ,{ "of" }
 ,{ "the" }
 ,{ "mutex," }
 ,{ "which" }
 ,{ "is" }
 ,{ "remaining" }
 ,{ "locked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "maker" }
 ,{ "is" }
 ,{ "Dec" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "Block" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "mutex," }
 ,{ "which" }
 ,{ "is" }
 ,{ "already" }
 ,{ "locked" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "maker" }
 ,{ "is" }
 ,{ "UpBlock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Sem" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b16 = { {
 { "Semaphore" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SemNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "semaphore," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "semaphore" }
 ,{ "number." }
 ,{ "Semaphore" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SemEvent" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "SemEvent_task" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "sem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "ToTaskList" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "give_many()" , & fmt_text_b }
 ,{ "operation" }
 ,{ "releases" }
 ,{ "a" }
 ,{ "group" }
 ,{ "of" }
 ,{ "tasks." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpUpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "Give" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "a" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "GiveMany" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "a" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "semaphore" }
 ,{ "many" }
 ,{ "times." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpUp" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "sem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "ToTask" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "semaphore," }
 ,{ "which" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt," }
 ,{ "releases" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "Take" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "Block" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "DownBlock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "Event" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b29 = { {
 { "Event" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "EventNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "event," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "event" }
 ,{ "number." }
 ,{ "Event" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "EventEvent" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "EventEvent_task" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b30 = { {
 { "event" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "is" }
 ,{ "only" }
 ,{ "one" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "Trigger" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "a" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "triggers" }
 ,{ "the" }
 ,{ "event." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b33 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "event" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "ToTask" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "event," }
 ,{ "which" }
 ,{ "is" }
 ,{ "triggered" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt," }
 ,{ "releases" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "Consume" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "consumes" }
 ,{ "the" }
 ,{ "event." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "Block" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "event." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "DownBlock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "MultiSem" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b40 = { {
 { "Multi-semaphore" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MultiSemNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "multi-semaphore," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "multi-semaphore" }
 ,{ "number." }
 ,{ "Multi-semaphore" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MultiSemEvent" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "MultiSemEvent_task" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "msem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multi-semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b42 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "is" }
 ,{ "only" }
 ,{ "one" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "input" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "Give" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "a" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "gives" }
 ,{ "the" }
 ,{ "multi-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b46 = { {
 { "msem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multi-semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "input" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "ToTask" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "multi-semaphore," }
 ,{ "which" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt," }
 ,{ "releases" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "Take" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "multi-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b51 = { {
 { "Block" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "multi-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "DownBlock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b52 = { {
 { "MultiEvent" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b53 = { {
 { "Multi-event" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MultiEventNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "multi-event," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "multi-event" }
 ,{ "number." }
 ,{ "Multi-event" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "MultiEventEvent" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "MultiEventEvent_task" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b54 = { {
 { "mevent" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multi-event" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b55 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "is" }
 ,{ "only" }
 ,{ "one" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b56 = { {
 { "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "input" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b57 = { {
 { "Trigger" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "a" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "triggers" }
 ,{ "the" }
 ,{ "multi-event." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b58 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b59 = { {
 { "mevent" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "multi-event" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b60 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b61 = { {
 { "index" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "input" }
 ,{ "index." }
} , & fmt_text , & align_text } ;

Text b62 = { {
 { "ToTask" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "multi-event," }
 ,{ "which" }
 ,{ "is" }
 ,{ "triggered" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt," }
 ,{ "releases" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b63 = { {
 { "Consume" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "consumes" }
 ,{ "the" }
 ,{ "multi-event." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b64 = { {
 { "Block" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "multi-event." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "DownBlock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b65 = { {
 { "AntiSem" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b66 = { {
 { "Anti-semaphore" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AntiSemNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "anti-semaphore," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "anti-semaphore" }
 ,{ "number." }
 ,{ "Anti-semaphore" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "AntiSemEvent" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "AntiSemEvent_task" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b67 = { {
 { "asem" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "anti-semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b68 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "three" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b69 = { {
 { "Add" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "anti-semaphore" }
 ,{ "is" }
 ,{ "added." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b70 = { {
 { "Sub" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "anti-semaphore" }
 ,{ "is" }
 ,{ "subtracted," }
 ,{ "but" }
 ,{ "still" }
 ,{ "remaining" }
 ,{ "blocking." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b71 = { {
 { "Release" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "anti-semaphore" }
 ,{ "becomes" }
 ,{ "non-blocking." }
 ,{ "All" }
 ,{ "blocked" }
 ,{ "tasks," }
 ,{ "if" }
 ,{ "any," }
 ,{ "are" }
 ,{ "released." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b72 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b73 = { {
 { "asem" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "anti-semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b74 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "two" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b75 = { {
 { "Wait" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "anti-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Wait" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b76 = { {
 { "Pass" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "passes" }
 ,{ "the" }
 ,{ "non-blocking" }
 ,{ "anti-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Pass" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b77 = { {
 { "ResSem" }
 ,{ "events" }
} , & fmt_h2 , & align_h2 } ;

Text b78 = { {
 { "Res-semaphore" }
 ,{ "is" }
 ,{ "assigned" }
 ,{ "an" }
 ,{ "enum" }
 ,{ "value" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ResSemNumber" , & fmt_text_b }
 ,{ "type." }
 ,{ "The" }
 ,{ "name," }
 ,{ "given" }
 ,{ "to" }
 ,{ "the" }
 ,{ "res-semaphore," }
 ,{ "is" }
 ,{ "also" }
 ,{ "assigned" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "res-semaphore" }
 ,{ "number." }
 ,{ "Res-semaphore" }
 ,{ "generates" }
 ,{ "events" }
 ,{ "of" }
 ,{ "the" }
 ,{ "ResSemEvent" , & fmt_text_b }
 ,{ "type" }
 ,{ "and" }
 ,{ "the" }
 ,{ "ResSemEvent_task" , & fmt_text_b }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b79 = { {
 { "rsem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "res-semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b80 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "is" }
 ,{ "only" }
 ,{ "one" }
 ,{ "event" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b81 = { {
 { "Give" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "res-semaphore" }
 ,{ "is" }
 ,{ "given." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Up" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b82 = { {
 { "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "task" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b83 = { {
 { "rsem" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "res-semaphore" }
 ,{ "number." }
} , & fmt_text , & align_text } ;

Text b84 = { {
 { "type" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "event" }
 ,{ "type." }
 ,{ "There" }
 ,{ "are" }
 ,{ "five" }
 ,{ "event" }
 ,{ "types." }
} , & fmt_text , & align_text } ;

Text b85 = { {
 { "ToTask" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "res-semaphore," }
 ,{ "which" }
 ,{ "is" }
 ,{ "given" }
 ,{ "by" }
 ,{ "another" }
 ,{ "task" }
 ,{ "or" }
 ,{ "an" }
 ,{ "interrupt," }
 ,{ "releases" }
 ,{ "the" }
 ,{ "task." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "UpPush" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b86 = { {
 { "Wait" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "res-semaphore" }
 ,{ "during" }
 ,{ "the" }
 ,{ "wait()" , & fmt_text_b }
 ,{ "operation." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Wait" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b87 = { {
 { "Pass" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "passes" }
 ,{ "the" }
 ,{ "non-blocking" }
 ,{ "res-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Pass" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b88 = { {
 { "Block" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "becomes" }
 ,{ "blocked" }
 ,{ "by" }
 ,{ "the" }
 ,{ "res-semaphore." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "DownBlock" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b89 = { {
 { "Take" , & fmt_text_b }
 ,{ "is" }
 ,{ "generated" }
 ,{ "when" }
 ,{ "the" }
 ,{ "task" }
 ,{ "takes" }
 ,{ "the" }
 ,{ "res-semaphore" }
 ,{ "during" }
 ,{ "the" }
 ,{ "take()" , & fmt_text_b }
 ,{ "operation." }
 ,{ "The" }
 ,{ "correspondent" }
 ,{ "marker" }
 ,{ "is" }
 ,{ "Down" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCoreTaskEvents" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b29 , null , inner_text , outer_text , back_text }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_text , outer_text , back_text }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_text , outer_text , back_text }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_text , outer_text , back_text }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
 ,{ & b51 , null , inner_text , outer_text , back_text }
 ,{ & b52 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b53 , null , inner_text , outer_text , back_text }
 ,{ & b54 , null , inner_text , outer_text , back_text }
 ,{ & b55 , null , inner_text , outer_text , back_text }
 ,{ & b56 , null , inner_text , outer_text , back_text }
 ,{ & b57 , null , inner_text , outer_text , back_text }
 ,{ & b58 , null , inner_text , outer_text , back_text }
 ,{ & b59 , null , inner_text , outer_text , back_text }
 ,{ & b60 , null , inner_text , outer_text , back_text }
 ,{ & b61 , null , inner_text , outer_text , back_text }
 ,{ & b62 , null , inner_text , outer_text , back_text }
 ,{ & b63 , null , inner_text , outer_text , back_text }
 ,{ & b64 , null , inner_text , outer_text , back_text }
 ,{ & b65 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b66 , null , inner_text , outer_text , back_text }
 ,{ & b67 , null , inner_text , outer_text , back_text }
 ,{ & b68 , null , inner_text , outer_text , back_text }
 ,{ & b69 , null , inner_text , outer_text , back_text }
 ,{ & b70 , null , inner_text , outer_text , back_text }
 ,{ & b71 , null , inner_text , outer_text , back_text }
 ,{ & b72 , null , inner_text , outer_text , back_text }
 ,{ & b73 , null , inner_text , outer_text , back_text }
 ,{ & b74 , null , inner_text , outer_text , back_text }
 ,{ & b75 , null , inner_text , outer_text , back_text }
 ,{ & b76 , null , inner_text , outer_text , back_text }
 ,{ & b77 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b78 , null , inner_text , outer_text , back_text }
 ,{ & b79 , null , inner_text , outer_text , back_text }
 ,{ & b80 , null , inner_text , outer_text , back_text }
 ,{ & b81 , null , inner_text , outer_text , back_text }
 ,{ & b82 , null , inner_text , outer_text , back_text }
 ,{ & b83 , null , inner_text , outer_text , back_text }
 ,{ & b84 , null , inner_text , outer_text , back_text }
 ,{ & b85 , null , inner_text , outer_text , back_text }
 ,{ & b86 , null , inner_text , outer_text , back_text }
 ,{ & b87 , null , inner_text , outer_text , back_text }
 ,{ & b88 , null , inner_text , outer_text , back_text }
 ,{ & b89 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_atexit {

Text b0 = { {
 { "XCore" }
 ,{ "atexit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/libc/atexit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/libc/atexit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "atexit()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "function." }
 ,{ "It" }
 ,{ "registers" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "to" }
 ,{ "a" }
 ,{ "function" }
 ,{ "to" }
 ,{ "be" }
 ,{ "executed" }
 ,{ "after" }
 ,{ "the" }
 ,{ "function" }
 ,{ "main()" , & fmt_text_b }
 ,{ "." }
 ,{ "In" }
 ,{ "C++" }
 ,{ "it" }
 ,{ "may" }
 ,{ "also" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "register" }
 ,{ "global" }
 ,{ "object" }
 ,{ "destructors." }
 ,{ "gcc" , & fmt_text_b }
 ,{ "uses" }
 ,{ "the" }
 ,{ "extended" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "this" }
 ,{ "function" }
 ,{ "__cxa_atexit" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "and" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Exit_atexit()" , & fmt_text_b }
 ,{ "to" }
 ,{ "call" }
 ,{ "all" }
 ,{ "registered" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "You" }
 ,{ "can" }
 ,{ "reuse" }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "from" }
 ,{ "the" }
 ,{ "Vanilla-X" , & fmt_text_b }
 ,{ "or" }
 ,{ "create" }
 ,{ "your" }
 ,{ "own." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Remember," }
 ,{ "that" }
 ,{ "registration" }
 ,{ "must" }
 ,{ "be" }
 ,{ "done" }
 ,{ "under" }
 ,{ "the" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "protection." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_atexit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_BinaryFile {

Text b0 = { {
 { "(XCore)" }
 ,{ "BinaryFile" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/BinaryFile.h" , & fmt_text_Files_b }
 ,{ "CCore/src/BinaryFile.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "BinaryFile" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "one" , & fmt_text_a }
 ,{ "," }
 ,{ "but" }
 ,{ "built" }
 ,{ "on" }
 ,{ "the" }
 ,{ "AsyncBinaryFile" , & fmt_text_a }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "open" }
 ,{ "a" }
 ,{ "file" }
 ,{ "the" }
 ,{ "DefaultFileDevice" , & fmt_text_a }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_BinaryFile" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_CBase {

Text b0 = { {
 { "XCore" }
 ,{ "CBase" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/libc/CBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/libc/CBase.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "provides" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library" }
 ,{ "functions." }
 ,{ "Such" }
 ,{ "implementation" }
 ,{ "requires" }
 ,{ "some" }
 ,{ "system" }
 ,{ "service." }
 ,{ "This" }
 ,{ "implementation" }
 ,{ "includes" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions," }
 ,{ "timer" }
 ,{ "functions," }
 ,{ "assert" }
 ,{ "functions" }
 ,{ "and" }
 ,{ "stdio" }
 ,{ "functions." }
 ,{ "Target" }
 ,{ "must" }
 ,{ "provide" }
 ,{ "some" }
 ,{ "basic" }
 ,{ "definitions" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CBase.h" , & fmt_text_b }
 ,{ "header" }
 ,{ "file" }
 ,{ "to" }
 ,{ "adapt" }
 ,{ "this" }
 ,{ "implementation." }
 ,{ "These" }
 ,{ "definitions" }
 ,{ "are" }
 ,{ "enclosed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "namespace" }
 ,{ "LibC_Internal" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "PtrValue" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "pointer" }
 ,{ "value." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Size" , & fmt_text_b }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "a" }
 ,{ "size" }
 ,{ "value" }
 ,{ "(internal" }
 ,{ "size_t" , & fmt_text_b }
 ,{ ")." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "following" }
 ,{ "types" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "pass" }
 ,{ "some" }
 ,{ "specific" }
 ,{ "arguments" }
 ,{ "using" }
 ,{ "..." , & fmt_text_b }
 ,{ "function" }
 ,{ "argument" }
 ,{ "specifications." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Format_sj_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "largest" }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "Format_uj_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "largest" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "Format_sz_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"size_t\"" , & fmt_text_b }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Format_uz_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"size_t\"" , & fmt_text_b }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "Format_st_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"ptrdiff_t\"" , & fmt_text_b }
 ,{ "signed" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Format_ut_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "\"ptrdiff_t\"" , & fmt_text_b }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "NumberBufSize" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "octal" }
 ,{ "digits" }
 ,{ "required" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "the" }
 ,{ "unsigned" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "long" , & fmt_text_b }
 ,{ "type" }
 ,{ "plus" }
 ,{ "one." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "PtrValueHexSize" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "number" }
 ,{ "of" }
 ,{ "hex" }
 ,{ "digits" }
 ,{ "required" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "the" }
 ,{ "PtrValue" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "FilePos" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "represent" }
 ,{ "the" }
 ,{ "file" }
 ,{ "position," }
 ,{ "it" }
 ,{ "is" }
 ,{ "an" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "FileBufSize" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "file" }
 ,{ "IO" }
 ,{ "buffer" }
 ,{ "size." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "abort" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "IsSpace()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "space" }
 ,{ "character" }
 ,{ "detection" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "SetPosInt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "positive" }
 ,{ "signed" }
 ,{ "value" }
 ,{ "from" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "magnitude." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "SetNegInt()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "a" }
 ,{ "negative" }
 ,{ "signed" }
 ,{ "value" }
 ,{ "from" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "magnitude." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "The" }
 ,{ "STD" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "is" }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_CBase" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_DevInt {

Text b0 = { {
 { "XCore" }
 ,{ "DevInt" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/dev/DevInt.h" , & fmt_text_Files_b }
 ,{ "CCore/src/dev/DevInt.cpp" , & fmt_text_Files_b }
 ,{ "CCore/src/dev/DevInt.s" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "implements" }
 ,{ "one" }
 ,{ "of" }
 ,{ "the" }
 ,{ "key" }
 ,{ "class:" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "IntLock" , & fmt_text_b }
 ,{ "class" }
 ,{ "disables" }
 ,{ "interrupts" }
 ,{ "in" }
 ,{ "its" }
 ,{ "constructor" }
 ,{ "and" }
 ,{ "enables" }
 ,{ "in" }
 ,{ "the" }
 ,{ "destructor." }
 ,{ "But" }
 ,{ "if" }
 ,{ "interrupts" }
 ,{ "was" }
 ,{ "already" }
 ,{ "disabled" }
 ,{ "it" }
 ,{ "does" }
 ,{ "nothing." }
 ,{ "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "create" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "protected" }
 ,{ "scope." }
 ,{ "All" }
 ,{ "instructions" }
 ,{ "inside" }
 ,{ "such" }
 ,{ "scope" }
 ,{ "are" }
 ,{ "performed" }
 ,{ "without" }
 ,{ "any" }
 ,{ "interventions." }
 ,{ "An" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "scope" }
 ,{ "must" }
 ,{ "be" }
 ,{ "efficient:" }
 ,{ "i.e." }
 ,{ "must" }
 ,{ "be" }
 ,{ "quick" }
 ,{ "and" }
 ,{ "cannot" }
 ,{ "perform" }
 ,{ "any" }
 ,{ "blocking" }
 ,{ "calls." }
 ,{ "The" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "has" }
 ,{ "already" }
 ,{ "interrupts" }
 ,{ "disabled," }
 ,{ "so" }
 ,{ "using" }
 ,{ "this" }
 ,{ "class" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "is" }
 ,{ "safe" }
 ,{ "(but" }
 ,{ "useless)." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "IsIntContext()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "true" , & fmt_text_b }
 ,{ "if" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "and" }
 ,{ "false" , & fmt_text_b }
 ,{ "otherwise." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "IntLock::Internal::Disable()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "interrupts" }
 ,{ "and" }
 ,{ "return" }
 ,{ "true" , & fmt_text_b }
 ,{ "," }
 ,{ "if" }
 ,{ "they" }
 ,{ "has" }
 ,{ "been" }
 ,{ "enabled." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "IntLock::Internal::Enable()" , & fmt_text_b }
 ,{ "enables" }
 ,{ "interrupts." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "All" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "CPU" }
 ,{ "specific" }
 ,{ "and" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "an" }
 ,{ "assembler." }
 ,{ "For" }
 ,{ "example," }
 ,{ "here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "for" }
 ,{ "ARMv7:" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_DevInt" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_DevIntHandle {

Text b0 = { {
 { "XCore" }
 ,{ "DevIntHandle" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/dev/DevIntHandle.h" , & fmt_text_Files_b }
 ,{ "CCore/src/dev/DevIntHandle.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "interrupt" }
 ,{ "control." }
 ,{ "There" }
 ,{ "is" }
 ,{ "no" }
 ,{ "particular" }
 ,{ "way" }
 ,{ "how" }
 ,{ "it" }
 ,{ "should" }
 ,{ "be" }
 ,{ "implemented." }
 ,{ "This" }
 ,{ "part" }
 ,{ "is" }
 ,{ "used" }
 ,{ "strictly" }
 ,{ "inside" }
 ,{ "Target" }
 ,{ "code," }
 ,{ "XCore" , & fmt_text_b }
 ,{ "code" }
 ,{ "don't" }
 ,{ "use" }
 ,{ "it" }
 ,{ "directly." }
 ,{ "So" }
 ,{ "target" }
 ,{ "is" }
 ,{ "free" }
 ,{ "to" }
 ,{ "define" }
 ,{ "it" }
 ,{ "as" }
 ,{ "convenient." }
 ,{ "Yet" }
 ,{ "there" }
 ,{ "is" }
 ,{ "a" }
 ,{ "proposed" }
 ,{ "pattern." }
 ,{ "All" }
 ,{ "interrupts" }
 ,{ "are" }
 ,{ "handled" }
 ,{ "in" }
 ,{ "a" }
 ,{ "special" }
 ,{ "interrupt" }
 ,{ "context." }
 ,{ "In" }
 ,{ "this" }
 ,{ "context" }
 ,{ "interrupts" }
 ,{ "are" }
 ,{ "disabled." }
 ,{ "Each" }
 ,{ "interrupt" }
 ,{ "source" }
 ,{ "may" }
 ,{ "have" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "interrupt" }
 ,{ "handler." }
 ,{ "This" }
 ,{ "handler" }
 ,{ "is" }
 ,{ "called" }
 ,{ "once" }
 ,{ "the" }
 ,{ "source" }
 ,{ "is" }
 ,{ "asserted" }
 ,{ "and" }
 ,{ "interrupts" }
 ,{ "are" }
 ,{ "enabled." }
 ,{ "CPU" }
 ,{ "stops" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "execution," }
 ,{ "saves" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "context" }
 ,{ "and" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context," }
 ,{ "where" }
 ,{ "interrupt" }
 ,{ "sources" }
 ,{ "are" }
 ,{ "examined" }
 ,{ "and" }
 ,{ "appropriate" }
 ,{ "interrupt" }
 ,{ "handlers" }
 ,{ "are" }
 ,{ "called." }
 ,{ "During" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "processing" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "may" }
 ,{ "be" }
 ,{ "changed." }
 ,{ "If" }
 ,{ "so" }
 ,{ "a" }
 ,{ "new" }
 ,{ "task" }
 ,{ "is" }
 ,{ "started" }
 ,{ "after" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "is" }
 ,{ "finished." }
 ,{ "The" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "has" }
 ,{ "the" }
 ,{ "own" }
 ,{ "stack" }
 ,{ "and" }
 ,{ "the" }
 ,{ "own" }
 ,{ "language" }
 ,{ "support" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Here" }
 ,{ "is" }
 ,{ "the" }
 ,{ "proposed" }
 ,{ "interrupt" }
 ,{ "control" }
 ,{ "pattern:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "It" }
 ,{ "has" }
 ,{ "the" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "node" }
 ,{ "function" }
 ,{ "GetPlanInitNode_DevIntHandle()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "enumeration" }
 ,{ "IntSource" , & fmt_text_b }
 ,{ "defines" }
 ,{ "interrupt" }
 ,{ "sources" }
 ,{ "as" }
 ,{ "numbers." }
 ,{ "And" }
 ,{ "the" }
 ,{ "following" }
 ,{ "four" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "used" }
 ,{ "to" }
 ,{ "control" }
 ,{ "interrupt" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "SetupIntHandler()" , & fmt_text_b }
 ,{ "sets" }
 ,{ "up" }
 ,{ "the" }
 ,{ "given" }
 ,{ "function" }
 ,{ "as" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "handler" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "source." }
 ,{ "Interrupts" }
 ,{ "are" }
 ,{ "enabled." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "CleanupIntHandler()" , & fmt_text_b }
 ,{ "clears" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "handler" }
 ,{ "for" }
 ,{ "the" }
 ,{ "given" }
 ,{ "source" }
 ,{ "and" }
 ,{ "disables" }
 ,{ "interrupts." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "EnableInt()" , & fmt_text_b }
 ,{ "enables" }
 ,{ "interrupts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "source." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "DisableInt()" , & fmt_text_b }
 ,{ "disables" }
 ,{ "interrupts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "given" }
 ,{ "source." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "a" }
 ,{ "table" }
 ,{ "of" }
 ,{ "interrupt" }
 ,{ "handlers." }
 ,{ "It" }
 ,{ "is" }
 ,{ "also" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "turning" }
 ,{ "on/off" }
 ,{ "interrupts" }
 ,{ "from" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "source." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "done" }
 ,{ "by" }
 ,{ "the" }
 ,{ "changing" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "controller" }
 ,{ "interrupt" }
 ,{ "enable" }
 ,{ "registers." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "This" }
 ,{ "class" }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "controller" }
 ,{ "initialization/deinitialization." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "a" }
 ,{ "main" }
 ,{ "interrupt" }
 ,{ "entry." }
 ,{ "You" }
 ,{ "must" }
 ,{ "implement" }
 ,{ "it" }
 ,{ "according" }
 ,{ "the" }
 ,{ "provided" }
 ,{ "pattern." }
 ,{ "It" }
 ,{ "must" }
 ,{ "start" }
 ,{ "from" }
 ,{ "the" }
 ,{ "two" }
 ,{ "defined" }
 ,{ "calls" }
 ,{ "and" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "two" }
 ,{ "another" }
 ,{ "calls." }
 ,{ "In" }
 ,{ "the" }
 ,{ "middle" }
 ,{ "this" }
 ,{ "function" }
 ,{ "determines" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "source" }
 ,{ "and" }
 ,{ "dispatches" }
 ,{ "to" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "handler." }
 ,{ "It" }
 ,{ "may" }
 ,{ "process" }
 ,{ "only" }
 ,{ "one" }
 ,{ "source" }
 ,{ "each" }
 ,{ "time" }
 ,{ "or" }
 ,{ "several" }
 ,{ "ones" }
 ,{ "as" }
 ,{ "desired." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_DevIntHandle" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_DevPlanInit {

Text b0 = { {
 { "XCore" }
 ,{ "DevPlanInit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/dev/DevPlanInit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/dev/DevPlanInit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "is" }
 ,{ "a" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "node" }
 ,{ "for" }
 ,{ "the" }
 ,{ "Dev" , & fmt_text_b }
 ,{ "subsystem" }
 ,{ "and" }
 ,{ "some" }
 ,{ "extra" }
 ,{ "initialization" }
 ,{ "functions." }
 ,{ "Dev" , & fmt_text_b }
 ,{ "includes" }
 ,{ "initialization" }
 ,{ "the" }
 ,{ "most" }
 ,{ "important" }
 ,{ "peripheral" }
 ,{ "devices" }
 ,{ "on" }
 ,{ "the" }
 ,{ "board," }
 ,{ "like" }
 ,{ "interrupt" }
 ,{ "controller." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "typical" }
 ,{ "implementation" }
 ,{ "is:" }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Two" }
 ,{ "special" }
 ,{ "functions" }
 ,{ "Init_CPU()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Exit_CPU()" , & fmt_text_b }
 ,{ "are" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "first" }
 ,{ "stage" }
 ,{ "initialization" }
 ,{ "code" }
 ,{ "to" }
 ,{ "switch" }
 ,{ "CPU" }
 ,{ "into" }
 ,{ "desired" }
 ,{ "mode" }
 ,{ "of" }
 ,{ "operation" }
 ,{ "and" }
 ,{ "turn" }
 ,{ "back." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_DevPlanInit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_DevTick {

Text b0 = { {
 { "XCore" }
 ,{ "DevTick" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/dev/DevTick.h" , & fmt_text_Files_b }
 ,{ "CCore/src/DevTick.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "defines" }
 ,{ "a" }
 ,{ "constant" }
 ,{ "--" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "frequency." }
 ,{ "A" }
 ,{ "timer" , & fmt_text_a }
 ,{ "implementation" , & fmt_text_a }
 ,{ "must" }
 ,{ "ensure" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "processing" }
 ,{ "on" }
 ,{ "this" }
 ,{ "frequency." }
 ,{ "It" }
 ,{ "is" }
 ,{ "recommended" }
 ,{ "to" }
 ,{ "have" }
 ,{ "a" }
 ,{ "high" }
 ,{ "(but" }
 ,{ "not" }
 ,{ "too" }
 ,{ "high)" }
 ,{ "value" }
 ,{ "of" }
 ,{ "this" }
 ,{ "frequency" }
 ,{ "like" }
 ,{ "10'000" }
 ,{ "Hz." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_DevTick" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_DevWaitForInterrupt {

Text b0 = { {
 { "XCore" }
 ,{ "DevWaitForInterrupt" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/dev/DevWaitForInterrupt.h" , & fmt_text_Files_b }
 ,{ "CCore/src/dev/DevWaitForInterrupt.cpp" , & fmt_text_Files_b }
 ,{ "CCore/src/dev/DevWaitForInterrupt.s" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "function" }
 ,{ "WaitForInterrupt()" , & fmt_text_b }
 ,{ "." }
 ,{ "XCore" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "empty" }
 ,{ "variant" }
 ,{ "of" }
 ,{ "this" }
 ,{ "function," }
 ,{ "but" }
 ,{ "Target" }
 ,{ "may" }
 ,{ "override" }
 ,{ "this" }
 ,{ "definition." }
 ,{ "This" }
 ,{ "function" }
 ,{ "stops" }
 ,{ "CPU" }
 ,{ "until" }
 ,{ "some" }
 ,{ "interrupt" }
 ,{ "is" }
 ,{ "asserted." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "is" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "assembler." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Here" }
 ,{ "is" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "for" }
 ,{ "ARMv7:" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_DevWaitForInterrupt" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_FileToMem {

Text b0 = { {
 { "(XCore)" }
 ,{ "FileToMem" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/FileToMem.h" , & fmt_text_Files_b }
 ,{ "CCore/src/FileToMem.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "FileToMem" , & fmt_text_b }
 ,{ "and" }
 ,{ "PartFileToMem" , & fmt_text_b }
 ,{ "are" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "ones" , & fmt_text_a }
 ,{ "," }
 ,{ "but" }
 ,{ "built" }
 ,{ "on" }
 ,{ "AsyncFileToMem" , & fmt_text_a }
 ,{ "and" }
 ,{ "PartAsyncFileToMem" , & fmt_text_a }
 ,{ "classes." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "open" }
 ,{ "a" }
 ,{ "file" }
 ,{ "the" }
 ,{ "DefaultFileDevice" , & fmt_text_a }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_FileToMem" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_gcc {

Text b0 = { {
 { "XCore" }
 ,{ "binutils" }
 ,{ "and" }
 ,{ "gcc" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "XCore" , & fmt_text_b }
 ,{ "cross-toolchain" }
 ,{ "is" }
 ,{ "combined" }
 ,{ "from" }
 ,{ "two" }
 ,{ "major" }
 ,{ "parts:" }
 ,{ "binutils" , & fmt_text_b }
 ,{ "and" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "." }
 ,{ "To" }
 ,{ "build" }
 ,{ "them" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "provide" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "directory," }
 ,{ "modify" }
 ,{ "some" }
 ,{ "source" }
 ,{ "code" }
 ,{ "and" }
 ,{ "configure" }
 ,{ "sources." }
 ,{ "The" }
 ,{ "whole" }
 ,{ "process" }
 ,{ "is" }
 ,{ "tricky." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "First," }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "choose" }
 ,{ "the" }
 ,{ "location" }
 ,{ "to" }
 ,{ "install" }
 ,{ "the" }
 ,{ "cross-toolchain." }
 ,{ "The" }
 ,{ "usual" }
 ,{ "choice" }
 ,{ "is" }
 ,{ "/opt/TARGET" , & fmt_text_b }
 ,{ "." }
 ,{ "For" }
 ,{ "example," }
 ,{ "/opt/BeagleBoneBlack" , & fmt_text_b }
 ,{ "." }
 ,{ "You" }
 ,{ "have" }
 ,{ "to" }
 ,{ "copy" }
 ,{ "the" }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "directory" }
 ,{ "there" }
 ,{ "(headers" }
 ,{ "only" }
 ,{ "on" }
 ,{ "this" }
 ,{ "stage)." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "you" }
 ,{ "need" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "for" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code," }
 ,{ "like" }
 ,{ "~/Downloads" , & fmt_text_b }
 ,{ "." }
 ,{ "When" }
 ,{ "you" }
 ,{ "have" }
 ,{ "downloaded" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code" }
 ,{ "of" }
 ,{ "the" }
 ,{ "binutils" , & fmt_text_b }
 ,{ "and" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "," }
 ,{ "unpack" }
 ,{ "it" }
 ,{ "here." }
 ,{ "You" }
 ,{ "got" }
 ,{ "two" }
 ,{ "directories" }
 ,{ "like" }
 ,{ "binutils-2.25.1" , & fmt_text_b }
 ,{ "and" }
 ,{ "gcc-7.1.0-cross" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "create" }
 ,{ "a" }
 ,{ "directory" }
 ,{ "Build" , & fmt_text_b }
 ,{ "and" }
 ,{ "inside" }
 ,{ "two" }
 ,{ "directories" }
 ,{ "with" }
 ,{ "the" }
 ,{ "same" }
 ,{ "names." }
 ,{ "They" }
 ,{ "serve" }
 ,{ "as" }
 ,{ "build" }
 ,{ "locations." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "binutils" }
} , & fmt_h4 , & align_h4 } ;

Text b5 = { {
 { "Building" }
 ,{ "binutils" , & fmt_text_b }
 ,{ "is" }
 ,{ "simple" }
 ,{ "enough." }
 ,{ "Create" }
 ,{ "the" }
 ,{ "file" }
 ,{ "MakeCfg" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "build" }
 ,{ "directory." }
 ,{ "It" }
 ,{ "should" }
 ,{ "look" }
 ,{ "like" }
 ,{ "this" }
 ,{ "one:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "Next" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "modify" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code." }
 ,{ "The" }
 ,{ "reason" }
 ,{ "is" }
 ,{ "we" }
 ,{ "need" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "linker" }
 ,{ "script" }
 ,{ "to" }
 ,{ "be" }
 ,{ "embedded" }
 ,{ "in" }
 ,{ "the" }
 ,{ "linker" }
 ,{ "during" }
 ,{ "the" }
 ,{ "build" }
 ,{ "process." }
 ,{ "When" }
 ,{ "you" }
 ,{ "invoke" }
 ,{ "a" }
 ,{ "linker" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "image" }
 ,{ "it" }
 ,{ "uses" }
 ,{ "some" }
 ,{ "file" }
 ,{ "called" }
 ,{ "the" }
 ,{ "linker" }
 ,{ "script" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "job." }
 ,{ "You" }
 ,{ "may" }
 ,{ "specify" }
 ,{ "such" }
 ,{ "file" }
 ,{ "from" }
 ,{ "the" }
 ,{ "command" }
 ,{ "line," }
 ,{ "but" }
 ,{ "the" }
 ,{ "more" }
 ,{ "convenient" }
 ,{ "way" }
 ,{ "is" }
 ,{ "to" }
 ,{ "embed" }
 ,{ "it" }
 ,{ "into" }
 ,{ "the" }
 ,{ "linker." }
 ,{ "The" }
 ,{ "actual" }
 ,{ "changes" }
 ,{ "depend" }
 ,{ "on" }
 ,{ "your" }
 ,{ "target," }
 ,{ "target" }
 ,{ "memory" }
 ,{ "map" }
 ,{ "and" }
 ,{ "low-level" }
 ,{ "details" }
 ,{ "of" }
 ,{ "the" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "For" }
 ,{ "example," }
 ,{ "for" }
 ,{ "the" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "target" }
 ,{ "we" }
 ,{ "uses" }
 ,{ "the" }
 ,{ "following" }
 ,{ "script" }
 ,{ "features." }
 ,{ "The" }
 ,{ "symbol" }
 ,{ "__std_image_base" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "text" }
 ,{ "start" }
 ,{ "address," }
 ,{ "this" }
 ,{ "symbol" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "in" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code." }
 ,{ "The" }
 ,{ "symbol" }
 ,{ "__std_start" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "entry" }
 ,{ "point." }
 ,{ "The" }
 ,{ "images" }
 ,{ "is" }
 ,{ "started" }
 ,{ "with" }
 ,{ "the" }
 ,{ "section" }
 ,{ ".absstart" , & fmt_text_b }
 ,{ "." }
 ,{ "Then" }
 ,{ "the" }
 ,{ "section" }
 ,{ ".context_data" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "store" }
 ,{ "some" }
 ,{ "task" }
 ,{ "specific" }
 ,{ "variables." }
 ,{ "The" }
 ,{ "content" }
 ,{ "of" }
 ,{ "this" }
 ,{ "section" }
 ,{ "is" }
 ,{ "preserved" }
 ,{ "during" }
 ,{ "the" }
 ,{ "task" }
 ,{ "switch" }
 ,{ "process." }
 ,{ "So" }
 ,{ "the" }
 ,{ "linker" }
 ,{ "script" }
 ,{ "has" }
 ,{ "the" }
 ,{ "part" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "This" }
 ,{ "part" }
 ,{ "combines" }
 ,{ "all" }
 ,{ ".context_data" , & fmt_text_b }
 ,{ "into" }
 ,{ "the" }
 ,{ "one" }
 ,{ "and" }
 ,{ "defines" }
 ,{ "two" }
 ,{ "symbols" }
 ,{ "__std_context_data" , & fmt_text_b }
 ,{ "and" }
 ,{ "__std_context_data_lim" , & fmt_text_b }
 ,{ "to" }
 ,{ "designate" }
 ,{ "the" }
 ,{ "section" }
 ,{ "location" }
 ,{ "in" }
 ,{ "the" }
 ,{ "memory." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "Finally," }
 ,{ "the" }
 ,{ "linker" }
 ,{ "defines" }
 ,{ "two" }
 ,{ "symbols" }
 ,{ "__std_mem" , & fmt_text_b }
 ,{ "and" }
 ,{ "__std_mem_lim" , & fmt_text_b }
 ,{ "for" }
 ,{ "the" }
 ,{ "large" }
 ,{ "unassigned" }
 ,{ "memory" }
 ,{ "after" }
 ,{ "the" }
 ,{ "loaded" }
 ,{ "image" }
 ,{ "in" }
 ,{ "the" }
 ,{ "RAM." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "size" }
 ,{ "of" }
 ,{ "this" }
 ,{ "block" }
 ,{ "is" }
 ,{ "defined" }
 ,{ "by" }
 ,{ "the" }
 ,{ "symbol" }
 ,{ "__std_mem_size" , & fmt_text_b }
 ,{ "from" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "Once" }
 ,{ "you" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code" }
 ,{ "modification" }
 ,{ "issue" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "-f" , & fmt_text_b }
 ,{ "MakeCfg" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "build" }
 ,{ "directory." }
 ,{ "It" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "configuration" }
 ,{ "process." }
 ,{ "After" }
 ,{ "that" }
 ,{ "use" }
 ,{ "the" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "build" }
 ,{ "and" }
 ,{ "make" , & fmt_text_b }
 ,{ "install" , & fmt_text_b }
 ,{ "to" }
 ,{ "install" }
 ,{ "the" }
 ,{ "tools." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "gcc" }
} , & fmt_h4 , & align_h4 } ;

Text b13 = { {
 { "Building" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "is" }
 ,{ "essentially" }
 ,{ "the" }
 ,{ "same." }
 ,{ "The" }
 ,{ "only" }
 ,{ "difference" }
 ,{ "is" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code" }
 ,{ "modification" }
 ,{ "is" }
 ,{ "more" }
 ,{ "tricky." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "The" }
 ,{ "first" }
 ,{ "step" }
 ,{ "is" }
 ,{ "the" }
 ,{ "configuration." }
 ,{ "Create" }
 ,{ "the" }
 ,{ "file" }
 ,{ "MakeCfg" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "build" }
 ,{ "directory." }
 ,{ "It" }
 ,{ "should" }
 ,{ "look" }
 ,{ "like" }
 ,{ "this" }
 ,{ "one:" }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Then" }
 ,{ "patch" }
 ,{ "source" }
 ,{ "files." }
 ,{ "For" }
 ,{ "the" }
 ,{ "target" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "modifications" }
 ,{ "are" }
 ,{ "required." }
 ,{ "We" }
 ,{ "have" }
 ,{ "to" }
 ,{ "correct" }
 ,{ "four" }
 ,{ "source" }
 ,{ "files" }
 ,{ "and" }
 ,{ "configuration" }
 ,{ "script" }
 ,{ "from" }
 ,{ "the" }
 ,{ "C++" }
 ,{ "support" }
 ,{ "library." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "The" }
 ,{ "file" }
 ,{ "basic_file_stdio.cc" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "io" }
 ,{ "class" }
 ,{ "implementation." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "replaced" }
 ,{ "to" }
 ,{ "use" }
 ,{ "standard" }
 ,{ "stdio" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b17 = { {
 { "eh_alloc.cc" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "code" }
 ,{ "for" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "handling." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "standard" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions" }
 ,{ "malloc()" , & fmt_text_b }
 ,{ "and" }
 ,{ "free()" , & fmt_text_b }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "a" }
 ,{ "space" }
 ,{ "for" }
 ,{ "exception" }
 ,{ "objects." }
 ,{ "The" }
 ,{ "code" }
 ,{ "must" }
 ,{ "be" }
 ,{ "changed" }
 ,{ "to" }
 ,{ "use" }
 ,{ "malloc_int()" , & fmt_text_b }
 ,{ "and" }
 ,{ "free_int()" , & fmt_text_b }
 ,{ "instead." }
 ,{ "And" }
 ,{ "the" }
 ,{ "\"emergency" }
 ,{ "buffer\"" }
 ,{ "must" }
 ,{ "be" }
 ,{ "removed." }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "eh_globals.cc" , & fmt_text_b }
 ,{ "contains" }
 ,{ "definitions" }
 ,{ "of" }
 ,{ "the" }
 ,{ "global" }
 ,{ "variables" }
 ,{ "for" }
 ,{ "the" }
 ,{ "exception" }
 ,{ "handling" }
 ,{ "subsystem." }
 ,{ "The" }
 ,{ "problem" }
 ,{ "is" }
 ,{ "these" }
 ,{ "variables" }
 ,{ "must" }
 ,{ "be" }
 ,{ "per-task." }
 ,{ "But" }
 ,{ "we" }
 ,{ "configure" }
 ,{ "compiler" }
 ,{ "for" }
 ,{ "single-thread" }
 ,{ "support" }
 ,{ "only." }
 ,{ "So" }
 ,{ "we" }
 ,{ "have" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "this" }
 ,{ "matter" }
 ,{ "ourself." }
 ,{ "In" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "global" }
 ,{ "variables," }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "section" }
 ,{ ".context_data" , & fmt_text_b }
 ,{ "," }
 ,{ "instead" }
 ,{ "of" }
 ,{ ".data" , & fmt_text_b }
 ,{ "," }
 ,{ "preserved" }
 ,{ "on" }
 ,{ "a" }
 ,{ "task" }
 ,{ "switch." }
 ,{ "So" }
 ,{ "these" }
 ,{ "variables" }
 ,{ "are" }
 ,{ "per-task" }
 ,{ "variables." }
 ,{ "To" }
 ,{ "use" }
 ,{ "it" }
 ,{ "we" }
 ,{ "declare" }
 ,{ "some" }
 ,{ "variables" }
 ,{ "in" }
 ,{ "the" }
 ,{ "eh_globals.cc" , & fmt_text_b }
 ,{ "to" }
 ,{ "be" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "section" }
 ,{ ".context_data" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b19 = { {
 { "pure.cc" , & fmt_text_b }
 ,{ "print" }
 ,{ "the" }
 ,{ "message" }
 ,{ "in" }
 ,{ "case" }
 ,{ "of" }
 ,{ "the" }
 ,{ "pure" }
 ,{ "virtual" }
 ,{ "function" }
 ,{ "call." }
 ,{ "We" }
 ,{ "have" }
 ,{ "to" }
 ,{ "change" }
 ,{ "this" }
 ,{ "file" }
 ,{ "to" }
 ,{ "use" }
 ,{ "stdio" }
 ,{ "print" }
 ,{ "functions." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "In" }
 ,{ "random.cc" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "sections" }
 ,{ "must" }
 ,{ "be" }
 ,{ "switched" }
 ,{ "off:" }
} , & fmt_text , & align_text } ;

Text b21 = { {
 { "In" }
 ,{ "type_traits" , & fmt_text_b }
 ,{ "the" }
 ,{ "following" }
 ,{ "sections" }
 ,{ "must" }
 ,{ "be" }
 ,{ "switched" }
 ,{ "off:" }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "configure" , & fmt_text_b }
 ,{ "script" }
 ,{ "have" }
 ,{ "two" }
 ,{ "problems." }
 ,{ "It" }
 ,{ "emits" }
 ,{ "error" }
 ,{ "for" }
 ,{ "unknown" }
 ,{ "OS." }
 ,{ "So" }
 ,{ "we" }
 ,{ "have" }
 ,{ "to" }
 ,{ "disable" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "The" }
 ,{ "second" }
 ,{ "problem" }
 ,{ "is" }
 ,{ "to" }
 ,{ "disable" }
 ,{ "attempts" }
 ,{ "to" }
 ,{ "link" }
 ,{ "target" }
 ,{ "applications." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "done" }
 ,{ "by" }
 ,{ "adding" }
 ,{ "the" }
 ,{ "following" }
 ,{ "line" }
 ,{ "at" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "place." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "Once" }
 ,{ "you" }
 ,{ "finished" }
 ,{ "with" }
 ,{ "the" }
 ,{ "source" }
 ,{ "code" }
 ,{ "modification" }
 ,{ "issue" }
 ,{ "the" }
 ,{ "following" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "-f" , & fmt_text_b }
 ,{ "MakeCfg" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "build" }
 ,{ "directory." }
 ,{ "It" }
 ,{ "starts" }
 ,{ "the" }
 ,{ "configuration" }
 ,{ "process." }
 ,{ "After" }
 ,{ "that" }
 ,{ "use" }
 ,{ "the" }
 ,{ "command" }
 ,{ "make" , & fmt_text_b }
 ,{ "to" }
 ,{ "perform" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "build" }
 ,{ "and" }
 ,{ "make" , & fmt_text_b }
 ,{ "install" , & fmt_text_b }
 ,{ "to" }
 ,{ "install" }
 ,{ "the" }
 ,{ "tools." }
} , & fmt_text , & align_text } ;

Text b25 = { {
 { "You" }
 ,{ "can" }
 ,{ "reuse" }
 ,{ "the" }
 ,{ "approach" }
 ,{ "from" }
 ,{ "the" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "for" }
 ,{ "your" }
 ,{ "own" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "targets." }
 ,{ "If" }
 ,{ "the" }
 ,{ "target" }
 ,{ "uses" }
 ,{ "ARM-v7" }
 ,{ "or" }
 ,{ "later" }
 ,{ "you" }
 ,{ "can" }
 ,{ "also" }
 ,{ "reuse" }
 ,{ "major" }
 ,{ "parts" }
 ,{ "of" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_gcc" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_text , outer_text , back_text }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_text , outer_text , back_text }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_text , outer_text , back_text }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_text , outer_text , back_text }
 ,{ & b25 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_PlanInit_CCore {

Text b0 = { {
 { "XCore" }
 ,{ "PlanInit_CCore" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/src/PlanInit_CCore.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "definition" }
 ,{ "of" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "node." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "basic" }
 ,{ "list" }
 ,{ "of" }
 ,{ "requirements" }
 ,{ "is" }
 ,{ "shown" }
 ,{ "here:" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_PlanInit_CCore" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_PlatformBase {

Text b0 = { {
 { "XCore" }
 ,{ "PlatformBase" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/base/PlatformBase.h" , & fmt_text_Files_b }
 ,{ "CCore/src/base/PlatformBase.cpp" , & fmt_text_Files_b }
 ,{ "CCore/src/base/PlatformBase.s" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "PlatformBase" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "same" }
 ,{ "as" }
 ,{ "AnyCore" , & fmt_text_a }
 ,{ "," }
 ,{ "except" }
 ,{ "it" }
 ,{ "contains" }
 ,{ "two" }
 ,{ "additional" }
 ,{ "constants:" }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "MinStackLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "task" }
 ,{ "stack" }
 ,{ "length" }
 ,{ "in" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "DefaultStackLen" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "default" }
 ,{ "task" }
 ,{ "stack" }
 ,{ "length" }
 ,{ "in" }
 ,{ "bytes" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_PlatformBase" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_RawFileToRead {

Text b0 = { {
 { "(XCore)" }
 ,{ "RawFileToRead" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/RawFileToRead.h" , & fmt_text_Files_b }
 ,{ "CCore/src/RawFileToRead.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "XCore" , & fmt_text_b }
 ,{ "RawFileToRead" , & fmt_text_b }
 ,{ "is" }
 ,{ "similar" }
 ,{ "to" }
 ,{ "HCore" , & fmt_text_b }
 ,{ "ones" , & fmt_text_a }
 ,{ "," }
 ,{ "but" }
 ,{ "built" }
 ,{ "on" }
 ,{ "AsyncFile" , & fmt_text_a }
 ,{ "class." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "To" }
 ,{ "open" }
 ,{ "a" }
 ,{ "file" }
 ,{ "the" }
 ,{ "DefaultFileDevice" , & fmt_text_a }
 ,{ "is" }
 ,{ "used." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_RawFileToRead" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_STD {

Text b0 = { {
 { "XCore" }
 ,{ "target" }
 ,{ "STD" }
 ,{ "implementation" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Target" }
 ,{ "cross-toolchain" }
} , & fmt_h3 , & align_h3 } ;

Text b2 = { {
 { "A" }
 ,{ "target" }
 ,{ "cross-toolchain" }
 ,{ "is" }
 ,{ "located" }
 ,{ "outside" }
 ,{ "the" }
 ,{ "target" }
 ,{ "directory." }
 ,{ "Under" }
 ,{ "Unix" }
 ,{ "(or" }
 ,{ "Unix-emulation)" }
 ,{ "it" }
 ,{ "is" }
 ,{ "placed" }
 ,{ "in" }
 ,{ "some" }
 ,{ "directory" }
 ,{ "like" }
 ,{ "/opt/BeagleBoneBlack/" , & fmt_text_b }
 ,{ "." }
 ,{ "There" }
 ,{ "are" }
 ,{ "4" }
 ,{ "main" }
 ,{ "tools:" }
 ,{ "C/C++" }
 ,{ "compiler," }
 ,{ "assembler," }
 ,{ "linker" }
 ,{ "and" }
 ,{ "archiver." }
 ,{ "These" }
 ,{ "tools" }
 ,{ "must" }
 ,{ "be" }
 ,{ "built" }
 ,{ "to" }
 ,{ "be" }
 ,{ "aligned" }
 ,{ "with" }
 ,{ "the" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
 ,{ "Linker" }
 ,{ "must" }
 ,{ "produce" }
 ,{ "an" }
 ,{ "output," }
 ,{ "suitable" }
 ,{ "for" }
 ,{ "the" }
 ,{ "target" }
 ,{ "board." }
 ,{ "Usually" }
 ,{ "it" }
 ,{ "means" }
 ,{ "the" }
 ,{ "linker" }
 ,{ "script" }
 ,{ "must" }
 ,{ "be" }
 ,{ "prepared" }
 ,{ "with" }
 ,{ "the" }
 ,{ "target" }
 ,{ "board" }
 ,{ "memory" }
 ,{ "configuration." }
 ,{ "Compiler" }
 ,{ "libraries" }
 ,{ "must" }
 ,{ "be" }
 ,{ "compatible" }
 ,{ "with" }
 ,{ "the" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "." }
 ,{ "I.e." }
 ,{ "they" }
 ,{ "must" }
 ,{ "use" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "synchronization" }
 ,{ "primitives" }
 ,{ "and" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions." }
 ,{ "XCore" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "following" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library" }
 ,{ "files:" }
 ,{ "assert.cpp" , & fmt_text_b }
 ,{ "," }
 ,{ "stdlib.cpp" , & fmt_text_b }
 ,{ "," }
 ,{ "stdio.cpp" , & fmt_text_b }
 ,{ "and" }
 ,{ "time.cpp" , & fmt_text_b }
 ,{ "." }
 ,{ "They" }
 ,{ "implements" }
 ,{ "a" }
 ,{ "part" }
 ,{ "of" }
 ,{ "the" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library" }
 ,{ "and" }
 ,{ "expects" }
 ,{ "the" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "include" }
 ,{ "headers" }
 ,{ "be" }
 ,{ "written" }
 ,{ "in" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "way." }
 ,{ "You" }
 ,{ "may" }
 ,{ "find" }
 ,{ "a" }
 ,{ "correct" }
 ,{ "example" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "Vanilla-X" , & fmt_text_b }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "assert.cpp" }
} , & fmt_h4 , & align_h4 } ;

Text b4 = { {
 { "This" }
 ,{ "file" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "function" }
 ,{ "__std_assert_failed" , & fmt_text_b }
 ,{ "." }
 ,{ "Its" }
 ,{ "prototype" }
 ,{ "in" }
 ,{ "the" }
 ,{ "assert.h" , & fmt_text_b }
 ,{ "is" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "the" }
 ,{ "macro" }
 ,{ "assert" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "time.cpp" }
} , & fmt_h4 , & align_h4 } ;

Text b7 = { {
 { "This" }
 ,{ "file" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "functions" }
 ,{ "clock()" , & fmt_text_b }
 ,{ "and" }
 ,{ "time()" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "time.h" , & fmt_text_b }
 ,{ "as" }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "type" }
 ,{ "clock_t" , & fmt_text_b }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "size" }
 ,{ "as" }
 ,{ "Sys::ClockTimeType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "The" }
 ,{ "type" }
 ,{ "time_t" , & fmt_text_b }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "size" }
 ,{ "as" }
 ,{ "Sys::SecTimeType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "The" }
 ,{ "constant" }
 ,{ "CLOCKS_PER_SEC" , & fmt_text_b }
 ,{ "must" }
 ,{ "have" }
 ,{ "the" }
 ,{ "same" }
 ,{ "value" }
 ,{ "as" }
 ,{ "Sys::ClocksPerSec" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "stdlib.cpp" }
} , & fmt_h4 , & align_h4 } ;

Text b12 = { {
 { "This" }
 ,{ "file" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions" }
 ,{ "with" }
 ,{ "extra" }
 ,{ "functions." }
 ,{ "They" }
 ,{ "are" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "header" }
 ,{ "stdlib.h" , & fmt_text_b }
 ,{ "as" }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "Two" }
 ,{ "extra" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions" }
 ,{ "malloc_int()" , & fmt_text_b }
 ,{ "and" }
 ,{ "free_int()" , & fmt_text_b }
 ,{ "give" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "heap." }
 ,{ "They" }
 ,{ "may" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "any" }
 ,{ "execution" }
 ,{ "context" }
 ,{ "and" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "in" }
 ,{ "C/C++" }
 ,{ "language" }
 ,{ "support" }
 ,{ "libraries" }
 ,{ "to" }
 ,{ "allocate/free" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "various" }
 ,{ "context" }
 ,{ "data" }
 ,{ "(for" }
 ,{ "example," }
 ,{ "for" }
 ,{ "exception" }
 ,{ "objects)." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "stdio.cpp" }
} , & fmt_h4 , & align_h4 } ;

Text b15 = { {
 { "This" }
 ,{ "is" }
 ,{ "a" }
 ,{ "large" }
 ,{ "file" }
 ,{ "with" }
 ,{ "an" }
 ,{ "stdio" }
 ,{ "library" }
 ,{ "implementation." }
 ,{ "You" }
 ,{ "may" }
 ,{ "find" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "header" }
 ,{ "stdio.h" , & fmt_text_b }
 ,{ "in" }
 ,{ "the" }
 ,{ "Vanilla-X" , & fmt_text_b }
 ,{ "sysroot" }
 ,{ "directory." }
} , & fmt_text , & align_text } ;

Text b16 = { {
 { "STD" }
 ,{ "implementation" }
} , & fmt_h3 , & align_h3 } ;

Text b17 = { {
 { "STD" , & fmt_text_i }
 ,{ "implementation" , & fmt_text_i }
 ,{ "is" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "way" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "some" }
 ,{ "very" }
 ,{ "basic" }
 ,{ "target" }
 ,{ "functionality." }
 ,{ "It" }
 ,{ "uses" }
 ,{ "an" }
 ,{ "extension" }
 ,{ "to" }
 ,{ "the" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library." }
 ,{ "The" }
 ,{ "most" }
 ,{ "of" }
 ,{ "these" }
 ,{ "extended" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "file" }
 ,{ "__std_init.h" , & fmt_text_b }
 ,{ "." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "mostly" }
 ,{ "using" }
 ,{ "the" }
 ,{ "assembler." }
 ,{ "They" }
 ,{ "are" }
 ,{ "archived" }
 ,{ "with" }
 ,{ "the" }
 ,{ "standard" }
 ,{ "C" }
 ,{ "library" }
 ,{ "functions" }
 ,{ "in" }
 ,{ "the" }
 ,{ "cross-toolchain." }
 ,{ "This" }
 ,{ "file" }
 ,{ "defines" }
 ,{ "the" }
 ,{ "following" }
 ,{ "entities:" }
} , & fmt_text , & align_text } ;

Text b18 = { {
 { "type" }
 ,{ "__std_len_t" }
} , & fmt_h4 , & align_h4 } ;

Text b19 = { {
 { "__std_len_t" , & fmt_text_b }
 ,{ "defines" }
 ,{ "the" }
 ,{ "\"size" }
 ,{ "type\"," }
 ,{ "i.e." }
 ,{ "it" }
 ,{ "is" }
 ,{ "a" }
 ,{ "substitute" }
 ,{ "for" }
 ,{ "size_t" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b20 = { {
 { "initialization" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b21 = { {
 { "__std_init()" , & fmt_text_b }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "initialization" }
 ,{ "actions." }
} , & fmt_text , & align_text } ;

Text b22 = { {
 { "__std_main()" , & fmt_text_b }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code" }
 ,{ "to" }
 ,{ "run" }
 ,{ "the" }
 ,{ "main" }
 ,{ "functionality." }
} , & fmt_text , & align_text } ;

Text b23 = { {
 { "__std_exit()" , & fmt_text_b }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code" }
 ,{ "to" }
 ,{ "perform" }
 ,{ "cleanup" }
 ,{ "actions." }
 ,{ "These" }
 ,{ "three" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "the" }
 ,{ "CCore" , & fmt_text_b }
 ,{ "target," }
 ,{ "in" }
 ,{ "the" }
 ,{ "__std_init.cpp" , & fmt_text_a }
 ,{ "file." }
} , & fmt_text , & align_text } ;

Text b24 = { {
 { "global" }
 ,{ "object's" }
 ,{ "constructors/destructors" }
} , & fmt_h4 , & align_h4 } ;

Text b25 = { {
 { "These" }
 ,{ "functions" }
 ,{ "supports" }
 ,{ "the" }
 ,{ "global" }
 ,{ "object's" }
 ,{ "constructors" }
 ,{ "call." }
 ,{ "There" }
 ,{ "are" }
 ,{ "different" }
 ,{ "ways" }
 ,{ "how" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "may" }
 ,{ "implement" }
 ,{ "initialization" }
 ,{ "of" }
 ,{ "global" }
 ,{ "objects." }
 ,{ "One" }
 ,{ "of" }
 ,{ "them" }
 ,{ "is" }
 ,{ "the" }
 ,{ "following:" }
 ,{ "compiler" }
 ,{ "and" }
 ,{ "linker" }
 ,{ "produces" }
 ,{ "a" }
 ,{ "section" }
 ,{ "with" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "function" }
 ,{ "pointers." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "in" }
 ,{ "order" }
 ,{ "of" }
 ,{ "appearance." }
 ,{ "Each" }
 ,{ "constructor" }
 ,{ "register" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "destructor" }
 ,{ "to" }
 ,{ "be" }
 ,{ "called" }
 ,{ "using" }
 ,{ "the" }
 ,{ "atexit" , & fmt_text_b }
 ,{ "mechanism." }
 ,{ "So" }
 ,{ "destructors" }
 ,{ "are" }
 ,{ "called" }
 ,{ "during" }
 ,{ "the" }
 ,{ "atexit" , & fmt_text_b }
 ,{ "processing" }
 ,{ "and" }
 ,{ "not" }
 ,{ "required" }
 ,{ "any" }
 ,{ "additional" }
 ,{ "data" }
 ,{ "to" }
 ,{ "be" }
 ,{ "generated." }
} , & fmt_text , & align_text } ;

Text b26 = { {
 { "__std_init_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "function" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b27 = { {
 { "__std_get_init_base()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "base" }
 ,{ "of" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "function" }
 ,{ "section." }
} , & fmt_text , & align_text } ;

Text b28 = { {
 { "__std_get_init_lim()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "limit" }
 ,{ "of" }
 ,{ "the" }
 ,{ "initialization" }
 ,{ "function" }
 ,{ "section." }
} , & fmt_text , & align_text } ;

Text b29 = { {
 { "abort" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b30 = { {
 { "__std_abort()" , & fmt_text_b }
 ,{ "aborts" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "with" }
 ,{ "the" }
 ,{ "diagnostic" }
 ,{ "message." }
 ,{ "Message" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "the" }
 ,{ "zero-terminated" }
 ,{ "string." }
 ,{ "It" }
 ,{ "can" }
 ,{ "be" }
 ,{ "send" }
 ,{ "out" }
 ,{ "to" }
 ,{ "a" }
 ,{ "serial" }
 ,{ "port," }
 ,{ "for" }
 ,{ "example," }
 ,{ "or" }
 ,{ "stored" }
 ,{ "in" }
 ,{ "a" }
 ,{ "flash" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "further" }
 ,{ "extraction." }
 ,{ "Abort" }
 ,{ "means" }
 ,{ "the" }
 ,{ "execution" }
 ,{ "termination" }
 ,{ "and" }
 ,{ "may" }
 ,{ "reset" }
 ,{ "the" }
 ,{ "board" }
 ,{ "or" }
 ,{ "stop" }
 ,{ "it." }
} , & fmt_text , & align_text } ;

Text b31 = { {
 { "__std_abort2()" , & fmt_text_b }
 ,{ "another" }
 ,{ "abort" }
 ,{ "function," }
 ,{ "the" }
 ,{ "message" }
 ,{ "is" }
 ,{ "given" }
 ,{ "as" }
 ,{ "the" }
 ,{ "pointer/length" }
 ,{ "couple." }
} , & fmt_text , & align_text } ;

Text b32 = { {
 { "memory" }
 ,{ "regions" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b33 = { {
 { "__std_get_heap_int_len()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "heap" }
 ,{ "memory" }
 ,{ "region." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "This" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b34 = { {
 { "__std_get_heap_len()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "heap" }
 ,{ "memory" }
 ,{ "region." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "This" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "main" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b35 = { {
 { "__std_get_syslog_len()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "region." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "This" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "system" }
 ,{ "log." }
} , & fmt_text , & align_text } ;

Text b36 = { {
 { "__std_alloc()" , & fmt_text_b }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "memory" }
 ,{ "from" }
 ,{ "the" }
 ,{ "available" }
 ,{ "board" }
 ,{ "memory." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "once" }
 ,{ "per" }
 ,{ "each" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "to" }
 ,{ "obtain" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "this" }
 ,{ "region." }
} , & fmt_text , & align_text } ;

Text b37 = { {
 { "__std_get_shared_mem()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "base" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "shared" }
 ,{ "memory." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "Shared" }
 ,{ "memory" }
 ,{ "can" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "exchange" }
 ,{ "data" }
 ,{ "between" }
 ,{ "CPU" }
 ,{ "and" }
 ,{ "peripheral" }
 ,{ "devices," }
 ,{ "this" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "is" }
 ,{ "not" }
 ,{ "cached." }
 ,{ "This" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "build" }
 ,{ "the" }
 ,{ "shared" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b38 = { {
 { "__std_get_shared_mem_len()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "shared" }
 ,{ "memory." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
} , & fmt_text , & align_text } ;

Text b39 = { {
 { "__std_get_video_mem()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "base" }
 ,{ "address" }
 ,{ "of" }
 ,{ "the" }
 ,{ "video" }
 ,{ "memory." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
 ,{ "If" }
 ,{ "the" }
 ,{ "board" }
 ,{ "has" }
 ,{ "no" }
 ,{ "video" }
 ,{ "capabilities" }
 ,{ "this" }
 ,{ "region" }
 ,{ "can" }
 ,{ "be" }
 ,{ "null." }
 ,{ "Normally" }
 ,{ "this" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "is" }
 ,{ "not" }
 ,{ "cached." }
} , & fmt_text , & align_text } ;

Text b40 = { {
 { "__std_get_video_mem_len()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "length" }
 ,{ "of" }
 ,{ "the" }
 ,{ "video" }
 ,{ "memory." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "aligned." }
} , & fmt_text , & align_text } ;

Text b41 = { {
 { "interrupt" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b42 = { {
 { "__std_handler_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "function" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b43 = { {
 { "__std_intsetup()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "handle" }
 ,{ "subsystem" }
 ,{ "and" }
 ,{ "installs" }
 ,{ "the" }
 ,{ "primary" }
 ,{ "interrupt" }
 ,{ "handler." }
 ,{ "All" }
 ,{ "interrupts" }
 ,{ "goes" }
 ,{ "to" }
 ,{ "this" }
 ,{ "function." }
 ,{ "To" }
 ,{ "determine" }
 ,{ "a" }
 ,{ "particular" }
 ,{ "interrupt" }
 ,{ "source" }
 ,{ "the" }
 ,{ "handler" }
 ,{ "must" }
 ,{ "examine" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "controller" }
 ,{ "register" }
 ,{ "values." }
 ,{ "On" }
 ,{ "systems" }
 ,{ "with" }
 ,{ "the" }
 ,{ "multiple" }
 ,{ "interrupt" }
 ,{ "vectors" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "simulated" }
 ,{ "using" }
 ,{ "the" }
 ,{ "global" }
 ,{ "status" }
 ,{ "variables" }
 ,{ "instead" }
 ,{ "of" }
 ,{ "registers." }
 ,{ "The" }
 ,{ "primary" }
 ,{ "interupt" }
 ,{ "handler" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context," }
 ,{ "interrupts" }
 ,{ "are" }
 ,{ "disabled." }
 ,{ "Interrupts" }
 ,{ "in" }
 ,{ "interrupts" }
 ,{ "are" }
 ,{ "not" }
 ,{ "supported." }
} , & fmt_text , & align_text } ;

Text b44 = { {
 { "__std_intcleanup()" , & fmt_text_b }
 ,{ "cleans" }
 ,{ "up" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "handle" }
 ,{ "subsystem." }
 ,{ "Both" }
 ,{ "functions" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "with" }
 ,{ "interrupts" }
 ,{ "disabled." }
} , & fmt_text , & align_text } ;

Text b45 = { {
 { "context" }
 ,{ "functions" }
} , & fmt_h4 , & align_h4 } ;

Text b46 = { {
 { "__std_context" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "context" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task." }
 ,{ "The" }
 ,{ "task" }
 ,{ "context" }
 ,{ "is" }
 ,{ "region" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "attached" }
 ,{ "to" }
 ,{ "each" }
 ,{ "task." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "preserve" }
 ,{ "some" }
 ,{ "per-task" }
 ,{ "data" }
 ,{ "while" }
 ,{ "task" }
 ,{ "is" }
 ,{ "suspended." }
 ,{ "These" }
 ,{ "data" }
 ,{ "includes," }
 ,{ "in" }
 ,{ "particular," }
 ,{ "CPU" }
 ,{ "register" }
 ,{ "values." }
} , & fmt_text , & align_text } ;

Text b47 = { {
 { "__std_context_len()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "context" }
 ,{ "task" }
 ,{ "length" }
 ,{ "in" }
 ,{ "bytes." }
} , & fmt_text , & align_text } ;

Text b48 = { {
 { "__std_entry_t" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "task" }
 ,{ "entry" }
 ,{ "function" }
 ,{ "type." }
} , & fmt_text , & align_text } ;

Text b49 = { {
 { "__std_context_init()" , & fmt_text_b }
 ,{ "initializes" }
 ,{ "the" }
 ,{ "new" }
 ,{ "task" }
 ,{ "context." }
 ,{ "To" }
 ,{ "prepare" }
 ,{ "a" }
 ,{ "new" }
 ,{ "task" }
 ,{ "context" }
 ,{ "you" }
 ,{ "must" }
 ,{ "allocate" }
 ,{ "first" }
 ,{ "a" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "the" }
 ,{ "task" }
 ,{ "stack" }
 ,{ "and" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context." }
 ,{ "These" }
 ,{ "memory" }
 ,{ "blocked" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned." }
 ,{ "The" }
 ,{ "stack" }
 ,{ "length" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned" }
 ,{ "too." }
 ,{ "Then" }
 ,{ "you" }
 ,{ "prepare" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context," }
 ,{ "providing" }
 ,{ "these" }
 ,{ "blocks" }
 ,{ "and" }
 ,{ "the" }
 ,{ "task" }
 ,{ "entry" }
 ,{ "function" }
 ,{ "pointer" }
 ,{ "with" }
 ,{ "the" }
 ,{ "argument." }
 ,{ "Once" }
 ,{ "you" }
 ,{ "have" }
 ,{ "the" }
 ,{ "context" }
 ,{ "ready," }
 ,{ "simply" }
 ,{ "switch" }
 ,{ "to" }
 ,{ "this" }
 ,{ "new" }
 ,{ "task" }
 ,{ "using" }
 ,{ "the" }
 ,{ "__std_switch()" , & fmt_text_b }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b50 = { {
 { "__std_switch()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "the" }
 ,{ "task" }
 ,{ "switch." }
 ,{ "This" }
 ,{ "function" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "with" }
 ,{ "interrupts" }
 ,{ "disabled" }
 ,{ "and" }
 ,{ "only" }
 ,{ "in" }
 ,{ "a" }
 ,{ "task" }
 ,{ "context." }
 ,{ "To" }
 ,{ "switch" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "you" }
 ,{ "must" }
 ,{ "simply" }
 ,{ "change" }
 ,{ "the" }
 ,{ "variable" }
 ,{ "__std_context" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_STD" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b15 , null , inner_text , outer_text , back_text }
 ,{ & b16 , null , inner_h3 , outer_h3 , back_h3 }
 ,{ & b17 , null , inner_text , outer_text , back_text }
 ,{ & b18 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b19 , null , inner_text , outer_text , back_text }
 ,{ & b20 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b21 , null , inner_text , outer_text , back_text }
 ,{ & b22 , null , inner_text , outer_text , back_text }
 ,{ & b23 , null , inner_text , outer_text , back_text }
 ,{ & b24 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b25 , null , inner_text , outer_text , back_text }
 ,{ & b26 , null , inner_text , outer_text , back_text }
 ,{ & b27 , null , inner_text , outer_text , back_text }
 ,{ & b28 , null , inner_text , outer_text , back_text }
 ,{ & b29 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b30 , null , inner_text , outer_text , back_text }
 ,{ & b31 , null , inner_text , outer_text , back_text }
 ,{ & b32 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b33 , null , inner_text , outer_text , back_text }
 ,{ & b34 , null , inner_text , outer_text , back_text }
 ,{ & b35 , null , inner_text , outer_text , back_text }
 ,{ & b36 , null , inner_text , outer_text , back_text }
 ,{ & b37 , null , inner_text , outer_text , back_text }
 ,{ & b38 , null , inner_text , outer_text , back_text }
 ,{ & b39 , null , inner_text , outer_text , back_text }
 ,{ & b40 , null , inner_text , outer_text , back_text }
 ,{ & b41 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b42 , null , inner_text , outer_text , back_text }
 ,{ & b43 , null , inner_text , outer_text , back_text }
 ,{ & b44 , null , inner_text , outer_text , back_text }
 ,{ & b45 , null , inner_h4 , outer_h4 , back_h4 }
 ,{ & b46 , null , inner_text , outer_text , back_text }
 ,{ & b47 , null , inner_text , outer_text , back_text }
 ,{ & b48 , null , inner_text , outer_text , back_text }
 ,{ & b49 , null , inner_text , outer_text , back_text }
 ,{ & b50 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_stdinit {

Text b0 = { {
 { "XCore" }
 ,{ "__std_init" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/src/libc/__std_init.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "Three" }
 ,{ "functions" }
 ,{ "__std_init()" , & fmt_text_b }
 ,{ "," }
 ,{ "__std_main()" , & fmt_text_b }
 ,{ "and" }
 ,{ "__std_exit()" , & fmt_text_b }
 ,{ "are" }
 ,{ "called" }
 ,{ "by" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code" }
 ,{ "to" }
 ,{ "drive" }
 ,{ "the" }
 ,{ "application." }
 ,{ "They" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "the" }
 ,{ "target" }
 ,{ "file" }
 ,{ "__std_init.cpp" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "__std_init()" , & fmt_text_b }
 ,{ "performs" }
 ,{ "initializations." }
 ,{ "The" }
 ,{ "first" }
 ,{ "step" }
 ,{ "is" }
 ,{ "the" }
 ,{ "basic" }
 ,{ "CPU" }
 ,{ "initialization," }
 ,{ "the" }
 ,{ "function" }
 ,{ "Dev::Init_CPU()" , & fmt_text_b }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "it." }
 ,{ "For" }
 ,{ "example," }
 ,{ "on" }
 ,{ "BeagleBoneBlack" , & fmt_text_b }
 ,{ "this" }
 ,{ "function" }
 ,{ "setups" }
 ,{ "CPU" }
 ,{ "clock" }
 ,{ "and" }
 ,{ "core" }
 ,{ "clocks," }
 ,{ "then" }
 ,{ "initialize" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "address" }
 ,{ "translation" }
 ,{ "table" }
 ,{ "and" }
 ,{ "setup" }
 ,{ "MMU" }
 ,{ "and" }
 ,{ "some" }
 ,{ "other" }
 ,{ "CPU" }
 ,{ "control" }
 ,{ "registers" }
 ,{ "for" }
 ,{ "proper" }
 ,{ "operation." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "The" }
 ,{ "next" }
 ,{ "urgent" }
 ,{ "step" }
 ,{ "is" }
 ,{ "the" }
 ,{ "special" }
 ,{ "heap" }
 ,{ "initialization" }
 ,{ "by" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Init_SpecialMem()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "interrupt" }
 ,{ "heap" }
 ,{ "must" }
 ,{ "be" }
 ,{ "ready" }
 ,{ "ASAP" }
 ,{ "for" }
 ,{ "the" }
 ,{ "proper" }
 ,{ "C++" }
 ,{ "code" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "Finally," }
 ,{ "constructors" }
 ,{ "of" }
 ,{ "global" }
 ,{ "objects" }
 ,{ "are" }
 ,{ "called." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "__std_main()" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "first" }
 ,{ "main-function." }
 ,{ "It" }
 ,{ "enables" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "and" }
 ,{ "calls" }
 ,{ "main()" , & fmt_text_b }
 ,{ "or" }
 ,{ "before_main()" , & fmt_text_b }
 ,{ "functions" }
 ,{ "to" }
 ,{ "run" }
 ,{ "the" }
 ,{ "main" }
 ,{ "code." }
 ,{ "You" }
 ,{ "may" }
 ,{ "introduce" }
 ,{ "in" }
 ,{ "your" }
 ,{ "target" }
 ,{ "the" }
 ,{ "function" }
 ,{ "before_main()" , & fmt_text_b }
 ,{ "to" }
 ,{ "do" }
 ,{ "additional" }
 ,{ "HW" }
 ,{ "and" }
 ,{ "SW" }
 ,{ "initialization." }
 ,{ "Between" }
 ,{ "Task::Internal::Enable()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Task::Internal::Disable()" , & fmt_text_b }
 ,{ "XCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "fully" }
 ,{ "operational" }
 ,{ "and" }
 ,{ "console" }
 ,{ "is" }
 ,{ "switched" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode." }
 ,{ "New" }
 ,{ "tasks" }
 ,{ "can" }
 ,{ "be" }
 ,{ "spawned" }
 ,{ "here." }
 ,{ "Task::Internal::Enable()" , & fmt_text_b }
 ,{ "spawns" }
 ,{ "special" }
 ,{ "tasks" }
 ,{ "and" }
 ,{ "switches" }
 ,{ "the" }
 ,{ "console" }
 ,{ "to" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode." }
 ,{ "Task::Internal::Disable()" , & fmt_text_b }
 ,{ "waits" }
 ,{ "for" }
 ,{ "extra" }
 ,{ "task" }
 ,{ "completion" }
 ,{ "and" }
 ,{ "stops" }
 ,{ "the" }
 ,{ "special" }
 ,{ "tasks," }
 ,{ "console" }
 ,{ "is" }
 ,{ "switched" }
 ,{ "back" }
 ,{ "from" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "to" }
 ,{ "the" }
 ,{ "polling" }
 ,{ "mode." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "__std_exit()" , & fmt_text_b }
 ,{ "calls" }
 ,{ "Exit_atexit()" , & fmt_text_b }
 ,{ "first," }
 ,{ "it" }
 ,{ "calls" }
 ,{ "global" }
 ,{ "object" }
 ,{ "destructors" }
 ,{ "also." }
 ,{ "Then" }
 ,{ "Exit_SpecialMem()" , & fmt_text_b }
 ,{ "and" }
 ,{ "Dev::Exit_CPU()" , & fmt_text_b }
 ,{ "to" }
 ,{ "shutdown" }
 ,{ "the" }
 ,{ "system." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_stdinit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_SysAbort {

Text b0 = { {
 { "XCore" }
 ,{ "SysAbort" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysAbort.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysAbort.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "a" }
 ,{ "target" }
 ,{ "dependent" }
 ,{ "abort" }
 ,{ "functions" }
 ,{ "Abort()" , & fmt_text_b }
 ,{ "." }
 ,{ "Calling" }
 ,{ "one" }
 ,{ "of" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "stop" }
 ,{ "the" }
 ,{ "board" }
 ,{ "(and" }
 ,{ "may" }
 ,{ "hold" }
 ,{ "or" }
 ,{ "reset" }
 ,{ "it)." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "a" }
 ,{ "0-priority" }
 ,{ "function." }
 ,{ "I.e." }
 ,{ "if" }
 ,{ "it" }
 ,{ "is" }
 ,{ "required" }
 ,{ "some" }
 ,{ "initialization," }
 ,{ "it" }
 ,{ "must" }
 ,{ "be" }
 ,{ "done" }
 ,{ "using" }
 ,{ "the" }
 ,{ "CCORE_INITPRI_0" , & fmt_text_b }
 ,{ "priority" , & fmt_text_a }
 ,{ "qualifier" , & fmt_text_a }
 ,{ "." }
 ,{ "But" }
 ,{ "normally" }
 ,{ "these" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "provided" }
 ,{ "by" }
 ,{ "the" }
 ,{ "STD" , & fmt_text_b }
 ,{ "core" }
 ,{ "and" }
 ,{ "not" }
 ,{ "required" }
 ,{ "additional" }
 ,{ "initialization." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "STD" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "is" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_SysAbort" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_SysCon {

Text b0 = { {
 { "XCore" }
 ,{ "SysCon" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/src/sys/SysCon.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "defines" }
 ,{ "default" }
 ,{ "console" }
 ,{ "object." }
 ,{ "This" }
 ,{ "object" }
 ,{ "may" }
 ,{ "be" }
 ,{ "connected" }
 ,{ "to" }
 ,{ "the" }
 ,{ "board" }
 ,{ "serial" }
 ,{ "port" }
 ,{ "or" }
 ,{ "another" }
 ,{ "input/output" }
 ,{ "device" }
 ,{ "to" }
 ,{ "be" }
 ,{ "used" }
 ,{ "for" }
 ,{ "the" }
 ,{ "console" }
 ,{ "communication." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Two" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "this" }
 ,{ "module:" }
 ,{ "GetPlanInitNode_SysCon()" , & fmt_text_b }
 ,{ "and" }
 ,{ "ConBase::GetObject()" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "first" }
 ,{ "is" }
 ,{ "a" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "node" }
 ,{ "function." }
 ,{ "The" }
 ,{ "second" }
 ,{ "gives" }
 ,{ "access" }
 ,{ "to" }
 ,{ "the" }
 ,{ "console" }
 ,{ "object" }
 ,{ "through" }
 ,{ "the" }
 ,{ "abstract" }
 ,{ "base" }
 ,{ "ConBase" , & fmt_text_a }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "Here" }
 ,{ "is" }
 ,{ "a" }
 ,{ "pattern" }
 ,{ "to" }
 ,{ "implement" }
 ,{ "SysCon" , & fmt_text_b }
 ,{ ":" }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "The" }
 ,{ "private" }
 ,{ "class" }
 ,{ "ImpCon" , & fmt_text_b }
 ,{ "is" }
 ,{ "responsible" }
 ,{ "for" }
 ,{ "the" }
 ,{ "actual" }
 ,{ "console" }
 ,{ "implementation." }
 ,{ "The" }
 ,{ "following" }
 ,{ "virtual" }
 ,{ "functions" }
 ,{ "must" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "to" }
 ,{ "do" }
 ,{ "the" }
 ,{ "real" }
 ,{ "job:" }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "attachDefaultInput()" , & fmt_text_b }
 ,{ "attaches" }
 ,{ "the" }
 ,{ "given" }
 ,{ "input" }
 ,{ "processing" }
 ,{ "function" }
 ,{ "to" }
 ,{ "handle" }
 ,{ "console" }
 ,{ "from" }
 ,{ "the" }
 ,{ "user." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "detachDefaultInput()" , & fmt_text_b }
 ,{ "detaches" }
 ,{ "the" }
 ,{ "input" }
 ,{ "processing" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "defaultOutput()" , & fmt_text_b }
 ,{ "must" }
 ,{ "send" }
 ,{ "given" }
 ,{ "data" }
 ,{ "to" }
 ,{ "the" }
 ,{ "output" }
 ,{ "target." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "is" }
 ,{ "enabled," }
 ,{ "the" }
 ,{ "implementation" }
 ,{ "may" }
 ,{ "use" }
 ,{ "full" }
 ,{ "power" }
 ,{ "of" }
 ,{ "the" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "," }
 ,{ "for" }
 ,{ "example," }
 ,{ "it" }
 ,{ "may" }
 ,{ "store" }
 ,{ "incoming" }
 ,{ "packets" }
 ,{ "in" }
 ,{ "some" }
 ,{ "queue" }
 ,{ "and" }
 ,{ "drive" }
 ,{ "output" }
 ,{ "by" }
 ,{ "an" }
 ,{ "interrupt." }
 ,{ "If" }
 ,{ "the" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "is" }
 ,{ "not" }
 ,{ "enabled," }
 ,{ "implementation" }
 ,{ "must" }
 ,{ "not" }
 ,{ "relay" }
 ,{ "on" }
 ,{ "interrupts" }
 ,{ "and" }
 ,{ "task" }
 ,{ "features" }
 ,{ "and" }
 ,{ "perform" }
 ,{ "output" }
 ,{ "directly," }
 ,{ "using" }
 ,{ "polling," }
 ,{ "if" }
 ,{ "required." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "enablePacket()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "when" }
 ,{ "core" }
 ,{ "is" }
 ,{ "fully" }
 ,{ "initialized" }
 ,{ "to" }
 ,{ "enable" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "output" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "disablePacket()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "by" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "right" }
 ,{ "before" }
 ,{ "core" }
 ,{ "is" }
 ,{ "going" }
 ,{ "to" }
 ,{ "be" }
 ,{ "uninitialized" }
 ,{ "to" }
 ,{ "disable" }
 ,{ "packet" }
 ,{ "mode" }
 ,{ "output" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "showStat()" , & fmt_text_b }
 ,{ "may" }
 ,{ "print" }
 ,{ "internal" }
 ,{ "statistic" }
 ,{ "counters" }
 ,{ "(or" }
 ,{ "may" }
 ,{ "do" }
 ,{ "nothing)." }
 ,{ "Provided" }
 ,{ "to" }
 ,{ "debug" }
 ,{ "implementation." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_SysCon" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_SysMemSpace {

Text b0 = { {
 { "XCore" }
 ,{ "SysMemSpace" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysMemSpace.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysMemSpace.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "several" }
 ,{ "memory" }
 ,{ "allocation" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "used" }
 ,{ "by" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "to" }
 ,{ "allocate" }
 ,{ "various" }
 ,{ "purpose" }
 ,{ "memory" }
 ,{ "regions." }
 ,{ "They" }
 ,{ "are" }
 ,{ "all" }
 ,{ "one-time" }
 ,{ "called." }
 ,{ "A" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "must" }
 ,{ "be" }
 ,{ "aligned." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "AllocHeapSpace()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "for" }
 ,{ "the" }
 ,{ "main" }
 ,{ "heap." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "AllocHeapSpace_int()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "for" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "heap." }
 ,{ "This" }
 ,{ "heap" }
 ,{ "is" }
 ,{ "also" }
 ,{ "used" }
 ,{ "for" }
 ,{ "exception" }
 ,{ "objects." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "AllocHeapSpace_shared()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "region" }
 ,{ "for" }
 ,{ "the" }
 ,{ "shared" }
 ,{ "heap." }
 ,{ "This" }
 ,{ "memory" }
 ,{ "is" }
 ,{ "not" }
 ,{ "cached" }
 ,{ "and" }
 ,{ "used" }
 ,{ "to" }
 ,{ "exchange" }
 ,{ "data" }
 ,{ "with" }
 ,{ "peripheral" }
 ,{ "devices." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "AllocLogSpace()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "the" }
 ,{ "system" }
 ,{ "log." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "AllocVideoSpace()" , & fmt_text_b }
 ,{ "return" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "for" }
 ,{ "the" }
 ,{ "video" }
 ,{ "planes." }
 ,{ "If" }
 ,{ "there" }
 ,{ "is" }
 ,{ "no" }
 ,{ "video" }
 ,{ "support" }
 ,{ "on" }
 ,{ "the" }
 ,{ "board" }
 ,{ "it" }
 ,{ "can" }
 ,{ "be" }
 ,{ "empty." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "STD" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "is" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_SysMemSpace" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_SysPlanInit {

Text b0 = { {
 { "XCore" }
 ,{ "SysPlanInit" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysPlanInit.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysPlanInit.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "is" }
 ,{ "the" }
 ,{ "Sys" , & fmt_text_b }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "node." }
 ,{ "It" }
 ,{ "must" }
 ,{ "have" }
 ,{ "prerequisite" }
 ,{ "nodes" }
 ,{ "Dev" , & fmt_text_b }
 ,{ "," }
 ,{ "SysTime" , & fmt_text_b }
 ,{ "and" }
 ,{ "SysCon" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_SysPlanInit" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_sysroot {

Text b0 = { {
 { "XCore" }
 ,{ "sysroot" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "XCore" , & fmt_text_b }
 ,{ "is" }
 ,{ "developed" }
 ,{ "using" }
 ,{ "the" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "family" }
 ,{ "of" }
 ,{ "compilers." }
 ,{ "Cross-compiler" }
 ,{ "have" }
 ,{ "the" }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "directory." }
 ,{ "This" }
 ,{ "directory" }
 ,{ "contains" }
 ,{ "the" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library" }
 ,{ "header" }
 ,{ "files" }
 ,{ "and" }
 ,{ "the" }
 ,{ "C" }
 ,{ "standard" }
 ,{ "library" }
 ,{ "with" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code." }
 ,{ "It" }
 ,{ "is" }
 ,{ "used" }
 ,{ "by" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "to" }
 ,{ "build" }
 ,{ "target" }
 ,{ "applications" }
 ,{ "and" }
 ,{ "it" }
 ,{ "is" }
 ,{ "used" }
 ,{ "during" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "build" }
 ,{ "process." }
 ,{ "So" }
 ,{ "to" }
 ,{ "make" }
 ,{ "a" }
 ,{ "cross-toolchain" }
 ,{ "you" }
 ,{ "have" }
 ,{ "to" }
 ,{ "prepare" }
 ,{ "this" }
 ,{ "directly" }
 ,{ "first" }
 ,{ "(you" }
 ,{ "need" }
 ,{ "header" }
 ,{ "files)," }
 ,{ "then" }
 ,{ "build" }
 ,{ "the" }
 ,{ "cross-toolchain" }
 ,{ "and" }
 ,{ "finally" }
 ,{ "build" }
 ,{ "the" }
 ,{ "libraries" }
 ,{ "and" }
 ,{ "startup" }
 ,{ "code" }
 ,{ "using" }
 ,{ "the" }
 ,{ "built" }
 ,{ "toolchain." }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "is" }
 ,{ "usually" }
 ,{ "located" }
 ,{ "in" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "installation" }
 ,{ "place." }
 ,{ "For" }
 ,{ "example," }
 ,{ "is" }
 ,{ "the" }
 ,{ "compiler" }
 ,{ "is" }
 ,{ "installed" }
 ,{ "in" }
 ,{ "the" }
 ,{ "/opt/BeagleBoneBlack" , & fmt_text_b }
 ,{ "directory," }
 ,{ "the" }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "is" }
 ,{ "placed" }
 ,{ "as" }
 ,{ "/opt/BeagleBoneBlack/sysroot" , & fmt_text_b }
 ,{ "." }
 ,{ "When" }
 ,{ "you" }
 ,{ "build" }
 ,{ "the" }
 ,{ "cross-toolchain" }
 ,{ "you" }
 ,{ "configure" }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "to" }
 ,{ "this" }
 ,{ "location." }
} , & fmt_text , & align_text } ;

Text b2 = { {
 { "Vanilla-X" , & fmt_text_b }
 ,{ "contains" }
 ,{ "the" }
 ,{ "minimum" }
 ,{ "required" }
 ,{ "sysroot" , & fmt_text_b }
 ,{ "(but" }
 ,{ "different" }
 ,{ "versions" }
 ,{ "of" }
 ,{ "gcc" , & fmt_text_b }
 ,{ "may" }
 ,{ "have" }
 ,{ "extra" }
 ,{ "requirements)." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "The" }
 ,{ "most" }
 ,{ "important" }
 ,{ "parts" }
 ,{ "here" }
 ,{ "is" }
 ,{ "string" , & fmt_text_b }
 ,{ "functions" }
 ,{ "and" }
 ,{ "std_init" , & fmt_text_b }
 ,{ "functions." }
 ,{ "string" , & fmt_text_b }
 ,{ "functions" }
 ,{ "like" }
 ,{ "memcpy()" , & fmt_text_b }
 ,{ "or" }
 ,{ "strlen()" , & fmt_text_b }
 ,{ "are" }
 ,{ "implemented" }
 ,{ "using" }
 ,{ "the" }
 ,{ "assembler" }
 ,{ "to" }
 ,{ "be" }
 ,{ "efficient." }
 ,{ "std_init" , & fmt_text_b }
 ,{ "functions" }
 ,{ "is" }
 ,{ "the" }
 ,{ "heart" }
 ,{ "of" }
 ,{ "the" }
 ,{ "system" }
 ,{ "and" }
 ,{ "implemented" }
 ,{ "in" }
 ,{ "the" }
 ,{ "startup" }
 ,{ "code" }
 ,{ "crt0.s" , & fmt_text_b }
 ,{ "using" }
 ,{ "the" }
 ,{ "assembler." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_sysroot" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text , outer_text , back_text }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_SysTime {

Text b0 = { {
 { "XCore" }
 ,{ "SysTime" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/inc/sys/SysTime.h" , & fmt_text_Files_b }
 ,{ "CCore/src/sys/SysTime.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "timer" }
 ,{ "functions" }
 ,{ "and" }
 ,{ "implements" }
 ,{ "the" }
 ,{ "timer" }
 ,{ "interrupt" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "Three" }
 ,{ "timer" }
 ,{ "functions" }
 ,{ "must" }
 ,{ "be" }
 ,{ "implemented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "target." }
 ,{ "These" }
 ,{ "timers" }
 ,{ "are" }
 ,{ "started/stopped" }
 ,{ "by" }
 ,{ "the" }
 ,{ "SysTime" , & fmt_text_b }
 ,{ "global" }
 ,{ "object." }
 ,{ "This" }
 ,{ "is" }
 ,{ "object" }
 ,{ "is" }
 ,{ "controlled" }
 ,{ "by" }
 ,{ "the" }
 ,{ "PlanInit" , & fmt_text_a }
 ,{ "," }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "node" }
 ,{ "function" }
 ,{ "is" }
 ,{ "GetPlanInitNode_SysTime()" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "GetMSecTime()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "millisecond" }
 ,{ "timer." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "MSecTimeType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "GetSecTime()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "second" }
 ,{ "timer." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "SecTimeType" , & fmt_text_b }
 ,{ "." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "GetClockTime()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "continuous" }
 ,{ "clock" }
 ,{ "timer." }
 ,{ "The" }
 ,{ "return" }
 ,{ "value" }
 ,{ "is" }
 ,{ "represented" }
 ,{ "by" }
 ,{ "the" }
 ,{ "unsigned" }
 ,{ "integral" }
 ,{ "type" }
 ,{ "ClockTimeType" , & fmt_text_b }
 ,{ "." }
 ,{ "The" }
 ,{ "constant" }
 ,{ "ClocksPerSec" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "clock" }
 ,{ "timer" }
 ,{ "frequency." }
 ,{ "This" }
 ,{ "timer" }
 ,{ "must" }
 ,{ "be" }
 ,{ "the" }
 ,{ "fastest" }
 ,{ "available" }
 ,{ "timer" }
 ,{ "on" }
 ,{ "the" }
 ,{ "board." }
 ,{ "Its" }
 ,{ "frequency" }
 ,{ "must" }
 ,{ "be" }
 ,{ "a" }
 ,{ "several" }
 ,{ "MHz" }
 ,{ "at" }
 ,{ "least." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "ClockDelay()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "clock" }
 ,{ "delay" }
 ,{ "function." }
 ,{ "It" }
 ,{ "may" }
 ,{ "be" }
 ,{ "used" }
 ,{ "to" }
 ,{ "delay" }
 ,{ "a" }
 ,{ "task" }
 ,{ "execution" }
 ,{ "on" }
 ,{ "a" }
 ,{ "small" }
 ,{ "time" }
 ,{ "period." }
 ,{ "The" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "clocks" }
 ,{ "to" }
 ,{ "delay" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "USecToClock()" , & fmt_text_b }
 ,{ "converts" }
 ,{ "microseconds" }
 ,{ "to" }
 ,{ "clock" }
 ,{ "numbers." }
} , & fmt_text , & align_text } ;

Text b9 = { {
 { "USecDelay()" , & fmt_text_b }
 ,{ "is" }
 ,{ "another" }
 ,{ "delay" }
 ,{ "function," }
 ,{ "the" }
 ,{ "argument" }
 ,{ "is" }
 ,{ "a" }
 ,{ "number" }
 ,{ "of" }
 ,{ "microseconds" }
 ,{ "to" }
 ,{ "delay" }
 ,{ "execution." }
} , & fmt_text , & align_text } ;

Text b10 = { {
 { "A" }
 ,{ "typical" }
 ,{ "implementation" }
 ,{ "looks" }
 ,{ "like:" }
} , & fmt_text , & align_text } ;

Text b11 = { {
 { "StartStop" , & fmt_text_b }
 ,{ "constructor" }
 ,{ "starts" }
 ,{ "board" }
 ,{ "timers" }
 ,{ "and" }
 ,{ "connects" }
 ,{ "the" }
 ,{ "timer" }
 ,{ "interrupt" }
 ,{ "function." }
 ,{ "StartStop" , & fmt_text_b }
 ,{ "stops" }
 ,{ "timers." }
} , & fmt_text , & align_text } ;

Text b12 = { {
 { "StartStop::GetMSecTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "millisecond" }
 ,{ "timer" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b13 = { {
 { "StartStop::GetSecTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "second" }
 ,{ "timer" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b14 = { {
 { "StartStop::GetMSecTime()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "clock" }
 ,{ "timer" }
 ,{ "counter." }
} , & fmt_text , & align_text } ;

Text b15 = { {
 { "Timer_int()" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "timer" }
 ,{ "interrupt" }
 ,{ "handler." }
 ,{ "Among" }
 ,{ "other" }
 ,{ "tasks" }
 ,{ "it" }
 ,{ "must" }
 ,{ "call" }
 ,{ "the" }
 ,{ "internal" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "function" }
 ,{ "Task::Internal::Tick_int()" , & fmt_text_b }
 ,{ "with" }
 ,{ "a" }
 ,{ "proper" }
 ,{ "period" }
 ,{ "to" }
 ,{ "drive" }
 ,{ "the" }
 ,{ "tick" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_SysTime" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
 ,{ & b9 , null , inner_text , outer_text , back_text }
 ,{ & b10 , null , inner_text , outer_text , back_text }
 ,{ & b11 , null , inner_text , outer_text , back_text }
 ,{ & b12 , null , inner_text , outer_text , back_text }
 ,{ & b13 , null , inner_text , outer_text , back_text }
 ,{ & b14 , null , inner_text , outer_text , back_text }
 ,{ & b15 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}

scope page_XCore_TaskContext {

Text b0 = { {
 { "XCore" }
 ,{ "TaskContext" }
} , & fmt_h2 , & align_h2 } ;

Text b1 = { {
 { "Files" }
 ,{ "CCore/src/task/TaskContext.cpp" , & fmt_text_Files_b }
} , & fmt_text_Files , & align_text_Files } ;

Text b2 = { {
 { "This" }
 ,{ "part" }
 ,{ "provides" }
 ,{ "an" }
 ,{ "implementation" }
 ,{ "of" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context" }
 ,{ "functions." }
 ,{ "These" }
 ,{ "functions" }
 ,{ "are" }
 ,{ "declared" }
 ,{ "in" }
 ,{ "the" }
 ,{ "XCore" , & fmt_text_b }
 ,{ "header" }
 ,{ "TaskCore.h" , & fmt_text_b }
 ,{ "." }
 ,{ "Each" }
 ,{ "task" }
 ,{ "has" }
 ,{ "an" }
 ,{ "associated" }
 ,{ "block" }
 ,{ "of" }
 ,{ "memory," }
 ,{ "this" }
 ,{ "block" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "preserve" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context" }
 ,{ "during" }
 ,{ "a" }
 ,{ "task" }
 ,{ "switch." }
 ,{ "Task" }
 ,{ "context" }
 ,{ "includes" }
 ,{ "CPU" }
 ,{ "register" }
 ,{ "values" }
 ,{ "and" }
 ,{ "some" }
 ,{ "global" }
 ,{ "variables" }
 ,{ "values." }
 ,{ "When" }
 ,{ "a" }
 ,{ "task" }
 ,{ "is" }
 ,{ "detached" }
 ,{ "from" }
 ,{ "the" }
 ,{ "CPU," }
 ,{ "these" }
 ,{ "values" }
 ,{ "are" }
 ,{ "preserved" }
 ,{ "in" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context." }
 ,{ "When" }
 ,{ "a" }
 ,{ "task" }
 ,{ "is" }
 ,{ "regain" }
 ,{ "the" }
 ,{ "CPU," }
 ,{ "the" }
 ,{ "task" }
 ,{ "context" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "restore" }
 ,{ "the" }
 ,{ "CPU" }
 ,{ "registers" }
 ,{ "and" }
 ,{ "global" }
 ,{ "variables," }
 ,{ "included" }
 ,{ "in" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context." }
} , & fmt_text , & align_text } ;

Text b3 = { {
 { "ContextInit()" , & fmt_text_b }
 ,{ "fills" }
 ,{ "the" }
 ,{ "memory" }
 ,{ "to" }
 ,{ "be" }
 ,{ "a" }
 ,{ "valid" }
 ,{ "task" }
 ,{ "context." }
 ,{ "This" }
 ,{ "function" }
 ,{ "is" }
 ,{ "used" }
 ,{ "to" }
 ,{ "spawn" }
 ,{ "a" }
 ,{ "new" }
 ,{ "task." }
 ,{ "In" }
 ,{ "order" }
 ,{ "to" }
 ,{ "do" }
 ,{ "so" }
 ,{ "a" }
 ,{ "task" }
 ,{ "context" }
 ,{ "must" }
 ,{ "be" }
 ,{ "allocated," }
 ,{ "a" }
 ,{ "task" }
 ,{ "stack" }
 ,{ "must" }
 ,{ "be" }
 ,{ "allocated," }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "task" }
 ,{ "context" }
 ,{ "must" }
 ,{ "be" }
 ,{ "initialized." }
 ,{ "context" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "task" }
 ,{ "context," }
 ,{ "stack" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "allocated" }
 ,{ "task" }
 ,{ "stack," }
 ,{ "stack_len" , & fmt_text_b }
 ,{ "is" }
 ,{ "the" }
 ,{ "task" }
 ,{ "stack" }
 ,{ "length," }
 ,{ "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "a" }
 ,{ "value" }
 ,{ "to" }
 ,{ "be" }
 ,{ "passed" }
 ,{ "to" }
 ,{ "the" }
 ,{ "task" }
 ,{ "entry" }
 ,{ "function." }
 ,{ "The" }
 ,{ "task" }
 ,{ "execution" }
 ,{ "is" }
 ,{ "started" }
 ,{ "from" }
 ,{ "the" }
 ,{ "function" }
 ,{ "Task::Internal::EntryTask()" , & fmt_text_b }
 ,{ "and" }
 ,{ "task" , & fmt_text_b }
 ,{ "is" }
 ,{ "passed" }
 ,{ "to" }
 ,{ "this" }
 ,{ "function." }
} , & fmt_text , & align_text } ;

Text b4 = { {
 { "GetContext()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "context" }
 ,{ "of" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task." }
 ,{ "This" }
 ,{ "function" }
 ,{ "must" }
 ,{ "be" }
 ,{ "used" }
 ,{ "under" }
 ,{ "the" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "protection" }
 ,{ "to" }
 ,{ "be" }
 ,{ "useful." }
} , & fmt_text , & align_text } ;

Text b5 = { {
 { "GetContextLen()" , & fmt_text_b }
 ,{ "returns" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context" }
 ,{ "length." }
 ,{ "This" }
 ,{ "value" }
 ,{ "is" }
 ,{ "constant" }
 ,{ "on" }
 ,{ "the" }
 ,{ "particular" }
 ,{ "platform." }
} , & fmt_text , & align_text } ;

Text b6 = { {
 { "SwitchContext_int()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "to" }
 ,{ "switch" }
 ,{ "to" }
 ,{ "the" }
 ,{ "task" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "task" }
 ,{ "context." }
 ,{ "If" }
 ,{ "this" }
 ,{ "function" }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "context," }
 ,{ "then" }
 ,{ "after" }
 ,{ "the" }
 ,{ "interrupt" }
 ,{ "processing" }
 ,{ "is" }
 ,{ "finished" }
 ,{ "the" }
 ,{ "correspondent" }
 ,{ "task" }
 ,{ "will" }
 ,{ "regain" }
 ,{ "CPU." }
 ,{ "This" }
 ,{ "function" }
 ,{ "can" }
 ,{ "be" }
 ,{ "called" }
 ,{ "multiple" }
 ,{ "times" }
 ,{ "during" }
 ,{ "the" }
 ,{ "single" }
 ,{ "interrupt" }
 ,{ "context" }
 ,{ "processing." }
} , & fmt_text , & align_text } ;

Text b7 = { {
 { "SwitchContext_task()" , & fmt_text_b }
 ,{ "is" }
 ,{ "called" }
 ,{ "in" }
 ,{ "the" }
 ,{ "task" }
 ,{ "context" }
 ,{ "to" }
 ,{ "switch" }
 ,{ "to" }
 ,{ "the" }
 ,{ "task" }
 ,{ "with" }
 ,{ "the" }
 ,{ "given" }
 ,{ "context." }
 ,{ "It" }
 ,{ "must" }
 ,{ "be" }
 ,{ "called" }
 ,{ "under" }
 ,{ "the" }
 ,{ "IntLock" , & fmt_text_b }
 ,{ "protection." }
 ,{ "The" }
 ,{ "current" }
 ,{ "task" }
 ,{ "is" }
 ,{ "suspended," }
 ,{ "its" }
 ,{ "context" }
 ,{ "is" }
 ,{ "updated." }
 ,{ "When" }
 ,{ "this" }
 ,{ "task" }
 ,{ "is" }
 ,{ "regain" }
 ,{ "CPU," }
 ,{ "it" }
 ,{ "is" }
 ,{ "continued" }
 ,{ "after" }
 ,{ "the" }
 ,{ "call" }
 ,{ "of" }
 ,{ "the" }
 ,{ "SwitchContext_task()" , & fmt_text_b }
 ,{ "." }
 ,{ "From" }
 ,{ "the" }
 ,{ "current" }
 ,{ "task" }
 ,{ "perspective" }
 ,{ "the" }
 ,{ "task" }
 ,{ "switch" }
 ,{ "is" }
 ,{ "looked" }
 ,{ "as" }
 ,{ "the" }
 ,{ "function" }
 ,{ "call." }
} , & fmt_text , & align_text } ;

Text b8 = { {
 { "The" }
 ,{ "STD" , & fmt_text_b }
 ,{ "implementation" }
 ,{ "is" }
} , & fmt_text , & align_text } ;

Page page = { "page_XCore_TaskContext" ,
{
 { & b0 , null , inner_h2 , outer_h2 , back_h2 }
 ,{ & b1 , null , inner_text_Files , outer_text_Files , back_text_Files }
 ,{ & b2 , null , inner_text , outer_text , back_text }
 ,{ & b3 , null , inner_text , outer_text , back_text }
 ,{ & b4 , null , inner_text , outer_text , back_text }
 ,{ & b5 , null , inner_text , outer_text , back_text }
 ,{ & b6 , null , inner_text , outer_text , back_text }
 ,{ & b7 , null , inner_text , outer_text , back_text }
 ,{ & b8 , null , inner_text , outer_text , back_text }
} , NoColor , NoColor , null , null , null };

}


/* TaskEvent.h */
//----------------------------------------------------------------------------------------
//
//  Project: CCore 3.00
//
//  Tag: XCore
//
//  License: Boost Software License - Version 1.0 - August 17th, 2003
//
//            see http://www.boost.org/LICENSE_1_0.txt or the local copy
//
//  Copyright (c) 2016 Sergey Strukov. All rights reserved.
//
//----------------------------------------------------------------------------------------

#ifndef CCore_inc_task_TaskEvent_h
#define CCore_inc_task_TaskEvent_h

#include <CCore/inc/EventRecorder.h>
#include <CCore/inc/sys/SysTime.h>
#include <CCore/inc/dev/DevInt.h>

//#define CCORE_TASK_EVENT_ENABLE

#define CCORE_TASK_EVENT_ENABLE_SYNC
#define CCORE_TASK_EVENT_ENABLE_PROTO
#define CCORE_TASK_EVENT_ENABLE_DEV

namespace CCore {

/* classes */

struct TaskEventAlgo;

class TaskEventHostType;

struct TaskNumber;

struct TaskSwitchEvent;

class TickTask;

/* struct TaskEventAlgo */

struct TaskEventAlgo
 {
  static constexpr ulen RecordAlign = 4 ;

  static constexpr uint64 TimeFreq = Sys::ClocksPerSec ;

  class AllocPos : NoCopy
   {
     ulen off;

    public:

     AllocPos() : off(0) {}

     ~AllocPos() {}

     operator ulen() const { return off; }

     EventRecordPos alloc(ulen len)
      {
       Dev::IntLock lock;

       EventRecordPos ret;

       ret.pos=off;
       ret.time=(EventTimeType)Sys::GetClockTime();

       off+=len;

       return ret;
      }

     void back(ulen len)
      {
       Dev::IntLock lock;

       off-=len;
      }
   };
 };

/* type TaskEventRecorder */

using TaskEventRecorder = EventRecorder<TaskEventAlgo> ;

/* class TaskEventHostType */

#ifdef CCORE_TASK_EVENT_ENABLE

class TaskEventHostType : public EventRecorderHost<TaskEventRecorder>
 {
  public:

#ifdef CCORE_TASK_EVENT_ENABLE_SYNC

   template <class T,class ... SS>
   void addSync(SS && ... ss)
    {
     add<T>( std::forward<SS>(ss)... );
    }

#else

   template <class T,class ... SS>
   void addSync(SS && ...)
    {
     // do nothing
    }

#endif

#ifdef CCORE_TASK_EVENT_ENABLE_PROTO

   template <class T,class ... SS>
   void addProto(SS && ... ss)
    {
     add<T>( std::forward<SS>(ss)... );
    }

#else

   template <class T,class ... SS>
   void addProto(SS && ...)
    {
     // do nothing
    }

#endif

#ifdef CCORE_TASK_EVENT_ENABLE_DEV

   template <class T,class ... SS>
   void addDev(SS && ... ss)
    {
     add<T>( std::forward<SS>(ss)... );
    }

#else

   template <class T,class ... SS>
   void addDev(SS && ...)
    {
     // do nothing
    }

#endif
 };

#else

class TaskEventHostType
 {
  public:

   class StartStop : NoCopy
    {
     public:

      StartStop(TaskEventHostType &,TaskEventRecorder *obj)
       {
        EventTypeIdNode::Register(*obj);

        EventIdNode::Register(*obj,TaskEventRecorder::RecordAlign);
       }
    };

   template <class T,class ... SS>
   void add(SS && ...)
    {
     // do nothing
    }

   template <class T,class ... SS>
   void addSync(SS && ...)
    {
     // do nothing
    }

   template <class T,class ... SS>
   void addProto(SS && ...)
    {
     // do nothing
    }

   template <class T,class ... SS>
   void addDev(SS && ...)
    {
     // do nothing
    }

   void tick()
    {
     // do nothing
    }
 };

#endif

/* global TaskEventHost */

extern TaskEventHostType TaskEventHost;

/* struct TaskNumber */

struct TaskNumber
 {
  using ValueType = uint16 ;

  enum Value : uint16
   {
    EnterInt,
    LeaveInt,

    TaskBase
   };

  static constexpr ValueType Base = TaskBase ;
  static constexpr ValueType Lim = Base+DefaultEventElementCount ;
  static constexpr EventMarker Marker = EventMarker_Push ;

  static EventIdType Register(EventMetaInfo &info);
 };

/* struct TaskSwitchEvent */

struct TaskSwitchEvent
 {
  EventTimeType time;
  EventIdType id;

  uint16 task;

  void init(EventTimeType time_,EventIdType id_,uint16 task_)
   {
    time=time_;
    id=id_;

    task=task_;
   }

  static void * Offset_time(void *ptr) { return &(static_cast<TaskSwitchEvent *>(ptr)->time); }

  static void * Offset_id(void *ptr) { return &(static_cast<TaskSwitchEvent *>(ptr)->id); }

  static void * Offset_task(void *ptr) { return &(static_cast<TaskSwitchEvent *>(ptr)->task); }

  static void Register(EventMetaInfo &info,EventMetaInfo::EventDesc &desc);
 };

/* class TickTask */

class TickTask : NoCopy // empty -- tick is generated by the timer interrupt
 {
  public:

   TickTask() {}

   ~TickTask() {}
 };

} // namespace CCore

#endif


